[
  {
    "title": "Watermark",
    "properties": [
      {
        "title": "Watermark - Watermark",
        "property": [
          {
            "参数": "width",
            "说明": "水印的宽度，`content` 的默认值为自身的宽度",
            "类型": "number",
            "默认值": "120"
          },
          {
            "参数": "height",
            "说明": "水印的高度，`content` 的默认值为自身的高度",
            "类型": "number",
            "默认值": "64"
          },
          {
            "参数": "inherit",
            "说明": "是否将水印传导给弹出组件如 Modal、Drawer",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.11.0"
          },
          {
            "参数": "rotate",
            "说明": "水印绘制时，旋转的角度，单位 `°`",
            "类型": "number",
            "默认值": "-22"
          },
          {
            "参数": "zIndex",
            "说明": "追加的水印元素的 z-index",
            "类型": "number",
            "默认值": "9"
          },
          {
            "参数": "image",
            "说明": "图片源，建议导出 2 倍或 3 倍图，优先级高 (支持 base64 格式)",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "content",
            "说明": "水印文字内容",
            "类型": "string | string[]",
            "默认值": "-"
          },
          {
            "参数": "font",
            "说明": "文字样式"
          },
          {
            "参数": "gap",
            "说明": "水印之间的间距",
            "类型": "\\[number, number]",
            "默认值": "\\[100, 100]"
          },
          {
            "参数": "offset",
            "说明": "水印距离容器左上角的偏移量，默认为 `gap/2`",
            "类型": "\\[number, number]",
            "默认值": "\\[gap[0]/2, gap[1]/2]"
          }
        ]
      },
      {
        "title": "Watermark - Font",
        "property": [
          {
            "参数": "color",
            "说明": "字体颜色",
            "类型": "rgba(0,0,0,.15)"
          },
          {
            "参数": "fontSize",
            "说明": "字体大小",
            "类型": "number",
            "默认值": "16"
          },
          {
            "参数": "fontWeight",
            "说明": "字体粗细",
            "类型": "`normal` | `light` | `weight` | number",
            "默认值": "normal"
          },
          {
            "参数": "fontFamily",
            "说明": "字体类型",
            "类型": "string",
            "默认值": "sans-serif"
          },
          {
            "参数": "fontStyle",
            "说明": "字体样式",
            "类型": "`none` | `normal` | `italic` | `oblique`",
            "默认值": "normal"
          },
          {
            "参数": "textAlign",
            "说明": "指定文本对齐方向",
            "类型": "5.10.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Upload",
    "properties": [
      {
        "title": "Upload - API",
        "property": [
          {
            "参数": "accept",
            "说明": "接受上传的文件类型，详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "action",
            "说明": "上传的地址",
            "类型": "string | (file) => Promise<string>",
            "默认值": "-"
          },
          {
            "参数": "beforeUpload",
            "说明": "上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 `File` 或 `Blob` 对象则上传 resolve 传入对象）；也可以返回 `Upload.LIST_IGNORE`，此时列表中将不展示此文件。 **注意：IE9 不支持该方法**",
            "类型": "(file, fileList) => boolean | Promise<File> | `Upload.LIST_IGNORE`",
            "默认值": "-"
          },
          {
            "参数": "customRequest",
            "说明": "通过覆盖默认的上传行为，可以自定义自己的上传实现",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "data",
            "说明": "上传所需额外参数或返回上传额外参数的方法",
            "类型": "object|(file) => object | Promise<object>",
            "默认值": "-"
          },
          {
            "参数": "defaultFileList",
            "说明": "默认已经上传的文件列表",
            "类型": "object[]",
            "默认值": "-"
          },
          {
            "参数": "directory",
            "说明": "支持上传文件夹（[caniuse](https://caniuse.com/#feat=input-file-directory)）",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false",
            "版本": "对于自定义 Upload children 时请将 disabled 属性同时传给 child node 确保 disabled 渲染效果保持一致"
          },
          {
            "参数": "fileList",
            "说明": "已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423)",
            "类型": "-"
          },
          {
            "参数": "headers",
            "说明": "设置上传的请求头部，IE10 以上有效",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "iconRender",
            "说明": "自定义显示 icon",
            "类型": "(file: UploadFile, listType?: UploadListType) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "isImageUrl",
            "说明": "自定义缩略图是否使用 <img /> 标签进行显示",
            "类型": "(file: UploadFile) => boolean"
          },
          {
            "参数": "itemRender",
            "说明": "自定义上传列表项",
            "类型": "(originNode: ReactElement, file: UploadFile, fileList: object[], actions: { download: function, preview: function, remove: function }) => React.ReactNode",
            "默认值": "-",
            "版本": "4.16.0"
          },
          {
            "参数": "listType",
            "说明": "上传列表的内建样式，支持四种基本样式 `text`, `picture`, `picture-card` 和 `picture-circle`",
            "类型": "string",
            "默认值": "`text`",
            "版本": "`picture-circle`(5.2.0+)"
          },
          {
            "参数": "maxCount",
            "说明": "限制上传数量。当为 1 时，始终用最新上传的文件代替当前文件",
            "类型": "number",
            "默认值": "-",
            "版本": "4.10.0"
          },
          {
            "参数": "method",
            "说明": "上传请求的 http method",
            "类型": "string",
            "默认值": "`post`"
          },
          {
            "参数": "multiple",
            "说明": "是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "name",
            "说明": "发到后台的文件参数名",
            "类型": "string",
            "默认值": "`file`"
          },
          {
            "参数": "openFileDialogOnClick",
            "说明": "点击打开文件对话框",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "previewFile",
            "说明": "自定义文件预览逻辑",
            "类型": "(file: File | Blob) => Promise<dataURL: string>",
            "默认值": "-"
          },
          {
            "参数": "progress",
            "说明": "自定义进度条样式",
            "类型": "{ strokeWidth: 2, showInfo: false }",
            "默认值": "4.3.0"
          },
          {
            "参数": "showUploadList",
            "说明": "是否展示文件列表, 可设为一个对象，用于单独设定 `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` 和 `downloadIcon`",
            "类型": "boolean | { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean, previewIcon?: ReactNode | (file: UploadFile) => ReactNode, removeIcon?: ReactNode | (file: UploadFile) => ReactNode, downloadIcon?: ReactNode | (file: UploadFile) => ReactNode }",
            "默认值": "true",
            "版本": "function: 4.7.0"
          },
          {
            "参数": "withCredentials",
            "说明": "上传请求时是否携带 cookie",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onChange",
            "说明": "上传文件改变时的回调，上传每个阶段都会触发该事件。详见 [onChange](#onchange)",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onDrop",
            "说明": "当文件被拖入上传区域时执行的回调功能",
            "类型": "(event: React.DragEvent) => void",
            "默认值": "-",
            "版本": "4.16.0"
          },
          {
            "参数": "onDownload",
            "说明": "点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页",
            "类型": "function(file): void",
            "默认值": "(跳转新标签页)"
          },
          {
            "参数": "onPreview",
            "说明": "点击文件链接或预览图标时的回调",
            "类型": "function(file)",
            "默认值": "-"
          },
          {
            "参数": "onRemove",
            "说明": "点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除",
            "类型": "function(file): boolean | Promise",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Upload - UploadFile",
        "property": [
          {
            "参数": "crossOrigin",
            "说明": "CORS 属性设置",
            "类型": "`'anonymous'` | `'use-credentials'` | `''`",
            "默认值": "-",
            "版本": "4.20.0"
          },
          {
            "参数": "name",
            "说明": "文件名",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "percent",
            "说明": "上传进度",
            "类型": "number",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "status",
            "说明": "上传状态，不同状态展示颜色也会有所不同",
            "类型": "`error` | `done` | `uploading` | `removed`",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "thumbUrl",
            "说明": "缩略图地址",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "uid",
            "说明": "唯一标识符，不设置时会自动生成",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "url",
            "说明": "下载地址",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Typography",
    "properties": [
      {
        "title": "Typography - Typography.Text",
        "property": [
          {
            "参数": "code",
            "说明": "添加代码样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "copyable",
            "说明": "是否可拷贝，为对象时可进行各种自定义",
            "类型": "boolean | [copyable](#copyable)",
            "默认值": "false"
          },
          {
            "参数": "delete",
            "说明": "添加删除线样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "禁用文本",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "editable",
            "说明": "是否可编辑，为对象时可对编辑进行控制",
            "类型": "boolean | [editable](#editable)",
            "默认值": "false"
          },
          {
            "参数": "ellipsis",
            "说明": "自动溢出省略，为对象时不能设置省略行数、是否可展开、onExpand 展开事件。不同于 Typography.Paragraph，Text 组件自身不带 100% 宽度样式，因而默认情况下初次缩略后宽度便不再变化。如果需要自适应宽度，请手工配置宽度样式",
            "类型": "boolean | [Omit<ellipsis, 'expandable' | 'rows' | 'onExpand'>](#ellipsis)",
            "默认值": "false"
          },
          {
            "参数": "keyboard",
            "说明": "添加键盘样式",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.3.0"
          },
          {
            "参数": "mark",
            "说明": "添加标记样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onClick",
            "说明": "点击 Text 时的回调",
            "类型": "(event) => void",
            "默认值": "-"
          },
          {
            "参数": "strong",
            "说明": "是否加粗",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "italic",
            "说明": "是否斜体",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.16.0"
          },
          {
            "参数": "type",
            "说明": "文本类型",
            "类型": "`secondary` | `success` | `warning` | `danger`",
            "默认值": "-",
            "版本": "success: 4.6.0"
          },
          {
            "参数": "underline",
            "说明": "添加下划线样式",
            "类型": "boolean",
            "默认值": "false"
          }
        ]
      },
      {
        "title": "Typography - Typography.Title",
        "property": [
          {
            "参数": "code",
            "说明": "添加代码样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "copyable",
            "说明": "是否可拷贝，为对象时可进行各种自定义",
            "类型": "boolean | [copyable](#copyable)",
            "默认值": "false"
          },
          {
            "参数": "delete",
            "说明": "添加删除线样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "禁用文本",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "editable",
            "说明": "是否可编辑，为对象时可对编辑进行控制",
            "类型": "boolean | [editable](#editable)",
            "默认值": "false"
          },
          {
            "参数": "ellipsis",
            "说明": "自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等",
            "类型": "boolean | [ellipsis](#ellipsis)",
            "默认值": "false"
          },
          {
            "参数": "level",
            "说明": "重要程度，相当于 `h1`、`h2`、`h3`、`h4`、`h5`",
            "类型": "number: 1, 2, 3, 4, 5",
            "默认值": "1",
            "版本": "5: 4.6.0"
          },
          {
            "参数": "mark",
            "说明": "添加标记样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onClick",
            "说明": "点击 Title 时的回调",
            "类型": "(event) => void",
            "默认值": "-"
          },
          {
            "参数": "italic",
            "说明": "是否斜体",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.16.0"
          },
          {
            "参数": "type",
            "说明": "文本类型",
            "类型": "`secondary` | `success` | `warning` | `danger`",
            "默认值": "-",
            "版本": "success: 4.6.0"
          },
          {
            "参数": "underline",
            "说明": "添加下划线样式",
            "类型": "boolean",
            "默认值": "false"
          }
        ]
      },
      {
        "title": "Typography - Typography.Paragraph",
        "property": [
          {
            "参数": "code",
            "说明": "添加代码样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "copyable",
            "说明": "是否可拷贝，为对象时可进行各种自定义",
            "类型": "boolean | [copyable](#copyable)",
            "默认值": "false"
          },
          {
            "参数": "delete",
            "说明": "添加删除线样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "禁用文本",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "editable",
            "说明": "是否可编辑，为对象时可对编辑进行控制",
            "类型": "boolean | [editable](#editable)",
            "默认值": "false"
          },
          {
            "参数": "ellipsis",
            "说明": "自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等",
            "类型": "boolean | [ellipsis](#ellipsis)",
            "默认值": "false"
          },
          {
            "参数": "mark",
            "说明": "添加标记样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onClick",
            "说明": "点击 Paragraph 时的回调",
            "类型": "(event) => void",
            "默认值": "-"
          },
          {
            "参数": "strong",
            "说明": "是否加粗",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "italic",
            "说明": "是否斜体",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.16.0"
          },
          {
            "参数": "type",
            "说明": "文本类型",
            "类型": "`secondary` | `success` | `warning` | `danger`",
            "默认值": "-",
            "版本": "success: 4.6.0"
          },
          {
            "参数": "underline",
            "说明": "添加下划线样式",
            "类型": "boolean",
            "默认值": "false"
          }
        ]
      },
      {
        "title": "Typography - copyable",
        "property": [
          {
            "参数": "format",
            "说明": "剪切板数据的 Mime Type",
            "类型": "'text/plain' | 'text/html'",
            "默认值": "-",
            "版本": "4.21.0"
          },
          {
            "参数": "icon",
            "说明": "自定义拷贝图标：[默认图标, 拷贝后的图标]",
            "类型": "\\[ReactNode, ReactNode]",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "text",
            "说明": "拷贝到剪切板里的文本",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "tooltips",
            "说明": "自定义提示文案，为 false 时隐藏文案",
            "类型": "\\[ReactNode, ReactNode]",
            "默认值": "\\[`复制`, `复制成功`]",
            "版本": "4.4.0"
          },
          {
            "参数": "onCopy",
            "说明": "拷贝成功的回调函数",
            "类型": "function",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Typography - editable",
        "property": [
          {
            "参数": "autoSize",
            "说明": "自动 resize 文本域",
            "类型": "boolean | { minRows: number, maxRows: number }",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "editing",
            "说明": "控制是否是编辑中状态",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "icon",
            "说明": "自定义编辑图标",
            "类型": "ReactNode",
            "默认值": "\\<EditOutlined />",
            "版本": "4.6.0"
          },
          {
            "参数": "maxLength",
            "说明": "编辑中文本域最大长度",
            "类型": "number",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "tooltip",
            "说明": "自定义提示文本，为 false 时关闭",
            "类型": "boolean | ReactNode",
            "默认值": "`编辑`",
            "版本": "4.6.0"
          },
          {
            "参数": "text",
            "说明": "显式地指定编辑文案，为空时将隐式地使用 children",
            "类型": "string",
            "默认值": "-",
            "版本": "4.24.0"
          },
          {
            "参数": "onChange",
            "说明": "文本域编辑时触发",
            "类型": "function(value: string)",
            "默认值": "-"
          },
          {
            "参数": "onCancel",
            "说明": "按 ESC 退出编辑状态时触发",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onStart",
            "说明": "进入编辑中状态时触发",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onEnd",
            "说明": "按 ENTER 结束编辑状态时触发",
            "类型": "function",
            "默认值": "-",
            "版本": "4.14.0"
          },
          {
            "参数": "triggerType",
            "说明": "编辑模式触发器类型，图标、文本或者两者都设置（不设置图标作为触发器时它会隐藏）",
            "类型": "Array<`icon`|`text`\\>",
            "默认值": "\\[`icon`]"
          },
          {
            "参数": "enterIcon",
            "说明": "在编辑段中自定义“enter”图标（传递“null”将删除图标）",
            "类型": "ReactNode",
            "默认值": "`<EnterOutlined />`",
            "版本": "4.17.0"
          }
        ]
      },
      {
        "title": "Typography - ellipsis",
        "property": [
          {
            "参数": "expandable",
            "说明": "是否可展开",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "rows",
            "说明": "最多显示的行数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "suffix",
            "说明": "自定义省略内容后缀",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "symbol",
            "说明": "自定义展开描述文案",
            "类型": "ReactNode",
            "默认值": "`展开`"
          },
          {
            "参数": "tooltip",
            "说明": "省略时，展示提示信息",
            "类型": "boolean | ReactNode | [TooltipProps](/components/tooltip-cn/#api)",
            "默认值": "-",
            "版本": "4.11.0"
          },
          {
            "参数": "onEllipsis",
            "说明": "触发省略时的回调",
            "类型": "function(ellipsis)",
            "默认值": "-",
            "版本": "4.2.0"
          },
          {
            "参数": "onExpand",
            "说明": "点击展开时的回调",
            "类型": "function(event)",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Tree-select",
    "properties": [
      {
        "title": "Tree-select - Tree props",
        "property": [
          {
            "参数": "allowClear",
            "说明": "自定义清除按钮",
            "类型": "boolean | { clearIcon?: ReactNode }",
            "默认值": "false",
            "版本": "5.8.0: 支持对象形式"
          },
          {
            "参数": "autoClearSearchValue",
            "说明": "当多选模式下值被选择，自动清空搜索框",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "defaultValue",
            "说明": "指定默认选中的条目",
            "类型": "string | string[]",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "popupClassName",
            "说明": "下拉菜单的 className 属性",
            "类型": "string",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "popupMatchSelectWidth",
            "说明": "下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动",
            "类型": "boolean | number",
            "默认值": "true",
            "版本": "5.5.0"
          },
          {
            "参数": "dropdownRender",
            "说明": "自定义下拉框内容",
            "类型": "(originNode: ReactNode, props) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "dropdownStyle",
            "说明": "下拉菜单的样式",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "fieldNames",
            "说明": "自定义节点 label、value、children 的字段",
            "类型": "object",
            "默认值": "{ label: `label`, value: `value`, children: `children` }",
            "版本": "4.17.0"
          },
          {
            "参数": "filterTreeNode",
            "说明": "是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值",
            "类型": "boolean | function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值)",
            "默认值": "function"
          },
          {
            "参数": "getPopupContainer",
            "说明": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
            "类型": "function(triggerNode)",
            "默认值": "() => document.body"
          },
          {
            "参数": "labelInValue",
            "说明": "是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 {value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string[] } 的格式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "listHeight",
            "说明": "设置弹窗滚动高度",
            "类型": "number",
            "默认值": "256"
          },
          {
            "参数": "loadData",
            "说明": "异步加载数据。在过滤时不会调用以防止网络堵塞，可参考 FAQ 获得更多内容",
            "类型": "function(node)",
            "默认值": "-"
          },
          {
            "参数": "maxTagCount",
            "说明": "最多显示多少个 tag，响应式模式会对性能产生损耗",
            "类型": "number | `responsive`",
            "默认值": "-",
            "版本": "responsive: 4.10"
          },
          {
            "参数": "maxTagPlaceholder",
            "说明": "隐藏 tag 时显示的内容",
            "类型": "ReactNode | function(omittedValues)",
            "默认值": "-"
          },
          {
            "参数": "maxTagTextLength",
            "说明": "最大显示的 tag 文本长度",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "multiple",
            "说明": "支持多选（当设置 treeCheckable 时自动变为 true）",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "notFoundContent",
            "说明": "当下拉列表为空时显示的内容",
            "类型": "ReactNode",
            "默认值": "`Not Found`"
          },
          {
            "参数": "placeholder",
            "说明": "选择框默认文字",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "placement",
            "说明": "选择框弹出的位置",
            "类型": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
            "默认值": "bottomLeft"
          },
          {
            "参数": "searchValue",
            "说明": "搜索框的值，可以通过 `onSearch` 获取用户输入",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "showCheckedStrategy",
            "说明": "配置 `treeCheckable` 时，定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点)。`TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时)。 默认只显示子节点",
            "类型": "`TreeSelect.SHOW_ALL` | `TreeSelect.SHOW_PARENT` | `TreeSelect.SHOW_CHILD`",
            "默认值": "`TreeSelect.SHOW_CHILD`"
          },
          {
            "参数": "showSearch",
            "说明": "是否支持搜索框",
            "类型": "boolean",
            "默认值": "单选：false | 多选：true"
          },
          {
            "参数": "size",
            "说明": "选择框大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "-"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "suffixIcon",
            "说明": "自定义的选择框后缀图标",
            "类型": "ReactNode",
            "默认值": "`<DownOutlined />`"
          },
          {
            "参数": "switcherIcon",
            "说明": "自定义树节点的展开/折叠图标",
            "类型": "ReactNode | ((props: AntTreeNodeProps) => ReactNode)",
            "默认值": "-",
            "版本": "renderProps: 4.20.0"
          },
          {
            "参数": "tagRender",
            "说明": "自定义 tag 内容，多选时生效",
            "类型": "(props) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "treeCheckable",
            "说明": "显示 Checkbox",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "treeCheckStrictly",
            "说明": "`checkable` 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "treeData",
            "说明": "treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）",
            "类型": "array<{value, title, children, [disabled, disableCheckbox, selectable, checkable]}>",
            "默认值": "\\[]"
          },
          {
            "参数": "treeDataSimpleMode",
            "说明": "使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: [{id:1, pId:0, value:'1', title:\"test1\",...},...]， `pId` 是父节点的 id)",
            "类型": "boolean | object<{ id: string, pId: string, rootPId: string }>",
            "默认值": "false"
          },
          {
            "参数": "treeDefaultExpandAll",
            "说明": "默认展开所有树节点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "treeDefaultExpandedKeys",
            "说明": "默认展开的树节点",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "treeExpandAction",
            "说明": "点击节点 title 时的展开逻辑，可选：false | `click` | `doubleClick`",
            "类型": "string | boolean",
            "默认值": "false",
            "版本": "4.21.0"
          },
          {
            "参数": "treeExpandedKeys",
            "说明": "设置展开的树节点",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "treeIcon",
            "说明": "是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "treeLine",
            "说明": "是否展示线条样式，请参考 [Tree - showLine](/components/tree-cn#components-tree-demo-line)",
            "类型": "boolean | object",
            "默认值": "false",
            "版本": "4.17.0"
          },
          {
            "参数": "treeLoadedKeys",
            "说明": "（受控）已经加载的节点，需要配合 `loadData` 使用",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "treeNodeFilterProp",
            "说明": "输入项过滤对应的 treeNode 属性",
            "类型": "string",
            "默认值": "`value`"
          },
          {
            "参数": "treeNodeLabelProp",
            "说明": "作为显示的 prop 设置",
            "类型": "string",
            "默认值": "`title`"
          },
          {
            "参数": "value",
            "说明": "指定当前选中的条目",
            "类型": "string | string[]",
            "默认值": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "virtual",
            "说明": "设置 false 时关闭虚拟滚动",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.1.0"
          },
          {
            "参数": "onChange",
            "说明": "选中树节点时调用此函数",
            "类型": "function(value, label, extra)",
            "默认值": "-"
          },
          {
            "参数": "onDropdownVisibleChange",
            "说明": "展开下拉菜单的回调",
            "类型": "function(open)",
            "默认值": "-"
          },
          {
            "参数": "onSearch",
            "说明": "文本框值变化时的回调",
            "类型": "function(value: string)",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "被选中时调用",
            "类型": "function(value, node, extra)",
            "默认值": "-"
          },
          {
            "参数": "onTreeExpand",
            "说明": "展示节点时调用",
            "类型": "function(expandedKeys)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Tree-select - Tree 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      },
      {
        "title": "Tree-select - TreeNode props",
        "property": [
          {
            "参数": "checkable",
            "说明": "当树为 Checkbox 时，设置独立节点是否展示 Checkbox",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "disableCheckbox",
            "说明": "禁掉 Checkbox",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "isLeaf",
            "说明": "是否是叶子节点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "key",
            "说明": "此项必须设置（其值在整个树范围内唯一）",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "selectable",
            "说明": "是否可选",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "title",
            "说明": "树节点显示的内容",
            "类型": "ReactNode",
            "默认值": "`---`"
          },
          {
            "参数": "value",
            "说明": "默认根据此属性值进行筛选（其值在整个树范围内唯一）",
            "类型": "string",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Tree",
    "properties": [
      {
        "title": "Tree - Tree props",
        "property": [
          {
            "参数": "allowDrop",
            "说明": "是否允许拖拽时放置在该节点",
            "类型": "({ dropNode, dropPosition }) => boolean",
            "默认值": "-"
          },
          {
            "参数": "autoExpandParent",
            "说明": "是否自动展开父节点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "blockNode",
            "说明": "是否节点占据一行",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "checkable",
            "说明": "节点前添加 Checkbox 复选框",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "checkedKeys",
            "说明": "（受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置 `checkable` 和 `checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联",
            "类型": "string[] | {checked: string[], halfChecked: string[]}",
            "默认值": "\\[]"
          },
          {
            "参数": "checkStrictly",
            "说明": "checkable 状态下节点选择完全受控（父子节点选中状态不再关联）",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultCheckedKeys",
            "说明": "默认选中复选框的树节点",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "defaultExpandAll",
            "说明": "默认展开所有树节点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultExpandedKeys",
            "说明": "默认展开指定的树节点",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "defaultExpandParent",
            "说明": "默认展开父节点",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "defaultSelectedKeys",
            "说明": "默认选中的树节点",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "disabled",
            "说明": "将树禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "draggable",
            "说明": "设置节点可拖拽，可以通过 `icon: false` 关闭拖拽提示图标",
            "类型": "boolean | ((node: DataNode) => boolean) | { icon?: React.ReactNode | false, nodeDraggable?: (node: DataNode) => boolean }",
            "默认值": "false",
            "版本": "`config`: 4.17.0"
          },
          {
            "参数": "expandedKeys",
            "说明": "（受控）展开指定的树节点",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "fieldNames",
            "说明": "自定义节点 title、key、children 的字段",
            "类型": "object",
            "默认值": "{ title: `title`, key: `key`, children: `children` }",
            "版本": "4.17.0"
          },
          {
            "参数": "filterTreeNode",
            "说明": "按需筛选树节点（高亮），返回 true",
            "类型": "function(node)",
            "默认值": "-"
          },
          {
            "参数": "height",
            "说明": "设置虚拟滚动容器高度，设置后内部节点不再支持横向滚动",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "icon",
            "说明": "自定义树节点图标。",
            "类型": "ReactNode | (props) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "loadData",
            "说明": "异步加载数据",
            "类型": "function(node)",
            "默认值": "-"
          },
          {
            "参数": "loadedKeys",
            "说明": "（受控）已经加载的节点，需要配合 `loadData` 使用",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "multiple",
            "说明": "支持点选多个节点（节点本身）",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "rootStyle",
            "说明": "添加在 Tree 最外层的 style",
            "类型": "CSSProperties",
            "默认值": "-",
            "版本": "4.20.0"
          },
          {
            "参数": "selectable",
            "说明": "是否可选中",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "selectedKeys",
            "说明": "（受控）设置选中的树节点，多选需设置 `multiple` 为 true",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "showIcon",
            "说明": "是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "showLine",
            "说明": "是否展示连接线",
            "类型": "boolean | {showLeafIcon: boolean | ReactNode | ((props: AntTreeNodeProps) => ReactNode)}",
            "默认值": "false"
          },
          {
            "参数": "switcherIcon",
            "说明": "自定义树节点的展开/折叠图标",
            "类型": "ReactNode | ((props: AntTreeNodeProps) => ReactNode)",
            "默认值": "-",
            "版本": "renderProps: 4.20.0"
          },
          {
            "参数": "titleRender",
            "说明": "自定义渲染节点",
            "类型": "(nodeData) => ReactNode",
            "默认值": "-",
            "版本": "4.5.0"
          },
          {
            "参数": "treeData",
            "说明": "treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一）",
            "类型": "array<{key, title, children, [disabled, selectable]}>",
            "默认值": "-"
          },
          {
            "参数": "virtual",
            "说明": "设置 false 时关闭虚拟滚动",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.1.0"
          },
          {
            "参数": "onCheck",
            "说明": "点击复选框触发",
            "类型": "function(checkedKeys, e:{checked: boolean, checkedNodes, node, event, halfCheckedKeys})",
            "默认值": "-"
          },
          {
            "参数": "onDragEnd",
            "说明": "dragend 触发时调用",
            "类型": "function({event, node})",
            "默认值": "-"
          },
          {
            "参数": "onDragEnter",
            "说明": "dragenter 触发时调用",
            "类型": "function({event, node, expandedKeys})",
            "默认值": "-"
          },
          {
            "参数": "onDragLeave",
            "说明": "dragleave 触发时调用",
            "类型": "function({event, node})",
            "默认值": "-"
          },
          {
            "参数": "onDragOver",
            "说明": "dragover 触发时调用",
            "类型": "function({event, node})",
            "默认值": "-"
          },
          {
            "参数": "onDragStart",
            "说明": "开始拖拽时调用",
            "类型": "function({event, node})",
            "默认值": "-"
          },
          {
            "参数": "onDrop",
            "说明": "drop 触发时调用",
            "类型": "function({event, node, dragNode, dragNodesKeys})",
            "默认值": "-"
          },
          {
            "参数": "onExpand",
            "说明": "展开/收起节点时触发",
            "类型": "function(expandedKeys, {expanded: boolean, node})",
            "默认值": "-"
          },
          {
            "参数": "onLoad",
            "说明": "节点加载完毕时触发",
            "类型": "function(loadedKeys, {event, node})",
            "默认值": "-"
          },
          {
            "参数": "onRightClick",
            "说明": "响应右键点击",
            "类型": "function({event, node})",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "点击树节点触发",
            "类型": "function(selectedKeys, e:{selected: boolean, selectedNodes, node, event})",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Tree - TreeNode props",
        "property": [
          {
            "参数": "checkable",
            "说明": "当树为 checkable 时，设置独立节点是否展示 Checkbox",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "disableCheckbox",
            "说明": "禁掉 checkbox",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "禁掉响应",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "icon",
            "说明": "自定义图标。可接收组件，props 为当前节点 props",
            "类型": "ReactNode | (props) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "isLeaf",
            "说明": "设置为叶子节点 (设置了 `loadData` 时有效)。为 `false` 时会强制将其作为父节点",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "key",
            "说明": "被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！",
            "类型": "string",
            "默认值": "(内部计算出的节点位置)"
          },
          {
            "参数": "selectable",
            "说明": "设置节点是否可被选中",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "title",
            "说明": "标题",
            "类型": "ReactNode",
            "默认值": "`---`"
          }
        ]
      },
      {
        "title": "Tree - DirectoryTree props",
        "property": [
          {
            "参数": "expandAction",
            "说明": "目录展开逻辑，可选：false | `click` | `doubleClick`",
            "类型": "string | boolean",
            "默认值": "`click`"
          }
        ]
      },
      {
        "title": "Tree - Tree 方法",
        "property": [
          {
            "名称": "scrollTo({ key: string | number; align?: 'top' | 'bottom' | 'auto'; offset?: number })",
            "说明": "虚拟滚动下，滚动到指定 key 条目"
          }
        ]
      }
    ]
  },
  {
    "title": "Transfer",
    "properties": [
      {
        "title": "Transfer - Transfer",
        "property": [
          {
            "参数": "dataSource",
            "说明": "数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外",
            "类型": "\\[]"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "selectionsIcon",
            "说明": "自定义下拉菜单图标",
            "类型": "React.ReactNode",
            "默认值": "5.8.0"
          },
          {
            "参数": "filterOption",
            "说明": "根据搜索内容进行筛选，接收 `inputValue` `option` `direction` 三个参数，(`direction` 自5.9.0+支持)，当 `option` 符合筛选条件时，应返回 true，反之则返回 false",
            "类型": "(inputValue, option, direction: `left` | `right`): boolean",
            "默认值": "-"
          },
          {
            "参数": "footer",
            "说明": "底部渲染函数",
            "类型": "(props, { direction }) => ReactNode",
            "默认值": "-",
            "版本": "direction: 4.17.0"
          },
          {
            "参数": "listStyle",
            "说明": "两个穿梭框的自定义样式",
            "类型": "object|({direction: `left` | `right`}) => object",
            "默认值": "-"
          },
          {
            "参数": "locale",
            "说明": "各种语言",
            "类型": "{ itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode | ReactNode[]; }",
            "默认值": "{ itemUnit: `项`, itemsUnit: `项`, searchPlaceholder: `请输入搜索内容` }"
          },
          {
            "参数": "oneWay",
            "说明": "展示为单向样式",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.3.0"
          },
          {
            "参数": "operations",
            "说明": "操作文案集合，顺序从上至下",
            "类型": "string[]",
            "默认值": "\\[`>`, `<`]"
          },
          {
            "参数": "operationStyle",
            "说明": "操作栏的自定义样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "pagination",
            "说明": "使用分页样式，自定义渲染列表下无效",
            "类型": "boolean | { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean }",
            "默认值": "false",
            "版本": "4.3.0"
          },
          {
            "参数": "render",
            "说明": "每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 `label` 字段为 ReactElement，`value` 字段为 title",
            "类型": "(record) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "selectAllLabels",
            "说明": "自定义顶部多选框标题的集合",
            "类型": "(ReactNode | (info: { selectedCount: number, totalCount: number }) => ReactNode)[]",
            "默认值": "-"
          },
          {
            "参数": "selectedKeys",
            "说明": "设置哪些项应该被选中",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "showSearch",
            "说明": "是否显示搜索框",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "showSelectAll",
            "说明": "是否展示全选勾选框",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "targetKeys",
            "说明": "显示在右侧框数据的 key 集合",
            "类型": "string[]",
            "默认值": "\\[]"
          },
          {
            "参数": "titles",
            "说明": "标题集合，顺序从左至右",
            "类型": "ReactNode[]",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "选项在两栏之间转移时的回调函数",
            "类型": "(targetKeys, direction, moveKeys): void",
            "默认值": "-"
          },
          {
            "参数": "onScroll",
            "说明": "选项列表滚动时的回调函数",
            "类型": "(direction, event): void",
            "默认值": "-"
          },
          {
            "参数": "onSearch",
            "说明": "搜索框内容时改变时的回调函数",
            "类型": "(direction: `left` | `right`, value: string): void",
            "默认值": "-"
          },
          {
            "参数": "onSelectChange",
            "说明": "选中项发生改变时的回调函数",
            "类型": "(sourceSelectedKeys, targetSelectedKeys): void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Transfer - Render Props",
        "property": [
          {
            "参数": "direction",
            "说明": "渲染列表的方向",
            "类型": "`left` | `right`"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用列表",
            "类型": "boolean"
          },
          {
            "参数": "filteredItems",
            "说明": "过滤后的数据",
            "类型": "RecordType[]"
          },
          {
            "参数": "selectedKeys",
            "说明": "选中的条目",
            "类型": "string[]"
          },
          {
            "参数": "onItemSelect",
            "说明": "勾选条目",
            "类型": "(key: string, selected: boolean)"
          },
          {
            "参数": "onItemSelectAll",
            "说明": "勾选一组条目",
            "类型": "(keys: string[], selected: boolean)"
          }
        ]
      }
    ]
  },
  {
    "title": "Tour",
    "properties": [
      {
        "title": "Tour - Tour",
        "property": [
          {
            "属性": "arrow",
            "说明": "是否显示箭头，包含是否指向元素中心的配置",
            "类型": "`boolean` | `{ pointAtCenter: boolean}`",
            "默认值": "`true`"
          },
          {
            "属性": "closeIcon",
            "说明": "自定义关闭按钮",
            "类型": "`React.ReactNode`",
            "默认值": "`true`",
            "版本": "5.9.0"
          },
          {
            "属性": "disabledInteraction",
            "说明": "禁用高亮区域交互",
            "类型": "`boolean`",
            "默认值": "`false`",
            "版本": "5.13.0"
          },
          {
            "属性": "placement",
            "说明": "引导卡片相对于目标元素的位置",
            "类型": "`center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`",
            "默认值": "`bottom`"
          },
          {
            "属性": "onClose",
            "说明": "关闭引导时的回调函数",
            "类型": "`Function`",
            "默认值": "-"
          },
          {
            "属性": "onFinish",
            "说明": "引导完成时的回调",
            "类型": "`Function`",
            "默认值": "-"
          },
          {
            "属性": "mask",
            "说明": "是否启用蒙层，也可传入配置改变蒙层样式和填充色",
            "类型": "`boolean | { style?: React.CSSProperties; color?: string; }`",
            "默认值": "`true`"
          },
          {
            "属性": "type",
            "说明": "类型，影响底色与文字颜色",
            "类型": "`default` | `primary`",
            "默认值": "`default`"
          },
          {
            "属性": "open",
            "说明": "打开引导",
            "类型": "`boolean`",
            "默认值": "-"
          },
          {
            "属性": "onChange",
            "说明": "步骤改变时的回调，current 为当前的步骤",
            "类型": "`(current: number) => void`",
            "默认值": "-"
          },
          {
            "属性": "current",
            "说明": "当前处于哪一步",
            "类型": "`number`",
            "默认值": "-"
          },
          {
            "属性": "scrollIntoViewOptions",
            "说明": "是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数",
            "类型": "`boolean | ScrollIntoViewOptions`",
            "默认值": "`true`",
            "版本": "5.2.0"
          },
          {
            "属性": "indicatorsRender",
            "说明": "自定义指示器",
            "类型": "`(current: number, total: number) => ReactNode`",
            "默认值": "-",
            "版本": "5.2.0"
          },
          {
            "属性": "zIndex",
            "说明": "Tour 的层级",
            "类型": "number",
            "默认值": "1001",
            "版本": "5.3.0"
          },
          {
            "属性": "getPopupContainer",
            "说明": "设置 Tour 浮层的渲染节点，默认是 body",
            "类型": "`(node: HTMLElement) => HTMLElement`",
            "默认值": "body",
            "版本": "5.12.0"
          }
        ]
      },
      {
        "title": "Tour - TourStep 引导步骤卡片",
        "property": [
          {
            "属性": "target",
            "说明": "获取引导卡片指向的元素，为空时居中于屏幕",
            "类型": "`() => HTMLElement` | `HTMLElement`",
            "默认值": "-"
          },
          {
            "属性": "arrow",
            "说明": "是否显示箭头，包含是否指向元素中心的配置",
            "类型": "`boolean` | `{ pointAtCenter: boolean}`",
            "默认值": "`true`"
          },
          {
            "属性": "closeIcon",
            "说明": "自定义关闭按钮",
            "类型": "`React.ReactNode`",
            "默认值": "`true`",
            "版本": "5.9.0"
          },
          {
            "属性": "cover",
            "说明": "展示的图片或者视频",
            "类型": "`ReactNode`",
            "默认值": "-"
          },
          {
            "属性": "title",
            "说明": "标题",
            "类型": "`ReactNode`",
            "默认值": "-"
          },
          {
            "属性": "description",
            "说明": "主要描述部分",
            "类型": "`ReactNode`",
            "默认值": "-"
          },
          {
            "属性": "placement",
            "说明": "引导卡片相对于目标元素的位置",
            "类型": "`center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` `bottom`"
          },
          {
            "属性": "onClose",
            "说明": "关闭引导时的回调函数",
            "类型": "`Function`",
            "默认值": "-"
          },
          {
            "属性": "mask",
            "说明": "是否启用蒙层，也可传入配置改变蒙层样式和填充色，默认跟随 Tour 的 `mask` 属性",
            "类型": "`boolean | { style?: React.CSSProperties; color?: string; }`",
            "默认值": "`true`"
          },
          {
            "属性": "type",
            "说明": "类型，影响底色与文字颜色",
            "类型": "`default` | `primary`",
            "默认值": "`default`"
          },
          {
            "属性": "nextButtonProps",
            "说明": "下一步按钮的属性",
            "类型": "`{ children: ReactNode; onClick: Function }`",
            "默认值": "-"
          },
          {
            "属性": "prevButtonProps",
            "说明": "上一步按钮的属性",
            "类型": "`{ children: ReactNode; onClick: Function }`",
            "默认值": "-"
          },
          {
            "属性": "scrollIntoViewOptions",
            "说明": "是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数，默认跟随 Tour 的 `scrollIntoViewOptions` 属性",
            "类型": "`boolean | ScrollIntoViewOptions`",
            "默认值": "`true`",
            "版本": "5.2.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Tooltip",
    "properties": [
      {
        "title": "Tooltip - API",
        "property": [
          {
            "参数": "title",
            "说明": "提示文字",
            "类型": "ReactNode | () => ReactNode",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Tooltip - 共同的 API",
        "property": [
          {
            "参数": "align",
            "说明": "该值将合并到 placement 的配置中，设置参考 [rc-tooltip](https://github.com/react-component/tooltip)",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "arrow",
            "说明": "修改箭头的显示状态以及修改箭头是否指向目标元素中心",
            "类型": "boolean | { pointAtCenter: boolean }",
            "默认值": "true",
            "版本": "5.2.0"
          },
          {
            "参数": "autoAdjustOverflow",
            "说明": "气泡被遮挡时自动调整位置",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "color",
            "说明": "背景颜色",
            "类型": "string",
            "默认值": "-",
            "版本": "4.3.0"
          },
          {
            "参数": "defaultOpen",
            "说明": "默认是否显隐",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.23.0"
          },
          {
            "参数": "destroyTooltipOnHide",
            "说明": "关闭后是否销毁 Tooltip",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "fresh",
            "说明": "默认情况下，Tooltip 在关闭时会缓存内容。设置该属性后会始终保持更新",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.10.0"
          },
          {
            "参数": "getPopupContainer",
            "说明": "浮层渲染父节点，默认渲染到 body 上",
            "类型": "(triggerNode: HTMLElement) => HTMLElement",
            "默认值": "() => document.body"
          },
          {
            "参数": "mouseEnterDelay",
            "说明": "鼠标移入后延时多少才显示 Tooltip，单位：秒",
            "类型": "number",
            "默认值": "0.1"
          },
          {
            "参数": "mouseLeaveDelay",
            "说明": "鼠标移出后延时多少才隐藏 Tooltip，单位：秒",
            "类型": "number",
            "默认值": "0.1"
          },
          {
            "参数": "overlayClassName",
            "说明": "卡片类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "overlayStyle",
            "说明": "卡片样式",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "overlayInnerStyle",
            "说明": "卡片内容区域的样式对象",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "placement",
            "说明": "气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`",
            "类型": "string",
            "默认值": "`top`"
          },
          {
            "参数": "trigger",
            "说明": "触发行为，可选 `hover` | `focus` | `click` | `contextMenu`，可使用数组设置多个触发行为",
            "类型": "string | string[]",
            "默认值": "`hover`"
          },
          {
            "参数": "open",
            "说明": "用于手动控制浮层显隐，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.23.0"
          },
          {
            "参数": "zIndex",
            "说明": "设置 Tooltip 的 `z-index`",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "onOpenChange",
            "说明": "显示隐藏的回调",
            "类型": "(open: boolean) => void",
            "默认值": "-",
            "版本": "4.23.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Timeline",
    "properties": [
      {
        "title": "Timeline - Timeline",
        "property": [
          {
            "参数": "mode",
            "说明": "通过设置 `mode` 可以改变时间轴和内容的相对位置",
            "类型": "`left` | `alternate` | `right`",
            "默认值": "-"
          },
          {
            "参数": "pending",
            "说明": "指定最后一个幽灵节点是否存在或内容",
            "类型": "boolean | ReactNode",
            "默认值": "false"
          },
          {
            "参数": "pendingDot",
            "说明": "当最后一个幽灵节点存在時，指定其时间图点",
            "类型": "ReactNode",
            "默认值": "\\<LoadingOutlined />"
          },
          {
            "参数": "reverse",
            "说明": "节点排序",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "items",
            "说明": "选项配置",
            "类型": "5.2.0"
          }
        ]
      },
      {
        "title": "Timeline - Items",
        "property": [
          {
            "参数": "color",
            "说明": "指定圆圈颜色 `blue`、`red`、`green`、`gray`，或自定义的色值",
            "类型": "string",
            "默认值": "`blue`"
          },
          {
            "参数": "dot",
            "说明": "自定义时间轴点",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "label",
            "说明": "设置标签",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "children",
            "说明": "设置内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "position",
            "说明": "自定义节点位置",
            "类型": "`left` | `right`",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Time-picker",
    "properties": [
      {
        "title": "Time-picker - API",
        "property": [
          {
            "参数": "allowClear",
            "说明": "自定义清除按钮",
            "类型": "boolean | { clearIcon?: ReactNode }",
            "默认值": "true",
            "版本": "5.8.0: 支持对象类型"
          },
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "cellRender",
            "说明": "自定义单元格的内容",
            "类型": "(current: number, info: { originNode: React.ReactNode, today: dayjs, range?: 'start' | 'end', subType: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "changeOnBlur",
            "说明": "失去焦点时触发 `change` 事件，例如 datetime 下不再需要点击确认按钮",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.5.0"
          },
          {
            "参数": "className",
            "说明": "选择器类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "defaultValue",
            "说明": "默认时间",
            "类型": "-"
          },
          {
            "参数": "disabled",
            "说明": "禁用全部操作",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabledTime",
            "说明": "不可选择的时间",
            "类型": "-",
            "默认值": "4.19.0"
          },
          {
            "参数": "format",
            "说明": "展示的时间格式",
            "类型": "string",
            "默认值": "`HH:mm:ss`"
          },
          {
            "参数": "getPopupContainer",
            "说明": "定义浮层的容器，默认为 body 上新建 div",
            "类型": "function(trigger)",
            "默认值": "-"
          },
          {
            "参数": "hideDisabledOptions",
            "说明": "隐藏禁止选择的选项",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "hourStep",
            "说明": "小时选项间隔",
            "类型": "number",
            "默认值": "1"
          },
          {
            "参数": "inputReadOnly",
            "说明": "设置输入框为只读（避免在移动设备上打开虚拟键盘）",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "minuteStep",
            "说明": "分钟选项间隔",
            "类型": "number",
            "默认值": "1"
          },
          {
            "参数": "open",
            "说明": "面板是否打开",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "placeholder",
            "说明": "没有值的时候显示的内容",
            "类型": "string | [string, string]",
            "默认值": "`请选择时间`"
          },
          {
            "参数": "placement",
            "说明": "选择框弹出的位置",
            "类型": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
            "默认值": "bottomLeft"
          },
          {
            "参数": "popupClassName",
            "说明": "弹出层类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "popupStyle",
            "说明": "弹出层样式对象",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "renderExtraFooter",
            "说明": "选择框底部显示自定义的内容",
            "类型": "() => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "secondStep",
            "说明": "秒选项间隔",
            "类型": "number",
            "默认值": "1"
          },
          {
            "参数": "showNow",
            "说明": "面板是否显示“此刻”按钮",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "size",
            "说明": "输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px",
            "类型": "`large` | `middle` | `small`",
            "默认值": "-"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "suffixIcon",
            "说明": "自定义的选择框后缀图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "use12Hours",
            "说明": "使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a`",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "value",
            "说明": "当前时间",
            "类型": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "onChange",
            "说明": "时间发生变化的回调",
            "类型": "function(time: dayjs, timeString: string): void",
            "默认值": "-"
          },
          {
            "参数": "onOpenChange",
            "说明": "面板打开/关闭时的回调",
            "类型": "(open: boolean) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Time-picker - 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      },
      {
        "title": "Time-picker - RangePicker",
        "property": [
          {
            "参数": "disabledTime",
            "说明": "不可选择的时间",
            "类型": "-",
            "默认值": "4.19.0"
          },
          {
            "参数": "order",
            "说明": "始末时间是否自动排序",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.1.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Tag",
    "properties": [
      {
        "title": "Tag - Tag",
        "property": [
          {
            "参数": "closeIcon",
            "说明": "自定义关闭按钮。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮",
            "类型": "boolean | ReactNode",
            "默认值": "false",
            "版本": "4.4.0"
          },
          {
            "参数": "color",
            "说明": "标签色",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "icon",
            "说明": "设置图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "bordered",
            "说明": "是否有边框",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.4.0"
          },
          {
            "参数": "onClose",
            "说明": "关闭时的回调（可通过 `e.preventDefault()` 来阻止默认行为）",
            "类型": "(e) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Tag - Tag.CheckableTag",
        "property": [
          {
            "参数": "checked",
            "说明": "设置标签的选中状态",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onChange",
            "说明": "点击标签时触发的回调",
            "类型": "(checked) => void",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Tabs",
    "properties": [
      {
        "title": "Tabs - Tabs",
        "property": [
          {
            "参数": "activeKey",
            "说明": "当前激活 tab 面板的 key",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "addIcon",
            "说明": "自定义添加按钮",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "animated",
            "说明": "是否使用动画切换 Tabs",
            "类型": "boolean| { inkBar: boolean, tabPane: boolean }",
            "默认值": "{ inkBar: true, tabPane: false }"
          },
          {
            "参数": "centered",
            "说明": "标签居中展示",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.4.0"
          },
          {
            "参数": "defaultActiveKey",
            "说明": "初始化选中面板的 key，如果没有设置 activeKey",
            "类型": "string",
            "默认值": "`第一个面板`"
          },
          {
            "参数": "hideAdd",
            "说明": "是否隐藏加号图标，在 `type=\"editable-card\"` 时有效",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "indicator",
            "说明": "自定义指示条的长度和对齐方式",
            "类型": "{ size?: number | (origin: number) => number; align: `start` | `center` | `end`; }",
            "默认值": "-",
            "版本": "5.13.0"
          },
          {
            "参数": "items",
            "说明": "配置选项卡内容",
            "类型": "\\[]",
            "默认值": "4.23.0"
          },
          {
            "参数": "moreIcon",
            "说明": "自定义折叠 icon",
            "类型": "ReactNode",
            "默认值": "\\<EllipsisOutlined />",
            "版本": "4.14.0"
          },
          {
            "参数": "popupClassName",
            "说明": "更多菜单的 `className`",
            "类型": "string",
            "默认值": "-",
            "版本": "4.21.0"
          },
          {
            "参数": "renderTabBar",
            "说明": "替换 TabBar，用于二次封装标签头",
            "类型": "(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "大小，提供 `large` `middle` 和 `small` 三种大小",
            "类型": "string",
            "默认值": "`middle`"
          },
          {
            "参数": "tabBarExtraContent",
            "说明": "tab bar 上额外的元素",
            "类型": "ReactNode | {left?: ReactNode, right?: ReactNode}",
            "默认值": "-",
            "版本": "object: 4.6.0"
          },
          {
            "参数": "tabBarGutter",
            "说明": "tabs 之间的间隙",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "tabBarStyle",
            "说明": "tab bar 的样式对象",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "tabPosition",
            "说明": "页签位置，可选值有 `top` `right` `bottom` `left`",
            "类型": "string",
            "默认值": "`top`"
          },
          {
            "参数": "destroyInactiveTabPane",
            "说明": "被隐藏时是否销毁 DOM 结构",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "type",
            "说明": "页签的基本样式，可选 `line`、`card` `editable-card` 类型",
            "类型": "string",
            "默认值": "`line`"
          },
          {
            "参数": "onChange",
            "说明": "切换面板的回调",
            "类型": "function(activeKey) {}",
            "默认值": "-"
          },
          {
            "参数": "onEdit",
            "说明": "新增和删除页签的回调，在 `type=\"editable-card\"` 时有效",
            "类型": "(action === 'add' ? event : targetKey, action): void",
            "默认值": "-"
          },
          {
            "参数": "onTabClick",
            "说明": "tab 被点击的回调",
            "类型": "function(key: string, event: MouseEvent)",
            "默认值": "-"
          },
          {
            "参数": "onTabScroll",
            "说明": "tab 滚动时触发",
            "类型": "function({ direction: `left` | `right` | `top` | `bottom` })",
            "默认值": "-",
            "版本": "4.3.0"
          }
        ]
      },
      {
        "title": "Tabs - TabItemType",
        "property": [
          {
            "参数": "closeIcon",
            "说明": "自定义关闭图标，在 `type=\"editable-card\"` 时有效。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮",
            "类型": "boolean | ReactNode",
            "默认值": "-"
          },
          {
            "参数": "destroyInactiveTabPane",
            "说明": "被隐藏时是否销毁 DOM 结构",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.11.0"
          },
          {
            "参数": "disabled",
            "说明": "禁用某一项",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "forceRender",
            "说明": "被隐藏时是否渲染 DOM 结构",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "key",
            "说明": "对应 activeKey",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "label",
            "说明": "选项卡头显示文字",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "icon",
            "说明": "选项卡头显示图标",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "5.12.0"
          },
          {
            "参数": "children",
            "说明": "选项卡头显示内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "closable",
            "说明": "是否显示选项卡的关闭按钮，在 `type=\"editable-card\"` 时有效",
            "类型": "boolean",
            "默认值": "true"
          }
        ]
      }
    ]
  },
  {
    "title": "Table",
    "properties": [
      {
        "title": "Table - Table",
        "property": [
          {
            "参数": "bordered",
            "说明": "是否展示外边框和列边框",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "columns",
            "说明": "表格列的配置描述，具体项见下表",
            "类型": "-"
          },
          {
            "参数": "components",
            "说明": "覆盖默认的 table 元素，`virtual` 下不支持 `components.body`",
            "类型": "-"
          },
          {
            "参数": "dataSource",
            "说明": "数据数组",
            "类型": "object[]",
            "默认值": "-"
          },
          {
            "参数": "expandable",
            "说明": "配置展开属性",
            "类型": "-"
          },
          {
            "参数": "footer",
            "说明": "表格尾部",
            "类型": "function(currentPageData)",
            "默认值": "-"
          },
          {
            "参数": "getPopupContainer",
            "说明": "设置表格内各类浮层的渲染节点，如筛选菜单",
            "类型": "(triggerNode) => HTMLElement",
            "默认值": "() => TableHtmlElement"
          },
          {
            "参数": "loading",
            "说明": "页面是否加载中",
            "类型": "boolean | [Spin Props](/components/spin-cn#api)",
            "默认值": "false"
          },
          {
            "参数": "locale",
            "说明": "默认文案设置，目前包括排序、过滤、空数据文案",
            "类型": "object"
          },
          {
            "参数": "pagination",
            "说明": "分页器，参考[配置项](#pagination)或 [pagination](/components/pagination-cn) 文档，设为 false 时不展示和进行分页",
            "类型": "object | `false`",
            "默认值": "-"
          },
          {
            "参数": "rowClassName",
            "说明": "表格行的类名",
            "类型": "function(record, index): string",
            "默认值": "-"
          },
          {
            "参数": "rowKey",
            "说明": "表格行 key 的取值，可以是字符串或一个函数",
            "类型": "string | function(record): string",
            "默认值": "`key`"
          },
          {
            "参数": "rowSelection",
            "说明": "表格行是否可选择，[配置项](#rowselection)",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "scroll",
            "说明": "表格是否可滚动，也可以指定滚动区域的宽、高，[配置项](#scroll)",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "showHeader",
            "说明": "是否显示表头",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "showSorterTooltip",
            "说明": "表头是否显示下一次排序的 tooltip 提示。当参数类型为对象时，将被设置为 Tooltip 的属性",
            "类型": "boolean | [Tooltip props](/components/tooltip-cn)",
            "默认值": "true"
          },
          {
            "参数": "size",
            "说明": "表格大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "`large`"
          },
          {
            "参数": "sortDirections",
            "说明": "支持的排序方式，取值为 `ascend` `descend`",
            "类型": "Array",
            "默认值": "\\[`ascend`, `descend`]"
          },
          {
            "参数": "sticky",
            "说明": "设置粘性头部和滚动条",
            "类型": "boolean | `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}`",
            "默认值": "-",
            "版本": "4.6.0 (getContainer: 4.7.0)"
          },
          {
            "参数": "summary",
            "说明": "总结栏",
            "类型": "(currentData) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "tableLayout",
            "说明": "表格元素的 [table-layout](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout) 属性，设为 `fixed` 表示内容不会影响列的布局",
            "类型": "- | `auto` | `fixed`",
            "默认值": "无<hr />固定表头/列或使用了 `column.ellipsis` 时，默认值为 `fixed`"
          },
          {
            "参数": "title",
            "说明": "表格标题",
            "类型": "function(currentPageData)",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "分页、排序、筛选变化时触发",
            "类型": "function(pagination, filters, sorter, extra: { currentDataSource: [], action: `paginate` | `sort` | `filter` })",
            "默认值": "-"
          },
          {
            "参数": "onHeaderRow",
            "说明": "设置头部行属性",
            "类型": "function(columns, index)",
            "默认值": "-"
          },
          {
            "参数": "onRow",
            "说明": "设置行属性",
            "类型": "function(record, index)",
            "默认值": "-"
          },
          {
            "参数": "virtual",
            "说明": "支持虚拟列表，开启后不支持 `components.body` 自定义",
            "类型": "boolean",
            "默认值": "-",
            "版本": "5.9.0"
          }
        ]
      },
      {
        "title": "Table - Table ref",
        "property": [
          {
            "参数": "nativeElement",
            "说明": "最外层 div 元素",
            "类型": "HTMLDivElement",
            "版本": "5.11.0"
          },
          {
            "参数": "scrollTo",
            "说明": "滚动到目标位置（设置 `key` 时为 Record 对应的 `rowKey`）",
            "类型": "(config: { index?: number, key?: React.Key, top?: number }) => void",
            "版本": "5.11.0"
          }
        ]
      },
      {
        "title": "Table - Column",
        "property": [
          {
            "参数": "align",
            "说明": "设置列的对齐方式",
            "类型": "`left` | `right` | `center`",
            "默认值": "`left`"
          },
          {
            "参数": "className",
            "说明": "列样式类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "colSpan",
            "说明": "表头列合并，设置为 0 时，不渲染",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "dataIndex",
            "说明": "列数据在数据项中对应的路径，支持通过数组查询嵌套路径",
            "类型": "string | string[]",
            "默认值": "-"
          },
          {
            "参数": "defaultFilteredValue",
            "说明": "默认筛选值",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "filterResetToDefaultFilteredValue",
            "说明": "点击重置按钮的时候，是否恢复默认筛选值",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultSortOrder",
            "说明": "默认排序顺序",
            "类型": "`ascend` | `descend`",
            "默认值": "-"
          },
          {
            "参数": "ellipsis",
            "说明": "超过宽度将自动省略，暂不支持和排序筛选一起使用。<br />设置为 `true` 或 `{ showTitle?: boolean }` 时，表格布局将变成 `tableLayout=\"fixed\"`。",
            "类型": "boolean | { showTitle?: boolean }",
            "默认值": "false",
            "版本": "showTitle: 4.3.0"
          },
          {
            "参数": "filterDropdown",
            "说明": "可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互",
            "类型": "ReactNode | (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "filterDropdownOpen",
            "说明": "用于控制自定义筛选菜单是否可见",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "filtered",
            "说明": "标识数据是否经过过滤，筛选图标会高亮",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "filteredValue",
            "说明": "筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "filterIcon",
            "说明": "自定义 filter 图标。",
            "类型": "ReactNode | (filtered: boolean) => ReactNode",
            "默认值": "false"
          },
          {
            "参数": "filterMultiple",
            "说明": "是否多选",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "filterMode",
            "说明": "指定筛选菜单的用户界面",
            "类型": "'menu' | 'tree'",
            "默认值": "'menu'",
            "版本": "4.17.0"
          },
          {
            "参数": "filterSearch",
            "说明": "筛选菜单项是否可搜索",
            "类型": "boolean | function(input, record):boolean",
            "默认值": "false",
            "版本": "boolean:4.17.0 function:4.19.0"
          },
          {
            "参数": "filters",
            "说明": "表头的筛选菜单项",
            "类型": "object[]",
            "默认值": "-"
          },
          {
            "参数": "fixed",
            "说明": "（IE 下无效）列是否固定，可选 `true` (等效于 `left`) `left` `right`",
            "类型": "boolean | string",
            "默认值": "false"
          },
          {
            "参数": "key",
            "说明": "React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "render",
            "说明": "生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引",
            "类型": "function(text, record, index) {}",
            "默认值": "-"
          },
          {
            "参数": "responsive",
            "说明": "响应式 breakpoint 配置列表。未设置则始终可见。",
            "类型": "-",
            "默认值": "4.2.0"
          },
          {
            "参数": "rowScope",
            "说明": "设置列范围",
            "类型": "`row` | `rowgroup`",
            "默认值": "-",
            "版本": "5.1.0"
          },
          {
            "参数": "shouldCellUpdate",
            "说明": "自定义单元格渲染时机",
            "类型": "(record, prevRecord) => boolean",
            "默认值": "-",
            "版本": "4.3.0"
          },
          {
            "参数": "showSorterTooltip",
            "说明": "表头显示下一次排序的 tooltip 提示, 覆盖 table 中 `showSorterTooltip`",
            "类型": "boolean | [Tooltip props](/components/tooltip-cn/#api)",
            "默认值": "true"
          },
          {
            "参数": "sortDirections",
            "说明": "支持的排序方式，覆盖 `Table` 中 `sortDirections`， 取值为 `ascend` `descend`",
            "类型": "Array",
            "默认值": "\\[`ascend`, `descend`]"
          },
          {
            "参数": "sorter",
            "说明": "排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)。需要服务端排序可设为 `true`（单列排序） 或 `{ multiple: number }`（多列排序）",
            "类型": "function | boolean | { compare: function, multiple: number }",
            "默认值": "-"
          },
          {
            "参数": "sortOrder",
            "说明": "排序的受控属性，外界可用此控制列的排序，可设置为 `ascend` `descend` `null`",
            "类型": "`ascend` | `descend` | null",
            "默认值": "-"
          },
          {
            "参数": "sortIcon",
            "说明": "自定义 sort 图标",
            "类型": "(props: { sortOrder }) => ReactNode",
            "默认值": "-",
            "版本": "5.6.0"
          },
          {
            "参数": "title",
            "说明": "列头显示文字（函数用法 `3.10.0` 后支持）",
            "类型": "ReactNode | ({ sortOrder, sortColumn, filters }) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "width",
            "说明": "列宽度（[指定了也不生效？](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)）",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "hidden",
            "说明": "隐藏列",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.13.0"
          },
          {
            "参数": "onCell",
            "说明": "设置单元格属性",
            "类型": "function(record, rowIndex)",
            "默认值": "-"
          },
          {
            "参数": "onFilter",
            "说明": "本地模式下，确定筛选的运行函数",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onFilterDropdownOpenChange",
            "说明": "自定义筛选菜单可见变化时调用",
            "类型": "function(visible) {}",
            "默认值": "-"
          },
          {
            "参数": "onHeaderCell",
            "说明": "设置头部单元格属性",
            "类型": "function(column)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Table - ColumnGroup",
        "property": [
          {
            "参数": "title",
            "说明": "列头显示文字",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Table - pagination",
        "property": [
          {
            "参数": "position",
            "说明": "指定分页显示的位置， 取值为`topLeft` | `topCenter` | `topRight` |`bottomLeft` | `bottomCenter` | `bottomRight`",
            "类型": "Array",
            "默认值": "\\[`bottomRight`]"
          }
        ]
      },
      {
        "title": "Table - expandable",
        "property": [
          {
            "参数": "childrenColumnName",
            "说明": "指定树形结构的列名",
            "类型": "string",
            "默认值": "children"
          },
          {
            "参数": "columnTitle",
            "说明": "自定义展开列表头",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "columnWidth",
            "说明": "自定义展开列宽度",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "defaultExpandAllRows",
            "说明": "初始时，是否展开所有行",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultExpandedRowKeys",
            "说明": "默认展开的行",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "expandedRowClassName",
            "说明": "展开行的 className",
            "类型": "function(record, index, indent): string",
            "默认值": "-"
          },
          {
            "参数": "expandedRowKeys",
            "说明": "展开的行，控制属性",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "expandedRowRender",
            "说明": "额外的展开行",
            "类型": "function(record, index, indent, expanded): ReactNode",
            "默认值": "-"
          },
          {
            "参数": "expandIcon",
            "说明": "自定义展开图标，参考[示例](https://codesandbox.io/s/fervent-bird-nuzpr)",
            "类型": "function(props): ReactNode",
            "默认值": "-"
          },
          {
            "参数": "expandRowByClick",
            "说明": "通过点击行来展开子行",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "fixed",
            "说明": "控制展开图标是否固定，可选 `true` `'left'` `'right'`",
            "类型": "boolean | string",
            "默认值": "false",
            "版本": "4.16.0"
          },
          {
            "参数": "indentSize",
            "说明": "展示树形数据时，每层缩进的宽度，以 px 为单位",
            "类型": "number",
            "默认值": "15"
          },
          {
            "参数": "rowExpandable",
            "说明": "设置是否允许行展开",
            "类型": "(record) => boolean",
            "默认值": "-"
          },
          {
            "参数": "showExpandColumn",
            "说明": "设置是否展示行展开列",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.18.0"
          },
          {
            "参数": "onExpand",
            "说明": "点击展开图标时触发",
            "类型": "function(record, event)",
            "默认值": "-"
          },
          {
            "参数": "onExpandedRowsChange",
            "说明": "展开的行变化时触发",
            "类型": "function(expandedRows)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Table - rowSelection",
        "property": [
          {
            "参数": "checkStrictly",
            "说明": "checkable 状态下节点选择完全受控（父子数据选中状态不再关联）",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.4.0"
          },
          {
            "参数": "columnTitle",
            "说明": "自定义列表选择框标题",
            "类型": "ReactNode | (originalNode: ReactNode) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "columnWidth",
            "说明": "自定义列表选择框宽度",
            "类型": "string | number",
            "默认值": "`32px`"
          },
          {
            "参数": "fixed",
            "说明": "把选择框列固定在左边",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "getCheckboxProps",
            "说明": "选择框的默认属性配置",
            "类型": "function(record)",
            "默认值": "-"
          },
          {
            "参数": "hideSelectAll",
            "说明": "隐藏全选勾选框与自定义选择项",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.3.0"
          },
          {
            "参数": "preserveSelectedRowKeys",
            "说明": "当数据被删除时仍然保留选项的 `key`",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "renderCell",
            "说明": "渲染勾选框，用法与 Column 的 `render` 相同",
            "类型": "function(checked, record, index, originNode) {}",
            "默认值": "-",
            "版本": "4.1.0"
          },
          {
            "参数": "selectedRowKeys",
            "说明": "指定选中项的 key 数组，需要和 onChange 进行配合",
            "类型": "string[] | number[]",
            "默认值": "\\[]"
          },
          {
            "参数": "defaultSelectedRowKeys",
            "说明": "默认选中项的 key 数组",
            "类型": "string[] | number[]",
            "默认值": "\\[]"
          },
          {
            "参数": "selections",
            "说明": "自定义选择项 [配置项](#selection), 设为 `true` 时使用默认选择项",
            "类型": "object[] | boolean",
            "默认值": "true"
          },
          {
            "参数": "type",
            "说明": "多选/单选",
            "类型": "`checkbox` | `radio`",
            "默认值": "`checkbox`"
          },
          {
            "参数": "onCell",
            "说明": "设置单元格属性，用法与 Column 的 `onCell` 相同",
            "类型": "function(record, rowIndex)",
            "默认值": "-",
            "版本": "5.5.0"
          },
          {
            "参数": "onChange",
            "说明": "选中项发生变化时的回调",
            "类型": "function(selectedRowKeys, selectedRows, info: { type })",
            "默认值": "-",
            "版本": "`info.type`: 4.21.0"
          },
          {
            "参数": "onSelect",
            "说明": "用户手动选择/取消选择某行的回调",
            "类型": "function(record, selected, selectedRows, nativeEvent)",
            "默认值": "-"
          },
          {
            "参数": "onSelectAll",
            "说明": "用户手动选择/取消选择所有行的回调",
            "类型": "function(selected, selectedRows, changeRows)",
            "默认值": "-"
          },
          {
            "参数": "onSelectInvert",
            "说明": "用户手动选择反选的回调",
            "类型": "function(selectedRowKeys)",
            "默认值": "-"
          },
          {
            "参数": "onSelectNone",
            "说明": "用户清空选择的回调",
            "类型": "function()",
            "默认值": "-"
          },
          {
            "参数": "onSelectMultiple",
            "说明": "用户使用键盘 shift 选择多行的回调",
            "类型": "function(selected, selectedRows, changeRows)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Table - scroll",
        "property": [
          {
            "参数": "scrollToFirstRowOnChange",
            "说明": "当分页、排序、筛选变化后是否滚动到表格顶部",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "x",
            "说明": "设置横向滚动，也可用于指定滚动区域的宽，可以设置为像素值，百分比，`true` 和 ['max-content'](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content)",
            "类型": "string | number | true",
            "默认值": "-"
          },
          {
            "参数": "y",
            "说明": "设置纵向滚动，也可用于指定滚动区域的高，可以设置为像素值",
            "类型": "string | number",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Table - selection",
        "property": [
          {
            "参数": "key",
            "说明": "React 需要的 key，建议设置",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "text",
            "说明": "选择项显示的文字",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "选择项点击回调",
            "类型": "function(changeableRowKeys)",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Switch",
    "properties": [
      {
        "title": "Switch - API",
        "property": [
          {
            "参数": "autoFocus",
            "说明": "组件自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "checked",
            "说明": "指定当前是否选中",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "checkedChildren",
            "说明": "选中时的内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "className",
            "说明": "Switch 器类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "defaultChecked",
            "说明": "初始是否选中",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultValue",
            "说明": "`defaultChecked` 的别名",
            "类型": "boolean",
            "默认值": "-",
            "版本": "5.12.0"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "loading",
            "说明": "加载中的开关",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "size",
            "说明": "开关大小，可选值：`default` `small`",
            "类型": "string",
            "默认值": "`default`"
          },
          {
            "参数": "unCheckedChildren",
            "说明": "非选中时的内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "`checked` 的别名",
            "类型": "boolean",
            "默认值": "-",
            "版本": "5.12.0"
          },
          {
            "参数": "onChange",
            "说明": "变化时的回调函数",
            "类型": "function(checked: boolean, event: Event)",
            "默认值": "-"
          },
          {
            "参数": "onClick",
            "说明": "点击时的回调函数",
            "类型": "function(checked: boolean, event: Event)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Switch - 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "Steps",
    "properties": [
      {
        "title": "Steps - Steps",
        "property": [
          {
            "参数": "className",
            "说明": "步骤条类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "current",
            "说明": "指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "direction",
            "说明": "指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向",
            "类型": "string",
            "默认值": "`horizontal`"
          },
          {
            "参数": "initial",
            "说明": "起始序号，从 0 开始记数",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "labelPlacement",
            "说明": "指定标签放置位置，默认水平放图标右侧，可选 `vertical` 放图标下方",
            "类型": "string",
            "默认值": "`horizontal`"
          },
          {
            "参数": "percent",
            "说明": "当前 `process` 步骤显示的进度条进度（只对基本类型的 Steps 生效）",
            "类型": "number",
            "默认值": "-",
            "版本": "4.5.0"
          },
          {
            "参数": "progressDot",
            "说明": "点状步骤条，可以设置为一个 function，labelPlacement 将强制为 `vertical`",
            "类型": "boolean | (iconDot, {index, status, title, description}) => ReactNode",
            "默认值": "false"
          },
          {
            "参数": "responsive",
            "说明": "当屏幕宽度小于 `532px` 时自动变为垂直模式",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "size",
            "说明": "指定大小，目前支持普通（`default`）和迷你（`small`）",
            "类型": "string",
            "默认值": "`default`"
          },
          {
            "参数": "status",
            "说明": "指定当前步骤的状态，可选 `wait` `process` `finish` `error`",
            "类型": "string",
            "默认值": "`process`"
          },
          {
            "参数": "type",
            "说明": "步骤条类型，可选 `default` `navigation` `inline`",
            "类型": "string",
            "默认值": "`default`",
            "版本": "inline: 5.0"
          },
          {
            "参数": "onChange",
            "说明": "点击切换步骤时触发",
            "类型": "(current) => void",
            "默认值": "-"
          },
          {
            "参数": "items",
            "说明": "配置选项卡内容",
            "类型": "\\[]",
            "默认值": "4.24.0"
          }
        ]
      },
      {
        "title": "Steps - `type=\"inline\"`",
        "property": [
          {
            "参数": "className",
            "说明": "步骤条类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "current",
            "说明": "指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "initial",
            "说明": "起始序号，从 0 开始记数",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "status",
            "说明": "指定当前步骤的状态，可选 `wait` `process` `finish` `error`",
            "类型": "string",
            "默认值": "`process`"
          },
          {
            "参数": "onChange",
            "说明": "点击切换步骤时触发",
            "类型": "(current) => void",
            "默认值": "-"
          },
          {
            "参数": "items",
            "说明": "配置选项卡内容，不支持 `icon` `subtitle`",
            "类型": "\\[]",
            "默认值": "4.24.0"
          }
        ]
      },
      {
        "title": "Steps - StepItem",
        "property": [
          {
            "参数": "description",
            "说明": "步骤的详情描述，可选",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "禁用点击",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "icon",
            "说明": "步骤图标的类型，可选",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "status",
            "说明": "指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error`",
            "类型": "string",
            "默认值": "`wait`"
          },
          {
            "参数": "subTitle",
            "说明": "子标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "标题",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Statistic",
    "properties": [
      {
        "title": "Statistic - Statistic",
        "property": [
          {
            "参数": "decimalSeparator",
            "说明": "设置小数点",
            "类型": "string",
            "默认值": "`.`"
          },
          {
            "参数": "formatter",
            "说明": "自定义数值展示",
            "类型": "(value) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "groupSeparator",
            "说明": "设置千分位标识符",
            "类型": "string",
            "默认值": "`,`"
          },
          {
            "参数": "loading",
            "说明": "数值是否加载中",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.8.0"
          },
          {
            "参数": "precision",
            "说明": "数值精度",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "prefix",
            "说明": "设置数值的前缀",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "suffix",
            "说明": "设置数值的后缀",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "数值的标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "数值内容",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "valueStyle",
            "说明": "设置数值区域的样式",
            "类型": "CSSProperties",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Statistic - Statistic.Countdown",
        "property": [
          {
            "参数": "format",
            "说明": "格式化倒计时展示，参考 [dayjs](https://day.js.org/)",
            "类型": "string",
            "默认值": "`HH:mm:ss`"
          },
          {
            "参数": "prefix",
            "说明": "设置数值的前缀",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "suffix",
            "说明": "设置数值的后缀",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "数值的标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "数值内容",
            "类型": "number | dayjs",
            "默认值": "-"
          },
          {
            "参数": "valueStyle",
            "说明": "设置数值区域的样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "onFinish",
            "说明": "倒计时完成时触发",
            "类型": "() => void",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "倒计时时间变化时触发",
            "类型": "(value: number) => void",
            "默认值": "-",
            "版本": "4.16.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Spin",
    "properties": [
      {
        "title": "Spin - API",
        "property": [
          {
            "参数": "delay",
            "说明": "延迟显示加载效果的时间（防止闪烁）",
            "类型": "number (毫秒)",
            "默认值": "-"
          },
          {
            "参数": "indicator",
            "说明": "加载指示符",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "组件大小，可选值为 `small` `default` `large`",
            "类型": "string",
            "默认值": "`default`"
          },
          {
            "参数": "spinning",
            "说明": "是否为加载中状态",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "tip",
            "说明": "当作为包裹元素时，可以自定义描述文案",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "wrapperClassName",
            "说明": "包装器的类属性",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "fullscreen",
            "说明": "显示带有 `Spin` 组件的背景",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.11.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Space",
    "properties": [
      {
        "title": "Space - Space",
        "property": [
          {
            "参数": "align",
            "说明": "对齐方式",
            "类型": "`start` | `end` |`center` |`baseline`",
            "默认值": "-",
            "版本": "4.2.0"
          },
          {
            "参数": "direction",
            "说明": "间距方向",
            "类型": "`vertical` | `horizontal`",
            "默认值": "`horizontal`",
            "版本": "4.1.0"
          },
          {
            "参数": "size",
            "说明": "间距大小",
            "类型": "`small`",
            "默认值": "4.1.0 | Array: 4.9.0"
          },
          {
            "参数": "split",
            "说明": "设置拆分",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.7.0"
          },
          {
            "参数": "wrap",
            "说明": "是否自动换行，仅在 `horizontal` 时有效",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.9.0"
          }
        ]
      },
      {
        "title": "Space - Space.Compact",
        "property": [
          {
            "参数": "block",
            "说明": "将宽度调整为父元素宽度的选项",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.24.0"
          },
          {
            "参数": "direction",
            "说明": "指定排列方向",
            "类型": "`vertical` | `horizontal`",
            "默认值": "`horizontal`",
            "版本": "4.24.0"
          },
          {
            "参数": "size",
            "说明": "子组件大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "`middle`",
            "版本": "4.24.0"
          }
        ]
      },
      {
        "title": "Space - `styles`",
        "property": [
          {
            "名称": "item",
            "说明": "设置 `Space` 包裹的子组件",
            "版本": "5.6.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Slider",
    "properties": [
      {
        "title": "Slider - API",
        "property": [
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "classNames",
            "说明": "语义化结构 className",
            "类型": "Record<SemanticDOM, string>",
            "默认值": "-",
            "版本": "5.10.0"
          },
          {
            "参数": "defaultValue",
            "说明": "设置初始取值。当 `range` 为 false 时，使用 number，否则用 [number, number]",
            "类型": "number | [number, number]",
            "默认值": "0 | [0, 0]"
          },
          {
            "参数": "disabled",
            "说明": "值为 true 时，滑块为禁用状态",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "keyboard",
            "说明": "支持使用键盘操作 handler",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.2.0+"
          },
          {
            "参数": "dots",
            "说明": "是否只能拖拽到刻度上",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "included",
            "说明": "`marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "marks",
            "说明": "刻度标记，key 的类型必须为 `number` 且取值在闭区间 [min, max] 内，每个标签可以单独设置样式",
            "类型": "object",
            "默认值": "{ number: ReactNode } or { number: { style: CSSProperties, label: ReactNode } }"
          },
          {
            "参数": "max",
            "说明": "最大值",
            "类型": "number",
            "默认值": "100"
          },
          {
            "参数": "min",
            "说明": "最小值",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "range",
            "说明": "双滑块模式",
            "类型": "boolean | [range](#range)",
            "默认值": "false"
          },
          {
            "参数": "reverse",
            "说明": "反向坐标轴",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "step",
            "说明": "步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 null，此时 Slider 的可选值仅有 marks 标出来的部分",
            "类型": "number | null",
            "默认值": "1"
          },
          {
            "参数": "styles",
            "说明": "语义化结构 className",
            "类型": "Record<SemanticDOM, React.CSSProperties>",
            "默认值": "-",
            "版本": "5.10.0"
          },
          {
            "参数": "tooltip",
            "说明": "设置 Tooltip 相关属性",
            "类型": "-",
            "默认值": "4.23.0"
          },
          {
            "参数": "value",
            "说明": "设置当前取值。当 `range` 为 false 时，使用 number，否则用 [number, number]",
            "类型": "number | [number, number]",
            "默认值": "-"
          },
          {
            "参数": "vertical",
            "说明": "值为 true 时，Slider 为垂直方向",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onChangeComplete",
            "说明": "与 `mouseup` 和 `keyup` 触发时机一致，把当前值作为参数传入",
            "类型": "(value) => void",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入",
            "类型": "(value) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Slider - `styles`",
        "property": [
          {
            "名称": "track",
            "说明": "范围选择下，点和点之间单个选取条",
            "版本": "5.10.0"
          },
          {
            "名称": "tracks",
            "说明": "范围选择下，整个范围选取条",
            "版本": "5.10.0"
          },
          {
            "名称": "rail",
            "说明": "背景条",
            "版本": "5.10.0"
          },
          {
            "名称": "handle",
            "说明": "抓取点",
            "版本": "5.10.0"
          }
        ]
      },
      {
        "title": "Slider - range",
        "property": [
          {
            "参数": "draggableTrack",
            "说明": "范围刻度是否可被拖拽",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.10.0"
          }
        ]
      },
      {
        "title": "Slider - tooltip",
        "property": [
          {
            "参数": "autoAdjustOverflow",
            "说明": "是否自动调整弹出位置",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.8.0"
          },
          {
            "参数": "open",
            "说明": "值为 true 时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "placement",
            "说明": "设置 Tooltip 展示位置。参考 [Tooltip](/components/tooltip-cn)",
            "类型": "string",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "getPopupContainer",
            "说明": "Tooltip 渲染父节点，默认渲染到 body 上",
            "类型": "(triggerNode) => HTMLElement",
            "默认值": "() => document.body",
            "版本": "4.23.0"
          },
          {
            "参数": "formatter",
            "说明": "Slider 会把当前值传给 `formatter`，并在 Tooltip 中显示 `formatter` 的返回值，若为 null，则隐藏 Tooltip",
            "类型": "value => ReactNode | null",
            "默认值": "IDENTITY",
            "版本": "4.23.0"
          }
        ]
      },
      {
        "title": "Slider - 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "Skeleton",
    "properties": [
      {
        "title": "Skeleton - Skeleton",
        "property": [
          {
            "属性": "active",
            "说明": "是否展示动画效果",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "avatar",
            "说明": "是否显示头像占位图",
            "类型": "boolean | [SkeletonAvatarProps](#skeletonavatarprops)",
            "默认值": "false"
          },
          {
            "属性": "loading",
            "说明": "为 true 时，显示占位图。反之则直接展示子组件",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "属性": "paragraph",
            "说明": "是否显示段落占位图",
            "类型": "boolean | [SkeletonParagraphProps](#skeletonparagraphprops)",
            "默认值": "true"
          },
          {
            "属性": "round",
            "说明": "为 true 时，段落和标题显示圆角",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "title",
            "说明": "是否显示标题占位图",
            "类型": "boolean | [SkeletonTitleProps](#skeletontitleprops)",
            "默认值": "true"
          }
        ]
      },
      {
        "title": "Skeleton - SkeletonAvatarProps",
        "property": [
          {
            "属性": "active",
            "说明": "是否展示动画效果，仅在单独使用头像骨架时生效",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "shape",
            "说明": "指定头像的形状",
            "类型": "`circle` | `square`",
            "默认值": "-"
          },
          {
            "属性": "size",
            "说明": "设置头像占位图的大小",
            "类型": "number | `large` | `small` | `default`",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Skeleton - SkeletonTitleProps",
        "property": [
          {
            "属性": "width",
            "说明": "设置标题占位图的宽度",
            "类型": "number | string",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Skeleton - SkeletonParagraphProps",
        "property": [
          {
            "属性": "rows",
            "说明": "设置段落占位图的行数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "属性": "width",
            "说明": "设置段落占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度",
            "类型": "number | string | Array<number | string>",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Skeleton - SkeletonButtonProps",
        "property": [
          {
            "属性": "active",
            "说明": "是否展示动画效果",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "block",
            "说明": "将按钮宽度调整为其父宽度的选项",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.17.0"
          },
          {
            "属性": "shape",
            "说明": "指定按钮的形状",
            "类型": "`circle` | `round` | `square` | `default`",
            "默认值": "-"
          },
          {
            "属性": "size",
            "说明": "设置按钮的大小",
            "类型": "`large` | `small` | `default`",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Skeleton - SkeletonInputProps",
        "property": [
          {
            "属性": "active",
            "说明": "是否展示动画效果",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "size",
            "说明": "设置输入框的大小",
            "类型": "`large` | `small` | `default`",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Select",
    "properties": [
      {
        "title": "Select - Select props",
        "property": [
          {
            "参数": "allowClear",
            "说明": "自定义清除按钮",
            "类型": "boolean | { clearIcon?: ReactNode }",
            "默认值": "false",
            "版本": "5.8.0: 支持对象类型"
          },
          {
            "参数": "autoClearSearchValue",
            "说明": "是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "autoFocus",
            "说明": "默认获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultActiveFirstOption",
            "说明": "是否默认高亮第一个选项",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "defaultOpen",
            "说明": "是否默认展开下拉菜单",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "defaultValue",
            "说明": "指定默认选中的条目",
            "类型": "string | string[] |<br />number | number[] | <br />LabeledValue | LabeledValue[]",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "popupClassName",
            "说明": "下拉菜单的 className 属性",
            "类型": "string",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "popupMatchSelectWidth",
            "说明": "下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动",
            "类型": "boolean | number",
            "默认值": "true",
            "版本": "5.5.0"
          },
          {
            "参数": "dropdownRender",
            "说明": "自定义下拉框内容",
            "类型": "(originNode: ReactNode) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "dropdownStyle",
            "说明": "下拉菜单的 style 属性",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "fieldNames",
            "说明": "自定义节点 label、value、options、groupLabel 的字段",
            "类型": "object",
            "默认值": "{ label: `label`, value: `value`, options: `options`, groupLabel: `label` }",
            "版本": "4.17.0（`groupLabel` 在 5.6.0 新增）"
          },
          {
            "参数": "filterOption",
            "说明": "是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false。[示例](#select-demo-search)",
            "类型": "boolean | function(inputValue, option)",
            "默认值": "true"
          },
          {
            "参数": "filterSort",
            "说明": "搜索时对筛选结果项的排序函数, 类似[Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)里的 compareFunction",
            "类型": "(optionA: Option, optionB: Option) => number",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "getPopupContainer",
            "说明": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)",
            "类型": "function(triggerNode)",
            "默认值": "() => document.body"
          },
          {
            "参数": "labelInValue",
            "说明": "是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 { value: string, label: ReactNode } 的格式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "listHeight",
            "说明": "设置弹窗滚动高度",
            "类型": "number",
            "默认值": "256"
          },
          {
            "参数": "loading",
            "说明": "加载中状态",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "maxCount",
            "说明": "指定可选中的最多 items 数量，仅在 `mode` 为 `multiple` 或 `tags` 时生效",
            "类型": "number",
            "默认值": "-",
            "版本": "5.13.0"
          },
          {
            "参数": "maxTagCount",
            "说明": "最多显示多少个 tag，响应式模式会对性能产生损耗",
            "类型": "number | `responsive`",
            "默认值": "-",
            "版本": "responsive: 4.10"
          },
          {
            "参数": "maxTagPlaceholder",
            "说明": "隐藏 tag 时显示的内容",
            "类型": "ReactNode | function(omittedValues)",
            "默认值": "-"
          },
          {
            "参数": "maxTagTextLength",
            "说明": "最大显示的 tag 文本长度",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "menuItemSelectedIcon",
            "说明": "自定义多选时当前选中的条目图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "mode",
            "说明": "设置 Select 的模式为多选或标签",
            "类型": "`multiple` | `tags`",
            "默认值": "-"
          },
          {
            "参数": "notFoundContent",
            "说明": "当下拉列表为空时显示的内容",
            "类型": "ReactNode",
            "默认值": "`Not Found`"
          },
          {
            "参数": "open",
            "说明": "是否展开下拉菜单",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "optionFilterProp",
            "说明": "搜索时过滤对应的 `option` 属性，如设置为 `children` 表示对内嵌内容进行搜索。若通过 `options` 属性配置选项内容，建议设置 `optionFilterProp=\"label\"` 来对内容进行搜索。",
            "类型": "string",
            "默认值": "`value`"
          },
          {
            "参数": "optionLabelProp",
            "说明": "回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。[示例](https://codesandbox.io/s/antd-reproduction-template-tk678)",
            "类型": "string",
            "默认值": "`children`"
          },
          {
            "参数": "options",
            "说明": "数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能",
            "类型": "{ label, value }[]",
            "默认值": "-"
          },
          {
            "参数": "optionRender",
            "说明": "自定义渲染下拉选项",
            "类型": "(option: FlattenOptionData<BaseOptionType> , info: { index: number }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.11.0"
          },
          {
            "参数": "placeholder",
            "说明": "选择框默认文本",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "placement",
            "说明": "选择框弹出的位置",
            "类型": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
            "默认值": "bottomLeft"
          },
          {
            "参数": "removeIcon",
            "说明": "自定义的多选框清除图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "searchValue",
            "说明": "控制搜索文本",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "showSearch",
            "说明": "配置是否可搜索",
            "类型": "boolean",
            "默认值": "单选为 false，多选为 true"
          },
          {
            "参数": "size",
            "说明": "选择框大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "`middle`"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "suffixIcon",
            "说明": "自定义的选择框后缀图标。以防止图标被用于其他交互，替换的图标默认不会响应展开、收缩事件，可以通过添加 `pointer-events: none` 样式透传。",
            "类型": "ReactNode",
            "默认值": "`<DownOutlined />`"
          },
          {
            "参数": "tagRender",
            "说明": "自定义 tag 内容 render，仅在 `mode` 为 `multiple` 或 `tags` 时生效",
            "类型": "(props) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "tokenSeparators",
            "说明": "自动分词的分隔符，仅在 `mode=\"tags\"` 时生效",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "指定当前选中的条目，多选时为一个数组。（value 数组引用未变化时，Select 不会更新）",
            "类型": "string | string[] | <br />number | number[] | <br />LabeledValue | LabeledValue[]",
            "默认值": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "virtual",
            "说明": "设置 false 时关闭虚拟滚动",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.1.0"
          },
          {
            "参数": "onBlur",
            "说明": "失去焦点时回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "选中 option，或 input 的 value 变化时，调用此函数",
            "类型": "function(value, option:Option | Array<Option>)",
            "默认值": "-"
          },
          {
            "参数": "onClear",
            "说明": "清除内容时回调",
            "类型": "function",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "onDeselect",
            "说明": "取消选中时调用，参数为选中项的 value (或 key) 值，仅在 `multiple` 或 `tags` 模式下生效",
            "类型": "function(value: string | number | LabeledValue)",
            "默认值": "-"
          },
          {
            "参数": "onDropdownVisibleChange",
            "说明": "展开下拉菜单的回调",
            "类型": "function(open)",
            "默认值": "-"
          },
          {
            "参数": "onFocus",
            "说明": "获得焦点时回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onInputKeyDown",
            "说明": "按键按下时回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onMouseEnter",
            "说明": "鼠标移入时回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onMouseLeave",
            "说明": "鼠标移出时回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onPopupScroll",
            "说明": "下拉列表滚动时的回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onSearch",
            "说明": "文本框值变化时回调",
            "类型": "function(value: string)",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "被选中时调用，参数为选中项的 value (或 key) 值",
            "类型": "function(value: string | number | LabeledValue, option: Option)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Select - Select Methods",
        "property": [
          {
            "名称": "blur()",
            "说明": "取消焦点"
          },
          {
            "名称": "focus()",
            "说明": "获取焦点"
          }
        ]
      },
      {
        "title": "Select - Option props",
        "property": [
          {
            "参数": "className",
            "说明": "Option 器类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "title",
            "说明": "选项上的原生 title 提示",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "默认根据此属性值进行筛选",
            "类型": "string | number",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Select - OptGroup props",
        "property": [
          {
            "参数": "key",
            "说明": "Key",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "label",
            "说明": "组名",
            "类型": "string | React.Element",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Segmented",
    "properties": [
      {
        "title": "Segmented - Segmented",
        "property": [
          {
            "参数": "block",
            "说明": "将宽度调整为父元素宽度的选项",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultValue",
            "说明": "默认选中的值",
            "类型": "string | number"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onChange",
            "说明": "选项变化时的回调函数",
            "类型": "function(value: string | number)"
          },
          {
            "参数": "options",
            "说明": "数据化配置选项内容",
            "类型": "string[] | number[] | Array<{ label: ReactNode value: string icon? ReactNode disabled?: boolean className?: string }>",
            "默认值": "\\[]"
          },
          {
            "参数": "size",
            "说明": "控件尺寸",
            "类型": "`large` | `middle` | `small`",
            "默认值": "`middle`"
          },
          {
            "参数": "value",
            "说明": "当前选中的值",
            "类型": "string | number"
          }
        ]
      }
    ]
  },
  {
    "title": "Result",
    "properties": [
      {
        "title": "Result - API",
        "property": [
          {
            "参数": "extra",
            "说明": "操作区",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "icon",
            "说明": "自定义 icon",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "status",
            "说明": "结果的状态，决定图标和颜色",
            "类型": "`success` | `error` | `info` | `warning` | `404` | `403` | `500`",
            "默认值": "`info`"
          },
          {
            "参数": "subTitle",
            "说明": "subTitle 文字",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "title 文字",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Rate",
    "properties": [
      {
        "title": "Rate - API",
        "property": [
          {
            "属性": "allowClear",
            "说明": "是否允许再次点击后清除",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "属性": "allowHalf",
            "说明": "是否允许半选",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "character",
            "说明": "自定义字符",
            "类型": "ReactNode | (RateProps) => ReactNode",
            "默认值": "\\<StarFilled />",
            "版本": "function(): 4.4.0"
          },
          {
            "属性": "className",
            "说明": "自定义样式类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "属性": "count",
            "说明": "star 总数",
            "类型": "number",
            "默认值": "5"
          },
          {
            "属性": "defaultValue",
            "说明": "默认值",
            "类型": "number",
            "默认值": "0"
          },
          {
            "属性": "disabled",
            "说明": "只读，无法进行交互",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "style",
            "说明": "自定义样式对象",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "属性": "tooltips",
            "说明": "自定义每项的提示信息",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "属性": "value",
            "说明": "当前数，受控值",
            "类型": "number",
            "默认值": "-"
          },
          {
            "属性": "onBlur",
            "说明": "失去焦点时的回调",
            "类型": "function()",
            "默认值": "-"
          },
          {
            "属性": "onChange",
            "说明": "选择时的回调",
            "类型": "function(value: number)",
            "默认值": "-"
          },
          {
            "属性": "onFocus",
            "说明": "获取焦点时的回调",
            "类型": "function()",
            "默认值": "-"
          },
          {
            "属性": "onHoverChange",
            "说明": "鼠标经过时数值变化的回调",
            "类型": "function(value: number)",
            "默认值": "-"
          },
          {
            "属性": "onKeyDown",
            "说明": "按键回调",
            "类型": "function(event)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Rate - 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "Radio",
    "properties": [
      {
        "title": "Radio - Radio/Radio.Button",
        "property": [
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "checked",
            "说明": "指定当前是否选中",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultChecked",
            "说明": "初始是否选中",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "禁用 Radio",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "value",
            "说明": "根据 value 进行比较，判断是否选中",
            "类型": "any",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Radio - Radio.Group",
        "property": [
          {
            "参数": "buttonStyle",
            "说明": "RadioButton 的风格样式，目前有描边和填色两种风格",
            "类型": "`outline` | `solid`",
            "默认值": "`outline`"
          },
          {
            "参数": "defaultValue",
            "说明": "默认选中的值",
            "类型": "any",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "禁选所有子单选器",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "name",
            "说明": "RadioGroup 下所有 `input[type=\"radio\"]` 的 `name` 属性",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "options",
            "说明": "以配置形式设置子元素",
            "类型": "string[] | number[] | Array<{ label: ReactNode; value: string; disabled?: boolean; }>",
            "默认值": "-"
          },
          {
            "参数": "optionType",
            "说明": "用于设置 Radio `options` 类型",
            "类型": "`default` | `button`",
            "默认值": "`default`",
            "版本": "4.4.0"
          },
          {
            "参数": "size",
            "说明": "大小，只对按钮样式生效",
            "类型": "`large` | `middle` | `small`",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "用于设置当前选中的值",
            "类型": "any",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "选项变化时的回调函数",
            "类型": "function(e:Event)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Radio - Radio",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "Qr-code",
    "properties": [
      {
        "title": "Qr-code - API",
        "property": [
          {
            "参数": "value",
            "说明": "扫描后的文本",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "type",
            "说明": "渲染类型",
            "类型": "`canvas | svg `",
            "默认值": "`canvas`",
            "版本": "5.6.0"
          },
          {
            "参数": "icon",
            "说明": "二维码中图片的地址（目前只支持图片地址）",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "二维码大小",
            "类型": "number",
            "默认值": "160"
          },
          {
            "参数": "iconSize",
            "说明": "二维码中图片的大小",
            "类型": "number",
            "默认值": "40"
          },
          {
            "参数": "color",
            "说明": "二维码颜色",
            "类型": "string",
            "默认值": "`#000`"
          },
          {
            "参数": "bgColor",
            "说明": "二维码背景颜色",
            "类型": "string",
            "默认值": "`transparent`",
            "版本": "5.5.0"
          },
          {
            "参数": "bordered",
            "说明": "是否有边框",
            "类型": "boolean",
            "默认值": "`true`"
          },
          {
            "参数": "errorLevel",
            "说明": "二维码纠错等级",
            "类型": "`'L' | 'M' | 'Q' | 'H' `",
            "默认值": "`M`"
          },
          {
            "参数": "status",
            "说明": "二维码状态",
            "类型": "`active | expired | loading | scanned`",
            "默认值": "`active`",
            "版本": "scanned: 5.13.0"
          },
          {
            "参数": "onRefresh",
            "说明": "点击\"点击刷新\"的回调",
            "类型": "`() => void`",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Progress",
    "properties": [
      {
        "title": "Progress - API",
        "property": [
          {
            "属性": "format",
            "说明": "内容的模板函数",
            "类型": "function(percent, successPercent)",
            "默认值": "(percent) => percent + `%`",
            "版本": "-"
          },
          {
            "属性": "percent",
            "说明": "百分比",
            "类型": "number",
            "默认值": "0",
            "版本": "-"
          },
          {
            "属性": "showInfo",
            "说明": "是否显示进度数值或状态图标",
            "类型": "boolean",
            "默认值": "true",
            "版本": "-"
          },
          {
            "属性": "status",
            "说明": "状态，可选：`success` `exception` `normal` `active`(仅限 line)",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "属性": "strokeColor",
            "说明": "进度条的色彩",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "属性": "strokeLinecap",
            "说明": "进度条的样式",
            "类型": "`round` | `butt` | `square`，区别详见 [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap)",
            "默认值": "`round`",
            "版本": "-"
          },
          {
            "属性": "success",
            "说明": "成功进度条相关配置",
            "类型": "{ percent: number, strokeColor: string }",
            "默认值": "-",
            "版本": "-"
          },
          {
            "属性": "trailColor",
            "说明": "未完成的分段的颜色",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "属性": "type",
            "说明": "类型，可选 `line` `circle` `dashboard`",
            "类型": "string",
            "默认值": "`line`",
            "版本": "-"
          },
          {
            "属性": "size",
            "说明": "进度条的尺寸",
            "类型": "number | [number | string, number] | \"small\" | \"default\"",
            "默认值": "\"default\"",
            "版本": "v5.3.0"
          }
        ]
      },
      {
        "title": "Progress - `type=\"line\"`",
        "property": [
          {
            "属性": "steps",
            "说明": "进度条总共步数",
            "类型": "number",
            "默认值": "-",
            "版本": "-"
          },
          {
            "属性": "strokeColor",
            "说明": "进度条的色彩，传入 object 时为渐变。当有 `steps` 时支持传入一个数组。",
            "类型": "string | string[] | { from: string; to: string; direction: string }",
            "默认值": "-",
            "版本": "4.21.0: `string[]`"
          }
        ]
      },
      {
        "title": "Progress - `type=\"circle\"`",
        "property": [
          {
            "属性": "strokeColor",
            "说明": "圆形进度条线的色彩，传入 object 时为渐变",
            "类型": "string | { number%: string }",
            "默认值": "-",
            "版本": "-"
          },
          {
            "属性": "strokeWidth",
            "说明": "圆形进度条线的宽度，单位是进度条画布宽度的百分比",
            "类型": "number",
            "默认值": "6",
            "版本": "-"
          }
        ]
      },
      {
        "title": "Progress - `type=\"dashboard\"`",
        "property": [
          {
            "属性": "gapDegree",
            "说明": "仪表盘进度条缺口角度，可取值 0 ~ 295",
            "类型": "number",
            "默认值": "75",
            "版本": "-"
          },
          {
            "属性": "gapPosition",
            "说明": "仪表盘进度条缺口位置",
            "类型": "`top` | `bottom` | `left` | `right`",
            "默认值": "`bottom`",
            "版本": "-"
          },
          {
            "属性": "strokeWidth",
            "说明": "仪表盘进度条线的宽度，单位是进度条画布宽度的百分比",
            "类型": "number",
            "默认值": "6",
            "版本": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Popover",
    "properties": [
      {
        "title": "Popover - API",
        "property": [
          {
            "参数": "content",
            "说明": "卡片内容",
            "类型": "ReactNode | () => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "卡片标题",
            "类型": "ReactNode | () => ReactNode",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Popconfirm",
    "properties": [
      {
        "title": "Popconfirm - API",
        "property": [
          {
            "参数": "cancelButtonProps",
            "说明": "cancel 按钮 props",
            "类型": "-"
          },
          {
            "参数": "cancelText",
            "说明": "取消按钮文字",
            "类型": "string",
            "默认值": "`取消`"
          },
          {
            "参数": "disabled",
            "说明": "阻止点击 Popconfirm 子元素时弹出确认框",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "icon",
            "说明": "自定义弹出气泡 Icon 图标",
            "类型": "ReactNode",
            "默认值": "\\<ExclamationCircle />"
          },
          {
            "参数": "okButtonProps",
            "说明": "ok 按钮 props",
            "类型": "-"
          },
          {
            "参数": "okText",
            "说明": "确认按钮文字",
            "类型": "string",
            "默认值": "`确定`"
          },
          {
            "参数": "okType",
            "说明": "确认按钮类型",
            "类型": "string",
            "默认值": "`primary`"
          },
          {
            "参数": "showCancel",
            "说明": "是否显示取消按钮",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.18.0"
          },
          {
            "参数": "title",
            "说明": "确认框标题",
            "类型": "ReactNode | () => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "description",
            "说明": "确认内容的详细描述",
            "类型": "ReactNode | () => ReactNode",
            "默认值": "-",
            "版本": "5.1.0"
          },
          {
            "参数": "onCancel",
            "说明": "点击取消的回调",
            "类型": "function(e)",
            "默认值": "-"
          },
          {
            "参数": "onConfirm",
            "说明": "点击确认的回调",
            "类型": "function(e)",
            "默认值": "-"
          },
          {
            "参数": "onPopupClick",
            "说明": "弹出气泡点击事件",
            "类型": "function(e)",
            "默认值": "-",
            "版本": "5.5.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Pagination",
    "properties": [
      {
        "title": "Pagination - API",
        "property": [
          {
            "参数": "current",
            "说明": "当前页数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "defaultCurrent",
            "说明": "默认的当前页数",
            "类型": "number",
            "默认值": "1"
          },
          {
            "参数": "defaultPageSize",
            "说明": "默认的每页条数",
            "类型": "number",
            "默认值": "10"
          },
          {
            "参数": "disabled",
            "说明": "禁用分页",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "hideOnSinglePage",
            "说明": "只有一页时是否隐藏分页器",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "itemRender",
            "说明": "用于自定义页码的结构，可用于优化 SEO",
            "类型": "(page, type: 'page' | 'prev' | 'next', originalElement) => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "pageSize",
            "说明": "每页条数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "pageSizeOptions",
            "说明": "指定每页可以显示多少条",
            "类型": "string[] | number[]",
            "默认值": "\\[`10`, `20`, `50`, `100`]"
          },
          {
            "参数": "responsive",
            "说明": "当 size 未指定时，根据屏幕宽度自动调整尺寸",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "showLessItems",
            "说明": "是否显示较少页面内容",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "showQuickJumper",
            "说明": "是否可以快速跳转至某页",
            "类型": "boolean | { goButton: ReactNode }",
            "默认值": "false"
          },
          {
            "参数": "showSizeChanger",
            "说明": "是否展示 `pageSize` 切换器，当 `total` 大于 50 时默认为 true",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "showTitle",
            "说明": "是否显示原生 tooltip 页码提示",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "showTotal",
            "说明": "用于显示数据总量和当前数据顺序",
            "类型": "function(total, range)",
            "默认值": "-"
          },
          {
            "参数": "simple",
            "说明": "当添加该属性时，显示为简单分页",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "当为 `small` 时，是小尺寸分页",
            "类型": "`default` | `small`",
            "默认值": "`default`"
          },
          {
            "参数": "total",
            "说明": "数据总数",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "onChange",
            "说明": "页码或 `pageSize` 改变的回调，参数是改变后的页码及每页条数",
            "类型": "function(page, pageSize)",
            "默认值": "-"
          },
          {
            "参数": "onShowSizeChange",
            "说明": "pageSize 变化的回调",
            "类型": "function(current, size)",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Notification",
    "properties": [
      {
        "title": "Notification - API",
        "property": [
          {
            "参数": "btn",
            "说明": "自定义关闭按钮",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "className",
            "说明": "自定义 CSS class",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭图标",
            "类型": "boolean | ReactNode",
            "默认值": "true",
            "版本": "5.7.0：设置为 null 或 false 时隐藏关闭按钮"
          },
          {
            "参数": "description",
            "说明": "通知提醒内容，必选",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "duration",
            "说明": "默认 4.5 秒后自动关闭，配置为 null 则不自动关闭",
            "类型": "number",
            "默认值": "4.5",
            "版本": "-"
          },
          {
            "参数": "icon",
            "说明": "自定义图标",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "key",
            "说明": "当前通知唯一标志",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "message",
            "说明": "通知提醒标题，必选",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "placement",
            "说明": "弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`",
            "类型": "string",
            "默认值": "`topRight`",
            "版本": "-"
          },
          {
            "参数": "style",
            "说明": "自定义内联样式",
            "类型": "-",
            "默认值": "-"
          },
          {
            "参数": "role",
            "说明": "供屏幕阅读器识别的通知内容语义，默认为 `alert`。此情况下屏幕阅读器会立即打断当前正在阅读的其他内容，转而阅读通知内容",
            "类型": "`alert | status`",
            "默认值": "`alert`",
            "版本": "5.6.0"
          },
          {
            "参数": "onClick",
            "说明": "点击通知时触发的回调函数",
            "类型": "function",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "onClose",
            "说明": "当通知关闭时触发",
            "类型": "function",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "props",
            "说明": "透传至通知 `div` 上的 props 对象，支持传入 `data-*` `aria-*` 或 `role` 作为对象的属性。需要注意的是，虽然在 TypeScript 类型中声明的类型支持传入 `data-*` 作为对象的属性，但目前只允许传入 `data-testid` 作为对象的属性。 详见 <https://github.com/microsoft/TypeScript/issues/28960>",
            "类型": "Object",
            "默认值": "-",
            "版本": "-"
          }
        ]
      },
      {
        "title": "Notification - API",
        "property": [
          {
            "参数": "bottom",
            "说明": "消息从底部弹出时，距离底部的位置，单位像素",
            "类型": "number",
            "默认值": "24"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭图标",
            "类型": "boolean | ReactNode",
            "默认值": "true",
            "版本": "5.7.0：设置为 null 或 false 时隐藏关闭按钮"
          },
          {
            "参数": "getContainer",
            "说明": "配置渲染节点的输出位置",
            "类型": "() => HTMLNode",
            "默认值": "() => document.body"
          },
          {
            "参数": "placement",
            "说明": "弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`",
            "类型": "string",
            "默认值": "`topRight`"
          },
          {
            "参数": "rtl",
            "说明": "是否开启 RTL 模式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "stack",
            "说明": "堆叠模式，超过阈值时会将所有消息收起",
            "类型": "boolean | `{ threshold: number }`",
            "默认值": "`{ threshold: 3 }`",
            "版本": "5.10.0"
          },
          {
            "参数": "top",
            "说明": "消息从顶部弹出时，距离顶部的位置，单位像素",
            "类型": "number",
            "默认值": "24"
          },
          {
            "参数": "maxCount",
            "说明": "最大显示数，超过限制时，最早的消息会被自动关闭",
            "类型": "number",
            "默认值": "-",
            "版本": "4.17.0"
          }
        ]
      },
      {
        "title": "Notification - notification.config",
        "property": [
          {
            "参数": "bottom",
            "说明": "消息从底部弹出时，距离底部的位置，单位像素",
            "类型": "number",
            "默认值": "24"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭图标",
            "类型": "boolean | ReactNode",
            "默认值": "true",
            "版本": "5.7.0：设置为 null 或 false 时隐藏关闭按钮"
          },
          {
            "参数": "duration",
            "说明": "默认自动关闭延时，单位秒",
            "类型": "number",
            "默认值": "4.5"
          },
          {
            "参数": "getContainer",
            "说明": "配置渲染节点的输出位置，但依旧为全屏展示",
            "类型": "() => HTMLNode",
            "默认值": "() => document.body"
          },
          {
            "参数": "placement",
            "说明": "弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`",
            "类型": "string",
            "默认值": "`topRight`"
          },
          {
            "参数": "rtl",
            "说明": "是否开启 RTL 模式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "top",
            "说明": "消息从顶部弹出时，距离顶部的位置，单位像素",
            "类型": "number",
            "默认值": "24"
          },
          {
            "参数": "maxCount",
            "说明": "最大显示数，超过限制时，最早的消息会被自动关闭",
            "类型": "number",
            "默认值": "-",
            "版本": "4.17.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Modal",
    "properties": [
      {
        "title": "Modal - API",
        "property": [
          {
            "参数": "afterClose",
            "说明": "Modal 完全关闭后的回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "classNames",
            "说明": "配置弹窗内置模块的 className",
            "类型": "`header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;`",
            "默认值": "-"
          },
          {
            "参数": "styles",
            "说明": "配置弹窗内置模块的 style",
            "类型": "`header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties;`",
            "默认值": "-",
            "版本": "5.10.0"
          },
          {
            "参数": "cancelButtonProps",
            "说明": "cancel 按钮 props",
            "类型": "-"
          },
          {
            "参数": "cancelText",
            "说明": "取消按钮文字",
            "类型": "ReactNode",
            "默认值": "`取消`"
          },
          {
            "参数": "centered",
            "说明": "垂直居中展示 Modal",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮",
            "类型": "boolean | ReactNode",
            "默认值": "\\<CloseOutlined />"
          },
          {
            "参数": "confirmLoading",
            "说明": "确定按钮 loading",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "destroyOnClose",
            "说明": "关闭时销毁 Modal 里的子元素",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "focusTriggerAfterClose",
            "说明": "对话框关闭后是否需要聚焦触发元素",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.9.0"
          },
          {
            "参数": "footer",
            "说明": "底部内容，当不需要默认底部按钮时，可以设为 `footer={null}`",
            "类型": "(params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode",
            "默认值": "(确定取消按钮)",
            "版本": "5.9.0"
          },
          {
            "参数": "forceRender",
            "说明": "强制渲染 Modal",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "getContainer",
            "说明": "指定 Modal 挂载的节点，但依旧为全屏展示，`false` 为挂载在当前位置",
            "类型": "HTMLElement | () => HTMLElement | Selectors | false",
            "默认值": "document.body"
          },
          {
            "参数": "keyboard",
            "说明": "是否支持键盘 esc 关闭",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "mask",
            "说明": "是否展示遮罩",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "maskClosable",
            "说明": "点击蒙层是否允许关闭",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "modalRender",
            "说明": "自定义渲染对话框",
            "类型": "(node: ReactNode) => ReactNode",
            "默认值": "-",
            "版本": "4.7.0"
          },
          {
            "参数": "okButtonProps",
            "说明": "ok 按钮 props",
            "类型": "-"
          },
          {
            "参数": "okText",
            "说明": "确认按钮文字",
            "类型": "ReactNode",
            "默认值": "`确定`"
          },
          {
            "参数": "okType",
            "说明": "确认按钮类型",
            "类型": "string",
            "默认值": "`primary`"
          },
          {
            "参数": "style",
            "说明": "可用于设置浮层的样式，调整浮层位置等",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "open",
            "说明": "对话框是否可见",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "width",
            "说明": "宽度",
            "类型": "string | number",
            "默认值": "520"
          },
          {
            "参数": "wrapClassName",
            "说明": "对话框外层容器的类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "zIndex",
            "说明": "设置 Modal 的 `z-index`",
            "类型": "number",
            "默认值": "1000"
          },
          {
            "参数": "onCancel",
            "说明": "点击遮罩层或右上角叉或取消按钮的回调",
            "类型": "function(e)",
            "默认值": "-"
          },
          {
            "参数": "onOk",
            "说明": "点击确定回调",
            "类型": "function(e)",
            "默认值": "-"
          },
          {
            "参数": "afterOpenChange",
            "说明": "打开和关闭 Modal 时动画结束后的回调",
            "类型": "(open: boolean) => void",
            "默认值": "-",
            "版本": "5.4.0"
          }
        ]
      },
      {
        "title": "Modal - Modal.method()",
        "property": [
          {
            "参数": "afterClose",
            "说明": "Modal 完全关闭后的回调",
            "类型": "function",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "autoFocusButton",
            "说明": "指定自动获得焦点的按钮",
            "类型": "null | `ok` | `cancel`",
            "默认值": "`ok`"
          },
          {
            "参数": "cancelButtonProps",
            "说明": "cancel 按钮 props",
            "类型": "-"
          },
          {
            "参数": "cancelText",
            "说明": "设置 Modal.confirm 取消按钮文字",
            "类型": "string",
            "默认值": "`取消`"
          },
          {
            "参数": "centered",
            "说明": "垂直居中展示 Modal",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "className",
            "说明": "容器类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "closable",
            "说明": "是否显示右上角的关闭按钮",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.9.0"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭图标",
            "类型": "ReactNode",
            "默认值": "undefined",
            "版本": "4.9.0"
          },
          {
            "参数": "content",
            "说明": "内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "footer",
            "说明": "底部内容，当不需要默认底部按钮时，可以设为 `footer: null`",
            "类型": "(params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode",
            "默认值": "-",
            "版本": "5.9.0"
          },
          {
            "参数": "getContainer",
            "说明": "指定 Modal 挂载的 HTML 节点，false 为挂载在当前 dom",
            "类型": "HTMLElement | () => HTMLElement | Selectors | false",
            "默认值": "document.body"
          },
          {
            "参数": "icon",
            "说明": "自定义图标",
            "类型": "ReactNode",
            "默认值": "\\<ExclamationCircleFilled />"
          },
          {
            "参数": "keyboard",
            "说明": "是否支持键盘 esc 关闭",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "mask",
            "说明": "是否展示遮罩",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "maskClosable",
            "说明": "点击蒙层是否允许关闭",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "okButtonProps",
            "说明": "ok 按钮 props",
            "类型": "-"
          },
          {
            "参数": "okText",
            "说明": "确认按钮文字",
            "类型": "string",
            "默认值": "`确定`"
          },
          {
            "参数": "okType",
            "说明": "确认按钮类型",
            "类型": "string",
            "默认值": "`primary`"
          },
          {
            "参数": "style",
            "说明": "可用于设置浮层的样式，调整浮层位置等",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "width",
            "说明": "宽度",
            "类型": "string | number",
            "默认值": "416"
          },
          {
            "参数": "wrapClassName",
            "说明": "对话框外层容器的类名",
            "类型": "string",
            "默认值": "-",
            "版本": "4.18.0"
          },
          {
            "参数": "zIndex",
            "说明": "设置 Modal 的 `z-index`",
            "类型": "number",
            "默认值": "1000"
          },
          {
            "参数": "onCancel",
            "说明": "取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭",
            "类型": "function(close)",
            "默认值": "-"
          },
          {
            "参数": "onOk",
            "说明": "点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭",
            "类型": "function(close)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Modal - footerRenderParams",
        "property": [
          {
            "参数": "originNode",
            "说明": "默认节点",
            "类型": "React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "extra",
            "说明": "扩展选项",
            "类型": "{ OkBtn: FC; CancelBtn: FC }",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Message",
    "properties": [
      {
        "title": "Message - API",
        "property": [
          {
            "参数": "content",
            "说明": "提示内容",
            "类型": "ReactNode | config",
            "默认值": "-"
          },
          {
            "参数": "duration",
            "说明": "自动关闭的延时，单位秒。设为 0 时不自动关闭",
            "类型": "number",
            "默认值": "3"
          },
          {
            "参数": "onClose",
            "说明": "关闭时触发的回调函数",
            "类型": "function",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Message - API",
        "property": [
          {
            "参数": "className",
            "说明": "自定义 CSS class",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "content",
            "说明": "提示内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "duration",
            "说明": "自动关闭的延时，单位秒。设为 0 时不自动关闭",
            "类型": "number",
            "默认值": "3"
          },
          {
            "参数": "icon",
            "说明": "自定义图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "key",
            "说明": "当前提示的唯一标志",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "style",
            "说明": "自定义内联样式",
            "类型": "-"
          },
          {
            "参数": "onClick",
            "说明": "点击 message 时触发的回调函数",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "onClose",
            "说明": "关闭时触发的回调函数",
            "类型": "function",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Message - message.config",
        "property": [
          {
            "参数": "duration",
            "说明": "默认自动关闭延时，单位秒",
            "类型": "number",
            "默认值": "3"
          },
          {
            "参数": "getContainer",
            "说明": "配置渲染节点的输出位置，但依旧为全屏展示",
            "类型": "() => HTMLElement",
            "默认值": "() => document.body"
          },
          {
            "参数": "maxCount",
            "说明": "最大显示数，超过限制时，最早的消息会被自动关闭",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "prefixCls",
            "说明": "消息节点的 className 前缀",
            "类型": "string",
            "默认值": "`ant-message`",
            "版本": "4.5.0"
          },
          {
            "参数": "rtl",
            "说明": "是否开启 RTL 模式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "top",
            "说明": "消息距离顶部的位置",
            "类型": "number",
            "默认值": "8"
          }
        ]
      }
    ]
  },
  {
    "title": "Menu",
    "properties": [
      {
        "title": "Menu - Menu",
        "property": [
          {
            "参数": "defaultOpenKeys",
            "说明": "初始展开的 SubMenu 菜单项 key 数组",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "defaultSelectedKeys",
            "说明": "初始选中的菜单项 key 数组",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "expandIcon",
            "说明": "自定义展开图标",
            "类型": "ReactNode | `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode`",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "forceSubMenuRender",
            "说明": "在子菜单展示之前就渲染进 DOM",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "inlineCollapsed",
            "说明": "inline 时菜单是否收起状态",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "inlineIndent",
            "说明": "inline 模式的菜单缩进宽度",
            "类型": "number",
            "默认值": "24"
          },
          {
            "参数": "items",
            "说明": "菜单内容",
            "类型": "-",
            "默认值": "4.20.0"
          },
          {
            "参数": "mode",
            "说明": "菜单类型，现在支持垂直、水平、和内嵌模式三种",
            "类型": "`vertical` | `horizontal` | `inline`",
            "默认值": "`vertical`"
          },
          {
            "参数": "multiple",
            "说明": "是否允许多选",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "openKeys",
            "说明": "当前展开的 SubMenu 菜单项 key 数组",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "overflowedIndicator",
            "说明": "用于自定义 Menu 水平空间不足时的省略收缩的图标",
            "类型": "ReactNode",
            "默认值": "`<EllipsisOutlined />`"
          },
          {
            "参数": "selectable",
            "说明": "是否允许选中",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "selectedKeys",
            "说明": "当前选中的菜单项 key 数组",
            "类型": "string[]",
            "默认值": "-"
          },
          {
            "参数": "style",
            "说明": "根节点样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "subMenuCloseDelay",
            "说明": "用户鼠标离开子菜单后关闭延时，单位：秒",
            "类型": "number",
            "默认值": "0.1"
          },
          {
            "参数": "subMenuOpenDelay",
            "说明": "用户鼠标进入子菜单后开启延时，单位：秒",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "theme",
            "说明": "主题颜色",
            "类型": "`light` | `dark`",
            "默认值": "`light`"
          },
          {
            "参数": "triggerSubMenuAction",
            "说明": "SubMenu 展开/关闭的触发行为",
            "类型": "`hover` | `click`",
            "默认值": "`hover`"
          },
          {
            "参数": "onClick",
            "说明": "点击 MenuItem 调用此函数",
            "类型": "function({ item, key, keyPath, domEvent })",
            "默认值": "-"
          },
          {
            "参数": "onDeselect",
            "说明": "取消选中时调用，仅在 multiple 生效",
            "类型": "function({ item, key, keyPath, selectedKeys, domEvent })",
            "默认值": "-"
          },
          {
            "参数": "onOpenChange",
            "说明": "SubMenu 展开/关闭的回调",
            "类型": "function(openKeys: string[])",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "被选中时调用",
            "类型": "function({ item, key, keyPath, selectedKeys, domEvent })",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Menu - MenuItemType",
        "property": [
          {
            "参数": "danger",
            "说明": "展示错误状态样式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "icon",
            "说明": "菜单图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "key",
            "说明": "item 的唯一标志",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "label",
            "说明": "菜单项标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "设置收缩时展示的悬浮标题",
            "类型": "string",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Menu - SubMenuType",
        "property": [
          {
            "参数": "children",
            "说明": "子菜单的菜单项",
            "类型": "-"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "icon",
            "说明": "菜单图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "key",
            "说明": "唯一标志",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "label",
            "说明": "菜单项标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "popupClassName",
            "说明": "子菜单样式，`mode=\"inline\"` 时无效",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "popupOffset",
            "说明": "子菜单偏移量，`mode=\"inline\"` 时无效",
            "类型": "\\[number, number]",
            "默认值": "-"
          },
          {
            "参数": "onTitleClick",
            "说明": "点击子菜单标题",
            "类型": "function({ key, domEvent })",
            "默认值": "-"
          },
          {
            "参数": "theme",
            "说明": "设置子菜单的主题，默认从 Menu 上继承",
            "类型": "`light` | `dark`",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Menu - MenuItemGroupType",
        "property": [
          {
            "参数": "children",
            "说明": "分组的菜单项",
            "类型": "-"
          },
          {
            "参数": "label",
            "说明": "分组标题",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Menu - MenuDividerType",
        "property": [
          {
            "参数": "dashed",
            "说明": "是否虚线",
            "类型": "boolean",
            "默认值": "false"
          }
        ]
      }
    ]
  },
  {
    "title": "Mentions",
    "properties": [
      {
        "title": "Mentions - Mentions",
        "property": [
          {
            "参数": "allowClear",
            "说明": "支持清除",
            "类型": "boolean | { clearIcon?: ReactNode }",
            "默认值": "false",
            "版本": "5.13.0"
          },
          {
            "参数": "autoFocus",
            "说明": "自动获得焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "autoSize",
            "说明": "自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 }",
            "类型": "boolean | object",
            "默认值": "false"
          },
          {
            "参数": "defaultValue",
            "说明": "默认值",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "filterOption",
            "说明": "自定义过滤逻辑",
            "类型": "false | (input: string, option: OptionProps) => boolean",
            "默认值": "-"
          },
          {
            "参数": "getPopupContainer",
            "说明": "指定建议框挂载的 HTML 节点",
            "类型": "() => HTMLElement",
            "默认值": "-"
          },
          {
            "参数": "notFoundContent",
            "说明": "当下拉列表为空时显示的内容",
            "类型": "ReactNode",
            "默认值": "`Not Found`"
          },
          {
            "参数": "placement",
            "说明": "弹出层展示位置",
            "类型": "`top` | `bottom`",
            "默认值": "`bottom`"
          },
          {
            "参数": "prefix",
            "说明": "设置触发关键字",
            "类型": "string | string[]",
            "默认值": "`@`"
          },
          {
            "参数": "split",
            "说明": "设置选中项前后分隔符",
            "类型": "string",
            "默认值": "` `"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "validateSearch",
            "说明": "自定义触发验证逻辑",
            "类型": "(text: string, props: MentionsProps) => void",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "设置值",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "onBlur",
            "说明": "失去焦点时触发",
            "类型": "() => void",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "值改变时触发",
            "类型": "(text: string) => void",
            "默认值": "-"
          },
          {
            "参数": "onFocus",
            "说明": "获得焦点时触发",
            "类型": "() => void",
            "默认值": "-"
          },
          {
            "参数": "onResize",
            "说明": "resize 回调",
            "类型": "function({ width, height })",
            "默认值": "-"
          },
          {
            "参数": "onSearch",
            "说明": "搜索时触发",
            "类型": "(text: string, prefix: string) => void",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "选择选项时触发",
            "类型": "(option: OptionProps, prefix: string) => void",
            "默认值": "-"
          },
          {
            "参数": "options",
            "说明": "选项配置",
            "类型": "\\[]",
            "默认值": "5.1.0"
          }
        ]
      },
      {
        "title": "Mentions - Mentions 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      },
      {
        "title": "Mentions - Option",
        "property": [
          {
            "参数": "value",
            "说明": "选择时填充的值",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "label",
            "说明": "选项的标题",
            "类型": "React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "key",
            "说明": "选项的 key 值",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "是否可选",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "className",
            "说明": "css 类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "style",
            "说明": "选项样式",
            "类型": "React.CSSProperties",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "List",
    "properties": [
      {
        "title": "List - List",
        "property": [
          {
            "参数": "bordered",
            "说明": "是否展示边框",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "dataSource",
            "说明": "列表数据源",
            "类型": "any[]",
            "默认值": "-"
          },
          {
            "参数": "footer",
            "说明": "列表底部",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "grid",
            "说明": "列表栅格配置",
            "类型": "-"
          },
          {
            "参数": "header",
            "说明": "列表头部",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "itemLayout",
            "说明": "设置 `List.Item` 布局，设置成 `vertical` 则竖直样式显示，默认横排",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "loading",
            "说明": "当卡片内容还在加载中时，可以用 `loading` 展示一个占位",
            "类型": "boolean | [object](/components/spin-cn#api) ([更多](https://github.com/ant-design/ant-design/issues/8659))",
            "默认值": "false"
          },
          {
            "参数": "loadMore",
            "说明": "加载更多",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "locale",
            "说明": "默认文案设置，目前包括空数据文案",
            "类型": "object",
            "默认值": "{emptyText: `暂无数据`}"
          },
          {
            "参数": "pagination",
            "说明": "对应的 `pagination` 配置，设置 false 不显示",
            "类型": "boolean | object",
            "默认值": "false"
          },
          {
            "参数": "renderItem",
            "说明": "当使用 dataSource 时，可以用 `renderItem` 自定义渲染列表项",
            "类型": "(item) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "rowKey",
            "说明": "当 `renderItem` 自定义渲染列表项有效时，自定义每一行的 `key` 的获取方式",
            "类型": "`keyof` T | (item: T) => `React.Key`",
            "默认值": "`\"key\"`"
          },
          {
            "参数": "size",
            "说明": "list 的尺寸",
            "类型": "`default` | `large` | `small`",
            "默认值": "`default`"
          },
          {
            "参数": "split",
            "说明": "是否展示分割线",
            "类型": "boolean",
            "默认值": "true"
          }
        ]
      },
      {
        "title": "List - pagination",
        "property": [
          {
            "参数": "position",
            "说明": "指定分页显示的位置",
            "类型": "`top` | `bottom` | `both`",
            "默认值": "`bottom`"
          },
          {
            "参数": "align",
            "说明": "指定分页对齐的位置",
            "类型": "`start` | `center` | `end`",
            "默认值": "`end`"
          }
        ]
      },
      {
        "title": "List - List grid props",
        "property": [
          {
            "参数": "column",
            "说明": "列数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "gutter",
            "说明": "栅格间隔",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "xs",
            "说明": "`<576px` 展示的列数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "sm",
            "说明": "`≥576px` 展示的列数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "md",
            "说明": "`≥768px` 展示的列数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "lg",
            "说明": "`≥992px` 展示的列数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "xl",
            "说明": "`≥1200px` 展示的列数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "xxl",
            "说明": "`≥1600px` 展示的列数",
            "类型": "number",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "List - List.Item",
        "property": [
          {
            "参数": "actions",
            "说明": "列表操作组，根据 `itemLayout` 的不同，位置在卡片底部或者最右侧",
            "类型": "Array<ReactNode>",
            "默认值": "-"
          },
          {
            "参数": "extra",
            "说明": "额外内容，通常用在 `itemLayout` 为 `vertical` 的情况下，展示右侧内容; `horizontal` 展示在列表元素最右侧",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "List - List.Item.Meta",
        "property": [
          {
            "参数": "avatar",
            "说明": "列表元素的图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "description",
            "说明": "列表元素的描述内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "列表元素的标题",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Layout",
    "properties": [
      {
        "title": "Layout - Layout",
        "property": [
          {
            "参数": "className",
            "说明": "容器 className",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "hasSider",
            "说明": "表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "style",
            "说明": "指定样式",
            "类型": "CSSProperties",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Layout - Layout.Sider",
        "property": [
          {
            "参数": "breakpoint",
            "说明": "触发响应式布局的[断点](/components/grid-cn#col)",
            "类型": "`xs` | `sm` | `md` | `lg` | `xl` | `xxl`",
            "默认值": "-"
          },
          {
            "参数": "className",
            "说明": "容器 className",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "collapsed",
            "说明": "当前收起状态",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "collapsedWidth",
            "说明": "收缩宽度，设置为 0 会出现特殊 trigger",
            "类型": "number",
            "默认值": "80"
          },
          {
            "参数": "collapsible",
            "说明": "是否可收起",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultCollapsed",
            "说明": "是否默认收起",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "reverseArrow",
            "说明": "翻转折叠提示箭头的方向，当 Sider 在右边时可以使用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "style",
            "说明": "指定样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "theme",
            "说明": "主题颜色",
            "类型": "`light` | `dark`",
            "默认值": "`dark`"
          },
          {
            "参数": "trigger",
            "说明": "自定义 trigger，设置为 null 时隐藏 trigger",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "width",
            "说明": "宽度",
            "类型": "number | string",
            "默认值": "200"
          },
          {
            "参数": "zeroWidthTriggerStyle",
            "说明": "指定当 `collapsedWidth` 为 0 时出现的特殊 trigger 的样式",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "onBreakpoint",
            "说明": "触发响应式布局[断点](/components/grid-cn#api)时的回调",
            "类型": "(broken) => {}",
            "默认值": "-"
          },
          {
            "参数": "onCollapse",
            "说明": "展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发",
            "类型": "(collapsed, type) => {}",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Input-number",
    "properties": [
      {
        "title": "Input-number - API",
        "property": [
          {
            "参数": "addonAfter",
            "说明": "带标签的 input，设置后置标签",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "addonBefore",
            "说明": "带标签的 input，设置前置标签",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false",
            "版本": "-"
          },
          {
            "参数": "changeOnBlur",
            "说明": "是否在失去焦点时，触发 `onChange` 事件（例如值超出范围时，重新限制回范围并触发事件）",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.11.0"
          },
          {
            "参数": "controls",
            "说明": "是否显示增减按钮，也可设置自定义箭头图标",
            "类型": "boolean | { upIcon?: React.ReactNode; downIcon?: React.ReactNode; }",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "decimalSeparator",
            "说明": "小数点",
            "类型": "string",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "placeholder",
            "说明": "占位符",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "defaultValue",
            "说明": "初始值",
            "类型": "number",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "disabled",
            "说明": "禁用",
            "类型": "boolean",
            "默认值": "false",
            "版本": "-"
          },
          {
            "参数": "formatter",
            "说明": "指定输入框展示值的格式",
            "类型": "function(value: number | string, info: { userTyping: boolean, input: string }): string",
            "默认值": "-",
            "版本": "info: 4.17.0"
          },
          {
            "参数": "keyboard",
            "说明": "是否启用键盘快捷行为",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.12.0"
          },
          {
            "参数": "max",
            "说明": "最大值",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "min",
            "说明": "最小值",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "parser",
            "说明": "指定从 `formatter` 里转换回数字的方式，和 `formatter` 搭配使用",
            "类型": "function(string): number",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "precision",
            "说明": "数值精度，配置 `formatter` 时会以 `formatter` 为准",
            "类型": "number",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "readOnly",
            "说明": "只读",
            "类型": "boolean",
            "默认值": "false",
            "版本": "-"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "prefix",
            "说明": "带有前缀图标的 input",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "size",
            "说明": "输入框大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "step",
            "说明": "每次改变步数，可以为小数",
            "类型": "number | string",
            "默认值": "1",
            "版本": "-"
          },
          {
            "参数": "stringMode",
            "说明": "字符值模式，开启后支持高精度小数。同时 `onChange` 将返回 string 类型",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.13.0"
          },
          {
            "参数": "value",
            "说明": "当前值",
            "类型": "number",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "onChange",
            "说明": "变化回调",
            "类型": "function(value: number | string | null)",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "onPressEnter",
            "说明": "按下回车的回调",
            "类型": "function(e)",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "onStep",
            "说明": "点击上下箭头的回调",
            "类型": "(value: number, info: { offset: number, type: 'up' | 'down' }) => void",
            "默认值": "-",
            "版本": "4.7.0"
          }
        ]
      },
      {
        "title": "Input-number - 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "Input",
    "properties": [
      {
        "title": "Input - Input",
        "property": [
          {
            "参数": "addonAfter",
            "说明": "带标签的 input，设置后置标签",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "addonBefore",
            "说明": "带标签的 input，设置前置标签",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "allowClear",
            "说明": "可以点击清除图标删除内容",
            "类型": "boolean | { clearIcon: ReactNode }",
            "默认值": "-"
          },
          {
            "参数": "classNames",
            "说明": "语义化结构 class",
            "类型": "Record<[SemanticDOM](#input-1), string>",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "count",
            "说明": "字符计数配置",
            "类型": "-",
            "默认值": "5.10.0"
          },
          {
            "参数": "defaultValue",
            "说明": "输入框默认内容",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用状态，默认为 false",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "id",
            "说明": "输入框的 id",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "maxLength",
            "说明": "最大长度",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "prefix",
            "说明": "带有前缀图标的 input",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "showCount",
            "说明": "是否展示字数",
            "类型": "boolean | { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode }",
            "默认值": "false",
            "版本": "4.18.0 info.value: 4.23.0"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "styles",
            "说明": "语义化结构 style",
            "类型": "Record<[SemanticDOM](#input-1), CSSProperties>",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "size",
            "说明": "控件大小。注：标准表单内的输入框大小限制为 `middle`",
            "类型": "`large` | `middle` | `small`",
            "默认值": "-"
          },
          {
            "参数": "suffix",
            "说明": "带有后缀图标的 input",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "type",
            "说明": "声明 input 类型，同原生 input 标签的 type 属性，见：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#属性)(请直接使用 `Input.TextArea` 代替 `type=\"textarea\"`)",
            "类型": "string",
            "默认值": "`text`"
          },
          {
            "参数": "value",
            "说明": "输入框内容",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "onChange",
            "说明": "输入框内容变化时的回调",
            "类型": "function(e)",
            "默认值": "-"
          },
          {
            "参数": "onPressEnter",
            "说明": "按下回车的回调",
            "类型": "function(e)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Input - Input.TextArea",
        "property": [
          {
            "参数": "autoSize",
            "说明": "自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 }",
            "类型": "boolean | object",
            "默认值": "false"
          },
          {
            "参数": "classNames",
            "说明": "语义化结构 class",
            "类型": "Record<[SemanticDOM](#inputtextarea-1), string>",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "styles",
            "说明": "语义化结构 style",
            "类型": "Record<[SemanticDOM](#inputtextarea-1), CSSProperties>",
            "默认值": "-",
            "版本": "5.4.0"
          }
        ]
      },
      {
        "title": "Input - Input.Search",
        "property": [
          {
            "参数": "enterButton",
            "说明": "是否有确认按钮，可设为按钮文字。该属性会与 `addonAfter` 冲突。",
            "类型": "boolean | ReactNode",
            "默认值": "false"
          },
          {
            "参数": "loading",
            "说明": "搜索 loading",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onSearch",
            "说明": "点击搜索图标、清除图标，或按下回车键时的回调",
            "类型": "function(value, event, { source: \"input\" | \"clear\" })",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Input - Input.Password",
        "property": [
          {
            "参数": "iconRender",
            "说明": "自定义切换按钮",
            "类型": "(visible) => ReactNode",
            "默认值": "(visible) => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)",
            "版本": "4.3.0"
          },
          {
            "参数": "visibilityToggle",
            "说明": "是否显示切换按钮或者控制密码显隐",
            "类型": "boolean | [VisibilityToggle](#visibilitytoggle)",
            "默认值": "true"
          }
        ]
      },
      {
        "title": "Input - VisibilityToggle",
        "property": [
          {
            "Property": "visible",
            "Description": "用于手动控制密码显隐",
            "Type": "boolean",
            "Default": "false",
            "Version": "4.24"
          },
          {
            "Property": "onVisibleChange",
            "Description": "显隐密码的回调",
            "Type": "(visible) => void",
            "Default": "-",
            "Version": "4.24"
          }
        ]
      },
      {
        "title": "Input - Input Methods",
        "property": [
          {
            "名称": "blur",
            "说明": "取消焦点",
            "参数": "-"
          },
          {
            "名称": "focus",
            "说明": "获取焦点",
            "参数": "(option?: { preventScroll?: boolean, cursor?: 'start' | 'end' | 'all' })",
            "版本": "option - 4.10.0"
          }
        ]
      },
      {
        "title": "Input - Input",
        "property": [
          {
            "名称": "input",
            "说明": "`input` 元素",
            "版本": "5.4.0"
          },
          {
            "名称": "prefix",
            "说明": "所有前缀的包裹元素",
            "版本": "5.4.0"
          },
          {
            "名称": "suffix",
            "说明": "所有后缀的包裹元素",
            "版本": "5.4.0"
          },
          {
            "名称": "count",
            "说明": "文字计数元素",
            "版本": "5.4.0"
          }
        ]
      },
      {
        "title": "Input - Input.TextArea",
        "property": [
          {
            "名称": "textarea",
            "说明": "`textarea` 元素",
            "版本": "5.4.0"
          },
          {
            "名称": "count",
            "说明": "文字计数元素",
            "版本": "5.4.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Image",
    "properties": [
      {
        "title": "Image - Image",
        "property": [
          {
            "参数": "alt",
            "说明": "图像描述",
            "类型": "string",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "fallback",
            "说明": "加载失败容错地址",
            "类型": "string",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "height",
            "说明": "图像高度",
            "类型": "string | number",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "placeholder",
            "说明": "加载占位，为 `true` 时使用默认占位",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "preview",
            "说明": "预览参数，为 `false` 时禁用",
            "类型": "boolean | [PreviewType](#previewtype)",
            "默认值": "true",
            "版本": "4.6.0 [PreviewType](#previewyype):4.7.0"
          },
          {
            "参数": "src",
            "说明": "图片地址",
            "类型": "string",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "width",
            "说明": "图像宽度",
            "类型": "string | number",
            "默认值": "-",
            "版本": "4.6.0"
          },
          {
            "参数": "onError",
            "说明": "加载错误回调",
            "类型": "(event: Event) => void",
            "默认值": "-",
            "版本": "4.12.0"
          }
        ]
      },
      {
        "title": "Image - PreviewType",
        "property": [
          {
            "参数": "visible",
            "说明": "是否显示",
            "类型": "boolean",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "src",
            "说明": "自定义预览 src",
            "类型": "string",
            "默认值": "-",
            "版本": "4.10.0"
          },
          {
            "参数": "getContainer",
            "说明": "指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置",
            "类型": "string | HTMLElement | (() => HTMLElement) | false",
            "默认值": "-",
            "版本": "4.8.0"
          },
          {
            "参数": "movable",
            "说明": "是否可移动",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.8.0"
          },
          {
            "参数": "mask",
            "说明": "缩略图遮罩",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "maskClassName",
            "说明": "缩略图遮罩类名",
            "类型": "string",
            "默认值": "-",
            "版本": "4.11.0"
          },
          {
            "参数": "rootClassName",
            "说明": "预览图的根 DOM 类名",
            "类型": "string",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "scaleStep",
            "说明": "`1 + scaleStep` 为缩放放大的每步倍数",
            "类型": "number",
            "默认值": "0.5",
            "版本": "-"
          },
          {
            "参数": "minScale",
            "说明": "最小缩放倍数",
            "类型": "number",
            "默认值": "1",
            "版本": "5.7.0"
          },
          {
            "参数": "maxScale",
            "说明": "最大放大倍数",
            "类型": "number",
            "默认值": "50",
            "版本": "5.7.0"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭 Icon",
            "类型": "React.ReactNode",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "forceRender",
            "说明": "强制渲染预览图",
            "类型": "boolean",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "toolbarRender",
            "说明": "自定义工具栏",
            "类型": "(originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' | 'total'>) => React.ReactNode",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "imageRender",
            "说明": "自定义预览内容",
            "类型": "(originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype) }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "onTransform",
            "说明": "预览图 transform 变化的回调",
            "类型": "{ transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "onVisibleChange",
            "说明": "当 `visible` 发生改变时的回调",
            "类型": "(visible: boolean, prevVisible: boolean) => void",
            "默认值": "-",
            "版本": "-"
          }
        ]
      },
      {
        "title": "Image - PreviewGroup",
        "property": [
          {
            "参数": "preview",
            "说明": "预览参数，为 `false` 时禁用",
            "类型": "boolean | [PreviewGroupType](#previewgrouptype)",
            "默认值": "true",
            "版本": "4.6.0 [PreviewGroupType](#previewgrouptype):4.7.0"
          },
          {
            "参数": "items",
            "说明": "预览数组",
            "类型": "string[] | { src: string, crossOrigin: string, ... }[]",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "fallback",
            "说明": "加载失败容错地址",
            "类型": "string",
            "默认值": "-",
            "版本": "5.7.0"
          }
        ]
      },
      {
        "title": "Image - PreviewGroupType",
        "property": [
          {
            "参数": "visible",
            "说明": "是否显示",
            "类型": "boolean",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "getContainer",
            "说明": "指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置",
            "类型": "string | HTMLElement | (() => HTMLElement) | false",
            "默认值": "-",
            "版本": "4.8.0"
          },
          {
            "参数": "movable",
            "说明": "是否可移动",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.8.0"
          },
          {
            "参数": "current",
            "说明": "当前预览图的 index",
            "类型": "number",
            "默认值": "-",
            "版本": "4.12.0"
          },
          {
            "参数": "mask",
            "说明": "缩略图遮罩",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "maskClassName",
            "说明": "缩略图遮罩类名",
            "类型": "string",
            "默认值": "-",
            "版本": "4.11.0"
          },
          {
            "参数": "rootClassName",
            "说明": "预览图的根 DOM 类名",
            "类型": "string",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "scaleStep",
            "说明": "`1 + scaleStep` 为缩放放大的每步倍数",
            "类型": "number",
            "默认值": "0.5",
            "版本": "-"
          },
          {
            "参数": "minScale",
            "说明": "最小缩放倍数",
            "类型": "number",
            "默认值": "1",
            "版本": "5.7.0"
          },
          {
            "参数": "maxScale",
            "说明": "最大放大倍数",
            "类型": "number",
            "默认值": "50",
            "版本": "5.7.0"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭 Icon",
            "类型": "React.ReactNode",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "forceRender",
            "说明": "强制渲染预览图",
            "类型": "boolean",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "countRender",
            "说明": "自定义预览计数内容",
            "类型": "(current: number, total: number) => React.ReactNode",
            "默认值": "-",
            "版本": "4.20.0"
          },
          {
            "参数": "toolbarRender",
            "说明": "自定义工具栏",
            "类型": "(originalNode: React.ReactElement, info: [ToolbarRenderInfoType](#toolbarrenderinfotype)) => React.ReactNode",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "imageRender",
            "说明": "自定义预览内容",
            "类型": "(originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), current: number }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "onTransform",
            "说明": "预览图 transform 变化的回调",
            "类型": "{ transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "onChange",
            "说明": "切换预览图的回调",
            "类型": "(current: number, prevCurrent: number) => void",
            "默认值": "-",
            "版本": "5.3.0"
          },
          {
            "参数": "onVisibleChange",
            "说明": "当 `visible` 发生改变时的回调",
            "类型": "(visible: boolean, prevVisible: boolean, current: number) => void",
            "默认值": "-",
            "版本": "current 参数 5.3.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Icon",
    "properties": [
      {
        "title": "Icon - 通用图标",
        "property": [
          {
            "参数": "className",
            "说明": "设置图标的样式名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "rotate",
            "说明": "图标旋转角度（IE9 无效）",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "spin",
            "说明": "是否有旋转动画",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "style",
            "说明": "设置图标的样式，例如 `fontSize` 和 `color`",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "twoToneColor",
            "说明": "仅适用双色图标。设置双色图标的主要颜色",
            "类型": "string (十六进制颜色)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Icon - 自定义 Icon",
        "property": [
          {
            "参数": "component",
            "说明": "控制如何渲染图标，通常是一个渲染根标签为 `<svg>` 的 React 组件",
            "类型": "ComponentType<CustomIconComponentProps>",
            "默认值": "-"
          },
          {
            "参数": "rotate",
            "说明": "图标旋转角度（IE9 无效）",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "spin",
            "说明": "是否有旋转动画",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "style",
            "说明": "设置图标的样式，例如 `fontSize` 和 `color`",
            "类型": "CSSProperties",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Icon - 自定义 font 图标",
        "property": [
          {
            "参数": "extraCommonProps",
            "说明": "给所有的 `svg` 图标 `<Icon />` 组件设置额外的属性",
            "类型": "{ [key: string]: any }",
            "默认值": "{}"
          },
          {
            "参数": "scriptUrl",
            "说明": "string | string[]",
            "类型": "-"
          }
        ]
      },
      {
        "title": "Icon - 自定义 SVG 图标",
        "property": [
          {
            "字段": "className",
            "说明": "计算后的 `svg` 类名",
            "类型": "string",
            "只读值": "-"
          },
          {
            "字段": "fill",
            "说明": "`svg` 元素填充的颜色",
            "类型": "string",
            "只读值": "`currentColor`"
          },
          {
            "字段": "height",
            "说明": "`svg` 元素高度",
            "类型": "string | number",
            "只读值": "`1em`"
          },
          {
            "字段": "style",
            "说明": "计算后的 `svg` 元素样式",
            "类型": "CSSProperties",
            "只读值": "-"
          },
          {
            "字段": "width",
            "说明": "`svg` 元素宽度",
            "类型": "string | number",
            "只读值": "`1em`"
          }
        ]
      }
    ]
  },
  {
    "title": "Grid",
    "properties": [
      {
        "title": "Grid - Row",
        "property": [
          {
            "参数": "align",
            "说明": "垂直对齐方式",
            "类型": "`top` | `middle` | `bottom` | `stretch` | `{[key in 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl']: 'top' | 'middle' | 'bottom' | 'stretch'}`",
            "默认值": "`top`",
            "版本": "object: 4.24.0"
          },
          {
            "参数": "gutter",
            "说明": "栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 `[水平间距, 垂直间距]`",
            "类型": "number | object | array",
            "默认值": "0"
          },
          {
            "参数": "justify",
            "说明": "水平排列方式",
            "类型": "`start` | `end` | `center` | `space-around` | `space-between` | `space-evenly` | `{[key in 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl']: 'start' | 'end' | 'center' | 'space-around' | 'space-between' | 'space-evenly'}`",
            "默认值": "`start`",
            "版本": "object: 4.24.0"
          },
          {
            "参数": "wrap",
            "说明": "是否自动换行",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.8.0"
          }
        ]
      },
      {
        "title": "Grid - Col",
        "property": [
          {
            "参数": "flex",
            "说明": "flex 布局属性",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "offset",
            "说明": "栅格左侧的间隔格数，间隔内不可以有栅格",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "order",
            "说明": "栅格顺序",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "pull",
            "说明": "栅格向左移动格数",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "push",
            "说明": "栅格向右移动格数",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "span",
            "说明": "栅格占位格数，为 0 时相当于 `display: none`",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "xs",
            "说明": "`屏幕 < 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
            "类型": "number | object",
            "默认值": "-"
          },
          {
            "参数": "sm",
            "说明": "`屏幕 ≥ 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
            "类型": "number | object",
            "默认值": "-"
          },
          {
            "参数": "md",
            "说明": "`屏幕 ≥ 768px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
            "类型": "number | object",
            "默认值": "-"
          },
          {
            "参数": "lg",
            "说明": "`屏幕 ≥ 992px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
            "类型": "number | object",
            "默认值": "-"
          },
          {
            "参数": "xl",
            "说明": "`屏幕 ≥ 1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
            "类型": "number | object",
            "默认值": "-"
          },
          {
            "参数": "xxl",
            "说明": "`屏幕 ≥ 1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
            "类型": "number | object",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Form",
    "properties": [
      {
        "title": "Form - Form",
        "property": [
          {
            "参数": "colon",
            "说明": "配置 Form.Item 的 `colon` 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效)",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "disabled",
            "说明": "设置表单组件禁用，仅对 antd 组件有效",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.21.0"
          },
          {
            "参数": "component",
            "说明": "设置 Form 渲染元素，为 `false` 则不创建 DOM 节点",
            "类型": "ComponentType | false",
            "默认值": "form"
          },
          {
            "参数": "fields",
            "说明": "通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看[示例](#components-form-demo-global-state)",
            "类型": "-"
          },
          {
            "参数": "form",
            "说明": "经 `Form.useForm()` 创建的 form 控制实例，不提供时会自动创建",
            "类型": "-"
          },
          {
            "参数": "feedbackIcons",
            "说明": "当 `Form.Item` 有 `hasFeedback` 属性时可以自定义图标",
            "类型": "-",
            "默认值": "5.9.0"
          },
          {
            "参数": "initialValues",
            "说明": "表单默认值，只有初始化以及重置时生效",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "labelAlign",
            "说明": "label 标签的文本对齐方式",
            "类型": "`left` | `right`",
            "默认值": "`right`"
          },
          {
            "参数": "labelWrap",
            "说明": "label 标签的文本换行方式",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.18.0"
          },
          {
            "参数": "labelCol",
            "说明": "label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`",
            "类型": "-"
          },
          {
            "参数": "layout",
            "说明": "表单布局",
            "类型": "`horizontal` | `vertical` | `inline`",
            "默认值": "`horizontal`"
          },
          {
            "参数": "name",
            "说明": "表单名称，会作为表单字段 `id` 前缀使用",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "preserve",
            "说明": "当字段被删除时保留字段值。你可以通过 `getFieldsValue(true)` 来获取保留字段值",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.4.0"
          },
          {
            "参数": "requiredMark",
            "说明": "必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置",
            "类型": "boolean | `optional` | ((label: ReactNode, info: { required: boolean }) => ReactNode)",
            "默认值": "true",
            "版本": "`renderProps`: 5.9.0"
          },
          {
            "参数": "scrollToFirstError",
            "说明": "提交失败自动滚动到第一个错误字段",
            "类型": "boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)",
            "默认值": "false"
          },
          {
            "参数": "size",
            "说明": "设置字段组件的尺寸（仅限 antd 组件）",
            "类型": "`small` | `middle` | `large`",
            "默认值": "-"
          },
          {
            "参数": "validateMessages",
            "说明": "验证提示模板，说明[见下](#validatemessages)",
            "类型": "-"
          },
          {
            "参数": "validateTrigger",
            "说明": "统一设置字段触发验证的时机",
            "类型": "string | string[]",
            "默认值": "`onChange`",
            "版本": "4.3.0"
          },
          {
            "参数": "variant",
            "说明": "表单内控件变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "wrapperCol",
            "说明": "需要为输入控件设置布局样式时，使用该属性，用法同 labelCol",
            "类型": "-"
          },
          {
            "参数": "onFieldsChange",
            "说明": "字段更新时触发回调事件",
            "类型": "function(changedFields, allFields)",
            "默认值": "-"
          },
          {
            "参数": "onFinish",
            "说明": "提交表单且数据验证成功后回调事件",
            "类型": "function(values)",
            "默认值": "-"
          },
          {
            "参数": "onFinishFailed",
            "说明": "提交表单且数据验证失败后回调事件",
            "类型": "function({ values, errorFields, outOfDate })",
            "默认值": "-"
          },
          {
            "参数": "onValuesChange",
            "说明": "字段值更新时触发回调事件",
            "类型": "function(changedValues, allValues)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Form - Form.Item",
        "property": [
          {
            "参数": "colon",
            "说明": "配合 `label` 属性使用，表示是否显示 `label` 后面的冒号",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "dependencies",
            "说明": "设置依赖字段，说明[见下](#dependencies)",
            "类型": "-"
          },
          {
            "参数": "extra",
            "说明": "额外的提示信息，和 `help` 类似，当需要错误信息和提示文案同时出现时，可以使用这个。",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "getValueFromEvent",
            "说明": "设置如何将 event 的值转换成字段值",
            "类型": "(..args: any[]) => any",
            "默认值": "-"
          },
          {
            "参数": "getValueProps",
            "说明": "为子元素添加额外的属性 (不建议通过 `getValueProps` 生成动态函数 prop，请直接将其传递给子组件)",
            "类型": "(value: any) => Record<string, any>",
            "默认值": "-",
            "版本": "4.2.0"
          },
          {
            "参数": "hasFeedback",
            "说明": "配合 `validateStatus` 属性使用，展示校验状态图标，建议只配合 Input 组件使用 此外，它还可以通过 Icons 属性获取反馈图标。",
            "类型": "boolean | { icons: [FeedbackIcons](#feedbackicons) }",
            "默认值": "false",
            "版本": "icons: 5.9.0"
          },
          {
            "参数": "help",
            "说明": "提示信息，如不设置，则会根据校验规则自动生成",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "hidden",
            "说明": "是否隐藏字段（依然会收集和校验字段）",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.4.0"
          },
          {
            "参数": "htmlFor",
            "说明": "设置子元素 label `htmlFor` 属性",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "initialValue",
            "说明": "设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准",
            "类型": "string",
            "默认值": "-",
            "版本": "4.2.0"
          },
          {
            "参数": "label",
            "说明": "`label` 标签的文本",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "labelAlign",
            "说明": "标签文本对齐方式",
            "类型": "`left` | `right`",
            "默认值": "`right`"
          },
          {
            "参数": "labelCol",
            "说明": "`label` 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`。你可以通过 Form 的 `labelCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准",
            "类型": "-"
          },
          {
            "参数": "messageVariables",
            "说明": "默认验证字段的信息",
            "类型": "Record<string, string>",
            "默认值": "-",
            "版本": "4.7.0"
          },
          {
            "参数": "name",
            "说明": "字段名，支持数组",
            "类型": "-"
          },
          {
            "参数": "normalize",
            "说明": "组件获取值后进行转换，再放入 Form 中。不支持异步",
            "类型": "(value, prevValue, prevValues) => any",
            "默认值": "-"
          },
          {
            "参数": "noStyle",
            "说明": "为 `true` 时不带样式，作为纯字段控件使用。当自身没有 `validateStatus` 而父元素存在有 `validateStatus` 的 Form.Item 会继承父元素的 `validateStatus`",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "preserve",
            "说明": "当字段被删除时保留字段值",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.4.0"
          },
          {
            "参数": "required",
            "说明": "必填样式设置。如不设置，则会根据校验规则自动生成",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "rules",
            "说明": "校验规则，设置字段的校验逻辑。点击[此处](#components-form-demo-basic)查看示例",
            "类型": "-"
          },
          {
            "参数": "shouldUpdate",
            "说明": "自定义字段更新逻辑，说明[见下](#shouldupdate)",
            "类型": "boolean | (prevValue, curValue) => boolean",
            "默认值": "false"
          },
          {
            "参数": "tooltip",
            "说明": "配置提示信息",
            "类型": "ReactNode | [TooltipProps & { icon: ReactNode }](/components/tooltip-cn#api)",
            "默认值": "-",
            "版本": "4.7.0"
          },
          {
            "参数": "trigger",
            "说明": "设置收集字段值变更的时机。点击[此处](#components-form-demo-customized-form-controls)查看示例",
            "类型": "string",
            "默认值": "`onChange`"
          },
          {
            "参数": "validateFirst",
            "说明": "当某一规则校验不通过时，是否停止剩下的规则的校验。设置 `parallel` 时会并行校验",
            "类型": "boolean | `parallel`",
            "默认值": "false",
            "版本": "`parallel`: 4.5.0"
          },
          {
            "参数": "validateDebounce",
            "说明": "设置防抖，延迟毫秒数后进行校验",
            "类型": "number",
            "默认值": "-",
            "版本": "5.9.0"
          },
          {
            "参数": "validateStatus",
            "说明": "校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating'",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "validateTrigger",
            "说明": "设置字段校验的时机",
            "类型": "string | string[]",
            "默认值": "`onChange`"
          },
          {
            "参数": "valuePropName",
            "说明": "子节点的值的属性，如 Switch、Checkbox 的是 `checked`。该属性为 `getValueProps` 的封装，自定义 `getValueProps` 后会失效",
            "类型": "string",
            "默认值": "`value`"
          },
          {
            "参数": "wrapperCol",
            "说明": "需要为输入控件设置布局样式时，使用该属性，用法同 `labelCol`。你可以通过 Form 的 `wrapperCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准",
            "类型": "-"
          }
        ]
      },
      {
        "title": "Form - Form.List",
        "property": [
          {
            "参数": "children",
            "说明": "渲染函数",
            "类型": "(fields: Field[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "initialValue",
            "说明": "设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准",
            "类型": "any[]",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "name",
            "说明": "字段名，支持数组。List 本身也是字段，因而 `getFieldsValue()` 默认会返回 List 下所有值，你可以通过[参数](#getfieldsvalue)改变这一行为",
            "类型": "-"
          },
          {
            "参数": "rules",
            "说明": "校验规则，仅支持自定义规则。需要配合 [ErrorList](#formerrorlist) 一同使用。",
            "类型": "{ validator, message }[]",
            "默认值": "-",
            "版本": "4.7.0"
          }
        ]
      },
      {
        "title": "Form - operation",
        "property": [
          {
            "参数": "add",
            "说明": "新增表单项",
            "类型": "(defaultValue?: any, insertIndex?: number) => void",
            "默认值": "insertIndex",
            "版本": "4.6.0"
          },
          {
            "参数": "move",
            "说明": "移动表单项",
            "类型": "(from: number, to: number) => void",
            "默认值": "-"
          },
          {
            "参数": "remove",
            "说明": "删除表单项",
            "类型": "(index: number | number[]) => void",
            "默认值": "number[]",
            "版本": "4.5.0"
          }
        ]
      },
      {
        "title": "Form - Form.ErrorList",
        "property": [
          {
            "参数": "errors",
            "说明": "错误列表",
            "类型": "ReactNode[]",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Form - Form.Provider",
        "property": [
          {
            "参数": "onFormChange",
            "说明": "子表单字段更新时触发",
            "类型": "function(formName: string, info: { changedFields, forms })",
            "默认值": "-"
          },
          {
            "参数": "onFormFinish",
            "说明": "子表单提交时触发",
            "类型": "function(formName: string, info: { values, forms })",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Form - FormInstance",
        "property": [
          {
            "名称": "getFieldError",
            "说明": "获取对应字段名的错误信息",
            "类型": "(name: [NamePath](#namepath)) => string[]"
          },
          {
            "名称": "getFieldInstance",
            "说明": "获取对应字段实例",
            "类型": "(name: [NamePath](#namepath)) => any",
            "版本": "4.4.0"
          },
          {
            "名称": "getFieldsError",
            "说明": "获取一组字段名对应的错误信息，返回为数组形式",
            "类型": "(nameList?: [NamePath](#namepath)\\[]) => FieldError[]"
          },
          {
            "名称": "getFieldsValue",
            "说明": "获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 `getFieldsValue(true)` 时返回所有值"
          },
          {
            "名称": "getFieldValue",
            "说明": "获取对应字段名的值",
            "类型": "(name: [NamePath](#namepath)) => any"
          },
          {
            "名称": "isFieldsTouched",
            "说明": "检查一组字段是否被用户操作过，`allTouched` 为 `true` 时检查是否所有字段都被操作过",
            "类型": "(nameList?: [NamePath](#namepath)\\[], allTouched?: boolean) => boolean"
          },
          {
            "名称": "isFieldTouched",
            "说明": "检查对应字段是否被用户操作过",
            "类型": "(name: [NamePath](#namepath)) => boolean"
          },
          {
            "名称": "isFieldValidating",
            "说明": "检查对应字段是否正在校验",
            "类型": "(name: [NamePath](#namepath)) => boolean"
          },
          {
            "名称": "resetFields",
            "说明": "重置一组字段到 `initialValues`",
            "类型": "(fields?: [NamePath](#namepath)\\[]) => void"
          },
          {
            "名称": "scrollToField",
            "说明": "滚动到对应字段位置",
            "类型": "(name: [NamePath](#namepath), options: [ScrollOptions](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)) => void"
          },
          {
            "名称": "setFields",
            "说明": "设置一组字段状态",
            "类型": "(fields: [FieldData](#fielddata)\\[]) => void"
          },
          {
            "名称": "setFieldValue",
            "说明": "设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入）",
            "类型": "(name: [NamePath](#namepath), value: any) => void",
            "版本": "4.22.0"
          },
          {
            "名称": "setFieldsValue",
            "说明": "设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入）。如果你只想修改 Form.List 中单项值，请通过 `setFieldValue` 进行指定",
            "类型": "(values) => void"
          },
          {
            "名称": "submit",
            "说明": "提交表单，与点击 `submit` 按钮效果相同",
            "类型": "() => void"
          },
          {
            "名称": "validateFields",
            "说明": "触发表单验证，设置 `recursive` 时会递归校验所有包含的路径",
            "类型": "(nameList?: [NamePath](#namepath)\\[], config?: [ValidateConfig](#validateFields)) => Promise"
          }
        ]
      },
      {
        "title": "Form - FieldData",
        "property": [
          {
            "名称": "errors",
            "说明": "错误信息",
            "类型": "string[]"
          },
          {
            "名称": "warnings",
            "说明": "警告信息",
            "类型": "string[]"
          },
          {
            "名称": "name",
            "说明": "字段名称"
          },
          {
            "名称": "touched",
            "说明": "是否被用户操作过",
            "类型": "boolean"
          },
          {
            "名称": "validating",
            "说明": "是否正在校验",
            "类型": "boolean"
          },
          {
            "名称": "value",
            "说明": "字段对应值",
            "类型": "any"
          }
        ]
      },
      {
        "title": "Form - Rule",
        "property": [
          {
            "名称": "defaultField",
            "说明": "仅在 `type` 为 `array` 类型时有效，用于指定数组元素的校验规则"
          },
          {
            "名称": "enum",
            "说明": "是否匹配枚举中的值（需要将 `type` 设置为 `enum`）",
            "类型": "any[]"
          },
          {
            "名称": "fields",
            "说明": "仅在 `type` 为 `array` 或 `object` 类型时有效，用于指定子元素的校验规则",
            "类型": "Record<string, [rule](#rule)\\>"
          },
          {
            "名称": "len",
            "说明": "string 类型时为字符串长度；number 类型时为确定数字； array 类型时为数组长度",
            "类型": "number"
          },
          {
            "名称": "max",
            "说明": "必须设置 `type`：string 类型为字符串最大长度；number 类型时为最大值；array 类型时为数组最大长度",
            "类型": "number"
          },
          {
            "名称": "message",
            "说明": "错误信息，不设置时会通过[模板](#validatemessages)自动生成",
            "类型": "string"
          },
          {
            "名称": "min",
            "说明": "必须设置 `type`：string 类型为字符串最小长度；number 类型时为最小值；array 类型时为数组最小长度",
            "类型": "number"
          },
          {
            "名称": "pattern",
            "说明": "正则表达式匹配",
            "类型": "RegExp"
          },
          {
            "名称": "required",
            "说明": "是否为必选字段",
            "类型": "boolean"
          },
          {
            "名称": "transform",
            "说明": "将字段值转换成目标值后进行校验",
            "类型": "(value) => any"
          },
          {
            "名称": "type",
            "说明": "类型，常见有 `string` |`number` |`boolean` |`url` | `email`。更多请参考[此处](https://github.com/yiminghe/async-validator#type)",
            "类型": "string"
          },
          {
            "名称": "validateTrigger",
            "说明": "设置触发验证时机，必须是 Form.Item 的 `validateTrigger` 的子集",
            "类型": "string | string[]"
          },
          {
            "名称": "validator",
            "说明": "自定义校验，接收 Promise 作为返回值。[示例](#components-form-demo-register)参考",
            "类型": "([rule](#rule), value) => Promise"
          },
          {
            "名称": "warningOnly",
            "说明": "仅警告，不阻塞表单提交",
            "类型": "boolean",
            "版本": "4.17.0"
          },
          {
            "名称": "whitespace",
            "说明": "如果字段仅包含空格则校验不通过，只在 `type: 'string'` 时生效",
            "类型": "boolean"
          }
        ]
      },
      {
        "title": "Form - WatchOptions",
        "property": [
          {
            "名称": "form",
            "说明": "指定 Form 实例",
            "类型": "FormInstance",
            "默认值": "当前 context 中的 Form",
            "版本": "5.4.0"
          },
          {
            "名称": "preserve",
            "说明": "是否监视没有对应的 `Form.Item` 的字段",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.4.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Float-button",
    "properties": [
      {
        "title": "Float-button - 共同的 API",
        "property": [
          {
            "参数": "icon",
            "说明": "自定义图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "description",
            "说明": "文字及其它内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "tooltip",
            "说明": "气泡卡片的内容",
            "类型": "ReactNode | () => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "type",
            "说明": "设置按钮类型",
            "类型": "`default` | `primary`",
            "默认值": "`default`"
          },
          {
            "参数": "shape",
            "说明": "设置按钮形状",
            "类型": "`circle` | `square`",
            "默认值": "`circle`"
          },
          {
            "参数": "onClick",
            "说明": "点击按钮时的回调",
            "类型": "(event) => void",
            "默认值": "-"
          },
          {
            "参数": "href",
            "说明": "点击跳转的地址，指定此属性 button 的行为和 a 链接一致",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "target",
            "说明": "相当于 a 标签的 target 属性，href 存在时生效",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "badge",
            "说明": "带徽标数字的悬浮按钮（不支持 `status` 以及相关属性）",
            "类型": "-",
            "默认值": "5.4.0"
          }
        ]
      },
      {
        "title": "Float-button - FloatButton.Group",
        "property": [
          {
            "参数": "shape",
            "说明": "设置包含的 FloatButton 按钮形状",
            "类型": "`circle` | `square`",
            "默认值": "`circle`"
          },
          {
            "参数": "trigger",
            "说明": "触发方式（有触发方式为菜单模式）",
            "类型": "`click` | `hover`",
            "默认值": "-"
          },
          {
            "参数": "open",
            "说明": "受控展开，需配合 trigger 一起使用",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "onOpenChange",
            "说明": "展开收起时的回调，需配合 trigger 一起使用",
            "类型": "(open: boolean) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Float-button - FloatButton.BackTop",
        "property": [
          {
            "参数": "duration",
            "说明": "回到顶部所需时间（ms）",
            "类型": "number",
            "默认值": "450"
          },
          {
            "参数": "target",
            "说明": "设置需要监听其滚动事件的元素",
            "类型": "() => HTMLElement",
            "默认值": "() => window"
          },
          {
            "参数": "visibilityHeight",
            "说明": "滚动高度达到此参数值才出现 BackTop",
            "类型": "number",
            "默认值": "400"
          },
          {
            "参数": "onClick",
            "说明": "点击按钮的回调函数",
            "类型": "() => void",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Flex",
    "properties": [
      {
        "title": "Flex - API",
        "property": [
          {
            "属性": "vertical",
            "说明": "flex 主轴的方向是否垂直，使用 `flex-direction: column`",
            "类型": "boolean",
            "默认值": "`false`"
          },
          {
            "属性": "wrap",
            "说明": "设置元素单行显示还是多行显示",
            "类型": "参考 [flex-wrap](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap)",
            "默认值": "nowrap"
          },
          {
            "属性": "justify",
            "说明": "设置元素在主轴方向上的对齐方式",
            "类型": "参考 [justify-content](https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content)",
            "默认值": "normal"
          },
          {
            "属性": "align",
            "说明": "设置元素在交叉轴方向上的对齐方式",
            "类型": "参考 [align-items](https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items)",
            "默认值": "normal"
          },
          {
            "属性": "flex",
            "说明": "flex CSS 简写属性",
            "类型": "参考 [flex](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex)",
            "默认值": "normal"
          },
          {
            "属性": "gap",
            "说明": "设置网格之间的间隙",
            "类型": "`small` | `middle` | `large` | string | number",
            "默认值": "-"
          },
          {
            "属性": "component",
            "说明": "自定义元素类型",
            "类型": "React.ComponentType",
            "默认值": "`div`"
          }
        ]
      }
    ]
  },
  {
    "title": "Empty",
    "properties": [
      {
        "title": "Empty - API",
        "property": [
          {
            "参数": "description",
            "说明": "自定义描述内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "image",
            "说明": "设置显示图片，为 string 时表示自定义图片地址。",
            "类型": "ReactNode",
            "默认值": "`Empty.PRESENTED_IMAGE_DEFAULT`"
          },
          {
            "参数": "imageStyle",
            "说明": "图片样式",
            "类型": "CSSProperties",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Dropdown",
    "properties": [
      {
        "title": "Dropdown - Dropdown",
        "property": [
          {
            "参数": "arrow",
            "说明": "下拉框箭头是否显示",
            "类型": "boolean | { pointAtCenter: boolean }",
            "默认值": "false"
          },
          {
            "参数": "autoAdjustOverflow",
            "说明": "下拉框被遮挡时自动调整位置",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.2.0"
          },
          {
            "参数": "autoFocus",
            "说明": "打开后自动聚焦下拉框",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.21.0"
          },
          {
            "参数": "disabled",
            "说明": "菜单是否禁用",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "destroyPopupOnHide",
            "说明": "关闭后是否销毁 Dropdown",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "dropdownRender",
            "说明": "自定义下拉框内容",
            "类型": "(menus: ReactNode) => ReactNode",
            "默认值": "-",
            "版本": "4.24.0"
          },
          {
            "参数": "getPopupContainer",
            "说明": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
            "类型": "(triggerNode: HTMLElement) => HTMLElement",
            "默认值": "() => document.body"
          },
          {
            "参数": "menu",
            "说明": "菜单配置项",
            "类型": "-",
            "默认值": "4.24.0"
          },
          {
            "参数": "overlayClassName",
            "说明": "下拉根元素的类名称",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "overlayStyle",
            "说明": "下拉根元素的样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "placement",
            "说明": "菜单弹出位置：`bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight`",
            "类型": "string",
            "默认值": "`bottomLeft`"
          },
          {
            "参数": "trigger",
            "说明": "触发下拉的行为，移动端不支持 hover",
            "类型": "Array<`click`|`hover`|`contextMenu`\\>",
            "默认值": "\\[`hover`]"
          },
          {
            "参数": "open",
            "说明": "菜单是否显示，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "onOpenChange",
            "说明": "菜单显示状态改变时调用，点击菜单按钮导致的消失不会触发。小于 4.23.0 使用 `onVisibleChange`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）",
            "类型": "(open: boolean, info: { source: 'trigger' | 'menu' }) => void",
            "默认值": "-",
            "版本": "`info.source`: 5.11.0"
          }
        ]
      },
      {
        "title": "Dropdown - Dropdown.Button",
        "property": [
          {
            "参数": "buttonsRender",
            "说明": "自定义左右两个按钮",
            "类型": "(buttons: ReactNode[]) => ReactNode[]",
            "默认值": "-"
          },
          {
            "参数": "loading",
            "说明": "设置按钮载入状态",
            "类型": "boolean | { delay: number }",
            "默认值": "false"
          },
          {
            "参数": "danger",
            "说明": "设置危险按钮",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "icon",
            "说明": "右侧的 icon",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "按钮大小，和 [Button](/components/button-cn#api) 一致",
            "类型": "string",
            "默认值": "`default`"
          },
          {
            "参数": "type",
            "说明": "按钮类型，和 [Button](/components/button-cn#api) 一致",
            "类型": "string",
            "默认值": "`default`"
          },
          {
            "参数": "onClick",
            "说明": "点击左侧按钮的回调，和 [Button](/components/button-cn#api) 一致",
            "类型": "(event) => void",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Drawer",
    "properties": [
      {
        "title": "Drawer - API",
        "property": [
          {
            "参数": "autoFocus",
            "说明": "抽屉展开后是否将焦点切换至其 Dom 节点",
            "类型": "boolean",
            "默认值": "true",
            "版本": "4.17.0"
          },
          {
            "参数": "afterOpenChange",
            "说明": "切换抽屉时动画结束后的回调",
            "类型": "function(open)",
            "默认值": "-"
          },
          {
            "参数": "className",
            "说明": "Drawer 容器外层 className 设置，如果需要设置最外层，请使用 rootClassName",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "classNames",
            "说明": "配置抽屉内置模块的 className",
            "类型": "`header?: string; body?: string; footer?: string; mask?: string; content?: string; wrapper?: string;`",
            "默认值": "-"
          },
          {
            "参数": "styles",
            "说明": "配置抽屉内置模块的 style",
            "类型": "`header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties; content?: CSSProperties; wrapper?: CSSProperties;`",
            "默认值": "-",
            "版本": "5.10.0"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮",
            "类型": "boolean | ReactNode",
            "默认值": "\\<CloseOutlined />"
          },
          {
            "参数": "destroyOnClose",
            "说明": "关闭时销毁 Drawer 里的子元素",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "extra",
            "说明": "抽屉右上角的操作区域",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "footer",
            "说明": "抽屉的页脚",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "forceRender",
            "说明": "预渲染 Drawer 内元素",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "getContainer",
            "说明": "指定 Drawer 挂载的节点，**并在容器内展现**，`false` 为挂载在当前位置",
            "类型": "HTMLElement | () => HTMLElement | Selectors | false",
            "默认值": "body"
          },
          {
            "参数": "height",
            "说明": "高度，在 `placement` 为 `top` 或 `bottom` 时使用",
            "类型": "string | number",
            "默认值": "378"
          },
          {
            "参数": "keyboard",
            "说明": "是否支持键盘 esc 关闭",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "mask",
            "说明": "是否展示遮罩",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "maskClosable",
            "说明": "点击蒙层是否允许关闭",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "placement",
            "说明": "抽屉的方向",
            "类型": "`top` | `right` | `bottom` | `left`",
            "默认值": "`right`"
          },
          {
            "参数": "push",
            "说明": "用于设置多层 Drawer 的推动行为",
            "类型": "boolean | { distance: string | number }",
            "默认值": "{ distance: 180 }",
            "版本": "4.5.0+"
          },
          {
            "参数": "rootStyle",
            "说明": "可用于设置 Drawer 最外层容器的样式，和 `style` 的区别是作用节点包括 `mask`",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "预设抽屉宽度（或高度），default `378px` 和 large `736px`",
            "类型": "'default' | 'large'",
            "默认值": "'default'",
            "版本": "4.17.0"
          },
          {
            "参数": "style",
            "说明": "设计 Drawer 容器样式，如果你只需要设置内容部分请使用 `bodyStyle`",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "open",
            "说明": "Drawer 是否可见",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "width",
            "说明": "宽度",
            "类型": "string | number",
            "默认值": "378"
          },
          {
            "参数": "zIndex",
            "说明": "设置 Drawer 的 `z-index`",
            "类型": "number",
            "默认值": "1000"
          },
          {
            "参数": "onClose",
            "说明": "点击遮罩层或左上角叉或取消按钮的回调",
            "类型": "function(e)",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Divider",
    "properties": [
      {
        "title": "Divider - API",
        "property": [
          {
            "参数": "children",
            "说明": "嵌套的标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "className",
            "说明": "分割线样式类",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "dashed",
            "说明": "是否虚线",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "orientation",
            "说明": "分割线标题的位置",
            "类型": "`left` | `right` | `center`",
            "默认值": "`center`"
          },
          {
            "参数": "orientationMargin",
            "说明": "标题和最近 left/right 边框之间的距离，去除了分割线，同时 `orientation` 必须为 `left` 或 `right`。如果传入 `string` 类型的数字且不带单位，默认单位是 px",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "plain",
            "说明": "文字是否显示为普通正文样式",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.2.0"
          },
          {
            "参数": "style",
            "说明": "分割线样式对象",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "type",
            "说明": "水平还是垂直类型",
            "类型": "`horizontal` | `vertical`",
            "默认值": "`horizontal`"
          }
        ]
      }
    ]
  },
  {
    "title": "Descriptions",
    "properties": [
      {
        "title": "Descriptions - Descriptions",
        "property": [
          {
            "参数": "bordered",
            "说明": "是否展示边框",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "colon",
            "说明": "配置 `Descriptions.Item` 的 `colon` 的默认值",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "column",
            "说明": "一行的 `DescriptionItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`",
            "类型": "number | [Record<Breakpoint, number>](https://github.com/ant-design/ant-design/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56)",
            "默认值": "3"
          },
          {
            "参数": "contentStyle",
            "说明": "自定义内容样式",
            "类型": "CSSProperties",
            "默认值": "-",
            "版本": "4.10.0"
          },
          {
            "参数": "extra",
            "说明": "描述列表的操作区域，显示在右上方",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.5.0"
          },
          {
            "参数": "items",
            "说明": "描述列表项内容",
            "类型": "-",
            "默认值": "5.8.0"
          },
          {
            "参数": "labelStyle",
            "说明": "自定义标签样式",
            "类型": "CSSProperties",
            "默认值": "-",
            "版本": "4.10.0"
          },
          {
            "参数": "layout",
            "说明": "描述布局",
            "类型": "`horizontal` | `vertical`",
            "默认值": "`horizontal`"
          },
          {
            "参数": "size",
            "说明": "设置列表的大小。可以设置为 `middle` 、`small`, 或不填（只有设置 `bordered={true}` 生效）",
            "类型": "`default` | `middle` | `small`",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "描述列表的标题，显示在最顶部",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Descriptions - DescriptionItem",
        "property": [
          {
            "参数": "contentStyle",
            "说明": "自定义内容样式",
            "类型": "CSSProperties",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "label",
            "说明": "内容的描述",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "labelStyle",
            "说明": "自定义标签样式",
            "类型": "CSSProperties",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "span",
            "说明": "包含列的数量",
            "类型": "number | [Screens](/components/grid#col)",
            "默认值": "1",
            "版本": "`screens: 5.9.0`"
          }
        ]
      }
    ]
  },
  {
    "title": "Date-picker",
    "properties": [
      {
        "title": "Date-picker - 共同的 API",
        "property": [
          {
            "参数": "allowClear",
            "说明": "自定义清除按钮",
            "类型": "boolean | { clearIcon?: ReactNode }",
            "默认值": "true",
            "版本": "5.8.0: 支持对象类型"
          },
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "className",
            "说明": "选择器 className",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "dateRender",
            "说明": "自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替",
            "类型": "function(currentDate: dayjs, today: dayjs) => React.ReactNode",
            "默认值": "-",
            "版本": "< 5.4.0"
          },
          {
            "参数": "changeOnBlur",
            "说明": "失去焦点时触发 `change` 事件，例如 datetime 下不再需要点击确认按钮",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.5.0"
          },
          {
            "参数": "cellRender",
            "说明": "自定义单元格的内容",
            "类型": "(current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "disabled",
            "说明": "禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabledDate",
            "说明": "不可选择的日期",
            "类型": "(currentDate: dayjs) => boolean",
            "默认值": "-"
          },
          {
            "参数": "format",
            "说明": "设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。示例：[自定义格式](#components-date-picker-demo-format)"
          },
          {
            "参数": "popupClassName",
            "说明": "额外的弹出日历 className",
            "类型": "string",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "getPopupContainer",
            "说明": "定义浮层的容器，默认为 body 上新建 div",
            "类型": "function(trigger)",
            "默认值": "-"
          },
          {
            "参数": "inputReadOnly",
            "说明": "设置输入框为只读（避免在移动设备上打开虚拟键盘）",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "locale",
            "说明": "国际化配置",
            "类型": "object"
          },
          {
            "参数": "mode",
            "说明": "日期面板的状态（[设置后无法选择年份/月份？](/docs/react/faq#当我指定了-datepickerrangepicker-的-mode-属性后点击后无法选择年份月份)）",
            "类型": "`time` | `date` | `month` | `year` | `decade`",
            "默认值": "-"
          },
          {
            "参数": "nextIcon",
            "说明": "自定义下一个图标",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "open",
            "说明": "控制弹层是否展开",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "panelRender",
            "说明": "自定义渲染面板",
            "类型": "(panelNode) => ReactNode",
            "默认值": "-",
            "版本": "4.5.0"
          },
          {
            "参数": "picker",
            "说明": "设置选择器类型",
            "类型": "`date` | `week` | `month` | `quarter` | `year`",
            "默认值": "`date`",
            "版本": "`quarter`: 4.1.0"
          },
          {
            "参数": "placeholder",
            "说明": "输入框提示文字",
            "类型": "string | [string, string]",
            "默认值": "-"
          },
          {
            "参数": "placement",
            "说明": "选择框弹出的位置",
            "类型": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
            "默认值": "bottomLeft"
          },
          {
            "参数": "popupStyle",
            "说明": "额外的弹出日历样式",
            "类型": "CSSProperties",
            "默认值": "{}"
          },
          {
            "参数": "prevIcon",
            "说明": "自定义上一个图标",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "presets",
            "说明": "预设时间范围快捷选择, 自 `5.8.0` 起 value 支持函数返回值",
            "类型": "{ label: React.ReactNode, value: Dayjs | (() => Dayjs) }[]",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px",
            "类型": "`large` | `middle` | `small`",
            "默认值": "-"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "style",
            "说明": "自定义输入框样式",
            "类型": "CSSProperties",
            "默认值": "{}"
          },
          {
            "参数": "suffixIcon",
            "说明": "自定义的选择框后缀图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "superNextIcon",
            "说明": "自定义 `>>` 切换图标",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "superPrevIcon",
            "说明": "自定义 `<<` 切换图标",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "onOpenChange",
            "说明": "弹出日历和关闭日历的回调",
            "类型": "function(open)",
            "默认值": "-"
          },
          {
            "参数": "onPanelChange",
            "说明": "日历面板切换的回调",
            "类型": "function(value, mode)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Date-picker - 共同的方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      },
      {
        "title": "Date-picker - DatePicker",
        "property": [
          {
            "参数": "defaultValue",
            "说明": "默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间",
            "类型": "-"
          },
          {
            "参数": "disabledTime",
            "说明": "不可选择的时间",
            "类型": "function(date)",
            "默认值": "-"
          },
          {
            "参数": "format",
            "说明": "展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。",
            "类型": "`YYYY-MM-DD`"
          },
          {
            "参数": "renderExtraFooter",
            "说明": "在面板中添加额外的页脚",
            "类型": "(mode) => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "showNow",
            "说明": "当设定了 `showTime` 的时候，面板是否显示“此刻”按钮",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "showTime",
            "说明": "增加时间选择功能",
            "类型": "Object | boolean"
          },
          {
            "参数": "showTime.defaultValue",
            "说明": "设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date)",
            "类型": "dayjs()"
          },
          {
            "参数": "showToday",
            "说明": "是否展示“今天”按钮",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "value",
            "说明": "日期",
            "类型": "-"
          },
          {
            "参数": "onChange",
            "说明": "时间发生变化的回调",
            "类型": "function(date: dayjs, dateString: string)",
            "默认值": "-"
          },
          {
            "参数": "onOk",
            "说明": "点击确定按钮的回调",
            "类型": "function()",
            "默认值": "-"
          },
          {
            "参数": "onPanelChange",
            "说明": "日期面板变化时的回调",
            "类型": "function(value, mode)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Date-picker - DatePicker[picker=year]",
        "property": [
          {
            "参数": "defaultValue",
            "说明": "默认日期",
            "类型": "-"
          },
          {
            "参数": "format",
            "说明": "展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。",
            "类型": "`YYYY`"
          },
          {
            "参数": "renderExtraFooter",
            "说明": "在面板中添加额外的页脚",
            "类型": "() => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "日期",
            "类型": "-"
          },
          {
            "参数": "onChange",
            "说明": "时间发生变化的回调，发生在用户选择时间时",
            "类型": "function(date: dayjs, dateString: string)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Date-picker - DatePicker[picker=quarter]",
        "property": [
          {
            "参数": "defaultValue",
            "说明": "默认日期",
            "类型": "-"
          },
          {
            "参数": "format",
            "说明": "展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。",
            "类型": "`YYYY-\\QQ`"
          },
          {
            "参数": "renderExtraFooter",
            "说明": "在面板中添加额外的页脚",
            "类型": "() => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "日期",
            "类型": "-"
          },
          {
            "参数": "onChange",
            "说明": "时间发生变化的回调，发生在用户选择时间时",
            "类型": "function(date: dayjs, dateString: string)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Date-picker - DatePicker[picker=month]",
        "property": [
          {
            "参数": "defaultValue",
            "说明": "默认日期",
            "类型": "-"
          },
          {
            "参数": "format",
            "说明": "展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。",
            "类型": "`YYYY-MM`"
          },
          {
            "参数": "renderExtraFooter",
            "说明": "在面板中添加额外的页脚",
            "类型": "() => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "日期",
            "类型": "-"
          },
          {
            "参数": "onChange",
            "说明": "时间发生变化的回调，发生在用户选择时间时",
            "类型": "function(date: dayjs, dateString: string)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Date-picker - DatePicker[picker=week]",
        "property": [
          {
            "参数": "defaultValue",
            "说明": "默认日期",
            "类型": "-"
          },
          {
            "参数": "format",
            "说明": "展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。",
            "类型": "`YYYY-wo`"
          },
          {
            "参数": "renderExtraFooter",
            "说明": "在面板中添加额外的页脚",
            "类型": "(mode) => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "日期",
            "类型": "-"
          },
          {
            "参数": "onChange",
            "说明": "时间发生变化的回调，发生在用户选择时间时",
            "类型": "function(date: dayjs, dateString: string)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Date-picker - RangePicker",
        "property": [
          {
            "参数": "allowEmpty",
            "说明": "允许起始项部分为空",
            "类型": "\\[boolean, boolean]",
            "默认值": "\\[false, false]"
          },
          {
            "参数": "dateRender",
            "说明": "自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替",
            "类型": "function(currentDate: dayjs, today: dayjs) => React.ReactNode",
            "默认值": "-",
            "版本": "< 5.4.0"
          },
          {
            "参数": "cellRender",
            "说明": "自定义单元格的内容。",
            "类型": "(current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "defaultValue",
            "说明": "默认日期",
            "类型": "-"
          },
          {
            "参数": "disabled",
            "说明": "禁用起始项",
            "类型": "\\[boolean, boolean]",
            "默认值": "-"
          },
          {
            "参数": "disabledTime",
            "说明": "不可选择的时间",
            "类型": "function(date: dayjs, partial: `start` | `end`)",
            "默认值": "-"
          },
          {
            "参数": "format",
            "说明": "展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。",
            "类型": "`YYYY-MM-DD HH:mm:ss`"
          },
          {
            "参数": "presets",
            "说明": "预设时间范围快捷选择，自 `5.8.0` 起 value 支持函数返回值",
            "类型": "{ label: React.ReactNode, value: (Dayjs | (() => Dayjs))[] }[]",
            "默认值": "-"
          },
          {
            "参数": "renderExtraFooter",
            "说明": "在面板中添加额外的页脚",
            "类型": "() => React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "separator",
            "说明": "设置分隔符",
            "类型": "React.ReactNode",
            "默认值": "`<SwapRightOutlined />`"
          },
          {
            "参数": "showTime",
            "说明": "增加时间选择功能",
            "类型": "Object|boolean"
          },
          {
            "参数": "showTime.defaultValue",
            "说明": "设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date)",
            "类型": "\\[dayjs(), dayjs()]"
          },
          {
            "参数": "value",
            "说明": "日期",
            "类型": "-"
          },
          {
            "参数": "onCalendarChange",
            "说明": "待选日期发生变化的回调。`info` 参数自 4.4.0 添加",
            "类型": "function(dates: [dayjs, dayjs], dateStrings: [string, string], info: { range:`start`|`end` })",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "日期范围发生变化的回调",
            "类型": "function(dates: [dayjs, dayjs], dateStrings: [string, string])",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Config-provider",
    "properties": [
      {
        "title": "Config-provider - API",
        "property": [
          {
            "参数": "autoInsertSpaceInButton",
            "说明": "设置为 `false` 时，移除按钮中 2 个汉字之间的空格",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "componentDisabled",
            "说明": "设置 antd 组件禁用状态",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.21.0"
          },
          {
            "参数": "componentSize",
            "说明": "设置 antd 组件大小",
            "类型": "`small` | `middle` | `large`",
            "默认值": "-"
          },
          {
            "参数": "csp",
            "说明": "设置 [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) 配置",
            "类型": "{ nonce: string }",
            "默认值": "-"
          },
          {
            "参数": "direction",
            "说明": "设置文本展示方向。 [示例](#components-config-provider-demo-direction)",
            "类型": "`ltr` | `rtl`",
            "默认值": "`ltr`"
          },
          {
            "参数": "getPopupContainer",
            "说明": "弹出框（Select, Tooltip, Menu 等等）渲染父节点，默认渲染到 body 上。",
            "类型": "function(triggerNode)",
            "默认值": "() => document.body"
          },
          {
            "参数": "getTargetContainer",
            "说明": "配置 Affix、Anchor 滚动监听容器。",
            "类型": "() => HTMLElement",
            "默认值": "() => window",
            "版本": "4.2.0"
          },
          {
            "参数": "iconPrefixCls",
            "说明": "设置图标统一样式前缀",
            "类型": "string",
            "默认值": "`anticon`",
            "版本": "4.11.0"
          },
          {
            "参数": "locale",
            "说明": "语言包配置，语言包可到 [antd/locale](http://unpkg.com/antd/locale/) 目录下寻找",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "popupMatchSelectWidth",
            "说明": "下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。`false` 时会关闭虚拟滚动",
            "类型": "boolean | number",
            "默认值": "-",
            "版本": "5.5.0"
          },
          {
            "参数": "popupOverflow",
            "说明": "Select 类组件弹层展示逻辑，默认为可视区域滚动，可配置成滚动区域滚动",
            "类型": "'viewport' | 'scroll' <InlinePopover previewURL=\"https://user-images.githubusercontent.com/5378891/230344474-5b9f7e09-0a5d-49e8-bae8-7d2abed6c837.png\"></InlinePopover>",
            "默认值": "'viewport'",
            "版本": "5.5.0"
          },
          {
            "参数": "prefixCls",
            "说明": "设置统一样式前缀",
            "类型": "string",
            "默认值": "`ant`"
          },
          {
            "参数": "renderEmpty",
            "说明": "自定义组件空状态。参考 [空状态](/components/empty-cn)",
            "类型": "function(componentName: string): ReactNode",
            "默认值": "-"
          },
          {
            "参数": "theme",
            "说明": "设置主题，参考 [定制主题](/docs/react/customize-theme-cn)",
            "类型": "-",
            "默认值": "5.0.0"
          },
          {
            "参数": "virtual",
            "说明": "设置 `false` 时关闭虚拟滚动",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.3.0"
          },
          {
            "参数": "warning",
            "说明": "设置警告等级，`strict` 为 `false` 时会将废弃相关信息聚合为单条信息",
            "类型": "{ strict: boolean }",
            "默认值": "-",
            "版本": "5.10.0"
          }
        ]
      },
      {
        "title": "Config-provider - ConfigProvider.useConfig()",
        "property": [
          {
            "返回值": "componentDisabled",
            "说明": "antd 组件禁用状态",
            "类型": "boolean",
            "默认值": "-",
            "版本": "5.3.0"
          },
          {
            "返回值": "componentSize",
            "说明": "antd 组件大小状态",
            "类型": "`small` | `middle` | `large`",
            "默认值": "-",
            "版本": "5.3.0"
          }
        ]
      },
      {
        "title": "Config-provider - 组件配置",
        "property": [
          {
            "参数": "alert",
            "说明": "设置 Alert 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "anchor",
            "说明": "设置 Anchor 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "avatar",
            "说明": "设置 Avatar 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "badge",
            "说明": "设置 Badge 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties, classNames?: { count?: string, indicator?: string }, styles?: { count?: React.CSSProperties, indicator?: React.CSSProperties } }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "breadcrumb",
            "说明": "设置 Breadcrumb 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "button",
            "说明": "设置 Button 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties, classNames?: { icon: string }, styles?: { icon: React.CSSProperties } }",
            "默认值": "-",
            "版本": "5.6.0"
          },
          {
            "参数": "calendar",
            "说明": "设置 Calendar 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "card",
            "说明": "设置 Card 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "carousel",
            "说明": "设置 Carousel 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "cascader",
            "说明": "设置 Cascader 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "checkbox",
            "说明": "设置 Checkbox 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "collapse",
            "说明": "设置 Collapse 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "colorPicker",
            "说明": "设置 ColorPicker 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "datePicker",
            "说明": "设置 DatePicker 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "rangePicker",
            "说明": "设置 RangePicker 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.11.0"
          },
          {
            "参数": "descriptions",
            "说明": "设置 Descriptions 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "divider",
            "说明": "设置 Divider 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "drawer",
            "说明": "设置 Drawer 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties, classNames?: [DrawerProps\\[\"classNames\"\\]](/components/drawer-cn#api), styles?: [DrawerProps\\[\"styles\"\\]](/components/drawer-cn#api) }",
            "默认值": "-",
            "版本": "5.7.0, `classNames` 和 `styles`: 5.10.0"
          },
          {
            "参数": "dropdown",
            "说明": "设置 Dropdown 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.11.0"
          },
          {
            "参数": "empty",
            "说明": "设置 Empty 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "flex",
            "说明": "设置 Flex 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties, vertical?: boolean }",
            "默认值": "-",
            "版本": "5.10.0"
          },
          {
            "参数": "form",
            "说明": "设置 Form 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties, validateMessages?: [ValidateMessages](/components/form-cn#validatemessages), requiredMark?: boolean | `optional`, colon?: boolean, scrollToFirstError?: boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)}",
            "默认值": "-",
            "版本": "requiredMark: 4.8.0; colon: 4.18.0; scrollToFirstError: 5.2.0; className: 5.7.0; style: 5.7.0"
          },
          {
            "参数": "image",
            "说明": "设置 Image 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "input",
            "说明": "设置 Input 组件的通用属性",
            "类型": "{ autoComplete?: string, className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "layout",
            "说明": "设置 Layout 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "list",
            "说明": "设置 List 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "menu",
            "说明": "设置 Menu 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "mentions",
            "说明": "设置 Mentions 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "message",
            "说明": "设置 Message 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "modal",
            "说明": "设置 Modal 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties, classNames?: [ModalProps\\[\"classNames\"\\]](/components/modal-cn#api), styles?: [ModalProps\\[\"styles\"\\]](/components/modal-cn#api) }",
            "默认值": "-",
            "版本": "5.7.0, `classNames` 和 `styles`: 5.10.0"
          },
          {
            "参数": "notification",
            "说明": "设置 Notification 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "pagination",
            "说明": "设置 Pagination 组件的通用属性",
            "类型": "{ showSizeChanger?: boolean, className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "progress",
            "说明": "设置 Progress 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "radio",
            "说明": "设置 Radio 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "rate",
            "说明": "设置 Rate 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "result",
            "说明": "设置 Result 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "skeleton",
            "说明": "设置 Skeleton 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "segmented",
            "说明": "设置 Segmented 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "select",
            "说明": "设置 Select 组件的通用属性",
            "类型": "{ className?: string, showSearch?: boolean, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "slider",
            "说明": "设置 Slider 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "switch",
            "说明": "设置 Switch 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "space",
            "说明": "设置 Space 的通用属性，参考 [Space](/components/space-cn)",
            "类型": "{ size: `small` | `middle` | `large` | `number`, className?: string, style?: React.CSSProperties, classNames?: { item: string }, styles?: { item: React.CSSProperties } }",
            "默认值": "-",
            "版本": "5.6.0"
          },
          {
            "参数": "spin",
            "说明": "设置 Spin 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "statistic",
            "说明": "设置 Statistic 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "steps",
            "说明": "设置 Steps 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "table",
            "说明": "设置 Table 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "tabs",
            "说明": "设置 Tabs 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` | `center` | `end` }}",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "tag",
            "说明": "设置 Tag 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "timeline",
            "说明": "设置 Timeline 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "timePicker",
            "说明": "设置 TimePicker 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "transfer",
            "说明": "设置 Transfer 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "tree",
            "说明": "设置 Tree 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "typography",
            "说明": "设置 Typography 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "upload",
            "说明": "设置 Upload 组件的通用属性",
            "类型": "{ className?: string, style?: React.CSSProperties }",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "wave",
            "说明": "设置水波纹特效",
            "类型": "{ disabled?: boolean, showEffect?: (node: HTMLElement, info: { className, token, component }) => void }",
            "默认值": "-",
            "版本": "5.8.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Color-picker",
    "properties": [
      {
        "title": "Color-picker - API",
        "property": [
          {
            "参数": "allowClear",
            "说明": "允许清除选择的颜色",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "arrow",
            "说明": "配置弹出的箭头",
            "类型": "`boolean | { pointAtCenter: boolean }`",
            "默认值": "true"
          },
          {
            "参数": "children",
            "说明": "颜色选择器的触发器",
            "类型": "React.ReactNode",
            "默认值": "-"
          },
          {
            "参数": "defaultValue",
            "说明": "颜色默认的值",
            "类型": "string | `Color`",
            "默认值": "-"
          },
          {
            "参数": "defaultFormat",
            "说明": "颜色格式默认的值",
            "类型": "`rgb` | `hex` | `hsb`",
            "默认值": "-",
            "版本": "5.9.0"
          },
          {
            "参数": "disabled",
            "说明": "禁用颜色选择器",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "disabledAlpha",
            "说明": "禁用透明度",
            "类型": "boolean",
            "默认值": "-",
            "版本": "5.8.0"
          },
          {
            "参数": "destroyTooltipOnHide",
            "说明": "关闭后是否销毁弹窗",
            "类型": "`boolean`",
            "默认值": "false",
            "版本": "5.7.0"
          },
          {
            "参数": "format",
            "说明": "颜色格式",
            "类型": "`rgb` | `hex` | `hsb`",
            "默认值": "`hex`"
          },
          {
            "参数": "open",
            "说明": "是否显示弹出窗口",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "presets",
            "说明": "预设的颜色",
            "类型": "`{ label: ReactNode, colors: Array<string | Color>, defaultOpen?: boolean }[]`",
            "默认值": "-",
            "版本": "`defaultOpen: 5.11.0`"
          },
          {
            "参数": "placement",
            "说明": "弹出窗口的位置",
            "类型": "`top` | `topLeft` | `topRight` | `bottom` | `bottomLeft` | `bottomRight`",
            "默认值": "`bottomLeft`"
          },
          {
            "参数": "panelRender",
            "说明": "自定义渲染面板",
            "类型": "`(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode`",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "showText",
            "说明": "显示颜色文本",
            "类型": "boolean | `(color: Color) => React.ReactNode`",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "size",
            "说明": "设置触发器大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "`middle`",
            "版本": "5.7.0"
          },
          {
            "参数": "trigger",
            "说明": "颜色选择器的触发模式",
            "类型": "`hover` | `click`",
            "默认值": "`click`"
          },
          {
            "参数": "value",
            "说明": "颜色的值",
            "类型": "string | `Color`",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "颜色变化的回调",
            "类型": "`(value: Color, hex: string) => void`",
            "默认值": "-"
          },
          {
            "参数": "onChangeComplete",
            "说明": "颜色选择完成的回调",
            "类型": "`(value: Color) => void`",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "onFormatChange",
            "说明": "颜色格式变化的回调",
            "类型": "`(format: 'hex' | 'rgb' | 'hsb') => void`",
            "默认值": "-"
          },
          {
            "参数": "onOpenChange",
            "说明": "当 `open` 被改变时的回调",
            "类型": "`(open: boolean) => void`",
            "默认值": "-"
          },
          {
            "参数": "onClear",
            "说明": "清除的回调",
            "类型": "`() => void`",
            "默认值": "-",
            "版本": "5.6.0"
          }
        ]
      },
      {
        "title": "Color-picker - Color",
        "property": [
          {
            "参数": "toHex",
            "说明": "转换成 `hex` 格式字符，返回格式如：`1677ff`",
            "类型": "`() => string`",
            "默认值": "-"
          },
          {
            "参数": "toHexString",
            "说明": "转换成 `hex` 格式颜色字符串，返回格式如：`#1677ff`",
            "类型": "`() => string`",
            "默认值": "-"
          },
          {
            "参数": "toHsb",
            "说明": "转换成 `hsb` 对象",
            "类型": "`() => ({ h: number, s: number, b: number, a number })`",
            "默认值": "-"
          },
          {
            "参数": "toHsbString",
            "说明": "转换成 `hsb` 格式颜色字符串，返回格式如：`hsb(215, 91%, 100%)`",
            "类型": "`() => string`",
            "默认值": "-"
          },
          {
            "参数": "toRgb",
            "说明": "转换成 `rgb` 对象",
            "类型": "`() => ({ r: number, g: number, b: number, a number })`",
            "默认值": "-"
          },
          {
            "参数": "toRgbString",
            "说明": "转换成 `rgb` 格式颜色字符串，返回格式如：`rgb(22, 119, 255)`",
            "类型": "`() => string`",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Collapse",
    "properties": [
      {
        "title": "Collapse - Collapse",
        "property": [
          {
            "参数": "accordion",
            "说明": "手风琴模式",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "activeKey",
            "说明": "当前激活 tab 面板的 key",
            "类型": "string[] | string <br/> number[] | number",
            "默认值": "默认无，accordion 模式下默认第一个元素"
          },
          {
            "参数": "bordered",
            "说明": "带边框风格的折叠面板",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "collapsible",
            "说明": "所有子面板是否可折叠或指定可折叠触发区域",
            "类型": "`header` | `icon` | `disabled`",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "defaultActiveKey",
            "说明": "初始化选中面板的 key",
            "类型": "string[] | string<br/> number[] | number",
            "默认值": "-"
          },
          {
            "参数": "destroyInactivePanel",
            "说明": "销毁折叠隐藏的面板",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "expandIcon",
            "说明": "自定义切换图标",
            "类型": "(panelProps) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "expandIconPosition",
            "说明": "设置图标位置",
            "类型": "`start` | `end`",
            "默认值": "-",
            "版本": "4.21.0"
          },
          {
            "参数": "ghost",
            "说明": "使折叠面板透明且无边框",
            "类型": "boolean",
            "默认值": "false",
            "版本": "4.4.0"
          },
          {
            "参数": "size",
            "说明": "设置折叠面板大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "`middle`",
            "版本": "5.2.0"
          },
          {
            "参数": "onChange",
            "说明": "切换面板的回调",
            "类型": "function",
            "默认值": "-"
          },
          {
            "参数": "items",
            "说明": "折叠项目内容",
            "类型": "-",
            "默认值": "5.6.0"
          }
        ]
      },
      {
        "title": "Collapse - Collapse.Panel",
        "property": [
          {
            "参数": "collapsible",
            "说明": "是否可折叠或指定可折叠触发区域",
            "类型": "`header` | `icon` | `disabled`",
            "默认值": "-",
            "版本": "4.9.0 (icon: 4.24.0)"
          },
          {
            "参数": "extra",
            "说明": "自定义渲染每个面板右上角的内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "forceRender",
            "说明": "被隐藏时是否渲染 DOM 结构",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "header",
            "说明": "面板头内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "key",
            "说明": "对应 activeKey",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "showArrow",
            "说明": "是否展示当前面板上的箭头（为 false 时，collapsible 不能置为 icon）",
            "类型": "boolean",
            "默认值": "true"
          }
        ]
      }
    ]
  },
  {
    "title": "Checkbox",
    "properties": [
      {
        "title": "Checkbox - Checkbox",
        "property": [
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "checked",
            "说明": "指定当前是否选中",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "defaultChecked",
            "说明": "初始是否选中",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "disabled",
            "说明": "失效状态",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "indeterminate",
            "说明": "设置 indeterminate 状态，只负责样式控制",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "onChange",
            "说明": "变化时的回调函数",
            "类型": "(e: CheckboxChangeEvent) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Checkbox - Checkbox Group",
        "property": [
          {
            "参数": "defaultValue",
            "说明": "默认选中的选项",
            "类型": "(string | number)[]",
            "默认值": "\\[]"
          },
          {
            "参数": "disabled",
            "说明": "整组失效",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "name",
            "说明": "CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "options",
            "说明": "指定可选项",
            "类型": "string[] | number[] | Option[]",
            "默认值": "\\[]"
          },
          {
            "参数": "value",
            "说明": "指定选中的选项",
            "类型": "(string | number | boolean)[]",
            "默认值": "\\[]"
          },
          {
            "参数": "onChange",
            "说明": "变化时的回调函数",
            "类型": "(checkedValue: CheckboxValueType[]) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Checkbox - Checkbox",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "Cascader",
    "properties": [
      {
        "title": "Cascader - API",
        "property": [
          {
            "参数": "allowClear",
            "说明": "支持清除",
            "类型": "boolean | { clearIcon?: ReactNode }",
            "默认值": "true",
            "版本": "5.8.0: 支持对象形式"
          },
          {
            "参数": "autoClearSearchValue",
            "说明": "是否在选中项后清空搜索框，只在 `multiple` 为 `true` 时有效",
            "类型": "boolean",
            "默认值": "true",
            "版本": "5.9.0"
          },
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "changeOnSelect",
            "说明": "（单选时生效）当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "className",
            "说明": "自定义类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "defaultValue",
            "说明": "默认的选中项",
            "类型": "string[] | number[]",
            "默认值": "\\[]"
          },
          {
            "参数": "disabled",
            "说明": "禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "displayRender",
            "说明": "选择后展示的渲染函数",
            "类型": "(label, selectedOptions) => ReactNode",
            "默认值": "label => label.join(`/`)",
            "版本": "`multiple`: 4.18.0"
          },
          {
            "参数": "tagRender",
            "说明": "自定义 tag 内容 render，仅在多选时生效",
            "类型": "({ label: string, onClose: function, value: string }) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "popupClassName",
            "说明": "自定义浮层类名",
            "类型": "string",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "dropdownRender",
            "说明": "自定义下拉框内容",
            "类型": "(menus: ReactNode) => ReactNode",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "expandIcon",
            "说明": "自定义次级菜单展开图标",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.4.0"
          },
          {
            "参数": "expandTrigger",
            "说明": "次级菜单的展开方式，可选 'click' 和 'hover'",
            "类型": "string",
            "默认值": "`click`"
          },
          {
            "参数": "fieldNames",
            "说明": "自定义 options 中 label value children 的字段",
            "类型": "object",
            "默认值": "{ label: `label`, value: `value`, children: `children` }"
          },
          {
            "参数": "getPopupContainer",
            "说明": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
            "类型": "function(triggerNode)",
            "默认值": "() => document.body"
          },
          {
            "参数": "loadData",
            "说明": "用于动态加载选项，无法与 `showSearch` 一起使用",
            "类型": "(selectedOptions) => void",
            "默认值": "-"
          },
          {
            "参数": "maxTagCount",
            "说明": "最多显示多少个 tag，响应式模式会对性能产生损耗",
            "类型": "number | `responsive`",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "maxTagPlaceholder",
            "说明": "隐藏 tag 时显示的内容",
            "类型": "ReactNode | function(omittedValues)",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "maxTagTextLength",
            "说明": "最大显示的 tag 文本长度",
            "类型": "number",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "notFoundContent",
            "说明": "当下拉列表为空时显示的内容",
            "类型": "string",
            "默认值": "`Not Found`"
          },
          {
            "参数": "open",
            "说明": "控制浮层显隐",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "options",
            "说明": "可选项数据源",
            "类型": "-"
          },
          {
            "参数": "placeholder",
            "说明": "输入框占位文本",
            "类型": "string",
            "默认值": "`请选择`"
          },
          {
            "参数": "placement",
            "说明": "浮层预设位置",
            "类型": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
            "默认值": "`bottomLeft`",
            "版本": "4.17.0"
          },
          {
            "参数": "showSearch",
            "说明": "在选择框中显示搜索框",
            "类型": "boolean | [Object](#showsearch)",
            "默认值": "false"
          },
          {
            "参数": "size",
            "说明": "输入框大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "-"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "style",
            "说明": "自定义样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "suffixIcon",
            "说明": "自定义的选择框后缀图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "指定选中项",
            "类型": "string[] | number[]",
            "默认值": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "onChange",
            "说明": "选择完成后的回调",
            "类型": "(value, selectedOptions) => void",
            "默认值": "-"
          },
          {
            "参数": "onDropdownVisibleChange",
            "说明": "显示/隐藏浮层的回调",
            "类型": "(value) => void",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "multiple",
            "说明": "支持多选节点",
            "类型": "boolean",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "showCheckedStrategy",
            "说明": "定义选中项回填的方式。`Cascader.SHOW_CHILD`: 只显示选中的子节点。`Cascader.SHOW_PARENT`: 只显示父节点（当父节点下所有子节点都选中时）。",
            "类型": "`Cascader.SHOW_PARENT` | `Cascader.SHOW_CHILD`",
            "默认值": "`Cascader.SHOW_PARENT`",
            "版本": "4.20.0"
          },
          {
            "参数": "removeIcon",
            "说明": "自定义的多选框清除图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "searchValue",
            "说明": "设置搜索的值，需要与 `showSearch` 配合使用",
            "类型": "string",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "onSearch",
            "说明": "监听搜索，返回输入的值",
            "类型": "(search: string) => void",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "dropdownMenuColumnStyle",
            "说明": "下拉菜单列的样式",
            "类型": "CSSProperties",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Cascader - showSearch",
        "property": [
          {
            "参数": "filter",
            "说明": "接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false",
            "类型": "function(inputValue, path): boolean",
            "默认值": "-"
          },
          {
            "参数": "limit",
            "说明": "搜索结果展示数量",
            "类型": "number | false",
            "默认值": "50"
          },
          {
            "参数": "matchInputWidth",
            "说明": "搜索结果列表是否与输入框同宽（[效果](https://github.com/ant-design/ant-design/issues/25779)）",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "render",
            "说明": "用于渲染 filter 后的选项",
            "类型": "function(inputValue, path): ReactNode",
            "默认值": "-"
          },
          {
            "参数": "sort",
            "说明": "用于排序 filter 后的选项",
            "类型": "function(a, b, inputValue)",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Cascader - 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "Carousel",
    "properties": [
      {
        "title": "Carousel - API",
        "property": [
          {
            "参数": "autoplay",
            "说明": "是否自动切换",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "autoplaySpeed",
            "说明": "自动切换的间隔（毫秒）",
            "类型": "number",
            "默认值": "3000"
          },
          {
            "参数": "dotPosition",
            "说明": "面板指示点位置，可选 `top` `bottom` `left` `right`",
            "类型": "string",
            "默认值": "`bottom`"
          },
          {
            "参数": "dots",
            "说明": "是否显示面板指示点，如果为 `object` 则同时可以指定 `dotsClass` 或者",
            "类型": "boolean | { className?: string }",
            "默认值": "true"
          },
          {
            "参数": "fade",
            "说明": "使用渐变切换动效",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "infinite",
            "说明": "是否无限循环切换（实现方式是复制两份 children 元素，如果子元素有副作用则可能会引发 bug）",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "speed",
            "说明": "切换动效的时间（毫秒）",
            "类型": "number",
            "默认值": "500"
          },
          {
            "参数": "easing",
            "说明": "动画效果",
            "类型": "string",
            "默认值": "`linear`"
          },
          {
            "参数": "effect",
            "说明": "动画效果函数",
            "类型": "`scrollx` | `fade`",
            "默认值": "`scrollx`"
          },
          {
            "参数": "afterChange",
            "说明": "切换面板的回调",
            "类型": "(current: number) => void",
            "默认值": "-"
          },
          {
            "参数": "beforeChange",
            "说明": "切换面板的回调",
            "类型": "(current: number, next: number) => void",
            "默认值": "-"
          },
          {
            "参数": "waitForAnimate",
            "说明": "是否等待切换动画",
            "类型": "boolean",
            "默认值": "false"
          }
        ]
      },
      {
        "title": "Carousel - 方法",
        "property": [
          {
            "名称": "goTo(slideNumber, dontAnimate)",
            "描述": "切换到指定面板, dontAnimate = true 时，不使用动画"
          },
          {
            "名称": "next()",
            "描述": "切换到下一面板"
          },
          {
            "名称": "prev()",
            "描述": "切换到上一面板"
          }
        ]
      }
    ]
  },
  {
    "title": "Card",
    "properties": [
      {
        "title": "Card - Card",
        "property": [
          {
            "参数": "actions",
            "说明": "卡片操作组，位置在卡片底部",
            "类型": "Array<ReactNode>",
            "默认值": "-"
          },
          {
            "参数": "activeTabKey",
            "说明": "当前激活页签的 key",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "bodyStyle",
            "说明": "内容区域自定义样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "bordered",
            "说明": "是否有边框",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "cover",
            "说明": "卡片封面",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "defaultActiveTabKey",
            "说明": "初始化选中页签的 key，如果没有设置 activeTabKey",
            "类型": "string",
            "默认值": "`第一个页签`"
          },
          {
            "参数": "extra",
            "说明": "卡片右上角的操作区域",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "headStyle",
            "说明": "自定义标题区域样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "hoverable",
            "说明": "鼠标移过时可浮起",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "loading",
            "说明": "当卡片内容还在加载中时，可以用 loading 展示一个占位",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "size",
            "说明": "card 的尺寸",
            "类型": "`default` | `small`",
            "默认值": "`default`"
          },
          {
            "参数": "tabBarExtraContent",
            "说明": "tab bar 上额外的元素",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "tabList",
            "说明": "页签标题列表",
            "类型": "-"
          },
          {
            "参数": "tabProps",
            "说明": "-",
            "类型": "-"
          },
          {
            "参数": "title",
            "说明": "卡片标题",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "type",
            "说明": "卡片类型，可设置为 `inner` 或 不设置",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "onTabChange",
            "说明": "页签切换的回调",
            "类型": "(key) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Card - Card.Grid",
        "property": [
          {
            "参数": "className",
            "说明": "网格容器类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "hoverable",
            "说明": "鼠标移过时可浮起",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "style",
            "说明": "定义网格容器类名的样式",
            "类型": "CSSProperties",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Card - Card.Meta",
        "property": [
          {
            "参数": "avatar",
            "说明": "头像/图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "className",
            "说明": "容器类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "description",
            "说明": "描述内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "style",
            "说明": "定义容器类名的样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "标题内容",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Calendar",
    "properties": [
      {
        "title": "Calendar - API",
        "property": [
          {
            "参数": "dateCellRender",
            "说明": "自定义渲染日期单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender`",
            "类型": "function(date: Dayjs): ReactNode",
            "默认值": "-",
            "版本": "< 5.4.0"
          },
          {
            "参数": "cellRender",
            "说明": "自定义单元格的内容",
            "类型": "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "dateFullCellRender",
            "说明": "自定义渲染日期单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender`",
            "类型": "function(date: Dayjs): ReactNode",
            "默认值": "-",
            "版本": "< 5.4.0"
          },
          {
            "参数": "fullCellRender",
            "说明": "自定义单元格的内容",
            "类型": "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "defaultValue",
            "说明": "默认展示的日期",
            "类型": "-"
          },
          {
            "参数": "disabledDate",
            "说明": "不可选择的日期，参数为当前 `value`，注意使用时[不要直接修改](https://github.com/ant-design/ant-design/issues/30987)",
            "类型": "(currentDate: Dayjs) => boolean",
            "默认值": "-"
          },
          {
            "参数": "fullscreen",
            "说明": "是否全屏显示",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "headerRender",
            "说明": "自定义头部内容",
            "类型": "function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()})",
            "默认值": "-"
          },
          {
            "参数": "locale",
            "说明": "国际化配置",
            "类型": "object"
          },
          {
            "参数": "mode",
            "说明": "初始模式",
            "类型": "`month` | `year`",
            "默认值": "`month`"
          },
          {
            "参数": "monthCellRender",
            "说明": "自定义渲染月单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender`",
            "类型": "function(date: Dayjs): ReactNode",
            "默认值": "-",
            "版本": "< 5.4.0"
          },
          {
            "参数": "cellRender",
            "说明": "自定义单元格的内容",
            "类型": "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "monthFullCellRender",
            "说明": "自定义渲染月单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender`",
            "类型": "function(date: Dayjs): ReactNode",
            "默认值": "-",
            "版本": "< 5.4.0"
          },
          {
            "参数": "fullCellRender",
            "说明": "自定义单元格的内容",
            "类型": "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "参数": "validRange",
            "说明": "设置可以显示的日期",
            "类型": "\\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)]",
            "默认值": "-"
          },
          {
            "参数": "value",
            "说明": "展示日期",
            "类型": "-"
          },
          {
            "参数": "onChange",
            "说明": "日期变化回调",
            "类型": "function(date: Dayjs)",
            "默认值": "-"
          },
          {
            "参数": "onPanelChange",
            "说明": "日期面板变化回调",
            "类型": "function(date: Dayjs, mode: string)",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "选择日期回调，包含来源信息",
            "类型": "function(date: Dayjs, info: { source: 'year' | 'month' | 'date' | 'customize' })",
            "默认值": "-",
            "版本": "`info`: 5.6.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Button",
    "properties": [
      {
        "title": "Button - API",
        "property": [
          {
            "属性": "block",
            "说明": "将按钮宽度调整为其父宽度的选项",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "classNames",
            "说明": "语义化结构 class",
            "类型": "Record<SemanticDOM, string>",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "属性": "danger",
            "说明": "设置危险按钮",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "disabled",
            "说明": "设置按钮失效状态",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "ghost",
            "说明": "幽灵属性，使按钮背景透明",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "属性": "href",
            "说明": "点击跳转的地址，指定此属性 button 的行为和 a 链接一致",
            "类型": "string",
            "默认值": "-"
          },
          {
            "属性": "htmlType",
            "说明": "设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)",
            "类型": "string",
            "默认值": "`button`"
          },
          {
            "属性": "icon",
            "说明": "设置按钮的图标组件",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "属性": "loading",
            "说明": "设置按钮载入状态",
            "类型": "boolean | { delay: number }",
            "默认值": "false"
          },
          {
            "属性": "shape",
            "说明": "设置按钮形状",
            "类型": "`default` | `circle` | `round`",
            "默认值": "`default`"
          },
          {
            "属性": "size",
            "说明": "设置按钮大小",
            "类型": "`large` | `middle` | `small`",
            "默认值": "`middle`"
          },
          {
            "属性": "styles",
            "说明": "语义化结构 style",
            "类型": "Record<SemanticDOM, CSSProperties>",
            "默认值": "-",
            "版本": "5.4.0"
          },
          {
            "属性": "target",
            "说明": "相当于 a 链接的 target 属性，href 存在时生效",
            "类型": "string",
            "默认值": "-"
          },
          {
            "属性": "type",
            "说明": "设置按钮类型",
            "类型": "`primary` | `dashed` | `link` | `text` | `default`",
            "默认值": "`default`"
          },
          {
            "属性": "onClick",
            "说明": "点击按钮时的回调",
            "类型": "(event: MouseEvent) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Button - `styles`",
        "property": [
          {
            "名称": "icon",
            "说明": "设置图标元素",
            "版本": "5.5.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Breadcrumb",
    "properties": [
      {
        "title": "Breadcrumb - Breadcrumb",
        "property": [
          {
            "参数": "itemRender",
            "说明": "自定义链接函数，和 react-router 配置使用",
            "类型": "(route, params, routes, paths) => ReactNode",
            "默认值": "-"
          },
          {
            "参数": "params",
            "说明": "路由的参数",
            "类型": "object",
            "默认值": "-"
          },
          {
            "参数": "items",
            "说明": "路由栈信息",
            "类型": "-",
            "默认值": "5.3.0"
          },
          {
            "参数": "separator",
            "说明": "分隔符自定义",
            "类型": "ReactNode",
            "默认值": "`/`"
          }
        ]
      },
      {
        "title": "Breadcrumb - RouteItemType",
        "property": [
          {
            "参数": "className",
            "说明": "自定义类名",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "dropdownProps",
            "说明": "弹出下拉菜单的自定义配置",
            "类型": "-"
          },
          {
            "参数": "href",
            "说明": "链接的目的地，不能和 `path` 共用",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "path",
            "说明": "拼接路径，每一层都会拼接前一个 `path` 信息。不能和 `href` 共用",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "menu",
            "说明": "菜单配置项",
            "类型": "-",
            "默认值": "4.24.0"
          },
          {
            "参数": "onClick",
            "说明": "单击事件",
            "类型": "(e:MouseEvent) => void",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "名称",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "5.3.0"
          }
        ]
      },
      {
        "title": "Breadcrumb - SeparatorType",
        "property": [
          {
            "参数": "type",
            "说明": "标记为分隔符",
            "类型": "`separator`",
            "默认值": "5.3.0"
          },
          {
            "参数": "separator",
            "说明": "要显示的分隔符",
            "类型": "ReactNode",
            "默认值": "`/`",
            "版本": "5.3.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Badge",
    "properties": [
      {
        "title": "Badge - Badge",
        "property": [
          {
            "参数": "color",
            "说明": "自定义小圆点的颜色",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "count",
            "说明": "展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "classNames",
            "说明": "语义化结构 class",
            "类型": "Record<SemanticDOM, string>",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "dot",
            "说明": "不展示数字，只有一个小红点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "offset",
            "说明": "设置状态点的位置偏移",
            "类型": "\\[number, number]",
            "默认值": "-"
          },
          {
            "参数": "overflowCount",
            "说明": "展示封顶的数字值",
            "类型": "number",
            "默认值": "99"
          },
          {
            "参数": "showZero",
            "说明": "当数值为 0 时，是否展示 Badge",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "size",
            "说明": "在设置了 `count` 的前提下有效，设置小圆点的大小",
            "类型": "`default` | `small`",
            "默认值": "-",
            "版本": "-"
          },
          {
            "参数": "status",
            "说明": "设置 Badge 为状态点",
            "类型": "`success` | `processing` | `default` | `error` | `warning`",
            "默认值": "-"
          },
          {
            "参数": "styles",
            "说明": "语义化结构 style",
            "类型": "Record<SemanticDOM, CSSProperties>",
            "默认值": "-",
            "版本": "5.7.0"
          },
          {
            "参数": "text",
            "说明": "在设置了 `status` 的前提下有效，设置状态点的文本",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "设置鼠标放在状态点上时显示的文字",
            "类型": "string",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Badge - Badge.Ribbon",
        "property": [
          {
            "参数": "color",
            "说明": "自定义缎带的颜色",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "placement",
            "说明": "缎带的位置，`start` 和 `end` 随文字方向（RTL 或 LTR）变动",
            "类型": "`start` | `end`",
            "默认值": "`end`"
          },
          {
            "参数": "text",
            "说明": "缎带中填入的内容",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Badge - `styles`",
        "property": [
          {
            "名称": "root",
            "说明": "设置根元素",
            "版本": "5.7.0"
          },
          {
            "名称": "indicator",
            "说明": "设置徽标元素",
            "版本": "5.7.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Avatar",
    "properties": [
      {
        "title": "Avatar - Avatar",
        "property": [
          {
            "参数": "alt",
            "说明": "图像无法显示时的替代文本",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "gap",
            "说明": "字符类型距离左右两侧边界单位像素",
            "类型": "number",
            "默认值": "4",
            "版本": "4.3.0"
          },
          {
            "参数": "icon",
            "说明": "设置头像的自定义图标",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "shape",
            "说明": "指定头像的形状",
            "类型": "`circle` | `square`",
            "默认值": "`circle`"
          },
          {
            "参数": "size",
            "说明": "设置头像的大小",
            "类型": "number | `large` | `small` | `default` | { xs: number, sm: number, ...}",
            "默认值": "`default`",
            "版本": "4.7.0"
          },
          {
            "参数": "src",
            "说明": "图片类头像的资源地址或者图片元素",
            "类型": "string | ReactNode",
            "默认值": "-",
            "版本": "ReactNode: 4.8.0"
          },
          {
            "参数": "srcSet",
            "说明": "设置图片类头像响应式资源地址",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "draggable",
            "说明": "图片是否允许拖动",
            "类型": "boolean | `'true'` | `'false'`",
            "默认值": "true"
          },
          {
            "参数": "crossOrigin",
            "说明": "CORS 属性设置",
            "类型": "`'anonymous'` | `'use-credentials'` | `''`",
            "默认值": "-",
            "版本": "4.17.0"
          },
          {
            "参数": "onError",
            "说明": "图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为",
            "类型": "() => boolean",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Avatar - Avatar.Group (4.5.0+)",
        "property": [
          {
            "参数": "maxCount",
            "说明": "显示的最大头像个数",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "maxPopoverPlacement",
            "说明": "多余头像气泡弹出位置",
            "类型": "`top` | `bottom`",
            "默认值": "`top`"
          },
          {
            "参数": "maxPopoverTrigger",
            "说明": "设置多余头像 Popover 的触发方式",
            "类型": "`hover` | `focus` | `click`",
            "默认值": "`hover`",
            "版本": "4.17.0"
          },
          {
            "参数": "maxStyle",
            "说明": "多余头像样式",
            "类型": "CSSProperties",
            "默认值": "-"
          },
          {
            "参数": "size",
            "说明": "设置头像的大小",
            "类型": "number | `large` | `small` | `default` | { xs: number, sm: number, ...}",
            "默认值": "`default`",
            "版本": "4.8.0"
          },
          {
            "参数": "shape",
            "说明": "设置头像的形状",
            "类型": "`circle` | `square`",
            "默认值": "`circle`",
            "版本": "5.8.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Auto-complete",
    "properties": [
      {
        "title": "Auto-complete - API",
        "property": [
          {
            "参数": "allowClear",
            "说明": "支持清除",
            "类型": "boolean | { clearIcon?: ReactNode }",
            "默认值": "false",
            "版本": "5.8.0: 支持对象形式"
          },
          {
            "参数": "autoFocus",
            "说明": "自动获取焦点",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "backfill",
            "说明": "使用键盘选择选项的时候把选中项回填到输入框中",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "children (自动完成的数据源)",
            "说明": "自动完成的数据源",
            "类型": "React.ReactElement<OptionProps> | Array<React.ReactElement<OptionProps>>",
            "默认值": "-"
          },
          {
            "参数": "children (自定义输入框)",
            "说明": "自定义输入框",
            "类型": "HTMLInputElement | HTMLTextAreaElement | React.ReactElement<InputProps>",
            "默认值": "\\<Input />"
          },
          {
            "参数": "defaultActiveFirstOption",
            "说明": "是否默认高亮第一个选项",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "defaultOpen",
            "说明": "是否默认展开下拉菜单",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "defaultValue",
            "说明": "指定默认选中的条目",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "disabled",
            "说明": "是否禁用",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "dropdownRender",
            "说明": "自定义下拉框内容",
            "类型": "(menus: ReactNode) => ReactNode",
            "默认值": "-",
            "版本": "4.24.0"
          },
          {
            "参数": "popupClassName",
            "说明": "下拉菜单的 className 属性",
            "类型": "string",
            "默认值": "-",
            "版本": "4.23.0"
          },
          {
            "参数": "dropdownMatchSelectWidth",
            "说明": "下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动",
            "类型": "boolean | number",
            "默认值": "true"
          },
          {
            "参数": "filterOption",
            "说明": "是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false",
            "类型": "boolean | function(inputValue, option)",
            "默认值": "true"
          },
          {
            "参数": "getPopupContainer",
            "说明": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)",
            "类型": "function(triggerNode)",
            "默认值": "() => document.body"
          },
          {
            "参数": "notFoundContent",
            "说明": "当下拉列表为空时显示的内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "open",
            "说明": "是否展开下拉菜单",
            "类型": "boolean",
            "默认值": "-"
          },
          {
            "参数": "options",
            "说明": "数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能",
            "类型": "{ label, value }[]",
            "默认值": "-"
          },
          {
            "参数": "placeholder",
            "说明": "输入框提示",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "status",
            "说明": "设置校验状态",
            "类型": "'error' | 'warning'",
            "默认值": "-",
            "版本": "4.19.0"
          },
          {
            "参数": "value",
            "说明": "指定当前选中的条目",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "variant",
            "说明": "形态变体",
            "类型": "`outlined` | `borderless` | `filled`",
            "默认值": "`outlined`",
            "版本": "5.13.0"
          },
          {
            "参数": "onBlur",
            "说明": "失去焦点时的回调",
            "类型": "function()",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "选中 option，或 input 的 value 变化时，调用此函数",
            "类型": "function(value)",
            "默认值": "-"
          },
          {
            "参数": "onDropdownVisibleChange",
            "说明": "展开下拉菜单的回调",
            "类型": "function(open)",
            "默认值": "-"
          },
          {
            "参数": "onFocus",
            "说明": "获得焦点时的回调",
            "类型": "function()",
            "默认值": "-"
          },
          {
            "参数": "onSearch",
            "说明": "搜索补全项的时候调用",
            "类型": "function(value)",
            "默认值": "-"
          },
          {
            "参数": "onSelect",
            "说明": "被选中时调用，参数为选中项的 value 值",
            "类型": "function(value, option)",
            "默认值": "-"
          },
          {
            "参数": "onClear",
            "说明": "清除内容时的回调",
            "类型": "function",
            "默认值": "-",
            "版本": "4.6.0"
          }
        ]
      },
      {
        "title": "Auto-complete - 方法",
        "property": [
          {
            "名称": "blur()",
            "描述": "移除焦点"
          },
          {
            "名称": "focus()",
            "描述": "获取焦点"
          }
        ]
      }
    ]
  },
  {
    "title": "App",
    "properties": [
      {
        "title": "App - App",
        "property": [
          {
            "参数": "component",
            "说明": "设置渲染元素，为 `false` 则不创建 DOM 节点",
            "类型": "ComponentType",
            "默认值": "div",
            "版本": "5.11.0"
          },
          {
            "参数": "message",
            "说明": "App 内 Message 的全局配置",
            "类型": "-",
            "默认值": "5.3.0"
          },
          {
            "参数": "notification",
            "说明": "App 内 Notification 的全局配置",
            "类型": "-",
            "默认值": "5.3.0"
          }
        ]
      }
    ]
  },
  {
    "title": "Anchor",
    "properties": [
      {
        "title": "Anchor - Anchor Props",
        "property": [
          {
            "参数": "affix",
            "说明": "固定模式",
            "类型": "boolean",
            "默认值": "true"
          },
          {
            "参数": "bounds",
            "说明": "锚点区域边界",
            "类型": "number",
            "默认值": "5"
          },
          {
            "参数": "getContainer",
            "说明": "指定滚动的容器",
            "类型": "() => HTMLElement",
            "默认值": "() => window"
          },
          {
            "参数": "getCurrentAnchor",
            "说明": "自定义高亮的锚点",
            "类型": "(activeLink: string) => string",
            "默认值": "-"
          },
          {
            "参数": "offsetTop",
            "说明": "距离窗口顶部达到指定偏移量后触发",
            "类型": "number"
          },
          {
            "参数": "showInkInFixed",
            "说明": "`affix={false}` 时是否显示小方块",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "targetOffset",
            "说明": "锚点滚动偏移量，默认与 offsetTop 相同，[例子](#components-anchor-demo-targetoffset)",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "onChange",
            "说明": "监听锚点链接改变",
            "类型": "(currentActiveLink: string) => void",
            "默认值": "-"
          },
          {
            "参数": "onClick",
            "说明": "`click` 事件的 handler",
            "类型": "(e: MouseEvent, link: object) => void",
            "默认值": "-"
          },
          {
            "参数": "items",
            "说明": "数据化配置选项内容，支持通过 children 嵌套",
            "类型": "{ key, href, title, target, children }[] [具体见](#anchoritem)",
            "默认值": "-",
            "版本": "5.1.0"
          },
          {
            "参数": "direction",
            "说明": "设置导航方向",
            "类型": "`vertical` | `horizontal`",
            "默认值": "`vertical`",
            "版本": "5.2.0"
          },
          {
            "参数": "replace",
            "说明": "替换浏览器历史记录中项目的 href 而不是推送它",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.7.0"
          }
        ]
      },
      {
        "title": "Anchor - AnchorItem",
        "property": [
          {
            "参数": "key",
            "说明": "唯一标志",
            "类型": "string | number",
            "默认值": "-"
          },
          {
            "参数": "href",
            "说明": "锚点链接",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "target",
            "说明": "该属性指定在何处显示链接的资源",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "文字内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "children",
            "说明": "嵌套的 Anchor Link，`注意：水平方向该属性不支持`",
            "类型": "-"
          },
          {
            "参数": "replace",
            "说明": "替换浏览器历史记录中的项目 href 而不是推送它",
            "类型": "boolean",
            "默认值": "false",
            "版本": "5.7.0"
          }
        ]
      },
      {
        "title": "Anchor - Link Props",
        "property": [
          {
            "参数": "href",
            "说明": "锚点链接",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "target",
            "说明": "该属性指定在何处显示链接的资源",
            "类型": "string",
            "默认值": "-"
          },
          {
            "参数": "title",
            "说明": "文字内容",
            "类型": "ReactNode",
            "默认值": "-"
          }
        ]
      }
    ]
  },
  {
    "title": "Alert",
    "properties": [
      {
        "title": "Alert - API",
        "property": [
          {
            "参数": "action",
            "说明": "自定义操作项",
            "类型": "ReactNode",
            "默认值": "-",
            "版本": "4.9.0"
          },
          {
            "参数": "afterClose",
            "说明": "关闭动画结束后触发的回调函数",
            "类型": "() => void",
            "默认值": "-"
          },
          {
            "参数": "banner",
            "说明": "是否用作顶部公告",
            "类型": "boolean",
            "默认值": "false"
          },
          {
            "参数": "closeIcon",
            "说明": "自定义关闭 Icon，>=5.7.0: 设置为 `null` 或 `false` 时隐藏关闭按钮",
            "类型": "boolean | ReactNode",
            "默认值": "`<CloseOutlined />`"
          },
          {
            "参数": "description",
            "说明": "警告提示的辅助性文字介绍",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "icon",
            "说明": "自定义图标，`showIcon` 为 true 时有效",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "message",
            "说明": "警告提示内容",
            "类型": "ReactNode",
            "默认值": "-"
          },
          {
            "参数": "showIcon",
            "说明": "是否显示辅助图标",
            "类型": "boolean",
            "默认值": "false，`banner` 模式下默认值为 true"
          },
          {
            "参数": "type",
            "说明": "指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error`",
            "类型": "string",
            "默认值": "`info`，`banner` 模式下默认值为 `warning`"
          },
          {
            "参数": "onClose",
            "说明": "关闭时触发的回调函数",
            "类型": "(e: MouseEvent) => void",
            "默认值": "-"
          }
        ]
      },
      {
        "title": "Alert - Alert.ErrorBoundary",
        "property": [
          {
            "参数": "description",
            "说明": "自定义错误内容，如果未指定会展示报错堆栈",
            "类型": "ReactNode",
            "默认值": "{{ error stack }}"
          },
          {
            "参数": "message",
            "说明": "自定义错误标题，如果未指定会展示原生报错信息",
            "类型": "ReactNode",
            "默认值": "{{ error }}"
          }
        ]
      }
    ]
  },
  {
    "title": "Affix",
    "properties": [
      {
        "title": "Affix - API",
        "property": [
          {
            "参数": "offsetBottom",
            "说明": "距离窗口底部达到指定偏移量后触发",
            "类型": "number",
            "默认值": "-"
          },
          {
            "参数": "offsetTop",
            "说明": "距离窗口顶部达到指定偏移量后触发",
            "类型": "number",
            "默认值": "0"
          },
          {
            "参数": "target",
            "说明": "设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数",
            "类型": "() => HTMLElement",
            "默认值": "() => window"
          },
          {
            "参数": "onChange",
            "说明": "固定状态改变时触发的回调函数",
            "类型": "(affixed?: boolean) => void",
            "默认值": "-"
          }
        ]
      }
    ]
  }
]