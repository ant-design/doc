[
  {
    "title": "Umi 4 如何进行自动化测试？",
    "md": "Umi 4 提供了单元测试的脚手架，帮助开发者实现自动化测试。推荐使用 Jest 和 @testing-library/react 完成项目中的单元测试。开发者可以利用这些工具来编写和运行测试用例，确保代码的质量和稳定性。\n"
  },
  {
    "title": "Umi 4 推荐使用哪些工具进行单元测试？",
    "md": "在 Umi 4 中，推荐使用 Jest 和 @testing-library/react 进行单元测试。Jest 是一个功能强大的 JavaScript 测试框架，提供了简洁的断言、模拟、代码覆盖率等功能。@testing-library/react 则是专门为 React 应用设计的测试工具库，提供了一系列方便的 API，能够模拟用户行为并对组件进行测试。\n"
  },
  {
    "title": "使用 Umi 4 进行自动化测试的好处有哪些？",
    "md": "使用 Umi 4 进行自动化测试可以带来多个好处。首先，自动化测试能够提高测试效率和准确性，避免人工测试的繁琐和主观性带来的偏差。其次，自动化测试可以大大降低代码修改引发的回归 bug，保证项目的稳定性和可维护性。此外，自动化测试还能够帮助发现潜在的问题和性能瓶颈，提前预防和解决可能的风险。\n以上就是关于 Umi 4 自动化测试的一些介绍和推荐，希望对你有帮助。\n"
  },
  {
    "title": "如何使用 Umi 4 的微生成器配置 Jest？",
    "md": "要使用 Umi 4 的微生成器快速配置 Jest，可以按照以下步骤进行操作：\n1. 首先，使用微生成器配置 Jest 的参考文档。可以在 `./generator#jest-配置生成器` 找到相关的参考信息。\n\n2. 如果你需要修改 Jest 相关的配置，可以在 `jest.config.ts` 文件中进行修改。\n\n3. 对于 umi 项目，可以按照以下代码进行配置：\n```ts\nimport { Config, configUmiAlias, createConfig } from 'umi/test';\n\nexport default async () => {\n  return (await configUmiAlias({\n    ...createConfig({\n      target: 'browser',\n      jsTransformer: 'esbuild',\n      jsTransformerOpts: { jsx: 'automatic' },\n    }),\n    // 可以覆盖 umi 的默认 jest 配置，例如:\n    // displayName: \"Umi jest\",\n  })) as Config.InitialOptions;\n};\n```\n4. 对于 @umijs/max 项目，可以按照以下代码进行配置：\n```ts\nimport { Config, configUmiAlias, createConfig } from '@umijs/max/test';\n\nexport default async () => {\n  return (await configUmiAlias({\n    ...createConfig({\n      target: 'browser',\n      jsTransformer: 'esbuild',\n      jsTransformerOpts: { jsx: 'automatic' },\n    }),\n    // 可以覆盖 umi 的默认 jest 配置，例如:\n    // displayName: \"Umi jest\",\n  })) as Config.InitialOptions;\n};\n```\n配置完成后，你就可以开始编写单元测试了。\n"
  },
  {
    "title": "Umi 4 的微生成器配置 Jest 时需要注意什么？",
    "md": "在使用 Umi 4 的微生成器配置 Jest 时，需要注意以下几点：\n1. 可以通过修改 `jest.config.ts` 文件来修改 Jest 相关的配置。\n\n2. 对于 umi 项目，可以通过导入 `umi/test` 模块来获取相关的配置信息。\n\n3. 对于 @umijs/max 项目，可以通过导入 `@umijs/max/test` 模块来获取相关的配置信息。\n\n4. 在配置 Jest 时，可以覆盖 umi 的默认 Jest 配置，例如设置 `displayName` 属性。\n准备好配置后，你就可以开始编写单元测试了。\n"
  },
  {
    "title": "如何测试 `reverseApiData` 函数？",
    "md": "当测试 `reverseApiData` 函数时，我们可以按照以下步骤进行：\n1. 准备使用的 mock 函数或数据，例如使用 `jest.fn()` 创建一个模拟的 `fetcher` 函数来模拟请求。\n2. 执行被测试的函数，调用 `reverseApiData` 函数，并传入相应的参数。\n3. 断言测试的结果，使用 `expect` 断言函数来验证是否达到预期结果。\n例如，我们可以编写一个测试用例来确保 `fetcher` 函数使用传入的 `url` 请求 API 的数据：\n```ts\ntest('reverseApiData use fetcher to request url', async () => {\n  // 准备 mock 函数或数据\n  const fetcher = jest.fn().mockResolvedValue({\n    json: () => Promise.resolve(),\n  });\n\n  // 执行被测试的函数\n  await reverseApiData('https://api.end/point', fetcher);\n\n  // 断言测试结果\n  expect(fetcher).toBeCalledWith('https://api.end/point');\n});\n```\n执行测试时，可以使用命令 `npx jest` 运行测试。\n我们还可以编写另一个测试用例来验证 `reverseApiData` 函数能够正确完成键值对的对换功能：\n```ts\ntest('reverseApiData reverse simple object', async () => {\n  const fetcher = jest.fn().mockResolvedValue({\n    json: () => Promise.resolve({ dat{ 'b' } }),\n  });\n\n  const reversed = await reverseApiData('url', fetcher);\n\n  expect(reversed).toEqual({ b: 'a' });\n});\n```\n通过编写单个功能点的测试用例，可以更准确地检测重构过程中是否破坏了某些功能。\n"
  },
  {
    "title": "如何使用 jest 的 snapshot 进行渲染结果判断？",
    "md": "使用 jest 的 snapshot 进行渲染结果判断，可以通过比较当前渲染结果与之前保存的快照进行断言。\n1. 首先在测试文件中导入 `render` 方法和需要测试的组件：\n```tsx\nimport { render } from '@testing-library/react';\nimport React from 'react';\nimport Greet from './Greet';\n```\n2. 然后编写测试用例并调用 `render` 方法渲染组件，获取渲染结果的容器 element：\n```tsx\ntest('renders Greet without name by snapshot', () => {\n  const { container } = render(<Greet />);\n  // ...\n});\n```\n3. 最后使用 `expect` 函数对容器的快照进行断言，并调用 `toMatchSnapshot` 方法生成快照：\n```tsx\ntest('renders Greet without name by snapshot', () => {\n  const { container } = render(<Greet />);\n\n  expect(container).toMatchSnapshot();\n});\n```\n执行 `npx jest` 后，测试用例会生成一个 `__snapshots__` 文件夹，其中包含了每个测试用例的快照信息。记得将生成的快照文件加入版本管理中，以便后续做比较。\n"
  },
  {
    "title": "如何使用 jest 的 inline snapshot 进行渲染结果判断？",
    "md": "使用 jest 的 inline snapshot 进行渲染结果判断，可以在测试代码中直接填入快照字符串作为断言的参数。\n1. 首先编写测试用例，并渲染需要测试的组件，获取渲染结果的容器 element：\n```tsx\ntest('renders Greet without name by inline snapshot', () => {\n  const { container } = render(<Greet />);\n  // ...\n});\n```\n2. 然后使用 `expect` 函数对容器的快照进行断言，并调用 `toMatchInlineSnapshot` 方法：\n```tsx\ntest('renders Greet without name by inline snapshot', () => {\n  const { container } = render(<Greet />);\n\n  expect(container).toMatchInlineSnapshot();\n});\n```\n执行 `npx jest` 后，在 `toMatchInlineSnapshot` 函数的参数中会自动填入生成的快照字符串。这种方式适用于渲染结果较短的情况。\n"
  },
  {
    "title": "如何使用 @testing-library/jest-dom 进行渲染结果判断？",
    "md": "使用 @testing-library/jest-dom 断言进行渲染结果判断，可以更方便地对渲染结果进行断言。\n1. 首先在测试文件中导入 `@testing-library/jest-dom`：\n```tsx\nimport '@testing-library/jest-dom';\n```\n2. 然后编写测试用例并调用 `render` 方法渲染组件，获取渲染结果的 element：\n```tsx\ntest('renders Greet without name assert by testing-library', () => {\n  const { container } = render(<Greet />);\n  // ...\n});\n```\n3. 最后使用 `screen.getByText` 方法获取渲染结果中的特定元素，并使用 `expect` 函数对获取到的元素进行断言，比如使用 `toBeInTheDocument` 断言该元素是否在文档中：\n```tsx\ntest('renders Greet without name assert by testing-library', () => {\n  const { container } = render(<Greet />);\n\n  const greetDom = screen.getByText('Anonymous');\n  expect(greetDom).toBeInTheDocument();\n});\n```\n以上就是使用 @testing-library/jest-dom 进行渲染结果判断的步骤。可通过该库提供的断言 API 对渲染结果进行更丰富的断言，详细的断言 API 可以参考[官方文档](https://github.com/testing-library/jest-dom)。\n"
  },
  {
    "title": "`Greet` 组件的测试中，为什么要使用 `await` 关键字？",
    "md": "`await` 关键字用于等待异步操作完成，这里的异步操作是指在点击事件触发后，执行 `onClick` 函数的过程。使用 `await` 关键字可以保证在异步操作完成之后再继续执行后续的断言和判断。\n"
  },
  {
    "title": "`Greet` 组件的测试中，`fireEvent.click` 函数的参数是什么？",
    "md": "`fireEvent.click` 函数的参数是一个 DOM 元素或包含该元素的组件，在测试中我们通常使用 `screen.getByText` 函数来获取需要点击的元素。参数中的正则表达式 `/hello/i` 是用来匹配文本内容为 \"hello\" 的元素。\n"
  },
  {
    "title": "`Greet` 组件的测试中，`expect(onClick).toBeCalledTimes(1)`",
    "md": "是什么意思？\n`expect(onClick).toBeCalledTimes(1)` 是一个断言语句，用于判断 `onClick` 函数被调用的次数是否为 1。在这个测试中，我们期望点击事件触发后，`onClick` 函数只被调用一次。\n`Greet` 组件的测试中，`container` 是什么？`container` 是一个容器变量，可以用来获取测试组件渲染后的 DOM 元素。在这个测试中，我们没有使用 `container` 变量，但它在其他测试中可能会用到。\n"
  }
]