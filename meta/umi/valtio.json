[
  {
    "title": "什么是 `proxyWithComputed` 方法？",
    "md": "`proxyWithComputed` 是一个用于创建带有计算属性的响应式对象的工具方法。它接收两个参数：初始状态对象和一个计算属性对象。通过使用 `proxyWithComputed`，我们可以在初始状态对象上定义计算属性，这些计算属性会根据状态对象的变化自动更新。\n"
  },
  {
    "title": "在给定的示例中，`state` 对象有什么属性？",
    "md": "在给定的示例中，`state` 对象有一个属性 `count`，其初始值为 `0`。\n"
  },
  {
    "title": "在给定的示例中，`proxyWithComputed` 方法的作用是什么？",
    "md": "在给定的示例中，`proxyWithComputed` 方法用于创建一个具有计算属性的代理对象。该代理对象基于初始状态对象 `state`，并根据计算属性对象中定义的计算逻辑自动更新计算属性的值。\n其中，计算属性 `double` 的值是通过将状态对象的 `count` 属性值乘以 `2` 得到的。当 `state` 对象的 `count` 属性发生变化时，计算属性 `double` 的值也会自动更新。\n"
  },
  {
    "title": "什么是 proxy 函数在 Umi 中的作用？",
    "md": "在 Umi 中，proxy 函数可以用于定义 state 和 actions。它可以帮助我们创建一个响应式的状态对象，使得当状态发生改变时，相关的组件能够自动更新。同时，它也可以用于定义异步的 actions，方便进行数据的获取和处理。\n"
  },
  {
    "title": "如何使用 proxy 函数将 state 和 actions 放在一起？",
    "md": "可以使用 proxy 函数将 state 和 actions 放在一起的方式有两种方法：\n方法一：\n```ts\nimport { proxy } from 'umi';\n\nconst state = proxy({\n  count: 0,\n  actions: {\n    add() {\n      state.count += 1;\n    },\n  },\n});\n```\n方法二：\n```ts\nimport { proxy } from 'umi';\n\nconst state = proxy({ count: 0 });\nconst actions = {\n  add() {\n    state.count += 1;\n  },\n  // 异步 action\n  async addAsync() {\n    state.count += await fetch('/api/add');\n  },\n};\n```\n"
  },
  {
    "title": "如何使用 proxy 函数将 state 和 actions 分开放？",
    "md": "可以使用 proxy 函数将 state 和 actions 分开放的方式如下：\n```ts\nimport { proxy } from 'umi';\n\nconst state = proxy({ count: 0 });\n\nconst actions = {\n  add() {\n    state.count += 1;\n  },\n  // 异步 action\n  async addAsync() {\n    state.count += await fetch('/api/add');\n  },\n};\n```\n在这种方式下，state 和 actions 是两个独立的对象，可以分别引用和使用。\n"
  },
  {
    "title": "什么是数据结构的拆分与组合？",
    "md": "数据结构的拆分与组合是指将一个复杂的数据结构，通过拆分成多个较小的数据结构，以及将多个较小的数据结构组合成一个复杂的数据结构的过程。这种拆分与组合的方式可以使数据结构的设计更加模块化和灵活，提高代码的可读性和可维护性。\n"
  },
  {
    "title": "如何使用 proxy 实现数据结构的拆分与组合？",
    "md": "使用 proxy 可以实现数据结构的拆分与组合。通过创建 proxy 对象，可以对原始数据结构进行拆分，将不同部分分别进行处理。同时，可以通过创建多个 proxy 对象，将多个较小的数据结构组合成一个复杂的数据结构。\n例如，在示例代码中，通过创建 proxy 对象 state，可以将原始数据结构拆分为 foo 和 bar 两个部分。然后，通过创建两个新的 proxy 对象 foo 和 bar，分别处理这两个部分。最后，通过创建一个新的 proxy 对象 state，将 foo 和 bar 组合成一个新的复杂数据结构。\n"
  },
  {
    "title": "使用数据结构的拆分与组合有什么好处？",
    "md": "使用数据结构的拆分与组合可以带来以下好处：\n1. 模块化：拆分数据结构可以将复杂的问题划分为多个较小的子问题，更容易理解和处理。\n\n2. 可读性：拆分后的较小数据结构更加清晰和简单，提高了代码的可读性，减少了代码的复杂性。\n\n3. 可维护性：拆分后的较小数据结构可以独立管理和维护，使代码的修改和扩展更加方便和可控。\n\n4. 灵活性：组合多个较小的数据结构可以根据实际需求灵活地创建不同数据结构，提高了代码的灵活性和可扩展性。\n通过数据结构的拆分与组合，可以使代码更加简洁、可读性更高、可维护性更强，并提供更好的代码重用性和扩展性。这种设计方式在复杂的应用和系统开发中尤为重要。\n"
  },
  {
    "title": "什么是组件封装？",
    "md": "组件封装是指将一个或多个功能相对独立、可复用的代码块打包成一个组件，以方便在项目中多次使用。组件封装的目的是将代码进行抽象和封装，提高代码复用性和可维护性。通过组件封装，可以减少重复的代码编写，降低维护成本，并且使得代码更加清晰、易读和易于测试。\n"
  },
  {
    "title": "如何使用 context 进行组件封装？",
    "md": "在组件封装过程中，如果需要在多个子组件中共享数据或状态，可以使用 Context 进行数据传递。以下是使用 Context 进行组件封装的步骤：\n1. 使用 `createContext` 创建一个 Context 对象。\n2. 使用 `useRef` 创建一个可变的引用，用于存储共享的数据或状态。\n3. 使用 `<Context.Provider>` 组件将共享的数据或状态传递给子组件。\n4. 在子组件中使用 `useContext` 钩子来获取共享的数据或状态。\n通过以上步骤，可以将相关的数据或状态封装在一个 Context 中，然后通过 Provider 将其传递给需要使用的子组件。这样可以实现在子组件中访问共享的数据或状态，从而实现组件封装。\n"
  },
  {
    "title": "如何进行 props 到 state 的数据同步？",
    "md": "在组件封装过程中，有时需要将 props 中的数据同步到组件的 state 中。以下是实现 props 到 state 数据同步的方法：\n1. 在组件的 `constructor` 方法中，通过 `super(props)` 调用父类的构造函数来接收传入的 props。\n2. 在 `constructor` 方法中，使用 `this.state` 初始化组件的状态。\n3. 在 `componentDidUpdate` 生命周期方法中，使用 `this.setState` 方法更新组件的状态，并在更新前进行判断以避免不必要的状态更新。\n4. 在 `componentDidMount` 生命周期方法中，将 props 中的数据同步到组件的状态中，以初始化组件的状态。\n通过以上步骤，可以实现将 props 中的数据同步到组件的 state 中，从而实现数据的双向绑定效果。这样可以使得组件在接收到新的 props 数据时能够更新组件的状态，从而保持组件的一致性。\n"
  },
  {
    "title": "Redux DevTools 是什么？",
    "md": "Redux DevTools 是一个用于调试和监控 Redux 应用程序的浏览器扩展或独立应用程序。它提供了一个界面，可以查看和修改 Redux 应用程序中的状态树，以及跟踪和调试 Redux 的 action 和 reducer。\n"
  },
  {
    "title": "`proxy` 函数的作用是什么？",
    "md": "`proxy` 函数是一个用来创建可观察对象（observable object）的函数。通过传入一个普通对象，`proxy` 函数会返回一个可观察对象，该对象可以被监听和订阅。当可观察对象的属性发生变化时，可以通过相应的事件来获取变化的信息。\n"
  },
  {
    "title": "如何在 Redux DevTools 中使用 `proxyWithDevtools`？",
    "md": "`proxyWithDevtools` 函数是用来将可观察对象连接到 Redux DevTools 的函数。在调用 `proxyWithDevtools` 函数时，需要传入可观察对象和一些配置选项。这样，当可观察对象的属性发生变化时，Redux DevTools 将收到相应的更新并显示在界面上。这对于调试和监控 Redux 应用程序中的状态变化非常有用。\n"
  },
  {
    "title": "什么是 Redo & Undo 支持？",
    "md": "Redo & Undo 支持是指在应用程序中可以回退（Undo）到之前的状态或者重新执行（Redo）之前操作的功能。通过 Redo & Undo 支持，用户可以方便地撤销之前的操作并返回到之前的状态，或者重新执行之前的操作以返回到最新的状态。\n"
  },
  {
    "title": "如何使用 Redo & Undo 支持？",
    "md": "在使用 Redo & Undo 支持的应用程序中，需要先创建一个可撤销的状态对象。可以使用 `proxyWithHistory` 方法来创建这个对象。通过这个对象，可以访问和修改状态的值，并且可以通过调用 `undo` 方法来回退到之前的状态，通过调用 `redo` 方法来重新执行之前的操作，以及通过访问 `history` 属性来获取撤销和重做的历史记录。\n"
  },
  {
    "title": "如何使用 Redo & Undo 支持的示例代码？",
    "md": "在以上示例代码中，首先使用 `proxyWithHistory` 方法创建了一个状态对象 `state`。然后通过 `state.value.count` 来访问状态对象中的 `count` 属性，并通过 `state.value.count += 1` 来修改这个属性的值。接下来可以通过调用 `state.undo()` 方法来回退到之前的状态，或者调用 `state.redo()` 方法来重新执行之前的操作。最后可以通过访问 `state.history` 属性来获取撤销和重做的历史记录。\n"
  },
  {
    "title": "什么是持久化缓存？",
    "md": "持久化缓存是一种将数据存储在持久化介质（例如硬盘、数据库、云存储等）中的缓存方式。与传统内存缓存不同，持久化缓存可以在系统重启或应用程序关闭后仍然保留数据。这种方式可以用于存储一些需要长期保存的数据，例如用户的登录状态、应用程序的配置信息等。\n"
  },
  {
    "title": "什么是 `proxyWithPersistant`？",
    "md": "`proxyWithPersistant` 是一个函数，用于创建一个带有持久化缓存功能的代理对象。它接受两个参数：初始状态对象和持久化配置对象。初始状态对象指定了代理对象的初始状态，持久化配置对象用于指定要使用的持久化方式和相关配置。\n在示例中，`proxyWithPersistant` 用于创建一个带有持久化缓存功能的代理对象 `state`。初始状态对象为 `{ count: 0 }`，持久化配置对象是一个对象，包含 `type` 和 `key` 两个属性。`type` 指定了持久化的方式为使用 `localStorage`，`key` 则指定了在 `localStorage` 中存储的键名为 `count`。\n"
  },
  {
    "title": "如何将数据持久化到 `localStorage`？",
    "md": "在示例中，通过将持久化配置对象的 `type` 属性设置为 `'localStorage'`，从而指定了数据将被持久化到浏览器的 `localStorage` 中。并且通过将持久化配置对象的 `key` 属性设置为 `'count'`，指定了在 `localStorage` 中存储的键名为 `'count'`。\n当代理对象 `state` 的状态发生改变时，将自动将最新的状态值存储到 `localStorage` 中。在每次应用程序启动或页面刷新时，会从 `localStorage` 中读取之前保存的状态值作为初始状态。这样就实现了将数据持久化到 `localStorage` 的效果。\n"
  },
  {
    "title": "什么是 valtio？",
    "md": "valtio 是一种基于组装式的扩展方式。它提供了一种更好的类型提示，并可以与其他中间件一起使用。使用 valtio，您可以更方便地实现代理和持久化存储操作。\n"
  },
  {
    "title": "如何使用 valtio 实现 proxyWithPersist 方法？",
    "md": "要使用 valtio 实现 proxyWithPersist 方法，可以按照以下简单的步骤进行操作：\n1. 导入所需的依赖：valtio、localStorage。\n2. 定义 proxyWithPersist 函数，接受一个值 val 和选项 opts 作为参数。\n3. 使用 localStorage.getItem 方法从本地存储中获取数据，并将其赋值给变量 local。\n4. 使用 JSON.parse 方法将 local 转换为 JSON 格式的数据，并将其赋值给变量 state。\n5. 使用 valtio 中的 proxy 方法将 state 转换为可代理的对象。\n6. 使用 valtio 中的 subscribe 方法，监听 state 的变化，并在变化时执行回调函数。\n7. 在回调函数中，使用 localStorage.setItem 方法将 state 的快照转换为 JSON 字符串并存储到本地存储中。\n8. 返回 state 作为函数的结果。\n"
  },
  {
    "title": "proxyWithPersist 方法的具体实现是什么？",
    "md": "具体实现 proxyWithPersist 方法的代码如下：\n```ts\nexport function proxyWithPersist<V>(\n  val: V,\n  opts: {\n    key: string;\n  },\n) {\n  const local = localStorage.getItem(opts.key);\n  const state = proxy(local ? JSON.parse(local) : val);\n  subscribe(state, () => {\n    localStorage.setItem(opts.key, JSON.stringify(snapshot(state)));\n  });\n  return state;\n}\n```\n这段代码通过 localStorage 实现了对数据的持久化存储。当使用 proxyWithPersist 方法创建的代理对象发生变化时，会自动将变化后的数据存储到本地存储中，以便下次使用时可以获取到最新的数据。\n"
  },
  {
    "title": "兼容性问题",
    "md": "1. React 版本要求：本功能需要使用 React 16.8 或以上版本才能正常运行。\n\n2. 不支持的浏览器：本功能不支持 IE 11 浏览器。\n\n3. map 和 set 的问题：在使用本功能时，不能直接使用 JavaScript 的 map 和 set 对象，而需要使用 valtio 提供的 proxyMap 和 proxySet 对象来进行操作。\n"
  },
  {
    "title": "什么是 React 16.8？",
    "md": "React 16.8 是 React 库的一个版本，它引入了 Hooks 的概念，使得在函数组件中可以使用状态管理和生命周期等特性。本功能要求使用 React 16.8 或以上版本。\n"
  },
  {
    "title": "为什么不支持 IE 11 浏览器？",
    "md": "IE 11 是一款老旧的浏览器，它的兼容性和性能不足以支持本功能的需求。为了提供更好的用户体验和开发效率，本功能选择不支持 IE 11 浏览器。\n"
  },
  {
    "title": "为什么要使用 proxyMap 和 proxySet？",
    "md": "在本功能中，使用 valtio 库提供的 proxyMap 和 proxySet 对象来代替 JavaScript 原生的 map 和 set 对象。这是因为 valtio 库通过代理对象的方式对数据进行监听和管理，从而提供更高级的状态管理功能。因此，在使用本功能时需要使用 valtio 提供的代理对象来操作 map 和 set 数据结构。\n"
  }
]