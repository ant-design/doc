[
  {
    "title": "QA 如何在 ProComponents 中使用表单组件？",
    "md": "在 ProComponents 中使用表单组件非常简单。你可以按照以下步骤来进行操作：\n1. 首先，确保你已经安装了 ProComponents 包。你可以使用 npm 或者 yarn 进行安装：\n```js\n   npm install @ant-design/pro-form\n\n   // 或者\n\n   yarn add @ant-design/pro-form\n```\n2. 在你的代码中引入表单组件：\n```tsx\nimport ProForm from '@ant-design/pro-form';\n```\n3. 在你的代码中定义一个表单数据模型：\n```tsx\nconst initialValues = {\n  name: '',\n  age: 0,\n};\n```\n4. 在你的代码中使用表单组件，并将数据模型传递给它：\n```tsx\n<ProForm initialValues={initialValues} onFinish={onFinish}>\n  <ProFormText name=\"name\" label=\"姓名\" />\n  <ProFormNumber name=\"age\" label=\"年龄\" />\n  <ProFormSubmitButton>提交</ProFormSubmitButton>\n</ProForm>\n```\n注意，这里的 `ProFormText` 和 `ProFormNumber` 是表单相关的组件，你可以根据需要选择使用。\n这样，你就可以在 ProComponents 中使用表单组件了。你可以根据自己的需求进行配置，例如设置表单字段、表单校验、提交等功能。\n"
  },
  {
    "title": "QA 如何在 ProComponents 中使用模态框组件？",
    "md": "在 ProComponents 中使用模态框组件非常简单。你可以按照以下步骤来进行操作：\n1. 首先，确保你已经安装了 ProComponents 包。你可以使用 npm 或者 yarn 进行安装：\n```tsx\n   npm install @ant-design/pro-modal\n\n   // 或者\n\n   yarn add @ant-design/pro-modal\n```\n2. 在你的代码中引入模态框组件：\n```tsx\nimport ProModal from '@ant-design/pro-modal';\n```\n3. 在你的代码中定义一个状态管理模型：\n```tsx\nconst [visible, setVisible] = useState(false);\n```\n4. 在你的代码中使用模态框组件，并将状态管理模型传递给它：\n```tsx\n<ProModal visible={visible} onOk={handleOk} onCancel={handleCancel}>\n  这是一个模态框\n</ProModal>\n```\n注意，这里的 `handleOk` 和 `handleCancel` 是处理确定和取消事件的函数。\n这样，你就可以在 ProComponents 中使用模态框组件了。你可以根据自己的需求进行配置，例如设置模态框标题、内容、确定和取消按钮等功能。\n"
  },
  {
    "title": "如何隐藏 ProTable 生成的搜索的 label？",
    "md": "隐藏 ProTable 生成的搜索的 label 可以通过在 columns 的 title 中使用函数来实现。具体做法如下：\n```typescript\ntitle: (_, type) => {\n  if (type === 'table') {\n    return '标题';\n  }\n  return null;\n};\n```\n这段代码中，通过判断 `type` 参数是否为 `'table'`，来确定是否显示 label。如果 `type` 为 `'table'`，则返回需要显示的 label 文本（例如 `'标题'`），否则返回 `null`，从而实现隐藏 label 的效果。\n"
  },
  {
    "title": "如何在 ProTable 中设置自定义的 label？",
    "md": "在 ProTable 中设置自定义的 label 可以通过在 columns 的 title 中使用字符串或函数来实现。具体做法如下：\n* 字符串方式：\n```typescript\ntitle: '自定义标签';\n```\n这样设置后，会在 ProTable 的搜索框中显示指定的 label，例如 `'自定义标签'`。\n* 函数方式：\n```typescript\ntitle: () => {\n  return '自定义标签';\n};\n```\n这样设置后，可以根据需要进行更复杂的逻辑处理，然后返回自定义的 label 文本。\n"
  },
  {
    "title": "如何根据条件动态设置 ProTable 的 label？",
    "md": "在 ProTable 中根据条件动态设置 label 可以通过在 columns 的 title 中使用函数来实现。具体做法如下：\n```typescript\ntitle: (_, type) => {\n  if (type === 'table') {\n    return '动态标签A';\n  } else if (type === 'form') {\n    return '动态标签B';\n  }\n  return null;\n};\n```\n这段代码中，通过判断 `type` 参数的不同取值，来返回不同的 label 文本。在示例中，当 `type` 为 `'table'` 时，返回 `'动态标签A'`，当 `type` 为 `'form'` 时，返回 `'动态标签B'`，其他情况下返回 `null`。通过在函数中根据条件返回不同的 label 文本，可以实现根据条件动态设置 ProTable 的 label。\n"
  },
  {
    "title": "`Form` 组件中的 `initialValues` 是如何使用的？",
    "md": "`Form` 组件作为 `ProComponents` 库的底层组件，其用法与 `antd` 组件相同。在 `Form` 组件中，`initialValues` 用于设置表单的初始值。需要注意的是，`initialValues` 不能通过 `setState` 来动态更新，而是需要使用 `setFieldsValue` 方法来进行更新。同时，`initialValues` 只在表单初始化时生效，并且只会生效一次。如果需要实现异步加载的功能，建议使用 `request` 方法，或者根据条件来决定是否渲染 `Form` 组件。\n"
  },
  {
    "title": "如何在 `Form` 中使用 `initialValues`？",
    "md": "要在 `Form` 中使用 `initialValues`，只需要将其作为 `Form` 组件的属性进行设置即可。例如：\n```jsx\n<Form initialValues={{ name: 'John', age: 25 }}></Form>\n```\n在上述代码中，`initialValues` 属性设置了一个对象，该对象包含了表单的初始值。可以根据需求设置不同的初始值。\n"
  },
  {
    "title": "可以通过 `setState` 方法来动态更新 `initialValues` 吗？",
    "md": "不可以。由于 `initialValues` 只在表单初始化时生效且只生效一次，所以无法通过 `setState` 方法来动态更新 `initialValues`。如果需要更新表单的值，需要使用 `setFieldsValue` 方法来进行更新操作。该方法接受一个对象作为参数，用于设定表单字段的值。\n```jsx\nconst [form] = Form.useForm();\n\nconst handleUpdateValues = () => {\n  form.setFieldsValue({ name: 'Jane', age: 30 });\n};\n```\n在上述代码中，先通过 `Form.useForm` 方法创建了一个表单实例 `form`，然后在需要更新表单值的地方调用 `setFieldsValue` 方法，并传入包含要更新字段及其对应值的对象。\n总结：\n* `Form` 组件中的 `initialValues` 用于设置表单的初始值。\n* `initialValues` 只在 `form` 初始化时生效且只生效一次。\n* 不能通过 `setState` 方法来动态更新 `initialValues`，需要使用 `setFieldsValue` 方法进行更新。\n* 如果需要异步加载初始值，推荐使用 `request` 方法，或者根据条件来决定是否渲染 `Form` 组件。\n"
  },
  {
    "title": "Chrome88 以下浏览器兼容问题如何解决？",
    "md": "因为 `ProComponent` 使用了较新的 css 属性，会导致在低版本浏览器无法达到预设的兼容效果（即使项目配置了 polyfill）。为了解决这个兼容性问题，可以按照以下步骤进行配置：\n1. 参考 Ant Design 官方文档中的配置指南：<https://ant.design/docs/react/compatible-style-cn>。根据文档中的说明进行配置，可以解决在 Chrome88 以下浏览器中的兼容性问题。\n\n2. 如果你的项目是使用 umi 框架搭建的，可以在 app.ts 文件中进行配置。在 app.ts 文件中，导入 `StyleProvider` 和 `legacyLogicalPropertiesTransformer` 这两个组件，并在 `rootContainer` 方法中进行配置。具体配置如下：\n```typescript\nimport {\n  StyleProvider,\n  legacyLogicalPropertiesTransformer,\n} from '@ant-design/cssinjs';\n\nexport function rootContainer(container: React.ReactElement) {\n  return React.createElement(\n    StyleProvider,\n    {\n      hashPriority: 'high',\n      transformers: [legacyLogicalPropertiesTransformer],\n    },\n    container,\n  );\n}\n```\n通过以上配置，可以解决 Chrome88 以下浏览器中 `ProComponent` 的兼容性问题。\n"
  },
  {
    "title": "Chrome88 以下浏览器兼容问题的解决方案是什么？",
    "md": "如果你在项目中使用了 `ProComponent`，并且遇到了在 Chrome88 以下浏览器中无法达到预设的兼容效果的问题（即使项目配置了 polyfill），可以按照以下步骤进行解决：\n1. 参考 Ant Design 官方文档中的配置指南：<https://ant.design/docs/react/compatible-style-cn>。根据文档中的说明进行配置，这样可以解决在低版本浏览器中的兼容性问题。\n\n2. 如果你的项目是使用 umi 框架搭建的，可以在 app.ts 文件中进行配置。在 app.ts 文件中，导入 `StyleProvider` 和 `legacyLogicalPropertiesTransformer` 这两个组件，并在 `rootContainer` 方法中进行配置。具体配置如下：\n```typescript\nimport {\n  StyleProvider,\n  legacyLogicalPropertiesTransformer,\n} from '@ant-design/cssinjs';\n\nexport function rootContainer(container: React.ReactElement) {\n  return React.createElement(\n    StyleProvider,\n    {\n      hashPriority: 'high',\n      transformers: [legacyLogicalPropertiesTransformer],\n    },\n    container,\n  );\n}\n```\n通过以上配置，可以解决 Chrome88 以下浏览器中 `ProComponent` 的兼容性问题。\n"
  },
  {
    "title": "如何解决 Chrome88 以下浏览器对 `ProComponent` 的兼容性问题？",
    "md": "`ProComponent` 使用了较新的 css 属性，这会导致在低版本的 Chrome 浏览器（低于版本 88）中无法达到预设的兼容效果，即使项目已经配置了 polyfill。\n为了解决这个问题，可以按照以下步骤进行配置：\n1. 根据 Ant Design 官方文档中的配置指南：<https://ant.design/docs/react/compatible-style-cn> 进行相应的配置。根据文档中的说明，调整配置可以解决在 Chrome88 以下浏览器中的兼容性问题。\n\n2. 如果你的项目是使用 umi 框架搭建的，可以在 app.ts 文件中进行配置。在 app.ts 文件中，导入 `StyleProvider` 和 `legacyLogicalPropertiesTransformer` 这两个组件，并在 `rootContainer` 方法中进行配置。具体的配置代码如下：\n```typescript\nimport {\n  StyleProvider,\n  legacyLogicalPropertiesTransformer,\n} from '@ant-design/cssinjs';\n\nexport function rootContainer(container: React.ReactElement) {\n  return React.createElement(\n    StyleProvider,\n    {\n      hashPriority: 'high',\n      transformers: [legacyLogicalPropertiesTransformer],\n    },\n    container,\n  );\n}\n```\n通过以上配置，可以解决 Chrome88 以下浏览器中对 `ProComponent` 的兼容性问题。\n"
  }
]