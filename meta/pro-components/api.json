[
  {
    "title": "pro-components 的 Table 有哪些配置？",
    "md": "#### ProTable - ProTable\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| request | 获取 `dataSource` 的方法 | `(params?: {pageSize,current},sort,filter) => {data,success,total}` | - |\n| params | 用于 `request` 查询的额外参数，一旦变化会触发重新加载 | `object` | - |\n| postData | 对通过 `request` 获取的数据进行处理 | `(data: T[]) => T[]` | - |\n| defaultData | 默认的数据 | `T[]` | - |\n| dataSource | Table 的数据，ProTable 推荐使用 `request` 来加载 | `T[]` | - |\n| onDataSourceChange | Table 的数据发生改变时触发 | `(dataSource: T[]) => void` | - |\n| actionRef | Table action 的引用，便于自定义触发 | `MutableRefObject<ActionType>` | - |\n| formRef | 可以获取到查询表单的 form 实例，用于一些灵活的配置 | `MutableRefObject<FormInstance>` | - |\n| toolBarRender | 渲染工具栏，支持返回一个 dom 数组，会自动增加 margin-right | `(action) => ReactNode[]` | - |\n| onLoad | 数据加载完成后触发，会多次触发 | `(dataSource: T[]) => void` | - |\n| onLoadingChange | loading 被修改时触发，一般是网络请求导致的 | `(loading:boolean)=>void` | - |\n| onRequestError | 数据加载失败时触发 | `(error) => void` | - |\n| tableClassName | 封装的 table 的 className | `string` | - |\n| tableStyle | 封装的 table 的 style | [CSSProperties](https://www.htmlhelp.com/reference/css/properties.html) | - |\n| options | table 工具栏，设为 false 时不显示，传入 function 会点击时触发 | `{{ density?: boolean, fullScreen?: boolean \\| function, reload?: boolean \\| function, reloadIcon?: React.ReactNode, densityIcon?: React.ReactNode, setting?: boolean \\|` [SettingOptionType](#菜单栏-options-配置) `}}` | `{ fullScreen: false, reload: true, density: true, setting: true }` |\n| search | 是否显示搜索表单，传入对象时为搜索表单的配置 | `false` | [SearchConfig](#search-搜索表单) | - |\n| defaultSize | 默认的 size | SizeType | - |\n| dateFormatter | 转化 moment 格式数据为特定类型，false 不做转化 | `\"string\"` | `\"number\"` | ((value: Moment, valueType: string) => string | number) | `false` | `\"string\"` |\n| beforeSearchSubmit | 搜索之前进行一些修改 | `(params:T)=>T` | - |\n| onSizeChange | table 尺寸发生改变 | `(size: 'default' \\| 'middle' \\| 'small') => void` | - |\n| type | pro-table 类型 | `\"form\"` | - |\n| form | antd form 的配置 | [FormProps](https://ant.design/components/form-cn/#API) | - |\n| onSubmit | 提交表单时触发 | `(params: U) => void` | - |\n| onReset | 重置表单时触发 | `() => void` | - |\n| columnEmptyText | 空值时的显示，不设置时显示 `-`， false 可以关闭此功能 | `string` | `false` | false |\n| tableRender | 自定义渲染表格函数 | `(props,dom,domList:{ toolbar,alert,table}) => ReactNode` | - |\n| toolbar | 透传 `ListToolBar` 配置项 | [ListToolBarProps](#listtoolbarprops) | - |\n| tableExtraRender | 自定义表格的主体函数 | `(props: ProTableProps<T, U>, dataSource: T[]) => ReactNode;` | - |\n| manualRequest | 是否需要手动触发首次请求，配置为 `true` 时不可隐藏搜索表单 | `boolean` | false |\n| editable | 可编辑表格的相关配置 | [TableRowEditable](/components/editable-table#editable-编辑行配置) | - |\n| cardBordered | Table 和 Search 外围 Card 组件的边框 | `boolean \\| {search?: boolean, table?: boolean}` | false |\n| ghost | 幽灵模式，即是否取消表格区域的 padding | `boolean` | false |\n| debounceTime | 防抖时间 | `number` | 10 |\n| revalidateOnFocus | 窗口聚焦时自动重新请求 | `boolean` | `true` |\n| columnsState | 受控的列状态，可以操作显示隐藏 | `ColumnStateType` | - |\n| ErrorBoundary | 自带了错误处理功能，防止白屏，`ErrorBoundary=false` 关闭默认错误边界 | `ReactNode` | 内置 ErrorBoundary |\n#### ProTable - RecordCreator\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| record | 需要新增的行数据，一般来说包含唯一 key | `T` | `{}` |\n| position | 行增加在哪里，开始或者末尾 | `top` | `bottom` | `bottom` |\n| (...buttonProps) | antd 的 [ButtonProps](https://ant.design/components/button-cn/#API) | ButtonProps | — |\n#### ProTable - ColumnStateType\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| defaultValue | 列状态的默认值，只有初次生效，并用于重置使用 | `Record<string, ColumnsState>;` | - |\n| value | 列状态的值，支持受控模式 | `Record<string, ColumnsState>;` | - |\n| onChange | 列状态的值发生改变之后触发 | `(value:Record<string, ColumnsState>)=>void` | - |\n| persistenceKey | 持久化列的 key，用于判断是否是同一个 table | `string \\| number` | - |\n| persistenceType | 持久化列的类型，localStorage 设置在关闭浏览器后也是存在的，sessionStorage 关闭浏览器后会丢失 | `localStorage \\| sessionStorage` | - |\n#### ProTable - Search 搜索表单\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| filterType | 过滤表单类型 | `'query'` | `'light'` | `'query'` |\n| searchText | 查询按钮的文本 | `string` | 查询 |\n| resetText | 重置按钮的文本 | `string` | 重置 |\n| submitText | 提交按钮的文本 | `string` | 提交 |\n| labelWidth | 标签的宽度 | `'number'` | `'auto'` | 80 |\n| span | 配置查询表单的列数 | `'number'` | [`'ColConfig'`](#ColConfig) | defaultColConfig |\n| className | 封装的搜索 Form 的 className | `string` | - |\n| collapseRender | 收起按钮的 render | `((collapsed: boolean,showCollapseButton?: boolean) => ReactNode)`|`false` | - |\n| defaultCollapsed | 默认是否收起 | `boolean` | `true` |\n| collapsed | 是否收起 | `boolean` | - |\n| onCollapse | 收起按钮的事件 | `(collapsed: boolean) => void;` | - |\n| optionRender | 自定义操作栏 | `((searchConfig,formProps,dom) => ReactNode[])`|`false` | - |\n| showHiddenNum | 是否显示收起之后显示隐藏个数 | `boolean` | `false` |\n#### ProTable - Columns 列定义\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 与 antd 中基本相同，但是支持通过传入一个方法 | `ReactNode \\| ((config: ProColumnType<T>, type: ProTableTypes) => ReactNode)` | - |\n| tooltip | 会在 title 之后展示一个 icon，hover 之后提示一些信息 | `string` | - |\n| ellipsis | 是否自动缩略 | `boolean` | `{showTitle?: boolean}` | - |\n| copyable | 是否支持复制 | `boolean` | - |\n| valueEnum | 值的枚举，会自动转化把值当成 key 来取出要显示的内容 | [valueEnum](/components/schema#valueenum) | - |\n| valueType | 值的类型，会生成不同的渲染器 | [`valueType`](/components/schema#valuetype) | `text` |\n| order | 查询表单中的权重，权重大排序靠前 | `number` | - |\n| fieldProps | 查询表单的 props，会透传给表单项，如果渲染出来是 Input，就支持 Input 的所有 props，同理如果是 select，也支持 select 的所有 props。也支持方法传入 | `(form,config)=>Record \\| Record` | - |\n| `formItemProps` | 传递给 Form.Item 的配置，可以配置 rules，但是默认的查询表单 rules 是不生效的。需要配置 `ignoreRules` | `(form,config)=>formItemProps` | `formItemProps` | - |\n| renderText | 类似 table 的 render，但是必须返回 string，如果只是希望转化枚举，可以使用 [valueEnum](/components/schema#valueenum) | `(text: any,record: T,index: number,action: UseFetchDataAction<T>) => string` | - |\n| render | 类似 table 的 render，第一个参数变成了 dom，增加了第四个参数 action | `(text: ReactNode,record: T,index: number,action: UseFetchDataAction<T>) => ReactNode \\| ReactNode[]` | - |\n| renderFormItem | 渲染查询表单的输入组件 | `(item,{ type, defaultRender, formItemProps, fieldProps, ...rest },form) => ReactNode` | - |\n| search | 配置列的搜索相关，false 为隐藏 | `false` | `{ transform: (value: any) => any }` | true |\n| search.transform | 转化值的 key, 一般用于时间区间的转化 | `(value: any) => any` | - |\n| [editable](/components/editable-table) | 在编辑表格中是否可编辑的，函数的参数和 table 的 render 一样 | `false` | `(text: any, record: T,index: number) => boolean` | true |\n| colSize | 一个表单项占用的格子数量，`占比= colSize*span`，`colSize` 默认为 1 ，`span` 为 8，`span`是`form={{span:8}}` 全局设置的 | `number` | - |\n| hideInSearch | 在查询表单中不展示此项 | `boolean` | - |\n| hideInTable | 在 Table 中不展示此列 | `boolean` | - |\n| hideInForm | 在 Form 中不展示此列 | `boolean` | - |\n| hideInDescriptions | 在 Descriptions 中不展示此列 | `boolean` | - |\n| filters | 表头的筛选菜单项，当值为 true 时，自动使用 valueEnum 生成 | `boolean` | `object[]` | false |\n| onFilter | 筛选表单，为 true 时使用 ProTable 自带的，为 false 时关闭本地筛选 | `(value, record) => boolean` | `false` | false |\n| request | 从服务器请求枚举 | [request](https://procomponents.ant.design/components/schema#request-%E5%92%8C-params) | - |\n| initialValue | 查询表单项初始值 | `any` | - |\n| disable | 列设置中`disabled`的状态 | `boolean` | `{ checkbox: boolean; }` | - |\n#### ProTable - 批量操作\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| alwaysShowAlert | 总是展示 alert，默认无选择不展示（`rowSelection`内置属性） | `boolean` | - |\n| tableAlertRender | 自定义批量操作工具栏左侧信息区域，false 时不显示 | `({ selectedRowKeys: Key[], selectedRows: T[], onCleanSelected: ()=>void }) => ReactNode)`|`false` | - |\n| tableAlertOptionRender | 自定义批量操作工具栏右侧选项区域，false 时不显示 | `({ selectedRowKeys: Key[], selectedRows: T[], onCleanSelected: ()=>void }) => ReactNode)`|`false` | - |\n#### ProTable - ListToolBarProps\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 标题 | `ReactNode` | - |\n| subTitle | 子标题 | `ReactNode` | - |\n| tooltip | tooltip 描述 | `string` | - |\n| search | 查询区 | `ReactNode` | `SearchProps` | - |\n| actions | 操作区 | `ReactNode[]` | - |\n| settings | 设置区 | `(ReactNode \\| Setting)[]` | - |\n| filter | 过滤区，通常配合 `LightFilter` 使用 | `ReactNode` | - |\n| multipleLine | 是否多行展示 | `boolean` | `false` |\n| menu | 菜单配置 | `ListToolBarMenu` | - |\n| tabs | 标签页配置，仅当 `multipleLine` 为 true 时有效 | `ListToolBarTabs` | - |\n#### ProTable - Setting\n| 参数    | 说明         | 类型                  | 默认值 |\n| ------- | ------------ | --------------------- | ------ |\n| icon    | 图标         | `ReactNode`           | -      |\n| tooltip | tooltip 描述 | `string`              | -      |\n| key     | 操作唯一标识 | `string`              | -      |\n| onClick | 设置被触发   | `(key: string)=>void` | -      |\n#### ProTable - ListToolBarMenu\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 类型 | `inline` | `dropdown` | `tab` | `inline` |\n| activeKey | 当前值 | `string` | - |\n| items | 菜单项 | `{ key: string; label: ReactNode }[]` | - |\n| onChange | 切换菜单的回调 | `(activeKey)=>void` | - |\n#### ProTable - ListToolBarTabs\n| 参数      | 说明           | 类型                                | 默认值 |\n| --------- | -------------- | ----------------------------------- | ------ |\n| activeKey | 当前选中项     | `string`                            | -      |\n| items     | 菜单项         | `{ key: string; tab: ReactNode }[]` | -      |\n| onChange  | 切换菜单的回调 | `(activeKey)=>void`                 | -      |\n#### ProTable - TableDropdown\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| key | 唯一标志 | `string` | - |\n| name | 内容 | `ReactNode` | - |\n| (...Menu.Item) | antd 的 [Menu.Item](https://ant.design/components/menu-cn/#Menu.Item) | `Menu.Item` | - |\n"
  },
  {
    "title": "pro-components 的 ProTable - ProTable 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| request | 获取 `dataSource` 的方法 | `(params?: {pageSize,current},sort,filter) => {data,success,total}` | - |\n| params | 用于 `request` 查询的额外参数，一旦变化会触发重新加载 | `object` | - |\n| postData | 对通过 `request` 获取的数据进行处理 | `(data: T[]) => T[]` | - |\n| defaultData | 默认的数据 | `T[]` | - |\n| dataSource | Table 的数据，ProTable 推荐使用 `request` 来加载 | `T[]` | - |\n| onDataSourceChange | Table 的数据发生改变时触发 | `(dataSource: T[]) => void` | - |\n| actionRef | Table action 的引用，便于自定义触发 | `MutableRefObject<ActionType>` | - |\n| formRef | 可以获取到查询表单的 form 实例，用于一些灵活的配置 | `MutableRefObject<FormInstance>` | - |\n| toolBarRender | 渲染工具栏，支持返回一个 dom 数组，会自动增加 margin-right | `(action) => ReactNode[]` | - |\n| onLoad | 数据加载完成后触发，会多次触发 | `(dataSource: T[]) => void` | - |\n| onLoadingChange | loading 被修改时触发，一般是网络请求导致的 | `(loading:boolean)=>void` | - |\n| onRequestError | 数据加载失败时触发 | `(error) => void` | - |\n| tableClassName | 封装的 table 的 className | `string` | - |\n| tableStyle | 封装的 table 的 style | [CSSProperties](https://www.htmlhelp.com/reference/css/properties.html) | - |\n| options | table 工具栏，设为 false 时不显示，传入 function 会点击时触发 | `{{ density?: boolean, fullScreen?: boolean \\| function, reload?: boolean \\| function, reloadIcon?: React.ReactNode, densityIcon?: React.ReactNode, setting?: boolean \\|` [SettingOptionType](#菜单栏-options-配置) `}}` | `{ fullScreen: false, reload: true, density: true, setting: true }` |\n| search | 是否显示搜索表单，传入对象时为搜索表单的配置 | `false` | [SearchConfig](#search-搜索表单) | - |\n| defaultSize | 默认的 size | SizeType | - |\n| dateFormatter | 转化 moment 格式数据为特定类型，false 不做转化 | `\"string\"` | `\"number\"` | ((value: Moment, valueType: string) => string | number) | `false` | `\"string\"` |\n| beforeSearchSubmit | 搜索之前进行一些修改 | `(params:T)=>T` | - |\n| onSizeChange | table 尺寸发生改变 | `(size: 'default' \\| 'middle' \\| 'small') => void` | - |\n| type | pro-table 类型 | `\"form\"` | - |\n| form | antd form 的配置 | [FormProps](https://ant.design/components/form-cn/#API) | - |\n| onSubmit | 提交表单时触发 | `(params: U) => void` | - |\n| onReset | 重置表单时触发 | `() => void` | - |\n| columnEmptyText | 空值时的显示，不设置时显示 `-`， false 可以关闭此功能 | `string` | `false` | false |\n| tableRender | 自定义渲染表格函数 | `(props,dom,domList:{ toolbar,alert,table}) => ReactNode` | - |\n| toolbar | 透传 `ListToolBar` 配置项 | [ListToolBarProps](#listtoolbarprops) | - |\n| tableExtraRender | 自定义表格的主体函数 | `(props: ProTableProps<T, U>, dataSource: T[]) => ReactNode;` | - |\n| manualRequest | 是否需要手动触发首次请求，配置为 `true` 时不可隐藏搜索表单 | `boolean` | false |\n| editable | 可编辑表格的相关配置 | [TableRowEditable](/components/editable-table#editable-编辑行配置) | - |\n| cardBordered | Table 和 Search 外围 Card 组件的边框 | `boolean \\| {search?: boolean, table?: boolean}` | false |\n| ghost | 幽灵模式，即是否取消表格区域的 padding | `boolean` | false |\n| debounceTime | 防抖时间 | `number` | 10 |\n| revalidateOnFocus | 窗口聚焦时自动重新请求 | `boolean` | `true` |\n| columnsState | 受控的列状态，可以操作显示隐藏 | `ColumnStateType` | - |\n| ErrorBoundary | 自带了错误处理功能，防止白屏，`ErrorBoundary=false` 关闭默认错误边界 | `ReactNode` | 内置 ErrorBoundary |\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的request属性如何使用？",
    "md": "属性: request\n描述: 获取 `dataSource` 的方法\n类型: `(params?: {pageSize,current},sort,filter) => {data,success,total}`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的params属性如何使用？",
    "md": "属性: params\n描述: 用于 `request` 查询的额外参数，一旦变化会触发重新加载\n类型: `object`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的postData属性如何使用？",
    "md": "属性: postData\n描述: 对通过 `request` 获取的数据进行处理\n类型: `(data: T[]) => T[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的defaultData属性如何使用？",
    "md": "属性: defaultData\n描述: 默认的数据\n类型: `T[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的dataSource属性如何使用？",
    "md": "属性: dataSource\n描述: Table 的数据，ProTable 推荐使用 `request` 来加载\n类型: `T[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的onDataSourceChange属性如何使用？",
    "md": "属性: onDataSourceChange\n描述: Table 的数据发生改变时触发\n类型: `(dataSource: T[]) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的actionRef属性如何使用？",
    "md": "属性: actionRef\n描述: Table action 的引用，便于自定义触发\n类型: `MutableRefObject<ActionType>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的formRef属性如何使用？",
    "md": "属性: formRef\n描述: 可以获取到查询表单的 form 实例，用于一些灵活的配置\n类型: `MutableRefObject<FormInstance>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的toolBarRender属性如何使用？",
    "md": "属性: toolBarRender\n描述: 渲染工具栏，支持返回一个 dom 数组，会自动增加 margin-right\n类型: `(action) => ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的onLoad属性如何使用？",
    "md": "属性: onLoad\n描述: 数据加载完成后触发，会多次触发\n类型: `(dataSource: T[]) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的onLoadingChange属性如何使用？",
    "md": "属性: onLoadingChange\n描述: loading 被修改时触发，一般是网络请求导致的\n类型: `(loading:boolean)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的onRequestError属性如何使用？",
    "md": "属性: onRequestError\n描述: 数据加载失败时触发\n类型: `(error) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的tableClassName属性如何使用？",
    "md": "属性: tableClassName\n描述: 封装的 table 的 className\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的tableStyle属性如何使用？",
    "md": "属性: tableStyle\n描述: 封装的 table 的 style\n类型: [CSSProperties](https://www.htmlhelp.com/reference/css/properties.html)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的options属性如何使用？",
    "md": "属性: options\n描述: table 工具栏，设为 false 时不显示，传入 function 会点击时触发\n类型: `{{ density?: boolean, fullScreen?: boolean \\| function, reload?: boolean \\| function, reloadIcon?: React.ReactNode, densityIcon?: React.ReactNode, setting?: boolean \\|` [SettingOptionType](#菜单栏-options-配置) `}}`\n默认值: `{ fullScreen: false, reload: true, density: true, setting: true }`\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的search属性如何使用？",
    "md": "属性: search\n描述: 是否显示搜索表单，传入对象时为搜索表单的配置\n类型: `false` | [SearchConfig](#search-搜索表单)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的defaultSize属性如何使用？",
    "md": "属性: defaultSize\n描述: 默认的 size\n类型: SizeType\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的dateFormatter属性如何使用？",
    "md": "属性: dateFormatter\n描述: 转化 moment 格式数据为特定类型，false 不做转化\n类型: `\"string\"` | `\"number\"` | ((value: Moment, valueType: string) => string | number) | `false`\n默认值: `\"string\"`\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的beforeSearchSubmit属性如何使用？",
    "md": "属性: beforeSearchSubmit\n描述: 搜索之前进行一些修改\n类型: `(params:T)=>T`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的onSizeChange属性如何使用？",
    "md": "属性: onSizeChange\n描述: table 尺寸发生改变\n类型: `(size: 'default' \\| 'middle' \\| 'small') => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的type属性如何使用？",
    "md": "属性: type\n描述: pro-table 类型\n类型: `\"form\"`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的form属性如何使用？",
    "md": "属性: form\n描述: antd form 的配置\n类型: [FormProps](https://ant.design/components/form-cn/#API)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的onSubmit属性如何使用？",
    "md": "属性: onSubmit\n描述: 提交表单时触发\n类型: `(params: U) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的onReset属性如何使用？",
    "md": "属性: onReset\n描述: 重置表单时触发\n类型: `() => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的columnEmptyText属性如何使用？",
    "md": "属性: columnEmptyText\n描述: 空值时的显示，不设置时显示 `-`， false 可以关闭此功能\n类型: `string` | `false`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的tableRender属性如何使用？",
    "md": "属性: tableRender\n描述: 自定义渲染表格函数\n类型: `(props,dom,domList:{ toolbar,alert,table}) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的toolbar属性如何使用？",
    "md": "属性: toolbar\n描述: 透传 `ListToolBar` 配置项\n类型: [ListToolBarProps](#listtoolbarprops)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的tableExtraRender属性如何使用？",
    "md": "属性: tableExtraRender\n描述: 自定义表格的主体函数\n类型: `(props: ProTableProps<T, U>, dataSource: T[]) => ReactNode;`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的manualRequest属性如何使用？",
    "md": "属性: manualRequest\n描述: 是否需要手动触发首次请求，配置为 `true` 时不可隐藏搜索表单\n类型: `boolean`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的editable属性如何使用？",
    "md": "属性: editable\n描述: 可编辑表格的相关配置\n类型: [TableRowEditable](/components/editable-table#editable-编辑行配置)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的cardBordered属性如何使用？",
    "md": "属性: cardBordered\n描述: Table 和 Search 外围 Card 组件的边框\n类型: `boolean \\| {search?: boolean, table?: boolean}`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的ghost属性如何使用？",
    "md": "属性: ghost\n描述: 幽灵模式，即是否取消表格区域的 padding\n类型: `boolean`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的debounceTime属性如何使用？",
    "md": "属性: debounceTime\n描述: 防抖时间\n类型: `number`\n默认值: 10\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的revalidateOnFocus属性如何使用？",
    "md": "属性: revalidateOnFocus\n描述: 窗口聚焦时自动重新请求\n类型: `boolean`\n默认值: `true`\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的columnsState属性如何使用？",
    "md": "属性: columnsState\n描述: 受控的列状态，可以操作显示隐藏\n类型: `ColumnStateType`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ProTable的ErrorBoundary属性如何使用？",
    "md": "属性: ErrorBoundary\n描述: 自带了错误处理功能，防止白屏，`ErrorBoundary=false` 关闭默认错误边界\n类型: `ReactNode`\n默认值: 内置 ErrorBoundary\n"
  },
  {
    "title": "pro-components 的 ProTable - RecordCreator 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| record | 需要新增的行数据，一般来说包含唯一 key | `T` | `{}` |\n| position | 行增加在哪里，开始或者末尾 | `top` | `bottom` | `bottom` |\n| (...buttonProps) | antd 的 [ButtonProps](https://ant.design/components/button-cn/#API) | ButtonProps | — |\n"
  },
  {
    "title": "pro-components 中 ProTable - RecordCreator的record属性如何使用？",
    "md": "属性: record\n描述: 需要新增的行数据，一般来说包含唯一 key\n类型: `T`\n默认值: `{}`\n"
  },
  {
    "title": "pro-components 中 ProTable - RecordCreator的position属性如何使用？",
    "md": "属性: position\n描述: 行增加在哪里，开始或者末尾\n类型: `top` | `bottom`\n默认值: `bottom`\n"
  },
  {
    "title": "pro-components 中 ProTable - RecordCreator的(...buttonProps)属性如何使用？",
    "md": "属性: (...buttonProps)\n描述: antd 的 [ButtonProps](https://ant.design/components/button-cn/#API)\n类型: ButtonProps\n默认值: —\n"
  },
  {
    "title": "pro-components 的 ProTable - ColumnStateType 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| defaultValue | 列状态的默认值，只有初次生效，并用于重置使用 | `Record<string, ColumnsState>;` | - |\n| value | 列状态的值，支持受控模式 | `Record<string, ColumnsState>;` | - |\n| onChange | 列状态的值发生改变之后触发 | `(value:Record<string, ColumnsState>)=>void` | - |\n| persistenceKey | 持久化列的 key，用于判断是否是同一个 table | `string \\| number` | - |\n| persistenceType | 持久化列的类型，localStorage 设置在关闭浏览器后也是存在的，sessionStorage 关闭浏览器后会丢失 | `localStorage \\| sessionStorage` | - |\n"
  },
  {
    "title": "pro-components 中 ProTable - ColumnStateType的defaultValue属性如何使用？",
    "md": "属性: defaultValue\n描述: 列状态的默认值，只有初次生效，并用于重置使用\n类型: `Record<string, ColumnsState>;`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ColumnStateType的value属性如何使用？",
    "md": "属性: value\n描述: 列状态的值，支持受控模式\n类型: `Record<string, ColumnsState>;`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ColumnStateType的onChange属性如何使用？",
    "md": "属性: onChange\n描述: 列状态的值发生改变之后触发\n类型: `(value:Record<string, ColumnsState>)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ColumnStateType的persistenceKey属性如何使用？",
    "md": "属性: persistenceKey\n描述: 持久化列的 key，用于判断是否是同一个 table\n类型: `string \\| number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ColumnStateType的persistenceType属性如何使用？",
    "md": "属性: persistenceType\n描述: 持久化列的类型，localStorage 设置在关闭浏览器后也是存在的，sessionStorage 关闭浏览器后会丢失\n类型: `localStorage \\| sessionStorage`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProTable - Search 搜索表单 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| filterType | 过滤表单类型 | `'query'` | `'light'` | `'query'` |\n| searchText | 查询按钮的文本 | `string` | 查询 |\n| resetText | 重置按钮的文本 | `string` | 重置 |\n| submitText | 提交按钮的文本 | `string` | 提交 |\n| labelWidth | 标签的宽度 | `'number'` | `'auto'` | 80 |\n| span | 配置查询表单的列数 | `'number'` | [`'ColConfig'`](#ColConfig) | defaultColConfig |\n| className | 封装的搜索 Form 的 className | `string` | - |\n| collapseRender | 收起按钮的 render | `((collapsed: boolean,showCollapseButton?: boolean) => ReactNode)`|`false` | - |\n| defaultCollapsed | 默认是否收起 | `boolean` | `true` |\n| collapsed | 是否收起 | `boolean` | - |\n| onCollapse | 收起按钮的事件 | `(collapsed: boolean) => void;` | - |\n| optionRender | 自定义操作栏 | `((searchConfig,formProps,dom) => ReactNode[])`|`false` | - |\n| showHiddenNum | 是否显示收起之后显示隐藏个数 | `boolean` | `false` |\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的filterType属性如何使用？",
    "md": "属性: filterType\n描述: 过滤表单类型\n类型: `'query'` | `'light'`\n默认值: `'query'`\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的searchText属性如何使用？",
    "md": "属性: searchText\n描述: 查询按钮的文本\n类型: `string`\n默认值: 查询\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的resetText属性如何使用？",
    "md": "属性: resetText\n描述: 重置按钮的文本\n类型: `string`\n默认值: 重置\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的submitText属性如何使用？",
    "md": "属性: submitText\n描述: 提交按钮的文本\n类型: `string`\n默认值: 提交\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的labelWidth属性如何使用？",
    "md": "属性: labelWidth\n描述: 标签的宽度\n类型: `'number'` | `'auto'`\n默认值: 80\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的span属性如何使用？",
    "md": "属性: span\n描述: 配置查询表单的列数\n类型: `'number'` | [`'ColConfig'`](#ColConfig)\n默认值: defaultColConfig\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的className属性如何使用？",
    "md": "属性: className\n描述: 封装的搜索 Form 的 className\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的collapseRender属性如何使用？",
    "md": "属性: collapseRender\n描述: 收起按钮的 render\n类型: `((collapsed: boolean,showCollapseButton?: boolean) => ReactNode)`|`false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的defaultCollapsed属性如何使用？",
    "md": "属性: defaultCollapsed\n描述: 默认是否收起\n类型: `boolean`\n默认值: `true`\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的collapsed属性如何使用？",
    "md": "属性: collapsed\n描述: 是否收起\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的onCollapse属性如何使用？",
    "md": "属性: onCollapse\n描述: 收起按钮的事件\n类型: `(collapsed: boolean) => void;`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的optionRender属性如何使用？",
    "md": "属性: optionRender\n描述: 自定义操作栏\n类型: `((searchConfig,formProps,dom) => ReactNode[])`|`false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Search 搜索表单的showHiddenNum属性如何使用？",
    "md": "属性: showHiddenNum\n描述: 是否显示收起之后显示隐藏个数\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 的 ProTable - Columns 列定义 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 与 antd 中基本相同，但是支持通过传入一个方法 | `ReactNode \\| ((config: ProColumnType<T>, type: ProTableTypes) => ReactNode)` | - |\n| tooltip | 会在 title 之后展示一个 icon，hover 之后提示一些信息 | `string` | - |\n| ellipsis | 是否自动缩略 | `boolean` | `{showTitle?: boolean}` | - |\n| copyable | 是否支持复制 | `boolean` | - |\n| valueEnum | 值的枚举，会自动转化把值当成 key 来取出要显示的内容 | [valueEnum](/components/schema#valueenum) | - |\n| valueType | 值的类型，会生成不同的渲染器 | [`valueType`](/components/schema#valuetype) | `text` |\n| order | 查询表单中的权重，权重大排序靠前 | `number` | - |\n| fieldProps | 查询表单的 props，会透传给表单项，如果渲染出来是 Input，就支持 Input 的所有 props，同理如果是 select，也支持 select 的所有 props。也支持方法传入 | `(form,config)=>Record \\| Record` | - |\n| `formItemProps` | 传递给 Form.Item 的配置，可以配置 rules，但是默认的查询表单 rules 是不生效的。需要配置 `ignoreRules` | `(form,config)=>formItemProps` | `formItemProps` | - |\n| renderText | 类似 table 的 render，但是必须返回 string，如果只是希望转化枚举，可以使用 [valueEnum](/components/schema#valueenum) | `(text: any,record: T,index: number,action: UseFetchDataAction<T>) => string` | - |\n| render | 类似 table 的 render，第一个参数变成了 dom，增加了第四个参数 action | `(text: ReactNode,record: T,index: number,action: UseFetchDataAction<T>) => ReactNode \\| ReactNode[]` | - |\n| renderFormItem | 渲染查询表单的输入组件 | `(item,{ type, defaultRender, formItemProps, fieldProps, ...rest },form) => ReactNode` | - |\n| search | 配置列的搜索相关，false 为隐藏 | `false` | `{ transform: (value: any) => any }` | true |\n| search.transform | 转化值的 key, 一般用于时间区间的转化 | `(value: any) => any` | - |\n| [editable](/components/editable-table) | 在编辑表格中是否可编辑的，函数的参数和 table 的 render 一样 | `false` | `(text: any, record: T,index: number) => boolean` | true |\n| colSize | 一个表单项占用的格子数量，`占比= colSize*span`，`colSize` 默认为 1 ，`span` 为 8，`span`是`form={{span:8}}` 全局设置的 | `number` | - |\n| hideInSearch | 在查询表单中不展示此项 | `boolean` | - |\n| hideInTable | 在 Table 中不展示此列 | `boolean` | - |\n| hideInForm | 在 Form 中不展示此列 | `boolean` | - |\n| hideInDescriptions | 在 Descriptions 中不展示此列 | `boolean` | - |\n| filters | 表头的筛选菜单项，当值为 true 时，自动使用 valueEnum 生成 | `boolean` | `object[]` | false |\n| onFilter | 筛选表单，为 true 时使用 ProTable 自带的，为 false 时关闭本地筛选 | `(value, record) => boolean` | `false` | false |\n| request | 从服务器请求枚举 | [request](https://procomponents.ant.design/components/schema#request-%E5%92%8C-params) | - |\n| initialValue | 查询表单项初始值 | `any` | - |\n| disable | 列设置中`disabled`的状态 | `boolean` | `{ checkbox: boolean; }` | - |\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的title属性如何使用？",
    "md": "属性: title\n描述: 与 antd 中基本相同，但是支持通过传入一个方法\n类型: `ReactNode \\| ((config: ProColumnType<T>, type: ProTableTypes) => ReactNode)`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的tooltip属性如何使用？",
    "md": "属性: tooltip\n描述: 会在 title 之后展示一个 icon，hover 之后提示一些信息\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的ellipsis属性如何使用？",
    "md": "属性: ellipsis\n描述: 是否自动缩略\n类型: `boolean` | `{showTitle?: boolean}`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的copyable属性如何使用？",
    "md": "属性: copyable\n描述: 是否支持复制\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的valueEnum属性如何使用？",
    "md": "属性: valueEnum\n描述: 值的枚举，会自动转化把值当成 key 来取出要显示的内容\n类型: [valueEnum](/components/schema#valueenum)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的valueType属性如何使用？",
    "md": "属性: valueType\n描述: 值的类型，会生成不同的渲染器\n类型: [`valueType`](/components/schema#valuetype)\n默认值: `text`\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的order属性如何使用？",
    "md": "属性: order\n描述: 查询表单中的权重，权重大排序靠前\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的fieldProps属性如何使用？",
    "md": "属性: fieldProps\n描述: 查询表单的 props，会透传给表单项，如果渲染出来是 Input，就支持 Input 的所有 props，同理如果是 select，也支持 select 的所有 props。也支持方法传入\n类型: `(form,config)=>Record \\| Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的`formItemProps`属性如何使用？",
    "md": "属性: `formItemProps`\n描述: 传递给 Form.Item 的配置，可以配置 rules，但是默认的查询表单 rules 是不生效的。需要配置 `ignoreRules`\n类型: `(form,config)=>formItemProps` | `formItemProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的renderText属性如何使用？",
    "md": "属性: renderText\n描述: 类似 table 的 render，但是必须返回 string，如果只是希望转化枚举，可以使用 [valueEnum](/components/schema#valueenum)\n类型: `(text: any,record: T,index: number,action: UseFetchDataAction<T>) => string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的render属性如何使用？",
    "md": "属性: render\n描述: 类似 table 的 render，第一个参数变成了 dom，增加了第四个参数 action\n类型: `(text: ReactNode,record: T,index: number,action: UseFetchDataAction<T>) => ReactNode \\| ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的renderFormItem属性如何使用？",
    "md": "属性: renderFormItem\n描述: 渲染查询表单的输入组件\n类型: `(item,{ type, defaultRender, formItemProps, fieldProps, ...rest },form) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的search属性如何使用？",
    "md": "属性: search\n描述: 配置列的搜索相关，false 为隐藏\n类型: `false` | `{ transform: (value: any) => any }`\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的search.transform属性如何使用？",
    "md": "属性: search.transform\n描述: 转化值的 key, 一般用于时间区间的转化\n类型: `(value: any) => any`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的[editable](/components/editable-table)属性如何使用？",
    "md": "属性: [editable](/components/editable-table)\n描述: 在编辑表格中是否可编辑的，函数的参数和 table 的 render 一样\n类型: `false` | `(text: any, record: T,index: number) => boolean`\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的colSize属性如何使用？",
    "md": "属性: colSize\n描述: 一个表单项占用的格子数量，`占比= colSize*span`，`colSize` 默认为 1 ，`span` 为 8，`span`是`form={{span:8}}` 全局设置的\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的hideInSearch属性如何使用？",
    "md": "属性: hideInSearch\n描述: 在查询表单中不展示此项\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的hideInTable属性如何使用？",
    "md": "属性: hideInTable\n描述: 在 Table 中不展示此列\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的hideInForm属性如何使用？",
    "md": "属性: hideInForm\n描述: 在 Form 中不展示此列\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的hideInDescriptions属性如何使用？",
    "md": "属性: hideInDescriptions\n描述: 在 Descriptions 中不展示此列\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的filters属性如何使用？",
    "md": "属性: filters\n描述: 表头的筛选菜单项，当值为 true 时，自动使用 valueEnum 生成\n类型: `boolean` | `object[]`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的onFilter属性如何使用？",
    "md": "属性: onFilter\n描述: 筛选表单，为 true 时使用 ProTable 自带的，为 false 时关闭本地筛选\n类型: `(value, record) => boolean` | `false`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的request属性如何使用？",
    "md": "属性: request\n描述: 从服务器请求枚举\n类型: [request](https://procomponents.ant.design/components/schema#request-%E5%92%8C-params)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的initialValue属性如何使用？",
    "md": "属性: initialValue\n描述: 查询表单项初始值\n类型: `any`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Columns 列定义的disable属性如何使用？",
    "md": "属性: disable\n描述: 列设置中`disabled`的状态\n类型: `boolean` | `{ checkbox: boolean; }`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProTable - 批量操作 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| alwaysShowAlert | 总是展示 alert，默认无选择不展示（`rowSelection`内置属性） | `boolean` | - |\n| tableAlertRender | 自定义批量操作工具栏左侧信息区域，false 时不显示 | `({ selectedRowKeys: Key[], selectedRows: T[], onCleanSelected: ()=>void }) => ReactNode)`|`false` | - |\n| tableAlertOptionRender | 自定义批量操作工具栏右侧选项区域，false 时不显示 | `({ selectedRowKeys: Key[], selectedRows: T[], onCleanSelected: ()=>void }) => ReactNode)`|`false` | - |\n"
  },
  {
    "title": "pro-components 中 ProTable - 批量操作的alwaysShowAlert属性如何使用？",
    "md": "属性: alwaysShowAlert\n描述: 总是展示 alert，默认无选择不展示（`rowSelection`内置属性）\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - 批量操作的tableAlertRender属性如何使用？",
    "md": "属性: tableAlertRender\n描述: 自定义批量操作工具栏左侧信息区域，false 时不显示\n类型: `({ selectedRowKeys: Key[], selectedRows: T[], onCleanSelected: ()=>void }) => ReactNode)`|`false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - 批量操作的tableAlertOptionRender属性如何使用？",
    "md": "属性: tableAlertOptionRender\n描述: 自定义批量操作工具栏右侧选项区域，false 时不显示\n类型: `({ selectedRowKeys: Key[], selectedRows: T[], onCleanSelected: ()=>void }) => ReactNode)`|`false`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProTable - ListToolBarProps 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 标题 | `ReactNode` | - |\n| subTitle | 子标题 | `ReactNode` | - |\n| tooltip | tooltip 描述 | `string` | - |\n| search | 查询区 | `ReactNode` | `SearchProps` | - |\n| actions | 操作区 | `ReactNode[]` | - |\n| settings | 设置区 | `(ReactNode \\| Setting)[]` | - |\n| filter | 过滤区，通常配合 `LightFilter` 使用 | `ReactNode` | - |\n| multipleLine | 是否多行展示 | `boolean` | `false` |\n| menu | 菜单配置 | `ListToolBarMenu` | - |\n| tabs | 标签页配置，仅当 `multipleLine` 为 true 时有效 | `ListToolBarTabs` | - |\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的subTitle属性如何使用？",
    "md": "参数: subTitle\n说明: 子标题\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: tooltip 描述\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的search属性如何使用？",
    "md": "参数: search\n说明: 查询区\n类型: `ReactNode` | `SearchProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的actions属性如何使用？",
    "md": "参数: actions\n说明: 操作区\n类型: `ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的settings属性如何使用？",
    "md": "参数: settings\n说明: 设置区\n类型: `(ReactNode \\| Setting)[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的filter属性如何使用？",
    "md": "参数: filter\n说明: 过滤区，通常配合 `LightFilter` 使用\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的multipleLine属性如何使用？",
    "md": "参数: multipleLine\n说明: 是否多行展示\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的menu属性如何使用？",
    "md": "参数: menu\n说明: 菜单配置\n类型: `ListToolBarMenu`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarProps的tabs属性如何使用？",
    "md": "参数: tabs\n说明: 标签页配置，仅当 `multipleLine` 为 true 时有效\n类型: `ListToolBarTabs`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProTable - Setting 有哪些配置？",
    "md": "| 参数    | 说明         | 类型                  | 默认值 |\n| ------- | ------------ | --------------------- | ------ |\n| icon    | 图标         | `ReactNode`           | -      |\n| tooltip | tooltip 描述 | `string`              | -      |\n| key     | 操作唯一标识 | `string`              | -      |\n| onClick | 设置被触发   | `(key: string)=>void` | -      |\n"
  },
  {
    "title": "pro-components 中 ProTable - Setting的icon属性如何使用？",
    "md": "参数: icon\n说明: 图标\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Setting的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: tooltip 描述\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Setting的key属性如何使用？",
    "md": "参数: key\n说明: 操作唯一标识\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - Setting的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 设置被触发\n类型: `(key: string)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProTable - ListToolBarMenu 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 类型 | `inline` | `dropdown` | `tab` | `inline` |\n| activeKey | 当前值 | `string` | - |\n| items | 菜单项 | `{ key: string; label: ReactNode }[]` | - |\n| onChange | 切换菜单的回调 | `(activeKey)=>void` | - |\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarMenu的type属性如何使用？",
    "md": "参数: type\n说明: 类型\n类型: `inline` | `dropdown` | `tab`\n默认值: `inline`\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarMenu的activeKey属性如何使用？",
    "md": "参数: activeKey\n说明: 当前值\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarMenu的items属性如何使用？",
    "md": "参数: items\n说明: 菜单项\n类型: `{ key: string; label: ReactNode }[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarMenu的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 切换菜单的回调\n类型: `(activeKey)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProTable - ListToolBarTabs 有哪些配置？",
    "md": "| 参数      | 说明           | 类型                                | 默认值 |\n| --------- | -------------- | ----------------------------------- | ------ |\n| activeKey | 当前选中项     | `string`                            | -      |\n| items     | 菜单项         | `{ key: string; tab: ReactNode }[]` | -      |\n| onChange  | 切换菜单的回调 | `(activeKey)=>void`                 | -      |\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarTabs的activeKey属性如何使用？",
    "md": "参数: activeKey\n说明: 当前选中项\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarTabs的items属性如何使用？",
    "md": "参数: items\n说明: 菜单项\n类型: `{ key: string; tab: ReactNode }[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - ListToolBarTabs的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 切换菜单的回调\n类型: `(activeKey)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProTable - TableDropdown 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| key | 唯一标志 | `string` | - |\n| name | 内容 | `ReactNode` | - |\n| (...Menu.Item) | antd 的 [Menu.Item](https://ant.design/components/menu-cn/#Menu.Item) | `Menu.Item` | - |\n"
  },
  {
    "title": "pro-components 中 ProTable - TableDropdown的key属性如何使用？",
    "md": "参数: key\n说明: 唯一标志\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableDropdown的name属性如何使用？",
    "md": "参数: name\n说明: 内容\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableDropdown的(...Menu.Item)属性如何使用？",
    "md": "参数: (...Menu.Item)\n说明: antd 的 [Menu.Item](https://ant.design/components/menu-cn/#Menu.Item)\n类型: `Menu.Item`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Table 有哪些配置？",
    "md": "#### ProTable - EditableProTable\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| `value` | 同 dataSource，传入一个数组，是 table 渲染的元数据 | `T[]` | `undefined` |\n| `onChange` | dataSource 修改时触发，删除和修改都会触发，如果设置了 value，Table 会成为一个受控组件。 | `(value:T[])=>void` | `undefined` |\n| `recordCreatorProps` | 新建一行数据的相关配置 | [RecordCreatorProps](#recordcreator) & [ButtonProps](https://ant.design/components/button-cn/#API) | - |\n| `maxLength` | 最大的行数，到达最大行数新建按钮会自动消失 | number | - |\n| `editable` | 可编辑表格的相关配置 | [TableRowEditable](#editable-编辑行配置) | - |\n| `controlled` | 是否受控，如果受控每次编辑都会触发 onChange，并且会修改 dataSource | `boolean` | false |\n| `editableFormRef` | table 所有的 form，带了一些表格特有的操作 | `React.Ref<EditableFormInstance<T>>` | `undefined` |\n#### ProTable - TableRowEditable\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 可编辑表格的类型，单行编辑或者多行编辑 | `single` | `multiple` | - |\n| form | 可编辑表格的 form 实例，使用 `Form.useForm` 生成后使用 | `FormInstance` | - |\n| formProps | 可以配置 form 的属性，但是不支持 onFinish | [`FormProps`](https://procomponents.ant.design/components/form#proform) | - |\n| editableKeys | 正在编辑的行，受控属性。 默认 `key` 会使用 `rowKey` 的配置，如果没有配置会使用 `index`，建议使用 rowKey | `Key[]` | - |\n| onChange | 行数据被修改的时候触发 | `(editableKeys: Key[], editableRows: T[]) => void` | - |\n| onSave | 保存一行的时候触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| saveText | 保存一行的文字 | `React.ReactNode` | `保存` |\n| onDelete | 删除一行的时候触发 | `(key: Key, row: T) => Promise<any>` | - |\n| deleteText | 删除一行的文字 | `React.ReactNode` | `删除` |\n| onCancel | 取消编辑一行时触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| cancelText | 取消编辑一行的文字 | `React.ReactNode` | `取消` |\n| actionRender | 自定义编辑模式的操作栏 | `(row: T, config: ActionRenderConfig<T>) => ReactNode[]` | - |\n| deletePopconfirmMessage | 删除时弹出的确认框提示消息 | `ReactNode` | `删除此项？` |\n| onlyOneLineEditorAlertMessage | 只能编辑一行的的提示 | `ReactNode` | `只能同时编辑一行` |\n| onlyAddOneLineAlertMessage | 只能同时新增一行的提示 | `ReactNode` | `只能新增一行` |\n"
  },
  {
    "title": "pro-components 的 ProTable - EditableProTable 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| `value` | 同 dataSource，传入一个数组，是 table 渲染的元数据 | `T[]` | `undefined` |\n| `onChange` | dataSource 修改时触发，删除和修改都会触发，如果设置了 value，Table 会成为一个受控组件。 | `(value:T[])=>void` | `undefined` |\n| `recordCreatorProps` | 新建一行数据的相关配置 | [RecordCreatorProps](#recordcreator) & [ButtonProps](https://ant.design/components/button-cn/#API) | - |\n| `maxLength` | 最大的行数，到达最大行数新建按钮会自动消失 | number | - |\n| `editable` | 可编辑表格的相关配置 | [TableRowEditable](#editable-编辑行配置) | - |\n| `controlled` | 是否受控，如果受控每次编辑都会触发 onChange，并且会修改 dataSource | `boolean` | false |\n| `editableFormRef` | table 所有的 form，带了一些表格特有的操作 | `React.Ref<EditableFormInstance<T>>` | `undefined` |\n"
  },
  {
    "title": "pro-components 中 ProTable - EditableProTable的`value`属性如何使用？",
    "md": "属性: `value`\n描述: 同 dataSource，传入一个数组，是 table 渲染的元数据\n类型: `T[]`\n默认值: `undefined`\n"
  },
  {
    "title": "pro-components 中 ProTable - EditableProTable的`onChange`属性如何使用？",
    "md": "属性: `onChange`\n描述: dataSource 修改时触发，删除和修改都会触发，如果设置了 value，Table 会成为一个受控组件。\n类型: `(value:T[])=>void`\n默认值: `undefined`\n"
  },
  {
    "title": "pro-components 中 ProTable - EditableProTable的`recordCreatorProps`属性如何使用？",
    "md": "属性: `recordCreatorProps`\n描述: 新建一行数据的相关配置\n类型: [RecordCreatorProps](#recordcreator) & [ButtonProps](https://ant.design/components/button-cn/#API)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - EditableProTable的`maxLength`属性如何使用？",
    "md": "属性: `maxLength`\n描述: 最大的行数，到达最大行数新建按钮会自动消失\n类型: number\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - EditableProTable的`editable`属性如何使用？",
    "md": "属性: `editable`\n描述: 可编辑表格的相关配置\n类型: [TableRowEditable](#editable-编辑行配置)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - EditableProTable的`controlled`属性如何使用？",
    "md": "属性: `controlled`\n描述: 是否受控，如果受控每次编辑都会触发 onChange，并且会修改 dataSource\n类型: `boolean`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProTable - EditableProTable的`editableFormRef`属性如何使用？",
    "md": "属性: `editableFormRef`\n描述: table 所有的 form，带了一些表格特有的操作\n类型: `React.Ref<EditableFormInstance<T>>`\n默认值: `undefined`\n"
  },
  {
    "title": "pro-components 的 ProTable - TableRowEditable 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 可编辑表格的类型，单行编辑或者多行编辑 | `single` | `multiple` | - |\n| form | 可编辑表格的 form 实例，使用 `Form.useForm` 生成后使用 | `FormInstance` | - |\n| formProps | 可以配置 form 的属性，但是不支持 onFinish | [`FormProps`](https://procomponents.ant.design/components/form#proform) | - |\n| editableKeys | 正在编辑的行，受控属性。 默认 `key` 会使用 `rowKey` 的配置，如果没有配置会使用 `index`，建议使用 rowKey | `Key[]` | - |\n| onChange | 行数据被修改的时候触发 | `(editableKeys: Key[], editableRows: T[]) => void` | - |\n| onSave | 保存一行的时候触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| saveText | 保存一行的文字 | `React.ReactNode` | `保存` |\n| onDelete | 删除一行的时候触发 | `(key: Key, row: T) => Promise<any>` | - |\n| deleteText | 删除一行的文字 | `React.ReactNode` | `删除` |\n| onCancel | 取消编辑一行时触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| cancelText | 取消编辑一行的文字 | `React.ReactNode` | `取消` |\n| actionRender | 自定义编辑模式的操作栏 | `(row: T, config: ActionRenderConfig<T>) => ReactNode[]` | - |\n| deletePopconfirmMessage | 删除时弹出的确认框提示消息 | `ReactNode` | `删除此项？` |\n| onlyOneLineEditorAlertMessage | 只能编辑一行的的提示 | `ReactNode` | `只能同时编辑一行` |\n| onlyAddOneLineAlertMessage | 只能同时新增一行的提示 | `ReactNode` | `只能新增一行` |\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的type属性如何使用？",
    "md": "属性: type\n描述: 可编辑表格的类型，单行编辑或者多行编辑\n类型: `single` | `multiple`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的form属性如何使用？",
    "md": "属性: form\n描述: 可编辑表格的 form 实例，使用 `Form.useForm` 生成后使用\n类型: `FormInstance`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的formProps属性如何使用？",
    "md": "属性: formProps\n描述: 可以配置 form 的属性，但是不支持 onFinish\n类型: [`FormProps`](https://procomponents.ant.design/components/form#proform)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的editableKeys属性如何使用？",
    "md": "属性: editableKeys\n描述: 正在编辑的行，受控属性。 默认 `key` 会使用 `rowKey` 的配置，如果没有配置会使用 `index`，建议使用 rowKey\n类型: `Key[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的onChange属性如何使用？",
    "md": "属性: onChange\n描述: 行数据被修改的时候触发\n类型: `(editableKeys: Key[], editableRows: T[]) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的onSave属性如何使用？",
    "md": "属性: onSave\n描述: 保存一行的时候触发\n类型: `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的saveText属性如何使用？",
    "md": "属性: saveText\n描述: 保存一行的文字\n类型: `React.ReactNode`\n默认值: `保存`\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的onDelete属性如何使用？",
    "md": "属性: onDelete\n描述: 删除一行的时候触发\n类型: `(key: Key, row: T) => Promise<any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的deleteText属性如何使用？",
    "md": "属性: deleteText\n描述: 删除一行的文字\n类型: `React.ReactNode`\n默认值: `删除`\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的onCancel属性如何使用？",
    "md": "属性: onCancel\n描述: 取消编辑一行时触发\n类型: `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的cancelText属性如何使用？",
    "md": "属性: cancelText\n描述: 取消编辑一行的文字\n类型: `React.ReactNode`\n默认值: `取消`\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的actionRender属性如何使用？",
    "md": "属性: actionRender\n描述: 自定义编辑模式的操作栏\n类型: `(row: T, config: ActionRenderConfig<T>) => ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的deletePopconfirmMessage属性如何使用？",
    "md": "属性: deletePopconfirmMessage\n描述: 删除时弹出的确认框提示消息\n类型: `ReactNode`\n默认值: `删除此项？`\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的onlyOneLineEditorAlertMessage属性如何使用？",
    "md": "属性: onlyOneLineEditorAlertMessage\n描述: 只能编辑一行的的提示\n类型: `ReactNode`\n默认值: `只能同时编辑一行`\n"
  },
  {
    "title": "pro-components 中 ProTable - TableRowEditable的onlyAddOneLineAlertMessage属性如何使用？",
    "md": "属性: onlyAddOneLineAlertMessage\n描述: 只能同时新增一行的提示\n类型: `ReactNode`\n默认值: `只能新增一行`\n"
  },
  {
    "title": "pro-components 的 Table 有哪些配置？",
    "md": "#### ProTable - DragSortTable\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dragSortKey | 如配置此参数，则会在该 key 对应的行显示拖拽排序把手，允许拖拽排序 | `string` | - |\n| dragSortHandlerRender | 渲染自定义拖动排序把手的函数 如配置了 dragSortKey 但未配置此参数，则使用默认把手图标 | `(rowData: T, idx: number) => React.ReactNode` | `<MenuOutlined className=\"dragSortDefaultHandle\" style={{ cursor: 'grab', color: '#999' }} />` |\n| onDragSortEnd | 拖动排序完成回调 | `(beforeIndex: number, afterIndex: number, newDataSource: T[]) => Promise<void> \\| void` | - |\n"
  },
  {
    "title": "pro-components 的 ProTable - DragSortTable 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dragSortKey | 如配置此参数，则会在该 key 对应的行显示拖拽排序把手，允许拖拽排序 | `string` | - |\n| dragSortHandlerRender | 渲染自定义拖动排序把手的函数 如配置了 dragSortKey 但未配置此参数，则使用默认把手图标 | `(rowData: T, idx: number) => React.ReactNode` | `<MenuOutlined className=\"dragSortDefaultHandle\" style={{ cursor: 'grab', color: '#999' }} />` |\n| onDragSortEnd | 拖动排序完成回调 | `(beforeIndex: number, afterIndex: number, newDataSource: T[]) => Promise<void> \\| void` | - |\n"
  },
  {
    "title": "pro-components 中 ProTable - DragSortTable的dragSortKey属性如何使用？",
    "md": "属性: dragSortKey\n描述: 如配置此参数，则会在该 key 对应的行显示拖拽排序把手，允许拖拽排序\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProTable - DragSortTable的dragSortHandlerRender属性如何使用？",
    "md": "属性: dragSortHandlerRender\n描述: 渲染自定义拖动排序把手的函数 如配置了 dragSortKey 但未配置此参数，则使用默认把手图标\n类型: `(rowData: T, idx: number) => React.ReactNode`\n默认值: `<MenuOutlined className=\"dragSortDefaultHandle\" style={{ cursor: 'grab', color: '#999' }} />`\n"
  },
  {
    "title": "pro-components 中 ProTable - DragSortTable的onDragSortEnd属性如何使用？",
    "md": "属性: onDragSortEnd\n描述: 拖动排序完成回调\n类型: `(beforeIndex: number, afterIndex: number, newDataSource: T[]) => Promise<void> \\| void`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Skeleton 有哪些配置？",
    "md": "#### ProSkeleton - ProSkeleton\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 不同类型的骨架屏 | `'list' \\| 'result' \\| 'descriptions'` | list |\n| active | 是否显示动态 | boolean | true |\n| pageHeader | 是否显示 pageHeader 的骨架屏 descriptions 和 list 有效 | - | - |\n| statistic | 统计信息骨架屏的数量 | `number` | `false` | - |\n| list | 列表的骨架屏，可以控制数量 | `number` | `false` | - |\n| toolbar | 列表的操作栏骨架屏 | boolean | - |\n| renderFormItem | 自定义 `mode=update 或 edit` 下的 dom 表现，一般用于渲染编辑框 | - | - |\n| render | 自定义 `mode=read` 下的 dom 表现，只是单纯的表现形式 | - | - |\n"
  },
  {
    "title": "pro-components 的 ProSkeleton - ProSkeleton 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| type | 不同类型的骨架屏 | `'list' \\| 'result' \\| 'descriptions'` | list |\n| active | 是否显示动态 | boolean | true |\n| pageHeader | 是否显示 pageHeader 的骨架屏 descriptions 和 list 有效 | - | - |\n| statistic | 统计信息骨架屏的数量 | `number` | `false` | - |\n| list | 列表的骨架屏，可以控制数量 | `number` | `false` | - |\n| toolbar | 列表的操作栏骨架屏 | boolean | - |\n| renderFormItem | 自定义 `mode=update 或 edit` 下的 dom 表现，一般用于渲染编辑框 | - | - |\n| render | 自定义 `mode=read` 下的 dom 表现，只是单纯的表现形式 | - | - |\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的type属性如何使用？",
    "md": "参数: type\n说明: 不同类型的骨架屏\n类型: `'list' \\| 'result' \\| 'descriptions'`\n默认值: list\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的active属性如何使用？",
    "md": "参数: active\n说明: 是否显示动态\n类型: boolean\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的pageHeader属性如何使用？",
    "md": "参数: pageHeader\n说明: 是否显示 pageHeader 的骨架屏 descriptions 和 list 有效\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的statistic属性如何使用？",
    "md": "参数: statistic\n说明: 统计信息骨架屏的数量\n类型: `number` | `false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的list属性如何使用？",
    "md": "参数: list\n说明: 列表的骨架屏，可以控制数量\n类型: `number` | `false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的toolbar属性如何使用？",
    "md": "参数: toolbar\n说明: 列表的操作栏骨架屏\n类型: boolean\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的renderFormItem属性如何使用？",
    "md": "参数: renderFormItem\n说明: 自定义 `mode=update 或 edit` 下的 dom 表现，一般用于渲染编辑框\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProSkeleton - ProSkeleton的render属性如何使用？",
    "md": "参数: render\n说明: 自定义 `mode=read` 下的 dom 表现，只是单纯的表现形式\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 的 List 有哪些配置？",
    "md": "#### ProList - ProList API\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dataSource | 与 antd 相同的[配置](https://ant.design/components/list-cn/#API) | `any[]` | `false` |\n| actionRef | Table action 的引用，便于自定义触发 | `MutableRefObject<ActionType>` | - |\n| metas | 列表项配置，类似 Table 中的 columns | `Metas` | - |\n| rowKey | 行的 key，一般是行 id | `string` | `(row,index)=>string` | `'id'` |\n| headerTitle | 列表头部主标题 | `React.ReactNode` | - |\n| loading | 是否加载中 | `boolean` | `(item: any) => boolean` | `false` |\n| split | 是否有分割线 | `boolean` | `false` |\n| rowSelection | 与 antd 相同的[配置](https://ant.design/components/table-cn/#rowSelection) | `object` |`boolean` | false |\n| expandable | 与 antd 相同的[配置](https://ant.design/components/table-cn/#expandable) | `object` | `false` | - |\n| showActions | 何时展示 actions，CardList 模式下不生效 | `'hover'` | `'always'` | `'always'` |\n| showExtra | 何时展示 extra | `'hover'` | `'always'` | `'always'` |\n| onRow | 与 antd 相同的[配置](https://ant.design/components/table-cn/#onRow-%E7%94%A8%E6%B3%95)，用户传入`grid`属性时，列表将会以卡片模式进行渲染，此事件将不会触发，请使用`onItem` | `function(record, index)` | - |\n| onItem | 与 antd 相同的[配置](https://ant.design/components/table-cn/#onRow-%E7%94%A8%E6%B3%95)，在所有类型点击某个项目都会触发该事件。 | `function(record, index)` | - |\n| rowClassName | 自定义列表行的类名 | `string`| `(row, index) => string` | - |\n| itemHeaderRender | 自定义每一列的 header，与 itemRender 不同的时，它会保留多选和展开收起 | - | - |\n| itemCardProps | 自定义卡片列表的 proCard props，只在卡片列表下生效 | - | - |\n#### ProList - Metas.\\[Meta] 通用 API\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dataIndex | 数据在数据项中对应的路径，支持通过数组查询嵌套路径 | `string` | `string[]` | - |\n| valueType | 值的类型，和 ProTable 一致 | `'text'` | `'date'` ... | `'text'` |\n| render | 自定义渲染函数 | `(text: React.ReactNode,record: T,index: number) => React.ReactNode \\| React.ReactNode[]` | - |\n#### ProList - Metas.type\n| 参数      | 说明 | 类型 | 默认值   |\n| --------- | ---- | ---- | -------- |\n| dataIndex | -    | -    | `'type'` |\n#### ProList - Metas.title\n| 参数      | 说明 | 类型 | 默认值    |\n| --------- | ---- | ---- | --------- |\n| dataIndex | -    | -    | `'title'` |\n#### ProList - Metas.subTitle\n| 参数      | 说明 | 类型 | 默认值       |\n| --------- | ---- | ---- | ------------ |\n| dataIndex | -    | -    | `'subTitle'` |\n#### ProList - Metas.description\n| 参数      | 说明 | 类型 | 默认值          |\n| --------- | ---- | ---- | --------------- |\n| dataIndex | -    | -    | `'description'` |\n#### ProList - Metas.avatar\n| 参数      | 说明 | 类型 | 默认值     |\n| --------- | ---- | ---- | ---------- |\n| dataIndex | -    | -    | `'avatar'` |\n#### ProList - Metas.actions\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dataIndex | - | - | `'actions'` |\n| cardActionProps | 设置卡片列表把 action 渲染到哪里｜`extra`｜`'actions' \\| 'extra'` | - | - |\n#### ProList - Metas.content\n| 参数      | 说明 | 类型 | 默认值      |\n| --------- | ---- | ---- | ----------- |\n| dataIndex | -    | -    | `'content'` |\n#### ProList - Metas.extra\n| 参数      | 说明 | 类型 | 默认值    |\n| --------- | ---- | ---- | --------- |\n| dataIndex | -    | -    | `'extra'` |\n"
  },
  {
    "title": "pro-components 的 ProList - ProList API 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dataSource | 与 antd 相同的[配置](https://ant.design/components/list-cn/#API) | `any[]` | `false` |\n| actionRef | Table action 的引用，便于自定义触发 | `MutableRefObject<ActionType>` | - |\n| metas | 列表项配置，类似 Table 中的 columns | `Metas` | - |\n| rowKey | 行的 key，一般是行 id | `string` | `(row,index)=>string` | `'id'` |\n| headerTitle | 列表头部主标题 | `React.ReactNode` | - |\n| loading | 是否加载中 | `boolean` | `(item: any) => boolean` | `false` |\n| split | 是否有分割线 | `boolean` | `false` |\n| rowSelection | 与 antd 相同的[配置](https://ant.design/components/table-cn/#rowSelection) | `object` |`boolean` | false |\n| expandable | 与 antd 相同的[配置](https://ant.design/components/table-cn/#expandable) | `object` | `false` | - |\n| showActions | 何时展示 actions，CardList 模式下不生效 | `'hover'` | `'always'` | `'always'` |\n| showExtra | 何时展示 extra | `'hover'` | `'always'` | `'always'` |\n| onRow | 与 antd 相同的[配置](https://ant.design/components/table-cn/#onRow-%E7%94%A8%E6%B3%95)，用户传入`grid`属性时，列表将会以卡片模式进行渲染，此事件将不会触发，请使用`onItem` | `function(record, index)` | - |\n| onItem | 与 antd 相同的[配置](https://ant.design/components/table-cn/#onRow-%E7%94%A8%E6%B3%95)，在所有类型点击某个项目都会触发该事件。 | `function(record, index)` | - |\n| rowClassName | 自定义列表行的类名 | `string`| `(row, index) => string` | - |\n| itemHeaderRender | 自定义每一列的 header，与 itemRender 不同的时，它会保留多选和展开收起 | - | - |\n| itemCardProps | 自定义卡片列表的 proCard props，只在卡片列表下生效 | - | - |\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的dataSource属性如何使用？",
    "md": "参数: dataSource\n说明: 与 antd 相同的[配置](https://ant.design/components/list-cn/#API)\n类型: `any[]`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的actionRef属性如何使用？",
    "md": "参数: actionRef\n说明: Table action 的引用，便于自定义触发\n类型: `MutableRefObject<ActionType>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的metas属性如何使用？",
    "md": "参数: metas\n说明: 列表项配置，类似 Table 中的 columns\n类型: `Metas`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的rowKey属性如何使用？",
    "md": "参数: rowKey\n说明: 行的 key，一般是行 id\n类型: `string` | `(row,index)=>string`\n默认值: `'id'`\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的headerTitle属性如何使用？",
    "md": "参数: headerTitle\n说明: 列表头部主标题\n类型: `React.ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的loading属性如何使用？",
    "md": "参数: loading\n说明: 是否加载中\n类型: `boolean` | `(item: any) => boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的split属性如何使用？",
    "md": "参数: split\n说明: 是否有分割线\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的rowSelection属性如何使用？",
    "md": "参数: rowSelection\n说明: 与 antd 相同的[配置](https://ant.design/components/table-cn/#rowSelection)\n类型: `object` |`boolean`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的expandable属性如何使用？",
    "md": "参数: expandable\n说明: 与 antd 相同的[配置](https://ant.design/components/table-cn/#expandable)\n类型: `object` | `false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的showActions属性如何使用？",
    "md": "参数: showActions\n说明: 何时展示 actions，CardList 模式下不生效\n类型: `'hover'` | `'always'`\n默认值: `'always'`\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的showExtra属性如何使用？",
    "md": "参数: showExtra\n说明: 何时展示 extra\n类型: `'hover'` | `'always'`\n默认值: `'always'`\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的onRow属性如何使用？",
    "md": "参数: onRow\n说明: 与 antd 相同的[配置](https://ant.design/components/table-cn/#onRow-%E7%94%A8%E6%B3%95)，用户传入`grid`属性时，列表将会以卡片模式进行渲染，此事件将不会触发，请使用`onItem`\n类型: `function(record, index)`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的onItem属性如何使用？",
    "md": "参数: onItem\n说明: 与 antd 相同的[配置](https://ant.design/components/table-cn/#onRow-%E7%94%A8%E6%B3%95)，在所有类型点击某个项目都会触发该事件。\n类型: `function(record, index)`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的rowClassName属性如何使用？",
    "md": "参数: rowClassName\n说明: 自定义列表行的类名\n类型: `string`| `(row, index) => string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的itemHeaderRender属性如何使用？",
    "md": "参数: itemHeaderRender\n说明: 自定义每一列的 header，与 itemRender 不同的时，它会保留多选和展开收起\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - ProList API的itemCardProps属性如何使用？",
    "md": "参数: itemCardProps\n说明: 自定义卡片列表的 proCard props，只在卡片列表下生效\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.\\[Meta] 通用 API 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dataIndex | 数据在数据项中对应的路径，支持通过数组查询嵌套路径 | `string` | `string[]` | - |\n| valueType | 值的类型，和 ProTable 一致 | `'text'` | `'date'` ... | `'text'` |\n| render | 自定义渲染函数 | `(text: React.ReactNode,record: T,index: number) => React.ReactNode \\| React.ReactNode[]` | - |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.\\[Meta] 通用 API的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: 数据在数据项中对应的路径，支持通过数组查询嵌套路径\n类型: `string` | `string[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.\\[Meta] 通用 API的valueType属性如何使用？",
    "md": "参数: valueType\n说明: 值的类型，和 ProTable 一致\n类型: `'text'` | `'date'` ...\n默认值: `'text'`\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.\\[Meta] 通用 API的render属性如何使用？",
    "md": "参数: render\n说明: 自定义渲染函数\n类型: `(text: React.ReactNode,record: T,index: number) => React.ReactNode \\| React.ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.type 有哪些配置？",
    "md": "| 参数      | 说明 | 类型 | 默认值   |\n| --------- | ---- | ---- | -------- |\n| dataIndex | -    | -    | `'type'` |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.type的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'type'`\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.title 有哪些配置？",
    "md": "| 参数      | 说明 | 类型 | 默认值    |\n| --------- | ---- | ---- | --------- |\n| dataIndex | -    | -    | `'title'` |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.title的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'title'`\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.subTitle 有哪些配置？",
    "md": "| 参数      | 说明 | 类型 | 默认值       |\n| --------- | ---- | ---- | ------------ |\n| dataIndex | -    | -    | `'subTitle'` |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.subTitle的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'subTitle'`\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.description 有哪些配置？",
    "md": "| 参数      | 说明 | 类型 | 默认值          |\n| --------- | ---- | ---- | --------------- |\n| dataIndex | -    | -    | `'description'` |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.description的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'description'`\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.avatar 有哪些配置？",
    "md": "| 参数      | 说明 | 类型 | 默认值     |\n| --------- | ---- | ---- | ---------- |\n| dataIndex | -    | -    | `'avatar'` |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.avatar的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'avatar'`\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.actions 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| dataIndex | - | - | `'actions'` |\n| cardActionProps | 设置卡片列表把 action 渲染到哪里｜`extra`｜`'actions' \\| 'extra'` | - | - |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.actions的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'actions'`\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.actions的cardActionProps属性如何使用？",
    "md": "参数: cardActionProps\n说明: 设置卡片列表把 action 渲染到哪里｜`extra`｜`'actions' \\| 'extra'`\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.content 有哪些配置？",
    "md": "| 参数      | 说明 | 类型 | 默认值      |\n| --------- | ---- | ---- | ----------- |\n| dataIndex | -    | -    | `'content'` |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.content的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'content'`\n"
  },
  {
    "title": "pro-components 的 ProList - Metas.extra 有哪些配置？",
    "md": "| 参数      | 说明 | 类型 | 默认值    |\n| --------- | ---- | ---- | --------- |\n| dataIndex | -    | -    | `'extra'` |\n"
  },
  {
    "title": "pro-components 中 ProList - Metas.extra的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: -\n类型: -\n默认值: `'extra'`\n"
  },
  {
    "title": "pro-components 的 Layout 有哪些配置？",
    "md": "#### ProLayout - ProLayout\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | layout 的左上角的 title | `ReactNode` | `'Ant Design Pro'` |\n| logo | layout 的左上角 logo 的 url | `ReactNode` | `()=> ReactNode` | - |\n| pure | 是否删除掉所有的自带界面 | `boolean` | - |\n| loading | layout 的加载态 | `boolean` | - |\n| location | 当前应用会话的位置信息。如果你的应用创建了自定义的 history，则需要显示指定 location 属性，详见 [issue](https://github.com/ant-design/pro-components/issues/327) | [history.location](https://reactrouter.com/web/api/history) | isBrowser ? window.location : undefined |\n| appList | 跨站点导航列表 | `{ icon, title, desc, url, target, children }[]` | - |\n| appListRender | 自定义跨站点导航列表的 render 方法 | `(props: AppListProps, defaultDom: React.ReactNode) => ReactNode` | - |\n| menuHeaderRender | 渲染 logo 和 title, 优先级比 `headerTitleRender` 更高 | `ReactNode` | `(logo,title)=>ReactNode` | - |\n| menuFooterRender | 在 layout 底部渲染一个块 | `(menuProps)=>ReactNode` | - |\n| onMenuHeaderClick | menu 菜单的头部点击事件 | `(e: React.MouseEvent<HTMLDivElement>) => void` | - |\n| menuExtraRender | 在菜单标题的下面渲染一个区域 | `(menuProps)=>ReactNode` | - |\n| onTopMixMenuHeaderClick | mix 模式下顶部栏的头部点击事件 | `(e: React.MouseEvent<HTMLDivElement>) => void` | - |\n| contentStyle | layout 的内容区 style | CSSProperties | - |\n| layout | layout 的菜单模式，side：右侧导航，top：顶部导航 | `side` | `top`|`mix` | `side` |\n| contentWidth | layout 的内容模式，Fluid：自适应，Fixed：定宽 1200px | `Fluid` | `Fixed` | `Fluid` |\n| actionRef | layout 的常见操作，比如刷新菜单 | `MutableRefObject<ActionType>` | - |\n| fixedHeader | 是否固定 header 到顶部 | `boolean` | `false` |\n| fixSiderbar | 是否固定导航 | `boolean` | `false` |\n| breakpoint | 触发响应式布局的[断点](https://ant.design/components/grid-cn/#Col) | `Enum { 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }` | `lg` |\n| menu | 关于 [menu](#menu) 的配置，暂时只有 locale，locale 可以关闭 menu 的自带的全球化 | [`menuConfig`](#menu) | `{ locale: true }` |\n| iconfontUrl | 使用 [IconFont](https://ant.design/components/icon-cn/#components-icon-demo-iconfont) 的图标配置 | `URL` | - |\n| locale | 当前 layout 的语言设置 | `zh-CN` | `zh-TW` | `en-US` | navigator.language |\n| settings | layout 的设置 | [`Settings`](#Settings) | - |\n| siderWidth | 侧边菜单宽度 | `number` | 208 |\n| suppressSiderWhenMenuEmpty | 在菜单为空时隐藏 Sider | `boolean` | - |\n| defaultCollapsed | 默认的菜单的收起和展开，会受到 `breakpoint` 的影响，`breakpoint=false` 生效 | `boolean` | - |\n| collapsed | 控制菜单的收起和展开 | `boolean` | - |\n| onCollapse | 菜单的折叠收起事件 | `(collapsed: boolean) => void` | - |\n| onPageChange | 页面切换时触发 | `(location: Location) => void` | - |\n| headerRender | 自定义头的 render 方法 | `(props: ProLayoutProps) => ReactNode` | - |\n| headerTitleRender | 自定义头标题的方法，mix 模式和 top 模式下生效 | `(logo,title,props)=>ReactNode` | - |\n| headerContentRender | 自定义头内容的方法 | `(props: ProLayoutProps) => ReactNode` | - |\n| avatarProps | layout 的头像设置，不同的 layout 放在不同的位置 | [`AvatarProps`](https://ant.design/components/avatar-cn/) | - |\n| actionsRender | 自定义操作列表 | `(layoutProps)=>ReactNode[]` | - |\n| collapsedButtonRender | 自定义 collapsed button 的方法 | `(collapsed: boolean) => ReactNode` | - |\n| footerRender | 自定义页脚的 render 方法 | `(props: ProLayoutProps) => JSX.Element \\| false` | - |\n| pageTitleRender | 自定义页面标题的显示方法 | `(props: ProLayoutProps) => string` | - |\n| menuRender | 自定义菜单的 render 方法 | `(props: HeaderViewProps) => ReactNode` | - |\n| postMenuData | 在显示前对菜单数据进行查看，修改不会触发重新渲染 | `(menuData: MenuDataItem[]) => MenuDataItem[]` | - |\n| menuItemRender | 自定义菜单项的 render 方法 | [`(itemProps: MenuDataItem, defaultDom: React.ReactNode, props: BaseMenuProps) => ReactNode`](/components/layout/#menudataitem) | - |\n| subMenuItemRender | 自定义拥有子菜单菜单项的 render 方法 | [`(itemProps: MenuDataItem) => ReactNode`](/components/layout/#menudataitem) | - |\n| menuDataRender | menuData 的 render 方法，用来自定义 menuData | `(menuData: MenuDataItem[]) => MenuDataItem[]` | - |\n| breadcrumbRender | 自定义面包屑的数据 | `(route)=>route` | - |\n| breadcrumbProps | 传递到 antd Breadcrumb 组件的 props, 参考 [面包屑](https://ant.design/components/breadcrumb-cn/) | `breadcrumbProps` | undefined |\n| route | 用于生成菜单和面包屑。Umi 的 Layout 会自动带有 | [route](#route) | - |\n| disableMobile | 禁止自动切换到移动页面 | `boolean` | false |\n| ErrorBoundary | 自带了错误处理功能，防止白屏，`ErrorBoundary=false` 关闭默认错误边界 | `ReactNode` | 内置 ErrorBoundary |\n| links | 显示在菜单右下角的快捷操作 | `ReactNode[]` | - |\n| menuProps | 传递到 antd menu 组件的 props, 参考 [导航菜单](https://ant.design/components/menu-cn/) | `MenuProps` | undefined |\n| waterMarkProps | 配置水印，水印是 PageContainer 的功能，layout 只是透传给 PageContainer | [WaterMarkProps](/components/water-mark) | - |\n#### ProLayout - menu\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| locale | menu 是否使用国际化，还需要 formatMessage 的配合。 | `boolean` | `true` |\n| defaultOpenAll | 默认打开所有的菜单项，要注意只有 layout 挂载之前生效，异步加载菜单是不支持的 | `boolean` | `false` |\n| ignoreFlatMenu | 是否忽略手动折叠过的菜单状态，结合 defaultOpenAll 可实现折叠按钮切换后，同样可以展开所有子菜单 | `boolean` | `false` |\n| type | 菜单的类型 | `sub` | `group` | `group` |\n| autoClose | 选中菜单是否自动关闭菜单 | `boolean` | `true` |\n| loading | 菜单是否正在加载中 | `boolean` | `false` |\n| onLoadingChange | 菜单的加载状态变更 | `(loading)=>void` | - |\n| request | 远程加载菜单的方法，会自动修改 loading 状态 | `(params,defaultMenuDat) => Promise<MenuDataItem[]>` | - |\n#### ProLayout - SettingDrawer\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| collapse | 控制 SettingDrawer 的收起和展开 | `boolean` | - |\n| onCollapseChange | SettingDrawer 的折叠收起事件 | `(collapsed: boolean) => void` | - |\n| settings | layout 的设置 | [`Settings`](#Settings) | [`Settings`](#Settings) | - |\n| onSettingChange | [`Settings`](#Settings) 发生更改事件 | `(settings: [`Settings`](#Settings) ) => void` | - |\n| hideHintAlert | 删除下方的提示信息 | `boolean` | - |\n| hideCopyButton | 不展示 copy 功能 | `boolean` | - |\n| disableUrlParams | 禁止同步设置到查询参数 | `boolean` | `false` |\n| enableDarkTheme | 打开黑色主题切换功能 ｜ `boolean` | `false` | - |\n| colorList | 自带的颜色切换系统 (ColorList 的 title 会作为 Tooltip 显示) ｜ `{key,color,title?}[]` | `ColorList` | - |\n#### ProLayout - PageLoading\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| [(...)](https://ant.design/components/spin-cn/#API) | 支持所有的 antd `Spin` 组件参数 | - | - |\n#### ProLayout - getMenuData\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| routes | 路由的配置信息 | [route\\[\\]](#route) | - |\n| menu | menu 的配置项，默认 `{locale: true}` | `{ locale: boolean }` | - |\n| menuDataRender | menuData 的 render 方法，用来自定义 menuData | `(menuData: MenuDataItem[]) => MenuDataItem[]` | - |\n| formatMessage | react-intl 的 formatMessage 方法 | `(data: { id: any; defaultMessage?: string }) => string;` | - |\n#### ProLayout - getPageTitle\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| pathname | 当前的 pathname | location.pathname | - |\n| breadcrumb | MenuDataItem 的合集 | `{ [path: string]: MenuDataItem }` | - |\n| menu | menu 的配置项，默认 `{locale: true}` | `{ locale: boolean }` | - |\n| title | title 的类型 | string | 'Ant Design Pro' |\n| formatMessage | react-intl 的 formatMessage 方法 | `(data: { id: any; defaultMessage?: string }) => string;` | - |\n#### ProLayout - GridContent\n| 参数         | 说明     | 类型               | 默认值 |\n| ------------ | -------- | ------------------ | ------ |\n| contentWidth | 内容模式 | `Fluid` | `Fixed` | -      |\n#### ProLayout - Layout 的 token\n| token | 说明 | 默认值 |\n| --- | --- | --- |\n| bgLayout | layout 的背景颜色 | `linear-gradient(${antdToken.colorBgContainer}, ${antdToken.colorBgLayout} 28%)` |\n| colorTextAppListIcon | 跨站点应用的图标颜色 | `#666` |\n| colorTextAppListIconHover | 跨站点应用的图标 hover 颜色 | `rgba(0, 0, 0, 0.65)` |\n| colorBgAppListIconHover | 跨站点应用的图标 hover 背景颜色 | `rgba(0, 0, 0, 0.04)` |\n#### ProLayout - Sider Token\n| token | 说明 | 默认值 |\n| --- | --- | --- |\n| colorMenuBackground | menu 的背景颜色 | `transparent` |\n| colorTextMenuTitle | sider 的标题字体颜色 | `colorTextHeading` |\n| colorMenuItemDivider | menuItem 分割线的颜色 | `colorSplit` |\n| colorTextMenu | menuItem 的字体颜色 | `colorText` |\n| colorTextMenuSecondary | menu 的二级字体颜色，比如 footer 和 action 的 icon | `colorText` |\n| colorTextMenuSelected | menuItem 的选中字体颜色 | `rgb(0,0,0)` |\n| colorTextMenuActive | menuItem hover 的选中字体颜色 | `rgba(0, 0, 0, 0.85)` |\n| colorTextMenuItemHover | menuItem 的 hover 字体颜色 | `rgba(255,255,255,0.75)` |\n| colorBgMenuItemHover | menuItem 的 hover 背景颜色 | `rgba(90, 75, 75, 0.03)` |\n| colorBgMenuItemSelected | menuItem 的选中背景颜色 | `rgba(0, 0, 0, 0.04)` |\n| colorBgMenuItemCollapsedElevated | 收起 menuItem 的弹出菜单背景颜色 | `transparent` |\n| colorBgCollapsedButton | 展开收起按钮背景颜色 | `#fff` |\n| colorTextCollapsedButton | 展开收起按钮字体颜色 | `colorTextMenuSecondary` |\n| colorTextCollapsedButtonHover | 展开收起按钮 hover 时字体颜色 | `colorTextMenu` |\n#### ProLayout - Header Token\n| token | 说明 | 默认值 |\n| --- | --- | --- |\n| colorBgHeader | header 的背景颜色 | `rgba(240, 242, 245, 0.4)` |\n| colorHeaderTitle | sider 的标题字体颜色 | `colorTextHeading` |\n| colorTextMenu | menuItem 的字体颜色 | `colorText` |\n| colorTextMenuSecondary | menu 的二级字体颜色，比如 footer 和 action 的 icon | `colorText` |\n| colorTextMenuSelected | menuItem 的选中字体颜色 | `rgb(0,0,0)` |\n| colorTextMenuActive | menuItem hover 的选中字体颜色 | `rgba(0, 0, 0, 0.85)` |\n| colorBgMenuItemHover | menuItem 的 hover 背景颜色 | `rgba(90, 75, 75, 0.03)` |\n| colorBgMenuItemSelected | menuItem 的选中背景颜色 | `rgba(0, 0, 0, 0.04)` |\n| colorTextRightActionsItem | 右上角字体颜色 | `colorTextSecondary` |\n| colorBgRightActionsItemHover | 右上角选中的 hover 颜色 | `rgba(0, 0, 0, 0.03)` |\n| heightLayoutHeader | header 高度 | 56 |\n#### ProLayout - pageContainer Token\n| token | 说明 | 默认值 |\n| --- | --- | --- |\n| paddingBlockPageContainerContent | pageContainer 自带的 padding block | `24` |\n| paddingInlinePageContainerContent | pageContainer 自带的 padding inline | `40` |\n| colorBgPageContainer | pageContainer 的背景颜色 | `transparent` |\n| colorBgPageContainerFixed | pageContainer 被固定时的背景颜色 | `#FFF` |\n"
  },
  {
    "title": "pro-components 的 ProLayout - ProLayout 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | layout 的左上角的 title | `ReactNode` | `'Ant Design Pro'` |\n| logo | layout 的左上角 logo 的 url | `ReactNode` | `()=> ReactNode` | - |\n| pure | 是否删除掉所有的自带界面 | `boolean` | - |\n| loading | layout 的加载态 | `boolean` | - |\n| location | 当前应用会话的位置信息。如果你的应用创建了自定义的 history，则需要显示指定 location 属性，详见 [issue](https://github.com/ant-design/pro-components/issues/327) | [history.location](https://reactrouter.com/web/api/history) | isBrowser ? window.location : undefined |\n| appList | 跨站点导航列表 | `{ icon, title, desc, url, target, children }[]` | - |\n| appListRender | 自定义跨站点导航列表的 render 方法 | `(props: AppListProps, defaultDom: React.ReactNode) => ReactNode` | - |\n| menuHeaderRender | 渲染 logo 和 title, 优先级比 `headerTitleRender` 更高 | `ReactNode` | `(logo,title)=>ReactNode` | - |\n| menuFooterRender | 在 layout 底部渲染一个块 | `(menuProps)=>ReactNode` | - |\n| onMenuHeaderClick | menu 菜单的头部点击事件 | `(e: React.MouseEvent<HTMLDivElement>) => void` | - |\n| menuExtraRender | 在菜单标题的下面渲染一个区域 | `(menuProps)=>ReactNode` | - |\n| onTopMixMenuHeaderClick | mix 模式下顶部栏的头部点击事件 | `(e: React.MouseEvent<HTMLDivElement>) => void` | - |\n| contentStyle | layout 的内容区 style | CSSProperties | - |\n| layout | layout 的菜单模式，side：右侧导航，top：顶部导航 | `side` | `top`|`mix` | `side` |\n| contentWidth | layout 的内容模式，Fluid：自适应，Fixed：定宽 1200px | `Fluid` | `Fixed` | `Fluid` |\n| actionRef | layout 的常见操作，比如刷新菜单 | `MutableRefObject<ActionType>` | - |\n| fixedHeader | 是否固定 header 到顶部 | `boolean` | `false` |\n| fixSiderbar | 是否固定导航 | `boolean` | `false` |\n| breakpoint | 触发响应式布局的[断点](https://ant.design/components/grid-cn/#Col) | `Enum { 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }` | `lg` |\n| menu | 关于 [menu](#menu) 的配置，暂时只有 locale，locale 可以关闭 menu 的自带的全球化 | [`menuConfig`](#menu) | `{ locale: true }` |\n| iconfontUrl | 使用 [IconFont](https://ant.design/components/icon-cn/#components-icon-demo-iconfont) 的图标配置 | `URL` | - |\n| locale | 当前 layout 的语言设置 | `zh-CN` | `zh-TW` | `en-US` | navigator.language |\n| settings | layout 的设置 | [`Settings`](#Settings) | - |\n| siderWidth | 侧边菜单宽度 | `number` | 208 |\n| suppressSiderWhenMenuEmpty | 在菜单为空时隐藏 Sider | `boolean` | - |\n| defaultCollapsed | 默认的菜单的收起和展开，会受到 `breakpoint` 的影响，`breakpoint=false` 生效 | `boolean` | - |\n| collapsed | 控制菜单的收起和展开 | `boolean` | - |\n| onCollapse | 菜单的折叠收起事件 | `(collapsed: boolean) => void` | - |\n| onPageChange | 页面切换时触发 | `(location: Location) => void` | - |\n| headerRender | 自定义头的 render 方法 | `(props: ProLayoutProps) => ReactNode` | - |\n| headerTitleRender | 自定义头标题的方法，mix 模式和 top 模式下生效 | `(logo,title,props)=>ReactNode` | - |\n| headerContentRender | 自定义头内容的方法 | `(props: ProLayoutProps) => ReactNode` | - |\n| avatarProps | layout 的头像设置，不同的 layout 放在不同的位置 | [`AvatarProps`](https://ant.design/components/avatar-cn/) | - |\n| actionsRender | 自定义操作列表 | `(layoutProps)=>ReactNode[]` | - |\n| collapsedButtonRender | 自定义 collapsed button 的方法 | `(collapsed: boolean) => ReactNode` | - |\n| footerRender | 自定义页脚的 render 方法 | `(props: ProLayoutProps) => JSX.Element \\| false` | - |\n| pageTitleRender | 自定义页面标题的显示方法 | `(props: ProLayoutProps) => string` | - |\n| menuRender | 自定义菜单的 render 方法 | `(props: HeaderViewProps) => ReactNode` | - |\n| postMenuData | 在显示前对菜单数据进行查看，修改不会触发重新渲染 | `(menuData: MenuDataItem[]) => MenuDataItem[]` | - |\n| menuItemRender | 自定义菜单项的 render 方法 | [`(itemProps: MenuDataItem, defaultDom: React.ReactNode, props: BaseMenuProps) => ReactNode`](/components/layout/#menudataitem) | - |\n| subMenuItemRender | 自定义拥有子菜单菜单项的 render 方法 | [`(itemProps: MenuDataItem) => ReactNode`](/components/layout/#menudataitem) | - |\n| menuDataRender | menuData 的 render 方法，用来自定义 menuData | `(menuData: MenuDataItem[]) => MenuDataItem[]` | - |\n| breadcrumbRender | 自定义面包屑的数据 | `(route)=>route` | - |\n| breadcrumbProps | 传递到 antd Breadcrumb 组件的 props, 参考 [面包屑](https://ant.design/components/breadcrumb-cn/) | `breadcrumbProps` | undefined |\n| route | 用于生成菜单和面包屑。Umi 的 Layout 会自动带有 | [route](#route) | - |\n| disableMobile | 禁止自动切换到移动页面 | `boolean` | false |\n| ErrorBoundary | 自带了错误处理功能，防止白屏，`ErrorBoundary=false` 关闭默认错误边界 | `ReactNode` | 内置 ErrorBoundary |\n| links | 显示在菜单右下角的快捷操作 | `ReactNode[]` | - |\n| menuProps | 传递到 antd menu 组件的 props, 参考 [导航菜单](https://ant.design/components/menu-cn/) | `MenuProps` | undefined |\n| waterMarkProps | 配置水印，水印是 PageContainer 的功能，layout 只是透传给 PageContainer | [WaterMarkProps](/components/water-mark) | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的title属性如何使用？",
    "md": "参数: title\n说明: layout 的左上角的 title\n类型: `ReactNode`\n默认值: `'Ant Design Pro'`\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的logo属性如何使用？",
    "md": "参数: logo\n说明: layout 的左上角 logo 的 url\n类型: `ReactNode` | `()=> ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的pure属性如何使用？",
    "md": "参数: pure\n说明: 是否删除掉所有的自带界面\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的loading属性如何使用？",
    "md": "参数: loading\n说明: layout 的加载态\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的location属性如何使用？",
    "md": "参数: location\n说明: 当前应用会话的位置信息。如果你的应用创建了自定义的 history，则需要显示指定 location 属性，详见 [issue](https://github.com/ant-design/pro-components/issues/327)\n类型: [history.location](https://reactrouter.com/web/api/history)\n默认值: isBrowser ? window.location : undefined\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的appList属性如何使用？",
    "md": "参数: appList\n说明: 跨站点导航列表\n类型: `{ icon, title, desc, url, target, children }[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的appListRender属性如何使用？",
    "md": "参数: appListRender\n说明: 自定义跨站点导航列表的 render 方法\n类型: `(props: AppListProps, defaultDom: React.ReactNode) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menuHeaderRender属性如何使用？",
    "md": "参数: menuHeaderRender\n说明: 渲染 logo 和 title, 优先级比 `headerTitleRender` 更高\n类型: `ReactNode` | `(logo,title)=>ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menuFooterRender属性如何使用？",
    "md": "参数: menuFooterRender\n说明: 在 layout 底部渲染一个块\n类型: `(menuProps)=>ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的onMenuHeaderClick属性如何使用？",
    "md": "参数: onMenuHeaderClick\n说明: menu 菜单的头部点击事件\n类型: `(e: React.MouseEvent<HTMLDivElement>) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menuExtraRender属性如何使用？",
    "md": "参数: menuExtraRender\n说明: 在菜单标题的下面渲染一个区域\n类型: `(menuProps)=>ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的onTopMixMenuHeaderClick属性如何使用？",
    "md": "参数: onTopMixMenuHeaderClick\n说明: mix 模式下顶部栏的头部点击事件\n类型: `(e: React.MouseEvent<HTMLDivElement>) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的contentStyle属性如何使用？",
    "md": "参数: contentStyle\n说明: layout 的内容区 style\n类型: CSSProperties\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的layout属性如何使用？",
    "md": "参数: layout\n说明: layout 的菜单模式，side：右侧导航，top：顶部导航\n类型: `side` | `top`|`mix`\n默认值: `side`\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的contentWidth属性如何使用？",
    "md": "参数: contentWidth\n说明: layout 的内容模式，Fluid：自适应，Fixed：定宽 1200px\n类型: `Fluid` | `Fixed`\n默认值: `Fluid`\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的actionRef属性如何使用？",
    "md": "参数: actionRef\n说明: layout 的常见操作，比如刷新菜单\n类型: `MutableRefObject<ActionType>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的fixedHeader属性如何使用？",
    "md": "参数: fixedHeader\n说明: 是否固定 header 到顶部\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的fixSiderbar属性如何使用？",
    "md": "参数: fixSiderbar\n说明: 是否固定导航\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的breakpoint属性如何使用？",
    "md": "参数: breakpoint\n说明: 触发响应式布局的[断点](https://ant.design/components/grid-cn/#Col)\n类型: `Enum { 'xs', 'sm', 'md', 'lg', 'xl', 'xxl' }`\n默认值: `lg`\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menu属性如何使用？",
    "md": "参数: menu\n说明: 关于 [menu](#menu) 的配置，暂时只有 locale，locale 可以关闭 menu 的自带的全球化\n类型: [`menuConfig`](#menu)\n默认值: `{ locale: true }`\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的iconfontUrl属性如何使用？",
    "md": "参数: iconfontUrl\n说明: 使用 [IconFont](https://ant.design/components/icon-cn/#components-icon-demo-iconfont) 的图标配置\n类型: `URL`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的locale属性如何使用？",
    "md": "参数: locale\n说明: 当前 layout 的语言设置\n类型: `zh-CN` | `zh-TW` | `en-US`\n默认值: navigator.language\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的settings属性如何使用？",
    "md": "参数: settings\n说明: layout 的设置\n类型: [`Settings`](#Settings)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的siderWidth属性如何使用？",
    "md": "参数: siderWidth\n说明: 侧边菜单宽度\n类型: `number`\n默认值: 208\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的suppressSiderWhenMenuEmpty属性如何使用？",
    "md": "参数: suppressSiderWhenMenuEmpty\n说明: 在菜单为空时隐藏 Sider\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的defaultCollapsed属性如何使用？",
    "md": "参数: defaultCollapsed\n说明: 默认的菜单的收起和展开，会受到 `breakpoint` 的影响，`breakpoint=false` 生效\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的collapsed属性如何使用？",
    "md": "参数: collapsed\n说明: 控制菜单的收起和展开\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的onCollapse属性如何使用？",
    "md": "参数: onCollapse\n说明: 菜单的折叠收起事件\n类型: `(collapsed: boolean) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的onPageChange属性如何使用？",
    "md": "参数: onPageChange\n说明: 页面切换时触发\n类型: `(location: Location) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的headerRender属性如何使用？",
    "md": "参数: headerRender\n说明: 自定义头的 render 方法\n类型: `(props: ProLayoutProps) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的headerTitleRender属性如何使用？",
    "md": "参数: headerTitleRender\n说明: 自定义头标题的方法，mix 模式和 top 模式下生效\n类型: `(logo,title,props)=>ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的headerContentRender属性如何使用？",
    "md": "参数: headerContentRender\n说明: 自定义头内容的方法\n类型: `(props: ProLayoutProps) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的avatarProps属性如何使用？",
    "md": "参数: avatarProps\n说明: layout 的头像设置，不同的 layout 放在不同的位置\n类型: [`AvatarProps`](https://ant.design/components/avatar-cn/)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的actionsRender属性如何使用？",
    "md": "参数: actionsRender\n说明: 自定义操作列表\n类型: `(layoutProps)=>ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的collapsedButtonRender属性如何使用？",
    "md": "参数: collapsedButtonRender\n说明: 自定义 collapsed button 的方法\n类型: `(collapsed: boolean) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的footerRender属性如何使用？",
    "md": "参数: footerRender\n说明: 自定义页脚的 render 方法\n类型: `(props: ProLayoutProps) => JSX.Element \\| false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的pageTitleRender属性如何使用？",
    "md": "参数: pageTitleRender\n说明: 自定义页面标题的显示方法\n类型: `(props: ProLayoutProps) => string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menuRender属性如何使用？",
    "md": "参数: menuRender\n说明: 自定义菜单的 render 方法\n类型: `(props: HeaderViewProps) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的postMenuData属性如何使用？",
    "md": "参数: postMenuData\n说明: 在显示前对菜单数据进行查看，修改不会触发重新渲染\n类型: `(menuData: MenuDataItem[]) => MenuDataItem[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menuItemRender属性如何使用？",
    "md": "参数: menuItemRender\n说明: 自定义菜单项的 render 方法\n类型: [`(itemProps: MenuDataItem, defaultDom: React.ReactNode, props: BaseMenuProps) => ReactNode`](/components/layout/#menudataitem)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的subMenuItemRender属性如何使用？",
    "md": "参数: subMenuItemRender\n说明: 自定义拥有子菜单菜单项的 render 方法\n类型: [`(itemProps: MenuDataItem) => ReactNode`](/components/layout/#menudataitem)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menuDataRender属性如何使用？",
    "md": "参数: menuDataRender\n说明: menuData 的 render 方法，用来自定义 menuData\n类型: `(menuData: MenuDataItem[]) => MenuDataItem[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的breadcrumbRender属性如何使用？",
    "md": "参数: breadcrumbRender\n说明: 自定义面包屑的数据\n类型: `(route)=>route`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的breadcrumbProps属性如何使用？",
    "md": "参数: breadcrumbProps\n说明: 传递到 antd Breadcrumb 组件的 props, 参考 [面包屑](https://ant.design/components/breadcrumb-cn/)\n类型: `breadcrumbProps`\n默认值: undefined\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的route属性如何使用？",
    "md": "参数: route\n说明: 用于生成菜单和面包屑。Umi 的 Layout 会自动带有\n类型: [route](#route)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的disableMobile属性如何使用？",
    "md": "参数: disableMobile\n说明: 禁止自动切换到移动页面\n类型: `boolean`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的ErrorBoundary属性如何使用？",
    "md": "参数: ErrorBoundary\n说明: 自带了错误处理功能，防止白屏，`ErrorBoundary=false` 关闭默认错误边界\n类型: `ReactNode`\n默认值: 内置 ErrorBoundary\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的links属性如何使用？",
    "md": "参数: links\n说明: 显示在菜单右下角的快捷操作\n类型: `ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的menuProps属性如何使用？",
    "md": "参数: menuProps\n说明: 传递到 antd menu 组件的 props, 参考 [导航菜单](https://ant.design/components/menu-cn/)\n类型: `MenuProps`\n默认值: undefined\n"
  },
  {
    "title": "pro-components 中 ProLayout - ProLayout的waterMarkProps属性如何使用？",
    "md": "参数: waterMarkProps\n说明: 配置水印，水印是 PageContainer 的功能，layout 只是透传给 PageContainer\n类型: [WaterMarkProps](/components/water-mark)\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - menu 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| locale | menu 是否使用国际化，还需要 formatMessage 的配合。 | `boolean` | `true` |\n| defaultOpenAll | 默认打开所有的菜单项，要注意只有 layout 挂载之前生效，异步加载菜单是不支持的 | `boolean` | `false` |\n| ignoreFlatMenu | 是否忽略手动折叠过的菜单状态，结合 defaultOpenAll 可实现折叠按钮切换后，同样可以展开所有子菜单 | `boolean` | `false` |\n| type | 菜单的类型 | `sub` | `group` | `group` |\n| autoClose | 选中菜单是否自动关闭菜单 | `boolean` | `true` |\n| loading | 菜单是否正在加载中 | `boolean` | `false` |\n| onLoadingChange | 菜单的加载状态变更 | `(loading)=>void` | - |\n| request | 远程加载菜单的方法，会自动修改 loading 状态 | `(params,defaultMenuDat) => Promise<MenuDataItem[]>` | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的locale属性如何使用？",
    "md": "参数: locale\n说明: menu 是否使用国际化，还需要 formatMessage 的配合。\n类型: `boolean`\n默认值: `true`\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的defaultOpenAll属性如何使用？",
    "md": "参数: defaultOpenAll\n说明: 默认打开所有的菜单项，要注意只有 layout 挂载之前生效，异步加载菜单是不支持的\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的ignoreFlatMenu属性如何使用？",
    "md": "参数: ignoreFlatMenu\n说明: 是否忽略手动折叠过的菜单状态，结合 defaultOpenAll 可实现折叠按钮切换后，同样可以展开所有子菜单\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的type属性如何使用？",
    "md": "参数: type\n说明: 菜单的类型\n类型: `sub` | `group`\n默认值: `group`\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的autoClose属性如何使用？",
    "md": "参数: autoClose\n说明: 选中菜单是否自动关闭菜单\n类型: `boolean`\n默认值: `true`\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的loading属性如何使用？",
    "md": "参数: loading\n说明: 菜单是否正在加载中\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的onLoadingChange属性如何使用？",
    "md": "参数: onLoadingChange\n说明: 菜单的加载状态变更\n类型: `(loading)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - menu的request属性如何使用？",
    "md": "参数: request\n说明: 远程加载菜单的方法，会自动修改 loading 状态\n类型: `(params,defaultMenuDat) => Promise<MenuDataItem[]>`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - SettingDrawer 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| collapse | 控制 SettingDrawer 的收起和展开 | `boolean` | - |\n| onCollapseChange | SettingDrawer 的折叠收起事件 | `(collapsed: boolean) => void` | - |\n| settings | layout 的设置 | [`Settings`](#Settings) | [`Settings`](#Settings) | - |\n| onSettingChange | [`Settings`](#Settings) 发生更改事件 | `(settings: [`Settings`](#Settings) ) => void` | - |\n| hideHintAlert | 删除下方的提示信息 | `boolean` | - |\n| hideCopyButton | 不展示 copy 功能 | `boolean` | - |\n| disableUrlParams | 禁止同步设置到查询参数 | `boolean` | `false` |\n| enableDarkTheme | 打开黑色主题切换功能 ｜ `boolean` | `false` | - |\n| colorList | 自带的颜色切换系统 (ColorList 的 title 会作为 Tooltip 显示) ｜ `{key,color,title?}[]` | `ColorList` | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的collapse属性如何使用？",
    "md": "参数: collapse\n说明: 控制 SettingDrawer 的收起和展开\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的onCollapseChange属性如何使用？",
    "md": "参数: onCollapseChange\n说明: SettingDrawer 的折叠收起事件\n类型: `(collapsed: boolean) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的settings属性如何使用？",
    "md": "参数: settings\n说明: layout 的设置\n类型: [`Settings`](#Settings) | [`Settings`](#Settings)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的onSettingChange属性如何使用？",
    "md": "参数: onSettingChange\n说明: [`Settings`](#Settings) 发生更改事件\n类型: `(settings: [`Settings`](#Settings) ) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的hideHintAlert属性如何使用？",
    "md": "参数: hideHintAlert\n说明: 删除下方的提示信息\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的hideCopyButton属性如何使用？",
    "md": "参数: hideCopyButton\n说明: 不展示 copy 功能\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的disableUrlParams属性如何使用？",
    "md": "参数: disableUrlParams\n说明: 禁止同步设置到查询参数\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的enableDarkTheme属性如何使用？",
    "md": "参数: enableDarkTheme\n说明: 打开黑色主题切换功能 ｜ `boolean`\n类型: `false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - SettingDrawer的colorList属性如何使用？",
    "md": "参数: colorList\n说明: 自带的颜色切换系统 (ColorList 的 title 会作为 Tooltip 显示) ｜ `{key,color,title?}[]`\n类型: `ColorList`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - PageLoading 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| [(...)](https://ant.design/components/spin-cn/#API) | 支持所有的 antd `Spin` 组件参数 | - | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageLoading的[(...)](https://ant.design/components/spin-cn/#API)属性如何使用？",
    "md": "参数: [(...)](https://ant.design/components/spin-cn/#API)\n说明: 支持所有的 antd `Spin` 组件参数\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - getMenuData 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| routes | 路由的配置信息 | [route\\[\\]](#route) | - |\n| menu | menu 的配置项，默认 `{locale: true}` | `{ locale: boolean }` | - |\n| menuDataRender | menuData 的 render 方法，用来自定义 menuData | `(menuData: MenuDataItem[]) => MenuDataItem[]` | - |\n| formatMessage | react-intl 的 formatMessage 方法 | `(data: { id: any; defaultMessage?: string }) => string;` | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - getMenuData的routes属性如何使用？",
    "md": "参数: routes\n说明: 路由的配置信息\n类型: [route\\[\\]](#route)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - getMenuData的menu属性如何使用？",
    "md": "参数: menu\n说明: menu 的配置项，默认 `{locale: true}`\n类型: `{ locale: boolean }`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - getMenuData的menuDataRender属性如何使用？",
    "md": "参数: menuDataRender\n说明: menuData 的 render 方法，用来自定义 menuData\n类型: `(menuData: MenuDataItem[]) => MenuDataItem[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - getMenuData的formatMessage属性如何使用？",
    "md": "参数: formatMessage\n说明: react-intl 的 formatMessage 方法\n类型: `(data: { id: any; defaultMessage?: string }) => string;`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - getPageTitle 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| pathname | 当前的 pathname | location.pathname | - |\n| breadcrumb | MenuDataItem 的合集 | `{ [path: string]: MenuDataItem }` | - |\n| menu | menu 的配置项，默认 `{locale: true}` | `{ locale: boolean }` | - |\n| title | title 的类型 | string | 'Ant Design Pro' |\n| formatMessage | react-intl 的 formatMessage 方法 | `(data: { id: any; defaultMessage?: string }) => string;` | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - getPageTitle的pathname属性如何使用？",
    "md": "参数: pathname\n说明: 当前的 pathname\n类型: location.pathname\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - getPageTitle的breadcrumb属性如何使用？",
    "md": "参数: breadcrumb\n说明: MenuDataItem 的合集\n类型: `{ [path: string]: MenuDataItem }`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - getPageTitle的menu属性如何使用？",
    "md": "参数: menu\n说明: menu 的配置项，默认 `{locale: true}`\n类型: `{ locale: boolean }`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - getPageTitle的title属性如何使用？",
    "md": "参数: title\n说明: title 的类型\n类型: string\n默认值: 'Ant Design Pro'\n"
  },
  {
    "title": "pro-components 中 ProLayout - getPageTitle的formatMessage属性如何使用？",
    "md": "参数: formatMessage\n说明: react-intl 的 formatMessage 方法\n类型: `(data: { id: any; defaultMessage?: string }) => string;`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - GridContent 有哪些配置？",
    "md": "| 参数         | 说明     | 类型               | 默认值 |\n| ------------ | -------- | ------------------ | ------ |\n| contentWidth | 内容模式 | `Fluid` | `Fixed` | -      |\n"
  },
  {
    "title": "pro-components 中 ProLayout - GridContent的contentWidth属性如何使用？",
    "md": "参数: contentWidth\n说明: 内容模式\n类型: `Fluid` | `Fixed`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - Layout 的 token 有哪些配置？",
    "md": "| token | 说明 | 默认值 |\n| --- | --- | --- |\n| bgLayout | layout 的背景颜色 | `linear-gradient(${antdToken.colorBgContainer}, ${antdToken.colorBgLayout} 28%)` |\n| colorTextAppListIcon | 跨站点应用的图标颜色 | `#666` |\n| colorTextAppListIconHover | 跨站点应用的图标 hover 颜色 | `rgba(0, 0, 0, 0.65)` |\n| colorBgAppListIconHover | 跨站点应用的图标 hover 背景颜色 | `rgba(0, 0, 0, 0.04)` |\n"
  },
  {
    "title": "pro-components 中 ProLayout - Layout 的 token的bgLayout属性如何使用？",
    "md": "token: bgLayout\n说明: layout 的背景颜色\n默认值: `linear-gradient(${antdToken.colorBgContainer}, ${antdToken.colorBgLayout} 28%)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Layout 的 token的colorTextAppListIcon属性如何使用？",
    "md": "token: colorTextAppListIcon\n说明: 跨站点应用的图标颜色\n默认值: `#666`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Layout 的 token的colorTextAppListIconHover属性如何使用？",
    "md": "token: colorTextAppListIconHover\n说明: 跨站点应用的图标 hover 颜色\n默认值: `rgba(0, 0, 0, 0.65)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Layout 的 token的colorBgAppListIconHover属性如何使用？",
    "md": "token: colorBgAppListIconHover\n说明: 跨站点应用的图标 hover 背景颜色\n默认值: `rgba(0, 0, 0, 0.04)`\n"
  },
  {
    "title": "pro-components 的 ProLayout - Sider Token 有哪些配置？",
    "md": "| token | 说明 | 默认值 |\n| --- | --- | --- |\n| colorMenuBackground | menu 的背景颜色 | `transparent` |\n| colorTextMenuTitle | sider 的标题字体颜色 | `colorTextHeading` |\n| colorMenuItemDivider | menuItem 分割线的颜色 | `colorSplit` |\n| colorTextMenu | menuItem 的字体颜色 | `colorText` |\n| colorTextMenuSecondary | menu 的二级字体颜色，比如 footer 和 action 的 icon | `colorText` |\n| colorTextMenuSelected | menuItem 的选中字体颜色 | `rgb(0,0,0)` |\n| colorTextMenuActive | menuItem hover 的选中字体颜色 | `rgba(0, 0, 0, 0.85)` |\n| colorTextMenuItemHover | menuItem 的 hover 字体颜色 | `rgba(255,255,255,0.75)` |\n| colorBgMenuItemHover | menuItem 的 hover 背景颜色 | `rgba(90, 75, 75, 0.03)` |\n| colorBgMenuItemSelected | menuItem 的选中背景颜色 | `rgba(0, 0, 0, 0.04)` |\n| colorBgMenuItemCollapsedElevated | 收起 menuItem 的弹出菜单背景颜色 | `transparent` |\n| colorBgCollapsedButton | 展开收起按钮背景颜色 | `#fff` |\n| colorTextCollapsedButton | 展开收起按钮字体颜色 | `colorTextMenuSecondary` |\n| colorTextCollapsedButtonHover | 展开收起按钮 hover 时字体颜色 | `colorTextMenu` |\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorMenuBackground属性如何使用？",
    "md": "token: colorMenuBackground\n说明: menu 的背景颜色\n默认值: `transparent`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextMenuTitle属性如何使用？",
    "md": "token: colorTextMenuTitle\n说明: sider 的标题字体颜色\n默认值: `colorTextHeading`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorMenuItemDivider属性如何使用？",
    "md": "token: colorMenuItemDivider\n说明: menuItem 分割线的颜色\n默认值: `colorSplit`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextMenu属性如何使用？",
    "md": "token: colorTextMenu\n说明: menuItem 的字体颜色\n默认值: `colorText`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextMenuSecondary属性如何使用？",
    "md": "token: colorTextMenuSecondary\n说明: menu 的二级字体颜色，比如 footer 和 action 的 icon\n默认值: `colorText`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextMenuSelected属性如何使用？",
    "md": "token: colorTextMenuSelected\n说明: menuItem 的选中字体颜色\n默认值: `rgb(0,0,0)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextMenuActive属性如何使用？",
    "md": "token: colorTextMenuActive\n说明: menuItem hover 的选中字体颜色\n默认值: `rgba(0, 0, 0, 0.85)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextMenuItemHover属性如何使用？",
    "md": "token: colorTextMenuItemHover\n说明: menuItem 的 hover 字体颜色\n默认值: `rgba(255,255,255,0.75)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorBgMenuItemHover属性如何使用？",
    "md": "token: colorBgMenuItemHover\n说明: menuItem 的 hover 背景颜色\n默认值: `rgba(90, 75, 75, 0.03)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorBgMenuItemSelected属性如何使用？",
    "md": "token: colorBgMenuItemSelected\n说明: menuItem 的选中背景颜色\n默认值: `rgba(0, 0, 0, 0.04)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorBgMenuItemCollapsedElevated属性如何使用？",
    "md": "token: colorBgMenuItemCollapsedElevated\n说明: 收起 menuItem 的弹出菜单背景颜色\n默认值: `transparent`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorBgCollapsedButton属性如何使用？",
    "md": "token: colorBgCollapsedButton\n说明: 展开收起按钮背景颜色\n默认值: `#fff`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextCollapsedButton属性如何使用？",
    "md": "token: colorTextCollapsedButton\n说明: 展开收起按钮字体颜色\n默认值: `colorTextMenuSecondary`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Sider Token的colorTextCollapsedButtonHover属性如何使用？",
    "md": "token: colorTextCollapsedButtonHover\n说明: 展开收起按钮 hover 时字体颜色\n默认值: `colorTextMenu`\n"
  },
  {
    "title": "pro-components 的 ProLayout - Header Token 有哪些配置？",
    "md": "| token | 说明 | 默认值 |\n| --- | --- | --- |\n| colorBgHeader | header 的背景颜色 | `rgba(240, 242, 245, 0.4)` |\n| colorHeaderTitle | sider 的标题字体颜色 | `colorTextHeading` |\n| colorTextMenu | menuItem 的字体颜色 | `colorText` |\n| colorTextMenuSecondary | menu 的二级字体颜色，比如 footer 和 action 的 icon | `colorText` |\n| colorTextMenuSelected | menuItem 的选中字体颜色 | `rgb(0,0,0)` |\n| colorTextMenuActive | menuItem hover 的选中字体颜色 | `rgba(0, 0, 0, 0.85)` |\n| colorBgMenuItemHover | menuItem 的 hover 背景颜色 | `rgba(90, 75, 75, 0.03)` |\n| colorBgMenuItemSelected | menuItem 的选中背景颜色 | `rgba(0, 0, 0, 0.04)` |\n| colorTextRightActionsItem | 右上角字体颜色 | `colorTextSecondary` |\n| colorBgRightActionsItemHover | 右上角选中的 hover 颜色 | `rgba(0, 0, 0, 0.03)` |\n| heightLayoutHeader | header 高度 | 56 |\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorBgHeader属性如何使用？",
    "md": "token: colorBgHeader\n说明: header 的背景颜色\n默认值: `rgba(240, 242, 245, 0.4)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorHeaderTitle属性如何使用？",
    "md": "token: colorHeaderTitle\n说明: sider 的标题字体颜色\n默认值: `colorTextHeading`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorTextMenu属性如何使用？",
    "md": "token: colorTextMenu\n说明: menuItem 的字体颜色\n默认值: `colorText`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorTextMenuSecondary属性如何使用？",
    "md": "token: colorTextMenuSecondary\n说明: menu 的二级字体颜色，比如 footer 和 action 的 icon\n默认值: `colorText`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorTextMenuSelected属性如何使用？",
    "md": "token: colorTextMenuSelected\n说明: menuItem 的选中字体颜色\n默认值: `rgb(0,0,0)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorTextMenuActive属性如何使用？",
    "md": "token: colorTextMenuActive\n说明: menuItem hover 的选中字体颜色\n默认值: `rgba(0, 0, 0, 0.85)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorBgMenuItemHover属性如何使用？",
    "md": "token: colorBgMenuItemHover\n说明: menuItem 的 hover 背景颜色\n默认值: `rgba(90, 75, 75, 0.03)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorBgMenuItemSelected属性如何使用？",
    "md": "token: colorBgMenuItemSelected\n说明: menuItem 的选中背景颜色\n默认值: `rgba(0, 0, 0, 0.04)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorTextRightActionsItem属性如何使用？",
    "md": "token: colorTextRightActionsItem\n说明: 右上角字体颜色\n默认值: `colorTextSecondary`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的colorBgRightActionsItemHover属性如何使用？",
    "md": "token: colorBgRightActionsItemHover\n说明: 右上角选中的 hover 颜色\n默认值: `rgba(0, 0, 0, 0.03)`\n"
  },
  {
    "title": "pro-components 中 ProLayout - Header Token的heightLayoutHeader属性如何使用？",
    "md": "token: heightLayoutHeader\n说明: header 高度\n默认值: 56\n"
  },
  {
    "title": "pro-components 的 ProLayout - pageContainer Token 有哪些配置？",
    "md": "| token | 说明 | 默认值 |\n| --- | --- | --- |\n| paddingBlockPageContainerContent | pageContainer 自带的 padding block | `24` |\n| paddingInlinePageContainerContent | pageContainer 自带的 padding inline | `40` |\n| colorBgPageContainer | pageContainer 的背景颜色 | `transparent` |\n| colorBgPageContainerFixed | pageContainer 被固定时的背景颜色 | `#FFF` |\n"
  },
  {
    "title": "pro-components 中 ProLayout - pageContainer Token的paddingBlockPageContainerContent属性如何使用？",
    "md": "token: paddingBlockPageContainerContent\n说明: pageContainer 自带的 padding block\n默认值: `24`\n"
  },
  {
    "title": "pro-components 中 ProLayout - pageContainer Token的paddingInlinePageContainerContent属性如何使用？",
    "md": "token: paddingInlinePageContainerContent\n说明: pageContainer 自带的 padding inline\n默认值: `40`\n"
  },
  {
    "title": "pro-components 中 ProLayout - pageContainer Token的colorBgPageContainer属性如何使用？",
    "md": "token: colorBgPageContainer\n说明: pageContainer 的背景颜色\n默认值: `transparent`\n"
  },
  {
    "title": "pro-components 中 ProLayout - pageContainer Token的colorBgPageContainerFixed属性如何使用？",
    "md": "token: colorBgPageContainerFixed\n说明: pageContainer 被固定时的背景颜色\n默认值: `#FFF`\n"
  },
  {
    "title": "pro-components 的 Layout 有哪些配置？",
    "md": "#### ProLayout - WaterMark\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| width | 水印的宽度 | number | 120 | 2.2.0 |\n| height | 水印的高度 | number | 64 | 2.2.0 |\n| rotate | 水印绘制时，旋转的角度，单位 ° | number | -22 | 2.2.0 |\n| image | 图片源，建议导出 2 倍或 3 倍图，优先使用图片渲染水印 | `string` | - | 2.2.0 |\n| zIndex | 追加的水印元素的 z-index | number | 9 | 2.2.0 |\n| content | 水印文字内容 | `string` | `string[]` | - | 2.2.0 |\n| fontColor | 水印文字颜色 | `string` | `rgba(0,0,0,.15)` | 2.2.0 |\n| fontSize | 文字大小 | `string` | `number` | 16 | 2.2.0 |\n| markStyle | 水印层的样式 | React.CSSProperties | - | 2.3.0 |\n| markClassName | 水印层的类名 | string | - | 2.3.0 |\n| gapX | 水印之间的水平间距 | number | 212 | 2.4.0 |\n| gapY | 水印之间的垂直间距 | number | 222 | 2.4.0 |\n| offsetLeft | 水印在 canvas 画布上绘制的水平偏移量，正常情况下，水印绘制在中间位置，即 `offsetLeft = gapX / 2` | number | `offsetLeft = gapX / 2` | 2.4.0 |\n| offsetTop | 水印在 canvas 画布上绘制的垂直偏移量，正常情况下，水印绘制在中间位置，即 `offsetTop = gapY / 2` | number | `offsetTop = gapY / 2` | 2.4.0 |\n"
  },
  {
    "title": "pro-components 的 ProLayout - WaterMark 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| width | 水印的宽度 | number | 120 | 2.2.0 |\n| height | 水印的高度 | number | 64 | 2.2.0 |\n| rotate | 水印绘制时，旋转的角度，单位 ° | number | -22 | 2.2.0 |\n| image | 图片源，建议导出 2 倍或 3 倍图，优先使用图片渲染水印 | `string` | - | 2.2.0 |\n| zIndex | 追加的水印元素的 z-index | number | 9 | 2.2.0 |\n| content | 水印文字内容 | `string` | `string[]` | - | 2.2.0 |\n| fontColor | 水印文字颜色 | `string` | `rgba(0,0,0,.15)` | 2.2.0 |\n| fontSize | 文字大小 | `string` | `number` | 16 | 2.2.0 |\n| markStyle | 水印层的样式 | React.CSSProperties | - | 2.3.0 |\n| markClassName | 水印层的类名 | string | - | 2.3.0 |\n| gapX | 水印之间的水平间距 | number | 212 | 2.4.0 |\n| gapY | 水印之间的垂直间距 | number | 222 | 2.4.0 |\n| offsetLeft | 水印在 canvas 画布上绘制的水平偏移量，正常情况下，水印绘制在中间位置，即 `offsetLeft = gapX / 2` | number | `offsetLeft = gapX / 2` | 2.4.0 |\n| offsetTop | 水印在 canvas 画布上绘制的垂直偏移量，正常情况下，水印绘制在中间位置，即 `offsetTop = gapY / 2` | number | `offsetTop = gapY / 2` | 2.4.0 |\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的width属性如何使用？",
    "md": "参数: width\n说明: 水印的宽度\n类型: number\n默认值: 120\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的height属性如何使用？",
    "md": "参数: height\n说明: 水印的高度\n类型: number\n默认值: 64\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的rotate属性如何使用？",
    "md": "参数: rotate\n说明: 水印绘制时，旋转的角度，单位 °\n类型: number\n默认值: -22\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的image属性如何使用？",
    "md": "参数: image\n说明: 图片源，建议导出 2 倍或 3 倍图，优先使用图片渲染水印\n类型: `string`\n默认值: -\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的zIndex属性如何使用？",
    "md": "参数: zIndex\n说明: 追加的水印元素的 z-index\n类型: number\n默认值: 9\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的content属性如何使用？",
    "md": "参数: content\n说明: 水印文字内容\n类型: `string` | `string[]`\n默认值: -\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的fontColor属性如何使用？",
    "md": "参数: fontColor\n说明: 水印文字颜色\n类型: `string`\n默认值: `rgba(0,0,0,.15)`\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的fontSize属性如何使用？",
    "md": "参数: fontSize\n说明: 文字大小\n类型: `string` | `number`\n默认值: 16\n版本: 2.2.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的markStyle属性如何使用？",
    "md": "参数: markStyle\n说明: 水印层的样式\n类型: React.CSSProperties\n默认值: -\n版本: 2.3.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的markClassName属性如何使用？",
    "md": "参数: markClassName\n说明: 水印层的类名\n类型: string\n默认值: -\n版本: 2.3.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的gapX属性如何使用？",
    "md": "参数: gapX\n说明: 水印之间的水平间距\n类型: number\n默认值: 212\n版本: 2.4.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的gapY属性如何使用？",
    "md": "参数: gapY\n说明: 水印之间的垂直间距\n类型: number\n默认值: 222\n版本: 2.4.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的offsetLeft属性如何使用？",
    "md": "参数: offsetLeft\n说明: 水印在 canvas 画布上绘制的水平偏移量，正常情况下，水印绘制在中间位置，即 `offsetLeft = gapX / 2`\n类型: number\n默认值: `offsetLeft = gapX / 2`\n版本: 2.4.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - WaterMark的offsetTop属性如何使用？",
    "md": "参数: offsetTop\n说明: 水印在 canvas 画布上绘制的垂直偏移量，正常情况下，水印绘制在中间位置，即 `offsetTop = gapY / 2`\n类型: number\n默认值: `offsetTop = gapY / 2`\n版本: 2.4.0\n"
  },
  {
    "title": "pro-components 的 Layout 有哪些配置？",
    "md": "#### ProLayout - PageHeader\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| avatar | 标题栏旁的头像 | [AvatarProps](/components/avatar/) | - | - |\n| backIcon | 自定义 back icon ，如果为 false 不渲染 back icon | ReactNode | boolean | \\<ArrowLeft /> | - |\n| breadcrumb | 面包屑的配置 | [Breadcrumb](/components/breadcrumb/) | - | - |\n| breadcrumbRender | 自定义面包屑区域的内容 | `(props, originBreadcrumb) => ReactNode` | - | 4.11.0 |\n| extra | 操作区，位于 title 行的行尾 | ReactNode | - | - |\n| footer | PageHeader 的页脚，一般用于渲染 TabBar | ReactNode | - | - |\n| ghost | pageHeader 的类型，将会改变背景颜色 | boolean | true | - |\n| subTitle | 自定义的二级标题文字 | ReactNode | - | - |\n| tags | title 旁的 tag 列表 | [Tag](/components/tag/)\\[] | [Tag](/components/tag/) | - | - |\n| title | 自定义标题文字 | ReactNode | - | - |\n| onBack | 返回按钮的点击事件 | () => void | - | - |\n"
  },
  {
    "title": "pro-components 的 ProLayout - PageHeader 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| avatar | 标题栏旁的头像 | [AvatarProps](/components/avatar/) | - | - |\n| backIcon | 自定义 back icon ，如果为 false 不渲染 back icon | ReactNode | boolean | \\<ArrowLeft /> | - |\n| breadcrumb | 面包屑的配置 | [Breadcrumb](/components/breadcrumb/) | - | - |\n| breadcrumbRender | 自定义面包屑区域的内容 | `(props, originBreadcrumb) => ReactNode` | - | 4.11.0 |\n| extra | 操作区，位于 title 行的行尾 | ReactNode | - | - |\n| footer | PageHeader 的页脚，一般用于渲染 TabBar | ReactNode | - | - |\n| ghost | pageHeader 的类型，将会改变背景颜色 | boolean | true | - |\n| subTitle | 自定义的二级标题文字 | ReactNode | - | - |\n| tags | title 旁的 tag 列表 | [Tag](/components/tag/)\\[] | [Tag](/components/tag/) | - | - |\n| title | 自定义标题文字 | ReactNode | - | - |\n| onBack | 返回按钮的点击事件 | () => void | - | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的avatar属性如何使用？",
    "md": "参数: avatar\n说明: 标题栏旁的头像\n类型: [AvatarProps](/components/avatar/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的backIcon属性如何使用？",
    "md": "参数: backIcon\n说明: 自定义 back icon ，如果为 false 不渲染 back icon\n类型: ReactNode | boolean\n默认值: \\<ArrowLeft />\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的breadcrumb属性如何使用？",
    "md": "参数: breadcrumb\n说明: 面包屑的配置\n类型: [Breadcrumb](/components/breadcrumb/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的breadcrumbRender属性如何使用？",
    "md": "参数: breadcrumbRender\n说明: 自定义面包屑区域的内容\n类型: `(props, originBreadcrumb) => ReactNode`\n默认值: -\n版本: 4.11.0\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的extra属性如何使用？",
    "md": "参数: extra\n说明: 操作区，位于 title 行的行尾\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的footer属性如何使用？",
    "md": "参数: footer\n说明: PageHeader 的页脚，一般用于渲染 TabBar\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的ghost属性如何使用？",
    "md": "参数: ghost\n说明: pageHeader 的类型，将会改变背景颜色\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的subTitle属性如何使用？",
    "md": "参数: subTitle\n说明: 自定义的二级标题文字\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的tags属性如何使用？",
    "md": "参数: tags\n说明: title 旁的 tag 列表\n类型: [Tag](/components/tag/)\\[] | [Tag](/components/tag/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的title属性如何使用？",
    "md": "参数: title\n说明: 自定义标题文字\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageHeader的onBack属性如何使用？",
    "md": "参数: onBack\n说明: 返回按钮的点击事件\n类型: () => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 的 Layout 有哪些配置？",
    "md": "#### ProLayout - PageContainer\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| content | 内容区 | ReactNode | - |\n| extraContent | 额外内容区，位于 content 的右侧 | ReactNode | - |\n| tabList | tab 标题列表 | `{key: string, tab: ReactNode}[]` | - |\n| tabActiveKey | 当前高亮的 tab 项 | string | - |\n| onTabChange | 切换面板的回调 | `(key) => void` | - |\n| tabBarExtraContent | tab bar 上额外的元素 | `React.ReactNode` | - |\n| header | [PageHeader](https://ant.design/components/page-header-cn/) 的所有属性 | `PageHeaderProps` | - |\n| ghost | 配置头部区域的背景颜色为透明 | boolean | false |\n| fixedHeader | 固定 pageHeader 的内容到顶部，如果页面内容较少，最好不要使用，会有严重的遮挡问题 | `boolean` | - |\n| affixProps | 固钉的配置，与 antd 完全相同 | `AffixProps` | - |\n| footer | 悬浮在底部的操作栏，传入一个数组，会自动加空格 | `ReactNode[]` | - |\n| waterMarkProps | 配置水印，Layout 会透传给 PageContainer，但是以 PageContainer 的配置优先 | [WaterMarkProps](/components/water-mark) | - |\n| tabProps | Tabs 的相关属性，只有卡片样式的页签支持新增和关闭选项。使用 `closable={false}` 禁止关闭 | [TabsProps](https://ant.design/components/tabs-cn/#Tabs) | - |\n#### ProLayout - FooterToolbar\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| extra | 额外内容区，位于 content 的右侧 | `ReactNode` | - |\n| children | 内容区域 | `ReactNode`|`ReactNode[]` | - |\n"
  },
  {
    "title": "pro-components 的 ProLayout - PageContainer 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| content | 内容区 | ReactNode | - |\n| extraContent | 额外内容区，位于 content 的右侧 | ReactNode | - |\n| tabList | tab 标题列表 | `{key: string, tab: ReactNode}[]` | - |\n| tabActiveKey | 当前高亮的 tab 项 | string | - |\n| onTabChange | 切换面板的回调 | `(key) => void` | - |\n| tabBarExtraContent | tab bar 上额外的元素 | `React.ReactNode` | - |\n| header | [PageHeader](https://ant.design/components/page-header-cn/) 的所有属性 | `PageHeaderProps` | - |\n| ghost | 配置头部区域的背景颜色为透明 | boolean | false |\n| fixedHeader | 固定 pageHeader 的内容到顶部，如果页面内容较少，最好不要使用，会有严重的遮挡问题 | `boolean` | - |\n| affixProps | 固钉的配置，与 antd 完全相同 | `AffixProps` | - |\n| footer | 悬浮在底部的操作栏，传入一个数组，会自动加空格 | `ReactNode[]` | - |\n| waterMarkProps | 配置水印，Layout 会透传给 PageContainer，但是以 PageContainer 的配置优先 | [WaterMarkProps](/components/water-mark) | - |\n| tabProps | Tabs 的相关属性，只有卡片样式的页签支持新增和关闭选项。使用 `closable={false}` 禁止关闭 | [TabsProps](https://ant.design/components/tabs-cn/#Tabs) | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的content属性如何使用？",
    "md": "参数: content\n说明: 内容区\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的extraContent属性如何使用？",
    "md": "参数: extraContent\n说明: 额外内容区，位于 content 的右侧\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的tabList属性如何使用？",
    "md": "参数: tabList\n说明: tab 标题列表\n类型: `{key: string, tab: ReactNode}[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的tabActiveKey属性如何使用？",
    "md": "参数: tabActiveKey\n说明: 当前高亮的 tab 项\n类型: string\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的onTabChange属性如何使用？",
    "md": "参数: onTabChange\n说明: 切换面板的回调\n类型: `(key) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的tabBarExtraContent属性如何使用？",
    "md": "参数: tabBarExtraContent\n说明: tab bar 上额外的元素\n类型: `React.ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的header属性如何使用？",
    "md": "参数: header\n说明: [PageHeader](https://ant.design/components/page-header-cn/) 的所有属性\n类型: `PageHeaderProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的ghost属性如何使用？",
    "md": "参数: ghost\n说明: 配置头部区域的背景颜色为透明\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的fixedHeader属性如何使用？",
    "md": "参数: fixedHeader\n说明: 固定 pageHeader 的内容到顶部，如果页面内容较少，最好不要使用，会有严重的遮挡问题\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的affixProps属性如何使用？",
    "md": "参数: affixProps\n说明: 固钉的配置，与 antd 完全相同\n类型: `AffixProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的footer属性如何使用？",
    "md": "参数: footer\n说明: 悬浮在底部的操作栏，传入一个数组，会自动加空格\n类型: `ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的waterMarkProps属性如何使用？",
    "md": "参数: waterMarkProps\n说明: 配置水印，Layout 会透传给 PageContainer，但是以 PageContainer 的配置优先\n类型: [WaterMarkProps](/components/water-mark)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - PageContainer的tabProps属性如何使用？",
    "md": "参数: tabProps\n说明: Tabs 的相关属性，只有卡片样式的页签支持新增和关闭选项。使用 `closable={false}` 禁止关闭\n类型: [TabsProps](https://ant.design/components/tabs-cn/#Tabs)\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProLayout - FooterToolbar 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| extra | 额外内容区，位于 content 的右侧 | `ReactNode` | - |\n| children | 内容区域 | `ReactNode`|`ReactNode[]` | - |\n"
  },
  {
    "title": "pro-components 中 ProLayout - FooterToolbar的extra属性如何使用？",
    "md": "参数: extra\n说明: 额外内容区，位于 content 的右侧\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProLayout - FooterToolbar的children属性如何使用？",
    "md": "参数: children\n说明: 内容区域\n类型: `ReactNode`|`ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - 何时使用 ProForm？\n| 布局 | 使用场景 |\n| --- | --- |\n| [ProForm](/components/form#proform) | 标准 Form，增加了 `onFinish` 中自动 `loading` 和根据 `request` 自动获取默认值的功能。 |\n| [ModalForm|DrawerForm](/components/modal-form) | 在 ProForm 的基础上增加了 `trigger` ，无需维护 `visible` 状态。 |\n| [QueryFilter](/components/query-filter) | 一般用于作为筛选表单，需要配合其他数据展示组件使用。 |\n| [LightFilter](/components/query-filter) | 一般用于作为行内内置的筛选，比如卡片操作栏和表格操作栏。 |\n| [StepsForm](/components/steps-form) | 分步表单，需要配置 StepForm 使用。 |\n#### ProForm - ProForm\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onFinish | 提交表单且数据验证成功后回调事件，同 antd 4 `Form` 组件 API | `(values)=>Promise<void>` | - |\n| onReset | 点击重置按钮的回调 | `(e)=>void` | - |\n| submitter | 提交按钮相关配置 | `boolean` | `SubmitterProps` | `true` |\n| syncToUrl | 同步参数到 url 上，url 只支持 string，在使用之前最好读一下[url 中的参数类型](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) | `true` | `(values,type)=>values` | - |\n| syncToInitialValues | 同步结果到 initialValues，默认为 true，如果为 false，form.reset 的时候将会忽略从 url 上获取的数据 | `boolean` | `true` |\n| dateFormatter | 自动格式化数据，主要是 moment 的表单，支持 string 和 number 两种模式，此外还支持指定函数进行格式化。 | `string\\| number \\| ((value: Moment, valueType: string) => string \\| number) \\| false` | string |\n| omitNil | ProForm 会自动清空 null 和 undefined 的数数据，如果你约定了 nil 代表某种数据，可以设置为 false 关闭此功能 | `boolean` | true |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| request | 发起网络请求的参数，返回值会覆盖给 initialValues | `(params)=>Promise<data>` | - |\n| isKeyPressSubmit | 是否使用回车提交 | `boolean` | - |\n| formRef | 获取表单所使用的 form | `MutableRefObject<Instance<T>>` | - |\n| autoFocusFirstInput | 自动 focus 表单第一个输入框 | `boolean` | - |\n| `grid` | 开启栅格化模式，宽度默认百分比，请使用 `colProps` 控制宽度 [查看示例](/components/form#栅格化布局) | `boolean` | - |\n| rowProps | 开启 `grid` 模式时传递给 `Row`, 仅在`ProFormGroup`, `ProFormList`, `ProFormFieldSet` 中有效 | [RowProps](https://ant.design/components/grid/#Row) | { gutter: 8 } |\n| [(...)](https://ant.design/components/form-cn/) | 注意 `LightFilter` 和 `QueryFilter` 仅支持除 `wrapperCol` | `labelCol` | `layout` 外的其他 antd `Form` 组件参数 | - | - |\n#### ProForm - ProForm.Group\n| 参数     | 说明                 | 类型              | 默认值 |\n| -------- | -------------------- | ----------------- | ------ |\n| title    | 标题                 | `string`          | -      |\n| children | 表单控件或者其他元素 | `React.ReactNode` | -      |\n#### ProForm - submitter\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onSubmit | 提交方法 | `()=>void` | - |\n| onReset | 重置方法 | `()=>void` | - |\n| searchConfig | 搜索的配置，一般用来配置文本 | `{resetText,submitText}` | - |\n| submitButtonProps | 提交按钮的 props | [ButtonProps](https://ant.design/components/button-cn/) | - |\n| resetButtonProps | 重置按钮的 props | [ButtonProps](https://ant.design/components/button-cn/) | - |\n| render | 自定义操作的渲染 | `false`|`(props,dom:JSX[])=>ReactNode[]` | - |\n#### ProForm - formRef\n| 方法名 | 使用描述 | 备注 |\n| --- | --- | --- |\n| `getFieldsFormatValue` | 使用方法与 `FormInstance` 的 `getFieldsValue` 方法相同，将返回格式化后的所有数据 | - |\n| `getFieldFormatValue` | 使用方法与 `FormInstance` 的 `getFieldValue` 方法相同，将返回格式化后的指定数据 | - |\n| `validateFieldsReturnFormatValue` | 使用方法与 `FormInstance` 的 `validateFields` 方法相同，验证通过后将返回格式化后的所有数据 | - |\n"
  },
  {
    "title": "pro-components 的 ProForm - 何时使用 ProForm？ 有哪些配置？",
    "md": "| 布局 | 使用场景 |\n| --- | --- |\n| [ProForm](/components/form#proform) | 标准 Form，增加了 `onFinish` 中自动 `loading` 和根据 `request` 自动获取默认值的功能。 |\n| [ModalForm|DrawerForm](/components/modal-form) | 在 ProForm 的基础上增加了 `trigger` ，无需维护 `visible` 状态。 |\n| [QueryFilter](/components/query-filter) | 一般用于作为筛选表单，需要配合其他数据展示组件使用。 |\n| [LightFilter](/components/query-filter) | 一般用于作为行内内置的筛选，比如卡片操作栏和表格操作栏。 |\n| [StepsForm](/components/steps-form) | 分步表单，需要配置 StepForm 使用。 |\n"
  },
  {
    "title": "pro-components 中 ProForm - 何时使用 ProForm？的[ProForm](/components/form#proform)属性如何使用？",
    "md": "布局: [ProForm](/components/form#proform)\n使用场景: 标准 Form，增加了 `onFinish` 中自动 `loading` 和根据 `request` 自动获取默认值的功能。\n"
  },
  {
    "title": "pro-components 中 ProForm - 何时使用 ProForm？的[ModalForm|DrawerForm](/components/modal-form)属性如何使用？",
    "md": "布局: [ModalForm|DrawerForm](/components/modal-form)\n使用场景: 在 ProForm 的基础上增加了 `trigger` ，无需维护 `visible` 状态。\n"
  },
  {
    "title": "pro-components 中 ProForm - 何时使用 ProForm？的[QueryFilter](/components/query-filter)属性如何使用？",
    "md": "布局: [QueryFilter](/components/query-filter)\n使用场景: 一般用于作为筛选表单，需要配合其他数据展示组件使用。\n"
  },
  {
    "title": "pro-components 中 ProForm - 何时使用 ProForm？的[LightFilter](/components/query-filter)属性如何使用？",
    "md": "布局: [LightFilter](/components/query-filter)\n使用场景: 一般用于作为行内内置的筛选，比如卡片操作栏和表格操作栏。\n"
  },
  {
    "title": "pro-components 中 ProForm - 何时使用 ProForm？的[StepsForm](/components/steps-form)属性如何使用？",
    "md": "布局: [StepsForm](/components/steps-form)\n使用场景: 分步表单，需要配置 StepForm 使用。\n"
  },
  {
    "title": "pro-components 的 ProForm - ProForm 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onFinish | 提交表单且数据验证成功后回调事件，同 antd 4 `Form` 组件 API | `(values)=>Promise<void>` | - |\n| onReset | 点击重置按钮的回调 | `(e)=>void` | - |\n| submitter | 提交按钮相关配置 | `boolean` | `SubmitterProps` | `true` |\n| syncToUrl | 同步参数到 url 上，url 只支持 string，在使用之前最好读一下[url 中的参数类型](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) | `true` | `(values,type)=>values` | - |\n| syncToInitialValues | 同步结果到 initialValues，默认为 true，如果为 false，form.reset 的时候将会忽略从 url 上获取的数据 | `boolean` | `true` |\n| dateFormatter | 自动格式化数据，主要是 moment 的表单，支持 string 和 number 两种模式，此外还支持指定函数进行格式化。 | `string\\| number \\| ((value: Moment, valueType: string) => string \\| number) \\| false` | string |\n| omitNil | ProForm 会自动清空 null 和 undefined 的数数据，如果你约定了 nil 代表某种数据，可以设置为 false 关闭此功能 | `boolean` | true |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| request | 发起网络请求的参数，返回值会覆盖给 initialValues | `(params)=>Promise<data>` | - |\n| isKeyPressSubmit | 是否使用回车提交 | `boolean` | - |\n| formRef | 获取表单所使用的 form | `MutableRefObject<Instance<T>>` | - |\n| autoFocusFirstInput | 自动 focus 表单第一个输入框 | `boolean` | - |\n| `grid` | 开启栅格化模式，宽度默认百分比，请使用 `colProps` 控制宽度 [查看示例](/components/form#栅格化布局) | `boolean` | - |\n| rowProps | 开启 `grid` 模式时传递给 `Row`, 仅在`ProFormGroup`, `ProFormList`, `ProFormFieldSet` 中有效 | [RowProps](https://ant.design/components/grid/#Row) | { gutter: 8 } |\n| [(...)](https://ant.design/components/form-cn/) | 注意 `LightFilter` 和 `QueryFilter` 仅支持除 `wrapperCol` | `labelCol` | `layout` 外的其他 antd `Form` 组件参数 | - | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的onFinish属性如何使用？",
    "md": "参数: onFinish\n说明: 提交表单且数据验证成功后回调事件，同 antd 4 `Form` 组件 API\n类型: `(values)=>Promise<void>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的onReset属性如何使用？",
    "md": "参数: onReset\n说明: 点击重置按钮的回调\n类型: `(e)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的submitter属性如何使用？",
    "md": "参数: submitter\n说明: 提交按钮相关配置\n类型: `boolean` | `SubmitterProps`\n默认值: `true`\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的syncToUrl属性如何使用？",
    "md": "参数: syncToUrl\n说明: 同步参数到 url 上，url 只支持 string，在使用之前最好读一下[url 中的参数类型](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n类型: `true` | `(values,type)=>values`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的syncToInitialValues属性如何使用？",
    "md": "参数: syncToInitialValues\n说明: 同步结果到 initialValues，默认为 true，如果为 false，form.reset 的时候将会忽略从 url 上获取的数据\n类型: `boolean`\n默认值: `true`\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的dateFormatter属性如何使用？",
    "md": "参数: dateFormatter\n说明: 自动格式化数据，主要是 moment 的表单，支持 string 和 number 两种模式，此外还支持指定函数进行格式化。\n类型: `string\\| number \\| ((value: Moment, valueType: string) => string \\| number) \\| false`\n默认值: string\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的omitNil属性如何使用？",
    "md": "参数: omitNil\n说明: ProForm 会自动清空 null 和 undefined 的数数据，如果你约定了 nil 代表某种数据，可以设置为 false 关闭此功能\n类型: `boolean`\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的params属性如何使用？",
    "md": "参数: params\n说明: 发起网络请求的参数，与 request 配合使用\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的request属性如何使用？",
    "md": "参数: request\n说明: 发起网络请求的参数，返回值会覆盖给 initialValues\n类型: `(params)=>Promise<data>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的isKeyPressSubmit属性如何使用？",
    "md": "参数: isKeyPressSubmit\n说明: 是否使用回车提交\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的formRef属性如何使用？",
    "md": "参数: formRef\n说明: 获取表单所使用的 form\n类型: `MutableRefObject<Instance<T>>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的autoFocusFirstInput属性如何使用？",
    "md": "参数: autoFocusFirstInput\n说明: 自动 focus 表单第一个输入框\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的`grid`属性如何使用？",
    "md": "参数: `grid`\n说明: 开启栅格化模式，宽度默认百分比，请使用 `colProps` 控制宽度 [查看示例](/components/form#栅格化布局)\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的rowProps属性如何使用？",
    "md": "参数: rowProps\n说明: 开启 `grid` 模式时传递给 `Row`, 仅在`ProFormGroup`, `ProFormList`, `ProFormFieldSet` 中有效\n类型: [RowProps](https://ant.design/components/grid/#Row)\n默认值: { gutter: 8 }\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的[(...)](https://ant.design/components/form-cn/)属性如何使用？",
    "md": "参数: [(...)](https://ant.design/components/form-cn/)\n说明: 注意 `LightFilter` 和 `QueryFilter` 仅支持除 `wrapperCol` | `labelCol` | `layout` 外的其他 antd `Form` 组件参数\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProForm.Group 有哪些配置？",
    "md": "| 参数     | 说明                 | 类型              | 默认值 |\n| -------- | -------------------- | ----------------- | ------ |\n| title    | 标题                 | `string`          | -      |\n| children | 表单控件或者其他元素 | `React.ReactNode` | -      |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm.Group的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm.Group的children属性如何使用？",
    "md": "参数: children\n说明: 表单控件或者其他元素\n类型: `React.ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - submitter 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onSubmit | 提交方法 | `()=>void` | - |\n| onReset | 重置方法 | `()=>void` | - |\n| searchConfig | 搜索的配置，一般用来配置文本 | `{resetText,submitText}` | - |\n| submitButtonProps | 提交按钮的 props | [ButtonProps](https://ant.design/components/button-cn/) | - |\n| resetButtonProps | 重置按钮的 props | [ButtonProps](https://ant.design/components/button-cn/) | - |\n| render | 自定义操作的渲染 | `false`|`(props,dom:JSX[])=>ReactNode[]` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - submitter的onSubmit属性如何使用？",
    "md": "参数: onSubmit\n说明: 提交方法\n类型: `()=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - submitter的onReset属性如何使用？",
    "md": "参数: onReset\n说明: 重置方法\n类型: `()=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - submitter的searchConfig属性如何使用？",
    "md": "参数: searchConfig\n说明: 搜索的配置，一般用来配置文本\n类型: `{resetText,submitText}`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - submitter的submitButtonProps属性如何使用？",
    "md": "参数: submitButtonProps\n说明: 提交按钮的 props\n类型: [ButtonProps](https://ant.design/components/button-cn/)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - submitter的resetButtonProps属性如何使用？",
    "md": "参数: resetButtonProps\n说明: 重置按钮的 props\n类型: [ButtonProps](https://ant.design/components/button-cn/)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - submitter的render属性如何使用？",
    "md": "参数: render\n说明: 自定义操作的渲染\n类型: `false`|`(props,dom:JSX[])=>ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - formRef 有哪些配置？",
    "md": "| 方法名 | 使用描述 | 备注 |\n| --- | --- | --- |\n| `getFieldsFormatValue` | 使用方法与 `FormInstance` 的 `getFieldsValue` 方法相同，将返回格式化后的所有数据 | - |\n| `getFieldFormatValue` | 使用方法与 `FormInstance` 的 `getFieldValue` 方法相同，将返回格式化后的指定数据 | - |\n| `validateFieldsReturnFormatValue` | 使用方法与 `FormInstance` 的 `validateFields` 方法相同，验证通过后将返回格式化后的所有数据 | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - formRef的`getFieldsFormatValue`属性如何使用？",
    "md": "方法名: `getFieldsFormatValue`\n使用描述: 使用方法与 `FormInstance` 的 `getFieldsValue` 方法相同，将返回格式化后的所有数据\n备注: -\n"
  },
  {
    "title": "pro-components 中 ProForm - formRef的`getFieldFormatValue`属性如何使用？",
    "md": "方法名: `getFieldFormatValue`\n使用描述: 使用方法与 `FormInstance` 的 `getFieldValue` 方法相同，将返回格式化后的指定数据\n备注: -\n"
  },
  {
    "title": "pro-components 中 ProForm - formRef的`validateFieldsReturnFormatValue`属性如何使用？",
    "md": "方法名: `validateFieldsReturnFormatValue`\n使用描述: 使用方法与 `FormInstance` 的 `validateFields` 方法相同，验证通过后将返回格式化后的所有数据\n备注: -\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - StepsForm\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| current | 当前表单的步骤数，从 `0` 开始 | `number` | 0 |\n| onCurrentChange | current 发生改变的事件 | `(current:number)=>void` | - |\n| onFinish | 表单最后一步提交成功触发，如果返回`true`就会自动重置表单（包括`StepForm`变回第一步） | `(values:T)=>void \\| boolean` | - |\n| stepsProps | StepsForm 自带的 Steps 的 props，使用方式与 [antd](https://ant.design/components/steps-cn/) 相同，但是去掉了 current 和 onChange | [props](https://ant.design/components/steps-cn/#API) | - |\n| stepFormRender | 自定义当前展示的表单，返回 dom 在表单内部 | `(form) => ReactNode` | - |\n| stepsFormRender | 自定义整个表单区域，返回的 dom 在表单的外部 | `(form,submitter) => ReactNode` | - |\n| stepsRender | 自定义步骤器 | `(steps,dom)=>ReactNode` | - |\n| formRef | StepForm action 的引用，便于自定义触发 | `MutableRefObject<FormInstance>` | - |\n#### ProForm - StepForm\n| 参数     | 说明             | 类型                         | 默认值 |\n| -------- | ---------------- | ---------------------------- | ------ |\n| onFinish | 表单提交成功触发 | `(values:T)=>Promise<false>` | -      |\n"
  },
  {
    "title": "pro-components 的 ProForm - StepsForm 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| current | 当前表单的步骤数，从 `0` 开始 | `number` | 0 |\n| onCurrentChange | current 发生改变的事件 | `(current:number)=>void` | - |\n| onFinish | 表单最后一步提交成功触发，如果返回`true`就会自动重置表单（包括`StepForm`变回第一步） | `(values:T)=>void \\| boolean` | - |\n| stepsProps | StepsForm 自带的 Steps 的 props，使用方式与 [antd](https://ant.design/components/steps-cn/) 相同，但是去掉了 current 和 onChange | [props](https://ant.design/components/steps-cn/#API) | - |\n| stepFormRender | 自定义当前展示的表单，返回 dom 在表单内部 | `(form) => ReactNode` | - |\n| stepsFormRender | 自定义整个表单区域，返回的 dom 在表单的外部 | `(form,submitter) => ReactNode` | - |\n| stepsRender | 自定义步骤器 | `(steps,dom)=>ReactNode` | - |\n| formRef | StepForm action 的引用，便于自定义触发 | `MutableRefObject<FormInstance>` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的current属性如何使用？",
    "md": "参数: current\n说明: 当前表单的步骤数，从 `0` 开始\n类型: `number`\n默认值: 0\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的onCurrentChange属性如何使用？",
    "md": "参数: onCurrentChange\n说明: current 发生改变的事件\n类型: `(current:number)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的onFinish属性如何使用？",
    "md": "参数: onFinish\n说明: 表单最后一步提交成功触发，如果返回`true`就会自动重置表单（包括`StepForm`变回第一步）\n类型: `(values:T)=>void \\| boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的stepsProps属性如何使用？",
    "md": "参数: stepsProps\n说明: StepsForm 自带的 Steps 的 props，使用方式与 [antd](https://ant.design/components/steps-cn/) 相同，但是去掉了 current 和 onChange\n类型: [props](https://ant.design/components/steps-cn/#API)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的stepFormRender属性如何使用？",
    "md": "参数: stepFormRender\n说明: 自定义当前展示的表单，返回 dom 在表单内部\n类型: `(form) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的stepsFormRender属性如何使用？",
    "md": "参数: stepsFormRender\n说明: 自定义整个表单区域，返回的 dom 在表单的外部\n类型: `(form,submitter) => ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的stepsRender属性如何使用？",
    "md": "参数: stepsRender\n说明: 自定义步骤器\n类型: `(steps,dom)=>ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - StepsForm的formRef属性如何使用？",
    "md": "参数: formRef\n说明: StepForm action 的引用，便于自定义触发\n类型: `MutableRefObject<FormInstance>`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - StepForm 有哪些配置？",
    "md": "| 参数     | 说明             | 类型                         | 默认值 |\n| -------- | ---------------- | ---------------------------- | ------ |\n| onFinish | 表单提交成功触发 | `(values:T)=>Promise<false>` | -      |\n"
  },
  {
    "title": "pro-components 中 ProForm - StepForm的onFinish属性如何使用？",
    "md": "参数: onFinish\n说明: 表单提交成功触发\n类型: `(values:T)=>Promise<false>`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - ProForm\n| 字段名称 | 类型 | 说明 |\n| --- | --- | --- |\n| `layoutType` | [`ProFormLayoutType`](/components/schema-form#proformlayouttype) | 使用的表单布局模式 |\n| `steps` | `StepFormProps[]` | `layoutType=steps`中的分步表单配置，需要配置 columns 为数组使用 |\n| `columns` | [`ProFormColumnsType` | `ProFormColumnsType[]`](/components/schema-form#schema-定义) | 表单的定义，一般是 json 对象，如果是分步表单，需要使用 json 数组来生成多个表单 |\n| `shouldUpdate` | `(newValues: Record<string, any>, oldValues: Record<string, any>) => boolean \\| boolean` | 细粒化控制是否渲染。<br /> 为`true`时会自动重新渲染表单项。<br /> 为`false`时不会更新表单项但可以使用[dependencies 触发更新](#结合-shouldupdatefalse-和-dependencies-触发更新)，<br /> 为`function` 时根据返回值判断是否重新渲染表单项，等同直接赋值 `true` 或 `false` [参考示例](#动态控制是否重渲染) |\n#### ProForm - ProFormLayoutType\n| 字段名称 | 说明 |\n| --- | --- |\n| `Form` | [ProForm](/components/form) 是基本的表单类型 |\n| `ModalForm` | 弹框表单，配置之后支持 [ModalForm](/components/modal-form) 的所有配置 |\n| `DrawerForm` | 抽屉表单，配置之后支持 [DrawerForm](/components/modal-form) 的所有配置 |\n| `StepsForm`|`StepForm` | 配置之后为分步表单，有两种模式一种使用 `steps` 和 `columns` 来生成，一种是通过 `layoutType=StepsForm` 嵌套 `layoutType=StepForm` 来实现 |\n| `LightFilter` | 轻量筛选，配置之后支持 [`LightFilter`](/components/query-filter) 的所有配置 |\n| `QueryFilter` | 查询表单，配置之后支持 [`QueryFilter`](/components/query-filter) 的所有配置 |\n| `Embed` | 内嵌模式，只生成表单项，不生成 Form 可以混合使用 |\n#### ProForm - Schema 定义\n| 字段名称 | 类型 | 说明 |\n| --- | --- | --- |\n| `key` | `React.key` | 确定这个列的唯一值，一般用于 dataIndex 重复的情况 |\n| `dataIndex` | `React.key` | `React.key[]` | 与实体映射的 key，数组会被转化 `[a,b] => Entity.a.b` |\n| `valueType` | `ProFieldValueType` | 数据的渲渲染方式，我们自带了一部分，你也可以自定义 valueType |\n| `title` | `ReactNode` |`(props,type,dom)=> ReactNode` | 标题的内容，在 form 中是 label |\n| `tooltip` | `string` | 会在 title 旁边展示一个 icon，鼠标浮动之后展示 |\n| `valueEnum` | `(Entity)=> ValueEnum` | `ValueEnum` | 支持 object 和 Map，Map 是支持其他基础类型作为 key |\n| `fieldProps` | `(form,config)=>fieldProps`| `fieldProps` | 传给渲染的组件的 props，自定义的时候也会传递 |\n| `formItemProps` | `(form,config)=>formItemProps` | `formItemProps` | 传递给 Form.Item 的配置 |\n| `formItemProps.rules` | `Rule[]` | 表单项的校验规则。需要注意的是，如果当前表单项为`formList`时，此规则仅校验列表是否为空，且仅接受元组`[{required: boolean, message: string}]`，用于开启和关闭非空校验及指定空列表提示消息 |\n| `proFieldProps` | `proFieldProps` | 设置到 `ProField` 上面的 `props`，内部属性 |\n| `renderText` | `(text: any, record: Entity, index: number, action: ProCoreActionType) => any` | 修改的数据是会被 valueType 定义的渲染组件消费 |\n| `render` | `(dom,entity,index, action, schema) => React.ReactNode` | 自定义只读模式的 dom,`render` 方法只管理的只读模式，编辑模式需要使用 `renderFormItem` |\n| `renderFormItem` | `(schema,config,form) => React.ReactNode` | 自定义编辑模式，返回一个 ReactNode，会自动包裹 value 和 onChange。~~如返回 false,null,undefined 将不展示表单项~~ 请使用 dependency 组件控制是否渲染列 |\n| `request` | `(params,props) => Promise<{label,value}[]>` | 从远程请求网络数据，一般用于选择类组件 |\n| `params` | `Record<string, any>` | 额外传递给 `request` 的参数，组件不做处理，但是变化会引起`request` 重新请求数据 |\n| `dependencies` | `string \\| number \\| (string \\| number)[]` | 所依赖的 values 变化后，触发 renderFormItem，fieldProps，formItemProps 重新执行，并把 values 注入到 params 里 [示例](#使用-dependencies-触发-fieldpropsformitempropsrenderformitem-更新) |\n| `hideInDescriptions` | `boolean` | 在 descriptions 中隐藏 |\n| `hideInForm` | `boolean` | 在 Form 中隐藏 |\n| `hideInTable` | `boolean` | 在 Table 中隐藏 |\n| `hideInSearch` | `boolean` | 在 Table 的查询表格中隐藏 |\n| `columns` | `ProFormColumnsType[] \\| (values) => ProFormColumnsType[]` | 嵌套子项，valueType 为 dependency 时，请使用`(values) => ProFormColumnsType[]`其他情况使用 `ProFormColumnsType[]` |\n| `colProps` | [ColProps](https://ant.design/components/grid/#Col) | 在开启 grid 模式时传递给 Col |\n| `rowProps` | [RowProps](https://ant.design/components/grid/#Row) | 开启栅格化模式时传递给 Row |\n"
  },
  {
    "title": "pro-components 的 ProForm - ProForm 有哪些配置？",
    "md": "| 字段名称 | 类型 | 说明 |\n| --- | --- | --- |\n| `layoutType` | [`ProFormLayoutType`](/components/schema-form#proformlayouttype) | 使用的表单布局模式 |\n| `steps` | `StepFormProps[]` | `layoutType=steps`中的分步表单配置，需要配置 columns 为数组使用 |\n| `columns` | [`ProFormColumnsType` | `ProFormColumnsType[]`](/components/schema-form#schema-定义) | 表单的定义，一般是 json 对象，如果是分步表单，需要使用 json 数组来生成多个表单 |\n| `shouldUpdate` | `(newValues: Record<string, any>, oldValues: Record<string, any>) => boolean \\| boolean` | 细粒化控制是否渲染。<br /> 为`true`时会自动重新渲染表单项。<br /> 为`false`时不会更新表单项但可以使用[dependencies 触发更新](#结合-shouldupdatefalse-和-dependencies-触发更新)，<br /> 为`function` 时根据返回值判断是否重新渲染表单项，等同直接赋值 `true` 或 `false` [参考示例](#动态控制是否重渲染) |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的`layoutType`属性如何使用？",
    "md": "字段名称: `layoutType`\n类型: [`ProFormLayoutType`](/components/schema-form#proformlayouttype)\n说明: 使用的表单布局模式\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的`steps`属性如何使用？",
    "md": "字段名称: `steps`\n类型: `StepFormProps[]`\n说明: `layoutType=steps`中的分步表单配置，需要配置 columns 为数组使用\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的`columns`属性如何使用？",
    "md": "字段名称: `columns`\n类型: [`ProFormColumnsType` | `ProFormColumnsType[]`](/components/schema-form#schema-定义)\n说明: 表单的定义，一般是 json 对象，如果是分步表单，需要使用 json 数组来生成多个表单\n"
  },
  {
    "title": "pro-components 中 ProForm - ProForm的`shouldUpdate`属性如何使用？",
    "md": "字段名称: `shouldUpdate`\n类型: `(newValues: Record<string, any>, oldValues: Record<string, any>) => boolean \\| boolean`\n说明: 细粒化控制是否渲染。<br /> 为`true`时会自动重新渲染表单项。<br /> 为`false`时不会更新表单项但可以使用[dependencies 触发更新](#结合-shouldupdatefalse-和-dependencies-触发更新)，<br /> 为`function` 时根据返回值判断是否重新渲染表单项，等同直接赋值 `true` 或 `false` [参考示例](#动态控制是否重渲染)\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormLayoutType 有哪些配置？",
    "md": "| 字段名称 | 说明 |\n| --- | --- |\n| `Form` | [ProForm](/components/form) 是基本的表单类型 |\n| `ModalForm` | 弹框表单，配置之后支持 [ModalForm](/components/modal-form) 的所有配置 |\n| `DrawerForm` | 抽屉表单，配置之后支持 [DrawerForm](/components/modal-form) 的所有配置 |\n| `StepsForm`|`StepForm` | 配置之后为分步表单，有两种模式一种使用 `steps` 和 `columns` 来生成，一种是通过 `layoutType=StepsForm` 嵌套 `layoutType=StepForm` 来实现 |\n| `LightFilter` | 轻量筛选，配置之后支持 [`LightFilter`](/components/query-filter) 的所有配置 |\n| `QueryFilter` | 查询表单，配置之后支持 [`QueryFilter`](/components/query-filter) 的所有配置 |\n| `Embed` | 内嵌模式，只生成表单项，不生成 Form 可以混合使用 |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormLayoutType的`Form`属性如何使用？",
    "md": "字段名称: `Form`\n说明: [ProForm](/components/form) 是基本的表单类型\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormLayoutType的`ModalForm`属性如何使用？",
    "md": "字段名称: `ModalForm`\n说明: 弹框表单，配置之后支持 [ModalForm](/components/modal-form) 的所有配置\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormLayoutType的`DrawerForm`属性如何使用？",
    "md": "字段名称: `DrawerForm`\n说明: 抽屉表单，配置之后支持 [DrawerForm](/components/modal-form) 的所有配置\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormLayoutType的`StepsForm`|`StepForm`属性如何使用？",
    "md": "字段名称: `StepsForm`|`StepForm`\n说明: 配置之后为分步表单，有两种模式一种使用 `steps` 和 `columns` 来生成，一种是通过 `layoutType=StepsForm` 嵌套 `layoutType=StepForm` 来实现\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormLayoutType的`LightFilter`属性如何使用？",
    "md": "字段名称: `LightFilter`\n说明: 轻量筛选，配置之后支持 [`LightFilter`](/components/query-filter) 的所有配置\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormLayoutType的`QueryFilter`属性如何使用？",
    "md": "字段名称: `QueryFilter`\n说明: 查询表单，配置之后支持 [`QueryFilter`](/components/query-filter) 的所有配置\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormLayoutType的`Embed`属性如何使用？",
    "md": "字段名称: `Embed`\n说明: 内嵌模式，只生成表单项，不生成 Form 可以混合使用\n"
  },
  {
    "title": "pro-components 的 ProForm - Schema 定义 有哪些配置？",
    "md": "| 字段名称 | 类型 | 说明 |\n| --- | --- | --- |\n| `key` | `React.key` | 确定这个列的唯一值，一般用于 dataIndex 重复的情况 |\n| `dataIndex` | `React.key` | `React.key[]` | 与实体映射的 key，数组会被转化 `[a,b] => Entity.a.b` |\n| `valueType` | `ProFieldValueType` | 数据的渲渲染方式，我们自带了一部分，你也可以自定义 valueType |\n| `title` | `ReactNode` |`(props,type,dom)=> ReactNode` | 标题的内容，在 form 中是 label |\n| `tooltip` | `string` | 会在 title 旁边展示一个 icon，鼠标浮动之后展示 |\n| `valueEnum` | `(Entity)=> ValueEnum` | `ValueEnum` | 支持 object 和 Map，Map 是支持其他基础类型作为 key |\n| `fieldProps` | `(form,config)=>fieldProps`| `fieldProps` | 传给渲染的组件的 props，自定义的时候也会传递 |\n| `formItemProps` | `(form,config)=>formItemProps` | `formItemProps` | 传递给 Form.Item 的配置 |\n| `formItemProps.rules` | `Rule[]` | 表单项的校验规则。需要注意的是，如果当前表单项为`formList`时，此规则仅校验列表是否为空，且仅接受元组`[{required: boolean, message: string}]`，用于开启和关闭非空校验及指定空列表提示消息 |\n| `proFieldProps` | `proFieldProps` | 设置到 `ProField` 上面的 `props`，内部属性 |\n| `renderText` | `(text: any, record: Entity, index: number, action: ProCoreActionType) => any` | 修改的数据是会被 valueType 定义的渲染组件消费 |\n| `render` | `(dom,entity,index, action, schema) => React.ReactNode` | 自定义只读模式的 dom,`render` 方法只管理的只读模式，编辑模式需要使用 `renderFormItem` |\n| `renderFormItem` | `(schema,config,form) => React.ReactNode` | 自定义编辑模式，返回一个 ReactNode，会自动包裹 value 和 onChange。~~如返回 false,null,undefined 将不展示表单项~~ 请使用 dependency 组件控制是否渲染列 |\n| `request` | `(params,props) => Promise<{label,value}[]>` | 从远程请求网络数据，一般用于选择类组件 |\n| `params` | `Record<string, any>` | 额外传递给 `request` 的参数，组件不做处理，但是变化会引起`request` 重新请求数据 |\n| `dependencies` | `string \\| number \\| (string \\| number)[]` | 所依赖的 values 变化后，触发 renderFormItem，fieldProps，formItemProps 重新执行，并把 values 注入到 params 里 [示例](#使用-dependencies-触发-fieldpropsformitempropsrenderformitem-更新) |\n| `hideInDescriptions` | `boolean` | 在 descriptions 中隐藏 |\n| `hideInForm` | `boolean` | 在 Form 中隐藏 |\n| `hideInTable` | `boolean` | 在 Table 中隐藏 |\n| `hideInSearch` | `boolean` | 在 Table 的查询表格中隐藏 |\n| `columns` | `ProFormColumnsType[] \\| (values) => ProFormColumnsType[]` | 嵌套子项，valueType 为 dependency 时，请使用`(values) => ProFormColumnsType[]`其他情况使用 `ProFormColumnsType[]` |\n| `colProps` | [ColProps](https://ant.design/components/grid/#Col) | 在开启 grid 模式时传递给 Col |\n| `rowProps` | [RowProps](https://ant.design/components/grid/#Row) | 开启栅格化模式时传递给 Row |\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`key`属性如何使用？",
    "md": "字段名称: `key`\n类型: `React.key`\n说明: 确定这个列的唯一值，一般用于 dataIndex 重复的情况\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`dataIndex`属性如何使用？",
    "md": "字段名称: `dataIndex`\n类型: `React.key` | `React.key[]`\n说明: 与实体映射的 key，数组会被转化 `[a,b] => Entity.a.b`\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`valueType`属性如何使用？",
    "md": "字段名称: `valueType`\n类型: `ProFieldValueType`\n说明: 数据的渲渲染方式，我们自带了一部分，你也可以自定义 valueType\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`title`属性如何使用？",
    "md": "字段名称: `title`\n类型: `ReactNode` |`(props,type,dom)=> ReactNode`\n说明: 标题的内容，在 form 中是 label\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`tooltip`属性如何使用？",
    "md": "字段名称: `tooltip`\n类型: `string`\n说明: 会在 title 旁边展示一个 icon，鼠标浮动之后展示\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`valueEnum`属性如何使用？",
    "md": "字段名称: `valueEnum`\n类型: `(Entity)=> ValueEnum` | `ValueEnum`\n说明: 支持 object 和 Map，Map 是支持其他基础类型作为 key\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`fieldProps`属性如何使用？",
    "md": "字段名称: `fieldProps`\n类型: `(form,config)=>fieldProps`| `fieldProps`\n说明: 传给渲染的组件的 props，自定义的时候也会传递\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`formItemProps`属性如何使用？",
    "md": "字段名称: `formItemProps`\n类型: `(form,config)=>formItemProps` | `formItemProps`\n说明: 传递给 Form.Item 的配置\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`formItemProps.rules`属性如何使用？",
    "md": "字段名称: `formItemProps.rules`\n类型: `Rule[]`\n说明: 表单项的校验规则。需要注意的是，如果当前表单项为`formList`时，此规则仅校验列表是否为空，且仅接受元组`[{required: boolean, message: string}]`，用于开启和关闭非空校验及指定空列表提示消息\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`proFieldProps`属性如何使用？",
    "md": "字段名称: `proFieldProps`\n类型: `proFieldProps`\n说明: 设置到 `ProField` 上面的 `props`，内部属性\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`renderText`属性如何使用？",
    "md": "字段名称: `renderText`\n类型: `(text: any, record: Entity, index: number, action: ProCoreActionType) => any`\n说明: 修改的数据是会被 valueType 定义的渲染组件消费\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`render`属性如何使用？",
    "md": "字段名称: `render`\n类型: `(dom,entity,index, action, schema) => React.ReactNode`\n说明: 自定义只读模式的 dom,`render` 方法只管理的只读模式，编辑模式需要使用 `renderFormItem`\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`renderFormItem`属性如何使用？",
    "md": "字段名称: `renderFormItem`\n类型: `(schema,config,form) => React.ReactNode`\n说明: 自定义编辑模式，返回一个 ReactNode，会自动包裹 value 和 onChange。~~如返回 false,null,undefined 将不展示表单项~~ 请使用 dependency 组件控制是否渲染列\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`request`属性如何使用？",
    "md": "字段名称: `request`\n类型: `(params,props) => Promise<{label,value}[]>`\n说明: 从远程请求网络数据，一般用于选择类组件\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`params`属性如何使用？",
    "md": "字段名称: `params`\n类型: `Record<string, any>`\n说明: 额外传递给 `request` 的参数，组件不做处理，但是变化会引起`request` 重新请求数据\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`dependencies`属性如何使用？",
    "md": "字段名称: `dependencies`\n类型: `string \\| number \\| (string \\| number)[]`\n说明: 所依赖的 values 变化后，触发 renderFormItem，fieldProps，formItemProps 重新执行，并把 values 注入到 params 里 [示例](#使用-dependencies-触发-fieldpropsformitempropsrenderformitem-更新)\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`hideInDescriptions`属性如何使用？",
    "md": "字段名称: `hideInDescriptions`\n类型: `boolean`\n说明: 在 descriptions 中隐藏\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`hideInForm`属性如何使用？",
    "md": "字段名称: `hideInForm`\n类型: `boolean`\n说明: 在 Form 中隐藏\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`hideInTable`属性如何使用？",
    "md": "字段名称: `hideInTable`\n类型: `boolean`\n说明: 在 Table 中隐藏\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`hideInSearch`属性如何使用？",
    "md": "字段名称: `hideInSearch`\n类型: `boolean`\n说明: 在 Table 的查询表格中隐藏\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`columns`属性如何使用？",
    "md": "字段名称: `columns`\n类型: `ProFormColumnsType[] \\| (values) => ProFormColumnsType[]`\n说明: 嵌套子项，valueType 为 dependency 时，请使用`(values) => ProFormColumnsType[]`其他情况使用 `ProFormColumnsType[]`\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`colProps`属性如何使用？",
    "md": "字段名称: `colProps`\n类型: [ColProps](https://ant.design/components/grid/#Col)\n说明: 在开启 grid 模式时传递给 Col\n"
  },
  {
    "title": "pro-components 中 ProForm - Schema 定义的`rowProps`属性如何使用？",
    "md": "字段名称: `rowProps`\n类型: [RowProps](https://ant.design/components/grid/#Row)\n说明: 开启栅格化模式时传递给 Row\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - QueryFilter\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| collapsed | 是否折叠超出的表单项，用于受控模式 | `boolean` | - |\n| defaultCollapsed | 默认状态下是否折叠超出的表单项 | `boolean` | true |\n| onCollapse | 切换表单折叠状态时的回调 | `(collapsed)=>void` | - |\n| hideRequiredMark | 隐藏所有表单项的必选标记，**默认隐藏** | `boolean` | true |\n| submitterColSpanProps | 提交按钮所在 col 的 props | ColProps | - |\n| defaultColsNumber | 自定义折叠状态下默认显示的表单控件数量，没有设置或小于 0，则显示一行控件；数量大于等于控件数量则隐藏展开按钮 | `number` | - |\n| labelWidth | label 宽度 | `number` | `'auto'` | `80` |\n| span | 表单项宽度 | `number[0 - 24]` | - |\n| split | 每一行是否有分割线 | `boolean` | - |\n| preserve | 是否能够查询收起的数据，如果设置为 false，收起后的表单数据将会丢失 | `boolean` | true |\n#### ProForm - 默认布局时的规则\n| 容器宽度断点          | 单行展示表单列数（包含操作区域） | 默认布局     |\n| --------------------- | -------------------------------- | ------------ |\n| `≧ 1352px`            | 4 列                             | `horizontal` |\n| `≧ 1062px`            | 3 列                             | `horizontal` |\n| `≧ 701px && < 1063px` | 3 列                             | `horizontal` |\n| `≧ 513px && < 701px`  | 2 列                             | `vertical`   |\n| `< 513px`             | 1 列                             | `vertical`   |\n#### ProForm - 强制上下布局时的规则\n| 容器宽度断点          | 单行展示表单列数（包含操作区域） |\n| --------------------- | -------------------------------- |\n| `≧ 1057px`            | 4 列                             |\n| `≧ 785px && < 1057px` | 3 列                             |\n| `≧ 513px && < 785px`  | 2 列                             |\n| `< 513px`             | 1 列                             |\n#### ProForm - LightFilter\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| collapse | 是否默认折叠全部字段 | `boolean` | `false` |\n| collapseLabel | 折叠区域的标签 | `ReactNode` | `更多筛选 <DownOutlined/>` |\n| footerRender | 底部内容，当不需要默认底部按钮时，可以设为 footer={false} | `(onClear?: () => void, onConfirm: () => void) => JSX.Element \\| false)`|`false` | - |\n| placement | 选择框弹出的位置 ：`bottomLeft` `bottomRight` `topLeft` `topRight` | string | bottomLeft |\n"
  },
  {
    "title": "pro-components 的 ProForm - QueryFilter 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| collapsed | 是否折叠超出的表单项，用于受控模式 | `boolean` | - |\n| defaultCollapsed | 默认状态下是否折叠超出的表单项 | `boolean` | true |\n| onCollapse | 切换表单折叠状态时的回调 | `(collapsed)=>void` | - |\n| hideRequiredMark | 隐藏所有表单项的必选标记，**默认隐藏** | `boolean` | true |\n| submitterColSpanProps | 提交按钮所在 col 的 props | ColProps | - |\n| defaultColsNumber | 自定义折叠状态下默认显示的表单控件数量，没有设置或小于 0，则显示一行控件；数量大于等于控件数量则隐藏展开按钮 | `number` | - |\n| labelWidth | label 宽度 | `number` | `'auto'` | `80` |\n| span | 表单项宽度 | `number[0 - 24]` | - |\n| split | 每一行是否有分割线 | `boolean` | - |\n| preserve | 是否能够查询收起的数据，如果设置为 false，收起后的表单数据将会丢失 | `boolean` | true |\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的collapsed属性如何使用？",
    "md": "参数: collapsed\n说明: 是否折叠超出的表单项，用于受控模式\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的defaultCollapsed属性如何使用？",
    "md": "参数: defaultCollapsed\n说明: 默认状态下是否折叠超出的表单项\n类型: `boolean`\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的onCollapse属性如何使用？",
    "md": "参数: onCollapse\n说明: 切换表单折叠状态时的回调\n类型: `(collapsed)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的hideRequiredMark属性如何使用？",
    "md": "参数: hideRequiredMark\n说明: 隐藏所有表单项的必选标记，**默认隐藏**\n类型: `boolean`\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的submitterColSpanProps属性如何使用？",
    "md": "参数: submitterColSpanProps\n说明: 提交按钮所在 col 的 props\n类型: ColProps\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的defaultColsNumber属性如何使用？",
    "md": "参数: defaultColsNumber\n说明: 自定义折叠状态下默认显示的表单控件数量，没有设置或小于 0，则显示一行控件；数量大于等于控件数量则隐藏展开按钮\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的labelWidth属性如何使用？",
    "md": "参数: labelWidth\n说明: label 宽度\n类型: `number` | `'auto'`\n默认值: `80`\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的span属性如何使用？",
    "md": "参数: span\n说明: 表单项宽度\n类型: `number[0 - 24]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的split属性如何使用？",
    "md": "参数: split\n说明: 每一行是否有分割线\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - QueryFilter的preserve属性如何使用？",
    "md": "参数: preserve\n说明: 是否能够查询收起的数据，如果设置为 false，收起后的表单数据将会丢失\n类型: `boolean`\n默认值: true\n"
  },
  {
    "title": "pro-components 的 ProForm - 默认布局时的规则 有哪些配置？",
    "md": "| 容器宽度断点          | 单行展示表单列数（包含操作区域） | 默认布局     |\n| --------------------- | -------------------------------- | ------------ |\n| `≧ 1352px`            | 4 列                             | `horizontal` |\n| `≧ 1062px`            | 3 列                             | `horizontal` |\n| `≧ 701px && < 1063px` | 3 列                             | `horizontal` |\n| `≧ 513px && < 701px`  | 2 列                             | `vertical`   |\n| `< 513px`             | 1 列                             | `vertical`   |\n"
  },
  {
    "title": "pro-components 中 ProForm - 默认布局时的规则的`≧ 1352px`属性如何使用？",
    "md": "容器宽度断点: `≧ 1352px`\n单行展示表单列数（包含操作区域）: 4 列\n默认布局: `horizontal`\n"
  },
  {
    "title": "pro-components 中 ProForm - 默认布局时的规则的`≧ 1062px`属性如何使用？",
    "md": "容器宽度断点: `≧ 1062px`\n单行展示表单列数（包含操作区域）: 3 列\n默认布局: `horizontal`\n"
  },
  {
    "title": "pro-components 中 ProForm - 默认布局时的规则的`≧ 701px && < 1063px`属性如何使用？",
    "md": "容器宽度断点: `≧ 701px && < 1063px`\n单行展示表单列数（包含操作区域）: 3 列\n默认布局: `horizontal`\n"
  },
  {
    "title": "pro-components 中 ProForm - 默认布局时的规则的`≧ 513px && < 701px`属性如何使用？",
    "md": "容器宽度断点: `≧ 513px && < 701px`\n单行展示表单列数（包含操作区域）: 2 列\n默认布局: `vertical`\n"
  },
  {
    "title": "pro-components 中 ProForm - 默认布局时的规则的`< 513px`属性如何使用？",
    "md": "容器宽度断点: `< 513px`\n单行展示表单列数（包含操作区域）: 1 列\n默认布局: `vertical`\n"
  },
  {
    "title": "pro-components 的 ProForm - 强制上下布局时的规则 有哪些配置？",
    "md": "| 容器宽度断点          | 单行展示表单列数（包含操作区域） |\n| --------------------- | -------------------------------- |\n| `≧ 1057px`            | 4 列                             |\n| `≧ 785px && < 1057px` | 3 列                             |\n| `≧ 513px && < 785px`  | 2 列                             |\n| `< 513px`             | 1 列                             |\n"
  },
  {
    "title": "pro-components 中 ProForm - 强制上下布局时的规则的`≧ 1057px`属性如何使用？",
    "md": "容器宽度断点: `≧ 1057px`\n单行展示表单列数（包含操作区域）: 4 列\n"
  },
  {
    "title": "pro-components 中 ProForm - 强制上下布局时的规则的`≧ 785px && < 1057px`属性如何使用？",
    "md": "容器宽度断点: `≧ 785px && < 1057px`\n单行展示表单列数（包含操作区域）: 3 列\n"
  },
  {
    "title": "pro-components 中 ProForm - 强制上下布局时的规则的`≧ 513px && < 785px`属性如何使用？",
    "md": "容器宽度断点: `≧ 513px && < 785px`\n单行展示表单列数（包含操作区域）: 2 列\n"
  },
  {
    "title": "pro-components 中 ProForm - 强制上下布局时的规则的`< 513px`属性如何使用？",
    "md": "容器宽度断点: `< 513px`\n单行展示表单列数（包含操作区域）: 1 列\n"
  },
  {
    "title": "pro-components 的 ProForm - LightFilter 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| collapse | 是否默认折叠全部字段 | `boolean` | `false` |\n| collapseLabel | 折叠区域的标签 | `ReactNode` | `更多筛选 <DownOutlined/>` |\n| footerRender | 底部内容，当不需要默认底部按钮时，可以设为 footer={false} | `(onClear?: () => void, onConfirm: () => void) => JSX.Element \\| false)`|`false` | - |\n| placement | 选择框弹出的位置 ：`bottomLeft` `bottomRight` `topLeft` `topRight` | string | bottomLeft |\n"
  },
  {
    "title": "pro-components 中 ProForm - LightFilter的collapse属性如何使用？",
    "md": "参数: collapse\n说明: 是否默认折叠全部字段\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProForm - LightFilter的collapseLabel属性如何使用？",
    "md": "参数: collapseLabel\n说明: 折叠区域的标签\n类型: `ReactNode`\n默认值: `更多筛选 <DownOutlined/>`\n"
  },
  {
    "title": "pro-components 中 ProForm - LightFilter的footerRender属性如何使用？",
    "md": "参数: footerRender\n说明: 底部内容，当不需要默认底部按钮时，可以设为 footer={false}\n类型: `(onClear?: () => void, onConfirm: () => void) => JSX.Element \\| false)`|`false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LightFilter的placement属性如何使用？",
    "md": "参数: placement\n说明: 选择框弹出的位置 ：`bottomLeft` `bottomRight` `topLeft` `topRight`\n类型: string\n默认值: bottomLeft\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - ModalForm\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| trigger | 用于触发 Modal 打开的 dom，一般是 button | `ReactNode` | - |\n| open | 是否打开 | `open` | - |\n| onOpenChange | visible 改变时触发 | `(open:boolean)=>void` | - |\n| modalProps | Modal 的 props，使用方式与 [antd](https://ant.design/components/modal-cn/) 相同。注意：不支持 'visible'，请使用全局的 visible | [props](https://ant.design/components/modal-cn/#API) | - |\n| title | 弹框的标题 | `ReactNode` | - |\n| width | 弹框的宽度 | `Number` | - |\n| onFinish | 提交数据时触发，如果返回一个 true。会关掉抽屉，如果配置了 `destroyOnClose` 还会重置表单。 | `async (values)=>boolean` | - |\n| submitTimeout | 提交数据时，禁用取消按钮的超时时间（毫秒）。 | `Number` | - |\n| submitter | 提交按钮相关配置，使用方式与 [ProForm](https://procomponents.ant.design/components/form) 相同。 | [ProForm](https://procomponents.ant.design/components/form) | - |\n#### ProForm - DrawerForm\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| trigger | 用于触发 Modal 打开的 dom，一般是 button | `ReactNode` | - |\n| resize | 是否调整大小 | `{onResize,maxWidth,minWidth}` | `Boolean` | { onResize: () => { }, maxWidth: window.innerWidth \\* 0.8, minWidth: 300} |\n| onOpenChange | open 改变时触发 | `(open:boolean)=>void` | - |\n| drawerProps | Drawer 的 props，使用方式与 [antd](https://ant.design/components/drawer-cn/) 相同。注意：不支持 'visible'，请使用全局的 visible | [props](https://ant.design/components/drawer-cn/#API) | - |\n| title | 抽屉的标题 | `ReactNode` | - |\n| width | 抽屉的宽度（受控属性，使用时权重高于 resize） | `Number` | - |\n| onFinish | 提交数据时触发，如果返回一个 true。会关掉抽屉，如果配置了 `destroyOnClose` 还会重置表单。 | `async (values)=>boolean` | - |\n| submitTimeout | 提交数据时，禁用取消按钮的超时时间（毫秒）。 | `Number` | - |\n"
  },
  {
    "title": "pro-components 的 ProForm - ModalForm 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| trigger | 用于触发 Modal 打开的 dom，一般是 button | `ReactNode` | - |\n| open | 是否打开 | `open` | - |\n| onOpenChange | visible 改变时触发 | `(open:boolean)=>void` | - |\n| modalProps | Modal 的 props，使用方式与 [antd](https://ant.design/components/modal-cn/) 相同。注意：不支持 'visible'，请使用全局的 visible | [props](https://ant.design/components/modal-cn/#API) | - |\n| title | 弹框的标题 | `ReactNode` | - |\n| width | 弹框的宽度 | `Number` | - |\n| onFinish | 提交数据时触发，如果返回一个 true。会关掉抽屉，如果配置了 `destroyOnClose` 还会重置表单。 | `async (values)=>boolean` | - |\n| submitTimeout | 提交数据时，禁用取消按钮的超时时间（毫秒）。 | `Number` | - |\n| submitter | 提交按钮相关配置，使用方式与 [ProForm](https://procomponents.ant.design/components/form) 相同。 | [ProForm](https://procomponents.ant.design/components/form) | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 用于触发 Modal 打开的 dom，一般是 button\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的open属性如何使用？",
    "md": "参数: open\n说明: 是否打开\n类型: `open`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: visible 改变时触发\n类型: `(open:boolean)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的modalProps属性如何使用？",
    "md": "参数: modalProps\n说明: Modal 的 props，使用方式与 [antd](https://ant.design/components/modal-cn/) 相同。注意：不支持 'visible'，请使用全局的 visible\n类型: [props](https://ant.design/components/modal-cn/#API)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的title属性如何使用？",
    "md": "参数: title\n说明: 弹框的标题\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的width属性如何使用？",
    "md": "参数: width\n说明: 弹框的宽度\n类型: `Number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的onFinish属性如何使用？",
    "md": "参数: onFinish\n说明: 提交数据时触发，如果返回一个 true。会关掉抽屉，如果配置了 `destroyOnClose` 还会重置表单。\n类型: `async (values)=>boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的submitTimeout属性如何使用？",
    "md": "参数: submitTimeout\n说明: 提交数据时，禁用取消按钮的超时时间（毫秒）。\n类型: `Number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ModalForm的submitter属性如何使用？",
    "md": "参数: submitter\n说明: 提交按钮相关配置，使用方式与 [ProForm](https://procomponents.ant.design/components/form) 相同。\n类型: [ProForm](https://procomponents.ant.design/components/form)\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - DrawerForm 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| trigger | 用于触发 Modal 打开的 dom，一般是 button | `ReactNode` | - |\n| resize | 是否调整大小 | `{onResize,maxWidth,minWidth}` | `Boolean` | { onResize: () => { }, maxWidth: window.innerWidth \\* 0.8, minWidth: 300} |\n| onOpenChange | open 改变时触发 | `(open:boolean)=>void` | - |\n| drawerProps | Drawer 的 props，使用方式与 [antd](https://ant.design/components/drawer-cn/) 相同。注意：不支持 'visible'，请使用全局的 visible | [props](https://ant.design/components/drawer-cn/#API) | - |\n| title | 抽屉的标题 | `ReactNode` | - |\n| width | 抽屉的宽度（受控属性，使用时权重高于 resize） | `Number` | - |\n| onFinish | 提交数据时触发，如果返回一个 true。会关掉抽屉，如果配置了 `destroyOnClose` 还会重置表单。 | `async (values)=>boolean` | - |\n| submitTimeout | 提交数据时，禁用取消按钮的超时时间（毫秒）。 | `Number` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 用于触发 Modal 打开的 dom，一般是 button\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的resize属性如何使用？",
    "md": "参数: resize\n说明: 是否调整大小\n类型: `{onResize,maxWidth,minWidth}` | `Boolean`\n默认值: { onResize: () => { }, maxWidth: window.innerWidth \\* 0.8, minWidth: 300}\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: open 改变时触发\n类型: `(open:boolean)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的drawerProps属性如何使用？",
    "md": "参数: drawerProps\n说明: Drawer 的 props，使用方式与 [antd](https://ant.design/components/drawer-cn/) 相同。注意：不支持 'visible'，请使用全局的 visible\n类型: [props](https://ant.design/components/drawer-cn/#API)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的title属性如何使用？",
    "md": "参数: title\n说明: 抽屉的标题\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的width属性如何使用？",
    "md": "参数: width\n说明: 抽屉的宽度（受控属性，使用时权重高于 resize）\n类型: `Number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的onFinish属性如何使用？",
    "md": "参数: onFinish\n说明: 提交数据时触发，如果返回一个 true。会关掉抽屉，如果配置了 `destroyOnClose` 还会重置表单。\n类型: `async (values)=>boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - DrawerForm的submitTimeout属性如何使用？",
    "md": "参数: submitTimeout\n说明: 提交数据时，禁用取消按钮的超时时间（毫秒）。\n类型: `Number`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - LoginForm\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| logo | logo 的配置，支持 ReactNode 和 string | `ReactNode \\| url` | - |\n| title | 标题，可以配置为空 | `ReactNode` | - |\n| subTitle | 二级标题，可以配置为空 | `ReactNode` | - |\n| actions | 自定义额外的登录功能 | `ReactNode` | - |\n| message | form 顶部的一个提示配置，可以配置一些错误的提示信息 | `ReactNode` | - |\n#### ProForm - LoginFormPage\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| logo | logo 的配置，支持 ReactNode 和 string | `ReactNode \\| url` | - |\n| title | 标题，可以配置为空 | `ReactNode` | - |\n| subTitle | 二级标题，可以配置为空 | `ReactNode` | - |\n| actions | 自定义额外的登录功能 | `ReactNode` | - |\n| message | form 顶部的一个提示配置，可以配置一些错误的提示信息 | `ReactNode` | - |\n| backgroundImageUrl | 整个区域的背景图片配置，手机端不会展示 | `url` | - |\n| activityConfig | 活动的配置，包含 title，subTitle，action，分别代表标题，次标题和行动按钮，也可配置 style 来控制区域的样式 | `{title,subTitle,action,style}` | - |\n"
  },
  {
    "title": "pro-components 的 ProForm - LoginForm 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| logo | logo 的配置，支持 ReactNode 和 string | `ReactNode \\| url` | - |\n| title | 标题，可以配置为空 | `ReactNode` | - |\n| subTitle | 二级标题，可以配置为空 | `ReactNode` | - |\n| actions | 自定义额外的登录功能 | `ReactNode` | - |\n| message | form 顶部的一个提示配置，可以配置一些错误的提示信息 | `ReactNode` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginForm的logo属性如何使用？",
    "md": "参数: logo\n说明: logo 的配置，支持 ReactNode 和 string\n类型: `ReactNode \\| url`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginForm的title属性如何使用？",
    "md": "参数: title\n说明: 标题，可以配置为空\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginForm的subTitle属性如何使用？",
    "md": "参数: subTitle\n说明: 二级标题，可以配置为空\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginForm的actions属性如何使用？",
    "md": "参数: actions\n说明: 自定义额外的登录功能\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginForm的message属性如何使用？",
    "md": "参数: message\n说明: form 顶部的一个提示配置，可以配置一些错误的提示信息\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - LoginFormPage 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| logo | logo 的配置，支持 ReactNode 和 string | `ReactNode \\| url` | - |\n| title | 标题，可以配置为空 | `ReactNode` | - |\n| subTitle | 二级标题，可以配置为空 | `ReactNode` | - |\n| actions | 自定义额外的登录功能 | `ReactNode` | - |\n| message | form 顶部的一个提示配置，可以配置一些错误的提示信息 | `ReactNode` | - |\n| backgroundImageUrl | 整个区域的背景图片配置，手机端不会展示 | `url` | - |\n| activityConfig | 活动的配置，包含 title，subTitle，action，分别代表标题，次标题和行动按钮，也可配置 style 来控制区域的样式 | `{title,subTitle,action,style}` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginFormPage的logo属性如何使用？",
    "md": "参数: logo\n说明: logo 的配置，支持 ReactNode 和 string\n类型: `ReactNode \\| url`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginFormPage的title属性如何使用？",
    "md": "参数: title\n说明: 标题，可以配置为空\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginFormPage的subTitle属性如何使用？",
    "md": "参数: subTitle\n说明: 二级标题，可以配置为空\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginFormPage的actions属性如何使用？",
    "md": "参数: actions\n说明: 自定义额外的登录功能\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginFormPage的message属性如何使用？",
    "md": "参数: message\n说明: form 顶部的一个提示配置，可以配置一些错误的提示信息\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginFormPage的backgroundImageUrl属性如何使用？",
    "md": "参数: backgroundImageUrl\n说明: 整个区域的背景图片配置，手机端不会展示\n类型: `url`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - LoginFormPage的activityConfig属性如何使用？",
    "md": "参数: activityConfig\n说明: 活动的配置，包含 title，subTitle，action，分别代表标题，次标题和行动按钮，也可配置 style 来控制区域的样式\n类型: `{title,subTitle,action,style}`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - ProFormList API\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| itemRender | 自定义 Item，可以用来将 action 放到别的地方 | `(doms,listMeta)=> ReactNode` | - |\n| creatorRecord | 新建一行的默认值 | `Record<string, any> \\| () => Record<string, any>` | - |\n| creatorButtonProps | 新建一行按钮的配置 | `buttonProps & { creatorButtonText:string,position:\"top\"\\|\"bottom\" }` | `{creatorButtonText:\"新建一行\"}` |\n| label | 与 From.Item 相同 | `ReactNode` | - |\n| name | list 在 form 中的值，必填项 | `NamePath` | - |\n| alwaysShowItemLabel | Item 中总是展示 label | `boolean` | - |\n| actionRef | 当前 List 的自带操作，可以增删改查列表项 | `{add,remove,move,get}` | - |\n| actionGuard | FormItem 的拦截器，包含删除和添加的拦截，可以用 actionRef 拿到当前行的值 | `{beforeAddRow:(index)=>boolean,beforeRemoveRow:(index)=>boolean}` | - |\n| min | 最少条目，删除时如果当前数据条目少于该数则无法删除 | `number` | - |\n| max | 最多条目，新增或复制时如果当前数据条目多于该数则无法新增或复制 | `number` | - |\n| copyIconProps | 复制按钮的配置，false 可以取消 | `{ Icon?: React.FC<any>; tooltipText?: string; } \\| false` | - |\n| deleteIconProps | 删除按钮的配置，false 可以取消 | `{ Icon?: React.FC<any>; tooltipText?: string; } \\| false` | - |\n| actionRender | 自定义操作按钮 | `(field,action,defaultActionDom,count)=>React.ReactNode[]` | - |\n| onAfterAdd | 新增数据后的钩子 | `(defaultValue: StoreValue, insertIndex: number, count: number) => void` | - |\n| onAfterRemove | 删除数据后的钩子 | `(index: number, count: number) => void` | - |\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormList API 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| itemRender | 自定义 Item，可以用来将 action 放到别的地方 | `(doms,listMeta)=> ReactNode` | - |\n| creatorRecord | 新建一行的默认值 | `Record<string, any> \\| () => Record<string, any>` | - |\n| creatorButtonProps | 新建一行按钮的配置 | `buttonProps & { creatorButtonText:string,position:\"top\"\\|\"bottom\" }` | `{creatorButtonText:\"新建一行\"}` |\n| label | 与 From.Item 相同 | `ReactNode` | - |\n| name | list 在 form 中的值，必填项 | `NamePath` | - |\n| alwaysShowItemLabel | Item 中总是展示 label | `boolean` | - |\n| actionRef | 当前 List 的自带操作，可以增删改查列表项 | `{add,remove,move,get}` | - |\n| actionGuard | FormItem 的拦截器，包含删除和添加的拦截，可以用 actionRef 拿到当前行的值 | `{beforeAddRow:(index)=>boolean,beforeRemoveRow:(index)=>boolean}` | - |\n| min | 最少条目，删除时如果当前数据条目少于该数则无法删除 | `number` | - |\n| max | 最多条目，新增或复制时如果当前数据条目多于该数则无法新增或复制 | `number` | - |\n| copyIconProps | 复制按钮的配置，false 可以取消 | `{ Icon?: React.FC<any>; tooltipText?: string; } \\| false` | - |\n| deleteIconProps | 删除按钮的配置，false 可以取消 | `{ Icon?: React.FC<any>; tooltipText?: string; } \\| false` | - |\n| actionRender | 自定义操作按钮 | `(field,action,defaultActionDom,count)=>React.ReactNode[]` | - |\n| onAfterAdd | 新增数据后的钩子 | `(defaultValue: StoreValue, insertIndex: number, count: number) => void` | - |\n| onAfterRemove | 删除数据后的钩子 | `(index: number, count: number) => void` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的itemRender属性如何使用？",
    "md": "参数: itemRender\n说明: 自定义 Item，可以用来将 action 放到别的地方\n类型: `(doms,listMeta)=> ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的creatorRecord属性如何使用？",
    "md": "参数: creatorRecord\n说明: 新建一行的默认值\n类型: `Record<string, any> \\| () => Record<string, any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的creatorButtonProps属性如何使用？",
    "md": "参数: creatorButtonProps\n说明: 新建一行按钮的配置\n类型: `buttonProps & { creatorButtonText:string,position:\"top\"\\|\"bottom\" }`\n默认值: `{creatorButtonText:\"新建一行\"}`\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的label属性如何使用？",
    "md": "参数: label\n说明: 与 From.Item 相同\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的name属性如何使用？",
    "md": "参数: name\n说明: list 在 form 中的值，必填项\n类型: `NamePath`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的alwaysShowItemLabel属性如何使用？",
    "md": "参数: alwaysShowItemLabel\n说明: Item 中总是展示 label\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的actionRef属性如何使用？",
    "md": "参数: actionRef\n说明: 当前 List 的自带操作，可以增删改查列表项\n类型: `{add,remove,move,get}`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的actionGuard属性如何使用？",
    "md": "参数: actionGuard\n说明: FormItem 的拦截器，包含删除和添加的拦截，可以用 actionRef 拿到当前行的值\n类型: `{beforeAddRow:(index)=>boolean,beforeRemoveRow:(index)=>boolean}`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的min属性如何使用？",
    "md": "参数: min\n说明: 最少条目，删除时如果当前数据条目少于该数则无法删除\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的max属性如何使用？",
    "md": "参数: max\n说明: 最多条目，新增或复制时如果当前数据条目多于该数则无法新增或复制\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的copyIconProps属性如何使用？",
    "md": "参数: copyIconProps\n说明: 复制按钮的配置，false 可以取消\n类型: `{ Icon?: React.FC<any>; tooltipText?: string; } \\| false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的deleteIconProps属性如何使用？",
    "md": "参数: deleteIconProps\n说明: 删除按钮的配置，false 可以取消\n类型: `{ Icon?: React.FC<any>; tooltipText?: string; } \\| false`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的actionRender属性如何使用？",
    "md": "参数: actionRender\n说明: 自定义操作按钮\n类型: `(field,action,defaultActionDom,count)=>React.ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的onAfterAdd属性如何使用？",
    "md": "参数: onAfterAdd\n说明: 新增数据后的钩子\n类型: `(defaultValue: StoreValue, insertIndex: number, count: number) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormList API的onAfterRemove属性如何使用？",
    "md": "参数: onAfterRemove\n说明: 删除数据后的钩子\n类型: `(index: number, count: number) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Form 有哪些配置？",
    "md": "#### ProForm - 组件列表\n| 组件 | 使用场景 |\n| --- | --- |\n| [ProFormText](https://ant.design/components/input-cn/#Input.Password) | 用于输入各类文本 |\n| [ProFormDigit](https://ant.design/components/input-number-cn/) | 用于输入数字，它自带了一个格式化 (保留 2 位小数，最小值为 0)，有需要你可以关掉它。 |\n| [ProFormText.Password](https://ant.design/components/input-cn/#Input.Password) | 用于输入密码 |\n| [ProFormTextArea](https://ant.design/components/input-cn/#Input.Password) | 用于输入多行文本 |\n| ProFormCaptcha | 用于输入验证码， 一般需要与发送验证码接口一起使用 |\n| [ProFormDatePicker](https://ant.design/components/date-picker-cn/) | 日期选择器用于输入日期 |\n| [ProFormDateTimePicker](https://ant.design/components/date-picker-cn/) | 日期 + 时间选择器，用于输入日期和时间 |\n| [ProFormDateRangePicker](https://ant.design/components/date-picker-cn/) | 日期区间选择器用于输入一个日期区间 |\n| [ProFormDateTimeRangePicker](https://ant.design/components/date-picker-cn/) | 日期 + 时间区间选择器，用于输入一个日期 + 时间的区间 |\n| [ProFormSelect](https://ant.design/components/select-cn/) | 支持 `request` 和 `valueEnum` 两种方式来生成子项，用于从两项以上中选择一项 |\n| [ProFormTreeSelect](https://ant.design/components/tree-select-cn/) | 支持 `request` 和 `valueEnum` 两种方式来生成子项，用于从两项以上中选择一项 |\n| [ProFormCheckbox](https://ant.design/components/checkbox-cn/) | 在 Checkbox 基础上支持了 layout，也支持 `request` 和 `valueEnum` 两种方式来生成子项 |\n| [ProFormRadio.Group](https://ant.design/components/radio-cn/) | 在 Radio 基础上也支持 `request` 和 `valueEnum` 两种方式来生成子项，用于单选某项，但是可以展示出来所有选项。 |\n| [ProFormSlider](https://ant.design/components/slider-cn/) | 当用户需要在数值区间 / 自定义区间内进行选择时，可为连续或离散值。 |\n| [ProFormSwitch](https://ant.design/components/switch-cn/) | 用于输入互斥的两个选项，一般是 true 和 false |\n| [ProFormUploadButton](https://ant.design/components/upload-cn/) | 按钮样式的上传文件 |\n| [ProFormUploadDragger](https://ant.design/components/upload-cn/) | 区域的上传文件，一般用于突出上传文件的表单中 |\n| ProFormMoney | 通用金额输入组件 |\n| [ProFormSegmented](https://ant.design/components/segmented-cn/) | 分段控制器 |\n#### ProForm - 通用的属性\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| width | Field 的长度，我们归纳了常用的 Field 长度以及适合的场景，支持了一些枚举 \"xs\" , \"sm\" , \"md\" ,\"lg\" , \"xl\" | `number \\| \"xs\" \\| \"sm\" \\| \"md\" \\| \"lg\" \\| \"xl\"` | - |\n| rowProps | [RowProps](https://ant.design/components/grid/#Row) | 开启 `grid` 模式时传递给 Row, 仅在`ProFormGroup`, `ProFormList`, `ProFormFieldSet` 中有效 | { gutter: 8 } |\n| colProps | [ColProps](https://ant.design/components/grid/#Col) | 开启 `grid` 模式时传递给 Col | { xs: 24 } |\n| tooltip | 会在 label 旁增加一个 icon，悬浮后展示配置的信息 | `string \\| tooltipProps` | - |\n| secondary | 是否是次要控件，只针对 LightFilter 下有效 | `boolean` | `false` |\n| allowClear | 支持清除，针对 LightFilter 下有效，主动设置情况下同时也会透传给 `fieldProps` | `boolean` | `true` |\n#### ProForm - ProFormCaptcha\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onGetCaptcha | 点击获取验证码的事件，如果配置了 phoneName 会自动注入 | `(phone)=>Promise<any>` | - |\n| onTiming | 计时数字监听 | `(count: number)=>void` | - |\n| captchaProps | 获取验证码按钮的 props，与 antd 的 props 相同 | `ButtonProps` | - |\n| countDown | 倒计时的秒数 | number | 60 |\n| captchaTextRender | 渲染计时的文案 | `(timing: boolean, count: number) => React.ReactNode` | - |\n#### ProForm - ProFormSelect\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| debounceTime | 防抖动时间，与 request 配合使用 | `number` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `SelectProps ` | - |\n#### ProForm - ProFormTreeSelect\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| debounceTime | 防抖动时间，与 request 配合使用 | `number` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `TreeSelectProps` | - |\n#### ProForm - ProFormCheckbox\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| options | 与 select 相同，根据 options 生成子节点，推荐使用。 | `string[]` | `{label:ReactNode,value:string}[]` | - |\n| layout | 配置 checkbox 的样子，支持垂直`vertical` 和 `horizontal` | `horizontal` | `vertical` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `CheckboxProps` | - |\n#### ProForm - ProFormRadio.Group\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| options | 与 select 相同，根据 options 生成子节点，推荐使用。 | `string[]` | `{label:ReactNode,value:string}[]` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| radioType | 设置是按钮模式还是 radio 模式 | `default`|`button` | `default` |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `RadioProps` | - |\n#### ProForm - ProFormCascader\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| options | 与 cascader 相同，根据 options 生成子节点，推荐使用。 | `string[]` | `{label:ReactNode,value:string}[]` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `CascaderProps` | - |\n#### ProForm - ProFormSwitch\n| 参数       | 说明              | 类型          | 默认值 |\n| ---------- | ----------------- | ------------- | ------ |\n| fieldProps | antd 组件的 props | `SwitchProps` | -      |\n#### ProForm - ProFormRate\n| 参数       | 说明              | 类型        | 默认值 |\n| ---------- | ----------------- | ----------- | ------ |\n| fieldProps | antd 组件的 props | `RateProps` | -      |\n#### ProForm - ProFormSlider\n| 参数       | 说明              | 类型          | 默认值 |\n| ---------- | ----------------- | ------------- | ------ |\n| fieldProps | antd 组件的 props | `SliderProps` | -      |\n#### ProForm - ProFormUploadDragger\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| icon | Dragger 的图标 | `ReactNode` | InboxOutlined |\n| title | Dragger 的标题 | `ReactNode` | ' 单击或拖动文件到此区域进行上传' |\n| description | Dragger 的描述 | `ReactNode` | ' 支持单次或批量上传' |\n#### ProForm - ProFormUploadButton\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| icon | Button 的图标 | `ReactNode` | UploadOutlined |\n| title | Button 的标题 | `ReactNode` | 单击上传 |\n| max | 最大上传数量，超过最大数量就会隐藏上传按钮 | `number` | - |\n#### ProForm - ProFormMoney\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| locale | 单独设置的国际化地区值，根据不同的地区显示不同的货币符号，支持地区详见下面的地区目录 | `string` | `zh-Hans-CN` |\n| customSymbol | 自定义金额符号 | `string` | - |\n| numberPopoverRender | 自定义 Popover 的值，false 可以关闭他 | `((props: InputNumberProps, defaultText: string) => React.ReactNode)`| `boolean` | false |\n| numberFormatOptions | NumberFormat 的配置，文档可以查看 [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) | NumberFormatOptions | - |\n| min | 最小值 | `number` | - |\n| max | 最大值 | `number` | - |\n#### ProForm - ProFormSegmented\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| debounceTime | 防抖动时间，与 request 配合使用 | `number` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `Segmented` | - |\n"
  },
  {
    "title": "pro-components 的 ProForm - 组件列表 有哪些配置？",
    "md": "| 组件 | 使用场景 |\n| --- | --- |\n| [ProFormText](https://ant.design/components/input-cn/#Input.Password) | 用于输入各类文本 |\n| [ProFormDigit](https://ant.design/components/input-number-cn/) | 用于输入数字，它自带了一个格式化 (保留 2 位小数，最小值为 0)，有需要你可以关掉它。 |\n| [ProFormText.Password](https://ant.design/components/input-cn/#Input.Password) | 用于输入密码 |\n| [ProFormTextArea](https://ant.design/components/input-cn/#Input.Password) | 用于输入多行文本 |\n| ProFormCaptcha | 用于输入验证码， 一般需要与发送验证码接口一起使用 |\n| [ProFormDatePicker](https://ant.design/components/date-picker-cn/) | 日期选择器用于输入日期 |\n| [ProFormDateTimePicker](https://ant.design/components/date-picker-cn/) | 日期 + 时间选择器，用于输入日期和时间 |\n| [ProFormDateRangePicker](https://ant.design/components/date-picker-cn/) | 日期区间选择器用于输入一个日期区间 |\n| [ProFormDateTimeRangePicker](https://ant.design/components/date-picker-cn/) | 日期 + 时间区间选择器，用于输入一个日期 + 时间的区间 |\n| [ProFormSelect](https://ant.design/components/select-cn/) | 支持 `request` 和 `valueEnum` 两种方式来生成子项，用于从两项以上中选择一项 |\n| [ProFormTreeSelect](https://ant.design/components/tree-select-cn/) | 支持 `request` 和 `valueEnum` 两种方式来生成子项，用于从两项以上中选择一项 |\n| [ProFormCheckbox](https://ant.design/components/checkbox-cn/) | 在 Checkbox 基础上支持了 layout，也支持 `request` 和 `valueEnum` 两种方式来生成子项 |\n| [ProFormRadio.Group](https://ant.design/components/radio-cn/) | 在 Radio 基础上也支持 `request` 和 `valueEnum` 两种方式来生成子项，用于单选某项，但是可以展示出来所有选项。 |\n| [ProFormSlider](https://ant.design/components/slider-cn/) | 当用户需要在数值区间 / 自定义区间内进行选择时，可为连续或离散值。 |\n| [ProFormSwitch](https://ant.design/components/switch-cn/) | 用于输入互斥的两个选项，一般是 true 和 false |\n| [ProFormUploadButton](https://ant.design/components/upload-cn/) | 按钮样式的上传文件 |\n| [ProFormUploadDragger](https://ant.design/components/upload-cn/) | 区域的上传文件，一般用于突出上传文件的表单中 |\n| ProFormMoney | 通用金额输入组件 |\n| [ProFormSegmented](https://ant.design/components/segmented-cn/) | 分段控制器 |\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormText](https://ant.design/components/input-cn/#Input.Password)属性如何使用？",
    "md": "组件: [ProFormText](https://ant.design/components/input-cn/#Input.Password)\n使用场景: 用于输入各类文本\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormDigit](https://ant.design/components/input-number-cn/)属性如何使用？",
    "md": "组件: [ProFormDigit](https://ant.design/components/input-number-cn/)\n使用场景: 用于输入数字，它自带了一个格式化 (保留 2 位小数，最小值为 0)，有需要你可以关掉它。\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormText.Password](https://ant.design/components/input-cn/#Input.Password)属性如何使用？",
    "md": "组件: [ProFormText.Password](https://ant.design/components/input-cn/#Input.Password)\n使用场景: 用于输入密码\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormTextArea](https://ant.design/components/input-cn/#Input.Password)属性如何使用？",
    "md": "组件: [ProFormTextArea](https://ant.design/components/input-cn/#Input.Password)\n使用场景: 用于输入多行文本\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的ProFormCaptcha属性如何使用？",
    "md": "组件: ProFormCaptcha\n使用场景: 用于输入验证码， 一般需要与发送验证码接口一起使用\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormDatePicker](https://ant.design/components/date-picker-cn/)属性如何使用？",
    "md": "组件: [ProFormDatePicker](https://ant.design/components/date-picker-cn/)\n使用场景: 日期选择器用于输入日期\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormDateTimePicker](https://ant.design/components/date-picker-cn/)属性如何使用？",
    "md": "组件: [ProFormDateTimePicker](https://ant.design/components/date-picker-cn/)\n使用场景: 日期 + 时间选择器，用于输入日期和时间\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormDateRangePicker](https://ant.design/components/date-picker-cn/)属性如何使用？",
    "md": "组件: [ProFormDateRangePicker](https://ant.design/components/date-picker-cn/)\n使用场景: 日期区间选择器用于输入一个日期区间\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormDateTimeRangePicker](https://ant.design/components/date-picker-cn/)属性如何使用？",
    "md": "组件: [ProFormDateTimeRangePicker](https://ant.design/components/date-picker-cn/)\n使用场景: 日期 + 时间区间选择器，用于输入一个日期 + 时间的区间\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormSelect](https://ant.design/components/select-cn/)属性如何使用？",
    "md": "组件: [ProFormSelect](https://ant.design/components/select-cn/)\n使用场景: 支持 `request` 和 `valueEnum` 两种方式来生成子项，用于从两项以上中选择一项\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormTreeSelect](https://ant.design/components/tree-select-cn/)属性如何使用？",
    "md": "组件: [ProFormTreeSelect](https://ant.design/components/tree-select-cn/)\n使用场景: 支持 `request` 和 `valueEnum` 两种方式来生成子项，用于从两项以上中选择一项\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormCheckbox](https://ant.design/components/checkbox-cn/)属性如何使用？",
    "md": "组件: [ProFormCheckbox](https://ant.design/components/checkbox-cn/)\n使用场景: 在 Checkbox 基础上支持了 layout，也支持 `request` 和 `valueEnum` 两种方式来生成子项\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormRadio.Group](https://ant.design/components/radio-cn/)属性如何使用？",
    "md": "组件: [ProFormRadio.Group](https://ant.design/components/radio-cn/)\n使用场景: 在 Radio 基础上也支持 `request` 和 `valueEnum` 两种方式来生成子项，用于单选某项，但是可以展示出来所有选项。\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormSlider](https://ant.design/components/slider-cn/)属性如何使用？",
    "md": "组件: [ProFormSlider](https://ant.design/components/slider-cn/)\n使用场景: 当用户需要在数值区间 / 自定义区间内进行选择时，可为连续或离散值。\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormSwitch](https://ant.design/components/switch-cn/)属性如何使用？",
    "md": "组件: [ProFormSwitch](https://ant.design/components/switch-cn/)\n使用场景: 用于输入互斥的两个选项，一般是 true 和 false\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormUploadButton](https://ant.design/components/upload-cn/)属性如何使用？",
    "md": "组件: [ProFormUploadButton](https://ant.design/components/upload-cn/)\n使用场景: 按钮样式的上传文件\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormUploadDragger](https://ant.design/components/upload-cn/)属性如何使用？",
    "md": "组件: [ProFormUploadDragger](https://ant.design/components/upload-cn/)\n使用场景: 区域的上传文件，一般用于突出上传文件的表单中\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的ProFormMoney属性如何使用？",
    "md": "组件: ProFormMoney\n使用场景: 通用金额输入组件\n"
  },
  {
    "title": "pro-components 中 ProForm - 组件列表的[ProFormSegmented](https://ant.design/components/segmented-cn/)属性如何使用？",
    "md": "组件: [ProFormSegmented](https://ant.design/components/segmented-cn/)\n使用场景: 分段控制器\n"
  },
  {
    "title": "pro-components 的 ProForm - 通用的属性 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| width | Field 的长度，我们归纳了常用的 Field 长度以及适合的场景，支持了一些枚举 \"xs\" , \"sm\" , \"md\" ,\"lg\" , \"xl\" | `number \\| \"xs\" \\| \"sm\" \\| \"md\" \\| \"lg\" \\| \"xl\"` | - |\n| rowProps | [RowProps](https://ant.design/components/grid/#Row) | 开启 `grid` 模式时传递给 Row, 仅在`ProFormGroup`, `ProFormList`, `ProFormFieldSet` 中有效 | { gutter: 8 } |\n| colProps | [ColProps](https://ant.design/components/grid/#Col) | 开启 `grid` 模式时传递给 Col | { xs: 24 } |\n| tooltip | 会在 label 旁增加一个 icon，悬浮后展示配置的信息 | `string \\| tooltipProps` | - |\n| secondary | 是否是次要控件，只针对 LightFilter 下有效 | `boolean` | `false` |\n| allowClear | 支持清除，针对 LightFilter 下有效，主动设置情况下同时也会透传给 `fieldProps` | `boolean` | `true` |\n"
  },
  {
    "title": "pro-components 中 ProForm - 通用的属性的width属性如何使用？",
    "md": "参数: width\n说明: Field 的长度，我们归纳了常用的 Field 长度以及适合的场景，支持了一些枚举 \"xs\" , \"sm\" , \"md\" ,\"lg\" , \"xl\"\n类型: `number \\| \"xs\" \\| \"sm\" \\| \"md\" \\| \"lg\" \\| \"xl\"`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - 通用的属性的rowProps属性如何使用？",
    "md": "参数: rowProps\n说明: [RowProps](https://ant.design/components/grid/#Row)\n类型: 开启 `grid` 模式时传递给 Row, 仅在`ProFormGroup`, `ProFormList`, `ProFormFieldSet` 中有效\n默认值: { gutter: 8 }\n"
  },
  {
    "title": "pro-components 中 ProForm - 通用的属性的colProps属性如何使用？",
    "md": "参数: colProps\n说明: [ColProps](https://ant.design/components/grid/#Col)\n类型: 开启 `grid` 模式时传递给 Col\n默认值: { xs: 24 }\n"
  },
  {
    "title": "pro-components 中 ProForm - 通用的属性的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 会在 label 旁增加一个 icon，悬浮后展示配置的信息\n类型: `string \\| tooltipProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - 通用的属性的secondary属性如何使用？",
    "md": "参数: secondary\n说明: 是否是次要控件，只针对 LightFilter 下有效\n类型: `boolean`\n默认值: `false`\n"
  },
  {
    "title": "pro-components 中 ProForm - 通用的属性的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 支持清除，针对 LightFilter 下有效，主动设置情况下同时也会透传给 `fieldProps`\n类型: `boolean`\n默认值: `true`\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormCaptcha 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onGetCaptcha | 点击获取验证码的事件，如果配置了 phoneName 会自动注入 | `(phone)=>Promise<any>` | - |\n| onTiming | 计时数字监听 | `(count: number)=>void` | - |\n| captchaProps | 获取验证码按钮的 props，与 antd 的 props 相同 | `ButtonProps` | - |\n| countDown | 倒计时的秒数 | number | 60 |\n| captchaTextRender | 渲染计时的文案 | `(timing: boolean, count: number) => React.ReactNode` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCaptcha的onGetCaptcha属性如何使用？",
    "md": "参数: onGetCaptcha\n说明: 点击获取验证码的事件，如果配置了 phoneName 会自动注入\n类型: `(phone)=>Promise<any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCaptcha的onTiming属性如何使用？",
    "md": "参数: onTiming\n说明: 计时数字监听\n类型: `(count: number)=>void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCaptcha的captchaProps属性如何使用？",
    "md": "参数: captchaProps\n说明: 获取验证码按钮的 props，与 antd 的 props 相同\n类型: `ButtonProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCaptcha的countDown属性如何使用？",
    "md": "参数: countDown\n说明: 倒计时的秒数\n类型: number\n默认值: 60\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCaptcha的captchaTextRender属性如何使用？",
    "md": "参数: captchaTextRender\n说明: 渲染计时的文案\n类型: `(timing: boolean, count: number) => React.ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormSelect 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| debounceTime | 防抖动时间，与 request 配合使用 | `number` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `SelectProps ` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSelect的valueEnum属性如何使用？",
    "md": "参数: valueEnum\n说明: 当前列值的枚举 [valueEnum](/components/table#valueenum)\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSelect的request属性如何使用？",
    "md": "参数: request\n说明: 从网络请求枚举数据\n类型: `()=>Promise<{label,value}>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSelect的debounceTime属性如何使用？",
    "md": "参数: debounceTime\n说明: 防抖动时间，与 request 配合使用\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSelect的params属性如何使用？",
    "md": "参数: params\n说明: 发起网络请求的参数，与 request 配合使用\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSelect的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `SelectProps `\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormTreeSelect 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| debounceTime | 防抖动时间，与 request 配合使用 | `number` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `TreeSelectProps` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormTreeSelect的valueEnum属性如何使用？",
    "md": "参数: valueEnum\n说明: 当前列值的枚举 [valueEnum](/components/table#valueenum)\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormTreeSelect的request属性如何使用？",
    "md": "参数: request\n说明: 从网络请求枚举数据\n类型: `()=>Promise<{label,value}>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormTreeSelect的debounceTime属性如何使用？",
    "md": "参数: debounceTime\n说明: 防抖动时间，与 request 配合使用\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormTreeSelect的params属性如何使用？",
    "md": "参数: params\n说明: 发起网络请求的参数，与 request 配合使用\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormTreeSelect的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `TreeSelectProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormCheckbox 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| options | 与 select 相同，根据 options 生成子节点，推荐使用。 | `string[]` | `{label:ReactNode,value:string}[]` | - |\n| layout | 配置 checkbox 的样子，支持垂直`vertical` 和 `horizontal` | `horizontal` | `vertical` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `CheckboxProps` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCheckbox的options属性如何使用？",
    "md": "参数: options\n说明: 与 select 相同，根据 options 生成子节点，推荐使用。\n类型: `string[]` | `{label:ReactNode,value:string}[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCheckbox的layout属性如何使用？",
    "md": "参数: layout\n说明: 配置 checkbox 的样子，支持垂直`vertical` 和 `horizontal`\n类型: `horizontal` | `vertical`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCheckbox的request属性如何使用？",
    "md": "参数: request\n说明: 从网络请求枚举数据\n类型: `()=>Promise<{label,value}>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCheckbox的params属性如何使用？",
    "md": "参数: params\n说明: 发起网络请求的参数，与 request 配合使用\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCheckbox的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `CheckboxProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormRadio.Group 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| options | 与 select 相同，根据 options 生成子节点，推荐使用。 | `string[]` | `{label:ReactNode,value:string}[]` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| radioType | 设置是按钮模式还是 radio 模式 | `default`|`button` | `default` |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `RadioProps` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormRadio.Group的options属性如何使用？",
    "md": "参数: options\n说明: 与 select 相同，根据 options 生成子节点，推荐使用。\n类型: `string[]` | `{label:ReactNode,value:string}[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormRadio.Group的request属性如何使用？",
    "md": "参数: request\n说明: 从网络请求枚举数据\n类型: `()=>Promise<{label,value}>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormRadio.Group的radioType属性如何使用？",
    "md": "参数: radioType\n说明: 设置是按钮模式还是 radio 模式\n类型: `default`|`button`\n默认值: `default`\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormRadio.Group的params属性如何使用？",
    "md": "参数: params\n说明: 发起网络请求的参数，与 request 配合使用\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormRadio.Group的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `RadioProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormCascader 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| options | 与 cascader 相同，根据 options 生成子节点，推荐使用。 | `string[]` | `{label:ReactNode,value:string}[]` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `CascaderProps` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCascader的options属性如何使用？",
    "md": "参数: options\n说明: 与 cascader 相同，根据 options 生成子节点，推荐使用。\n类型: `string[]` | `{label:ReactNode,value:string}[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCascader的request属性如何使用？",
    "md": "参数: request\n说明: 从网络请求枚举数据\n类型: `()=>Promise<{label,value}>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCascader的params属性如何使用？",
    "md": "参数: params\n说明: 发起网络请求的参数，与 request 配合使用\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormCascader的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `CascaderProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormSwitch 有哪些配置？",
    "md": "| 参数       | 说明              | 类型          | 默认值 |\n| ---------- | ----------------- | ------------- | ------ |\n| fieldProps | antd 组件的 props | `SwitchProps` | -      |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSwitch的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `SwitchProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormRate 有哪些配置？",
    "md": "| 参数       | 说明              | 类型        | 默认值 |\n| ---------- | ----------------- | ----------- | ------ |\n| fieldProps | antd 组件的 props | `RateProps` | -      |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormRate的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `RateProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormSlider 有哪些配置？",
    "md": "| 参数       | 说明              | 类型          | 默认值 |\n| ---------- | ----------------- | ------------- | ------ |\n| fieldProps | antd 组件的 props | `SliderProps` | -      |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSlider的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `SliderProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormUploadDragger 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| icon | Dragger 的图标 | `ReactNode` | InboxOutlined |\n| title | Dragger 的标题 | `ReactNode` | ' 单击或拖动文件到此区域进行上传' |\n| description | Dragger 的描述 | `ReactNode` | ' 支持单次或批量上传' |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormUploadDragger的icon属性如何使用？",
    "md": "参数: icon\n说明: Dragger 的图标\n类型: `ReactNode`\n默认值: InboxOutlined\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormUploadDragger的title属性如何使用？",
    "md": "参数: title\n说明: Dragger 的标题\n类型: `ReactNode`\n默认值: ' 单击或拖动文件到此区域进行上传'\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormUploadDragger的description属性如何使用？",
    "md": "参数: description\n说明: Dragger 的描述\n类型: `ReactNode`\n默认值: ' 支持单次或批量上传'\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormUploadButton 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| icon | Button 的图标 | `ReactNode` | UploadOutlined |\n| title | Button 的标题 | `ReactNode` | 单击上传 |\n| max | 最大上传数量，超过最大数量就会隐藏上传按钮 | `number` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormUploadButton的icon属性如何使用？",
    "md": "参数: icon\n说明: Button 的图标\n类型: `ReactNode`\n默认值: UploadOutlined\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormUploadButton的title属性如何使用？",
    "md": "参数: title\n说明: Button 的标题\n类型: `ReactNode`\n默认值: 单击上传\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormUploadButton的max属性如何使用？",
    "md": "参数: max\n说明: 最大上传数量，超过最大数量就会隐藏上传按钮\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormMoney 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| locale | 单独设置的国际化地区值，根据不同的地区显示不同的货币符号，支持地区详见下面的地区目录 | `string` | `zh-Hans-CN` |\n| customSymbol | 自定义金额符号 | `string` | - |\n| numberPopoverRender | 自定义 Popover 的值，false 可以关闭他 | `((props: InputNumberProps, defaultText: string) => React.ReactNode)`| `boolean` | false |\n| numberFormatOptions | NumberFormat 的配置，文档可以查看 [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) | NumberFormatOptions | - |\n| min | 最小值 | `number` | - |\n| max | 最大值 | `number` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormMoney的locale属性如何使用？",
    "md": "参数: locale\n说明: 单独设置的国际化地区值，根据不同的地区显示不同的货币符号，支持地区详见下面的地区目录\n类型: `string`\n默认值: `zh-Hans-CN`\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormMoney的customSymbol属性如何使用？",
    "md": "参数: customSymbol\n说明: 自定义金额符号\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormMoney的numberPopoverRender属性如何使用？",
    "md": "参数: numberPopoverRender\n说明: 自定义 Popover 的值，false 可以关闭他\n类型: `((props: InputNumberProps, defaultText: string) => React.ReactNode)`| `boolean`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormMoney的numberFormatOptions属性如何使用？",
    "md": "参数: numberFormatOptions\n说明: NumberFormat 的配置，文档可以查看 [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat)\n类型: NumberFormatOptions\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormMoney的min属性如何使用？",
    "md": "参数: min\n说明: 最小值\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormMoney的max属性如何使用？",
    "md": "参数: max\n说明: 最大值\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProForm - ProFormSegmented 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{label,value}>` | - |\n| debounceTime | 防抖动时间，与 request 配合使用 | `number` | - |\n| params | 发起网络请求的参数，与 request 配合使用 | `Record` | - |\n| fieldProps | antd 组件的 props | `Segmented` | - |\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSegmented的valueEnum属性如何使用？",
    "md": "参数: valueEnum\n说明: 当前列值的枚举 [valueEnum](/components/table#valueenum)\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSegmented的request属性如何使用？",
    "md": "参数: request\n说明: 从网络请求枚举数据\n类型: `()=>Promise<{label,value}>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSegmented的debounceTime属性如何使用？",
    "md": "参数: debounceTime\n说明: 防抖动时间，与 request 配合使用\n类型: `number`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSegmented的params属性如何使用？",
    "md": "参数: params\n说明: 发起网络请求的参数，与 request 配合使用\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProForm - ProFormSegmented的fieldProps属性如何使用？",
    "md": "参数: fieldProps\n说明: antd 组件的 props\n类型: `Segmented`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Field 有哪些配置？",
    "md": "#### ProField - 参数\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| text | 需要格式化的值 | any | - |\n| valueType | 格式化的类型 | ValueType | - |\n| mode | 组件的模式 | - | - |\n| plain | 精简模式 | - | - |\n| renderFormItem | 自定义 `mode=update \\| edit` 下的 dom 表现，一般用于渲染编辑框 | - | - |\n| render | 自定义 `mode=read` 下的 dom 表现，只是单纯的表现形式 | - | - |\n"
  },
  {
    "title": "pro-components 的 ProField - 参数 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| text | 需要格式化的值 | any | - |\n| valueType | 格式化的类型 | ValueType | - |\n| mode | 组件的模式 | - | - |\n| plain | 精简模式 | - | - |\n| renderFormItem | 自定义 `mode=update \\| edit` 下的 dom 表现，一般用于渲染编辑框 | - | - |\n| render | 自定义 `mode=read` 下的 dom 表现，只是单纯的表现形式 | - | - |\n"
  },
  {
    "title": "pro-components 中 ProField - 参数的text属性如何使用？",
    "md": "参数: text\n说明: 需要格式化的值\n类型: any\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProField - 参数的valueType属性如何使用？",
    "md": "参数: valueType\n说明: 格式化的类型\n类型: ValueType\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProField - 参数的mode属性如何使用？",
    "md": "参数: mode\n说明: 组件的模式\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProField - 参数的plain属性如何使用？",
    "md": "参数: plain\n说明: 精简模式\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProField - 参数的renderFormItem属性如何使用？",
    "md": "参数: renderFormItem\n说明: 自定义 `mode=update \\| edit` 下的 dom 表现，一般用于渲染编辑框\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProField - 参数的render属性如何使用？",
    "md": "参数: render\n说明: 自定义 `mode=read` 下的 dom 表现，只是单纯的表现形式\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Descriptions 有哪些配置？",
    "md": "#### ProDescriptions - ProDescriptions\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 描述列表的标题，显示在最顶部 | `ReactNode` | - |\n| tooltip | 内容的补充描述，hover 后显示 | `string` | - |\n| loading | 展示一个加载的骨架屏，骨架屏和 dom 不会一一对应 | `boolean` | - |\n| extra | 描述列表的操作区域，显示在右上方 | `string` | `ReactNode` | - |\n| bordered | 是否展示边框 | boolean | false |\n| column | 一行的 `ProDescriptionsItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 1, sm: 2, md: 3}` | number | 3 |\n| size | 设置列表的大小。可以设置为 `middle` 、`small`，或不填（只有设置 `bordered={true}` 生效） | `default` | `middle` | `small` | - |\n| layout | 描述布局 | `horizontal` | `vertical` | `horizontal` |\n| colon | 配置 `ProDescriptions.Item` 的 `colon` 的默认值 | boolean | true |\n| request | 请求数据，不设置 columns 时 ProDescriptions.Item 需设置对应的 dataIndex | - | - |\n| onRequestError | 处理 request 的错误，默认会直接抛出错误 | - | - |\n| columns | 列定义，与 request 配合使用 [columns](/components/table#columns) | - | - |\n| editable | 编辑的相关配置 | [EditableConfig](#editable-编辑配置) | - |\n#### ProDescriptions - editable 编辑配置\n| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| form | 可编辑表格的 form 实例，使用 `Form.useForm` 生成后使用 | `FormInstance` | - |\n| formProps | 可以配置 form 的属性，但是不支持 onFinish | [`FormProps`](https://procomponents.ant.design/components/form#proform) | - |\n| editableKeys | 正在编辑的行，受控属性。 默认 `key` 会使用 `rowKey` 的配置，如果没有配置会使用 `index`，建议使用 rowKey | `Key[]` | - |\n| onChange | 行数据被修改的时候触发 | `(editableKeys: Key[], editableRows: T[]) => void` | - |\n| onSave | 保存一行的时候触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| saveText | 保存一行的文字 | `React.ReactNode` | `保存` |\n| onDelete | 删除一行的时候触发 | `(key: Key, row: T) => Promise<any>` | - |\n| deleteText | 删除一行的文字 | `React.ReactNode` | `删除` |\n| onCancel | 取消编辑一行时触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| cancelText | 取消编辑一行的文字 | `React.ReactNode` | `取消` |\n| actionRender | 自定义编辑模式的操作栏 | `(row: T, config: ActionRenderConfig,defaultDom) => ReactNode[]` | - |\n| deletePopconfirmMessage | 删除时弹出的确认框提示消息 | `ReactNode` | `删除此项？` |\n| onlyOneLineEditorAlertMessage | 只能编辑一行的的提示 | `ReactNode` | `只能同时编辑一行` |\n| onlyAddOneLineAlertMessage | 只能同时新增一行的提示 | `ReactNode` | `只能新增一行` |\n#### ProDescriptions - ProDescriptions.Item\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| label | 内容的描述 | ReactNode | - |\n| tooltip | 内容的补充描述，hover 后显示 | string | - |\n| ellipsis | 是否自动缩略 | `boolean` | - |\n| copyable | 是否支持复制 | `boolean` | - |\n| span | 包含列的数量 | number | 1 |\n| valueType | 格式化的类型 | `ValueType` | - |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{[key:string`|`number]:any}>` | - |\n| dataIndex | 返回数据的 key 与 ProDescriptions 的 request 配合使用，用于配置式的定义列表 | `React.Text` | `React.Text[]` | - |\n| editable | 在编辑表格中是否可编辑的，函数的参数和 table 的 render 一样 | `false` | `(text: any, record: T,index: number) => boolean` | true |\n"
  },
  {
    "title": "pro-components 的 ProDescriptions - ProDescriptions 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 描述列表的标题，显示在最顶部 | `ReactNode` | - |\n| tooltip | 内容的补充描述，hover 后显示 | `string` | - |\n| loading | 展示一个加载的骨架屏，骨架屏和 dom 不会一一对应 | `boolean` | - |\n| extra | 描述列表的操作区域，显示在右上方 | `string` | `ReactNode` | - |\n| bordered | 是否展示边框 | boolean | false |\n| column | 一行的 `ProDescriptionsItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 1, sm: 2, md: 3}` | number | 3 |\n| size | 设置列表的大小。可以设置为 `middle` 、`small`，或不填（只有设置 `bordered={true}` 生效） | `default` | `middle` | `small` | - |\n| layout | 描述布局 | `horizontal` | `vertical` | `horizontal` |\n| colon | 配置 `ProDescriptions.Item` 的 `colon` 的默认值 | boolean | true |\n| request | 请求数据，不设置 columns 时 ProDescriptions.Item 需设置对应的 dataIndex | - | - |\n| onRequestError | 处理 request 的错误，默认会直接抛出错误 | - | - |\n| columns | 列定义，与 request 配合使用 [columns](/components/table#columns) | - | - |\n| editable | 编辑的相关配置 | [EditableConfig](#editable-编辑配置) | - |\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的title属性如何使用？",
    "md": "参数: title\n说明: 描述列表的标题，显示在最顶部\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 内容的补充描述，hover 后显示\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的loading属性如何使用？",
    "md": "参数: loading\n说明: 展示一个加载的骨架屏，骨架屏和 dom 不会一一对应\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的extra属性如何使用？",
    "md": "参数: extra\n说明: 描述列表的操作区域，显示在右上方\n类型: `string` | `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否展示边框\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的column属性如何使用？",
    "md": "参数: column\n说明: 一行的 `ProDescriptionsItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 1, sm: 2, md: 3}`\n类型: number\n默认值: 3\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的size属性如何使用？",
    "md": "参数: size\n说明: 设置列表的大小。可以设置为 `middle` 、`small`，或不填（只有设置 `bordered={true}` 生效）\n类型: `default` | `middle` | `small`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的layout属性如何使用？",
    "md": "参数: layout\n说明: 描述布局\n类型: `horizontal` | `vertical`\n默认值: `horizontal`\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的colon属性如何使用？",
    "md": "参数: colon\n说明: 配置 `ProDescriptions.Item` 的 `colon` 的默认值\n类型: boolean\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的request属性如何使用？",
    "md": "参数: request\n说明: 请求数据，不设置 columns 时 ProDescriptions.Item 需设置对应的 dataIndex\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的onRequestError属性如何使用？",
    "md": "参数: onRequestError\n说明: 处理 request 的错误，默认会直接抛出错误\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的columns属性如何使用？",
    "md": "参数: columns\n说明: 列定义，与 request 配合使用 [columns](/components/table#columns)\n类型: -\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions的editable属性如何使用？",
    "md": "参数: editable\n说明: 编辑的相关配置\n类型: [EditableConfig](#editable-编辑配置)\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProDescriptions - editable 编辑配置 有哪些配置？",
    "md": "| 属性 | 描述 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| form | 可编辑表格的 form 实例，使用 `Form.useForm` 生成后使用 | `FormInstance` | - |\n| formProps | 可以配置 form 的属性，但是不支持 onFinish | [`FormProps`](https://procomponents.ant.design/components/form#proform) | - |\n| editableKeys | 正在编辑的行，受控属性。 默认 `key` 会使用 `rowKey` 的配置，如果没有配置会使用 `index`，建议使用 rowKey | `Key[]` | - |\n| onChange | 行数据被修改的时候触发 | `(editableKeys: Key[], editableRows: T[]) => void` | - |\n| onSave | 保存一行的时候触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| saveText | 保存一行的文字 | `React.ReactNode` | `保存` |\n| onDelete | 删除一行的时候触发 | `(key: Key, row: T) => Promise<any>` | - |\n| deleteText | 删除一行的文字 | `React.ReactNode` | `删除` |\n| onCancel | 取消编辑一行时触发 | `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>` | - |\n| cancelText | 取消编辑一行的文字 | `React.ReactNode` | `取消` |\n| actionRender | 自定义编辑模式的操作栏 | `(row: T, config: ActionRenderConfig,defaultDom) => ReactNode[]` | - |\n| deletePopconfirmMessage | 删除时弹出的确认框提示消息 | `ReactNode` | `删除此项？` |\n| onlyOneLineEditorAlertMessage | 只能编辑一行的的提示 | `ReactNode` | `只能同时编辑一行` |\n| onlyAddOneLineAlertMessage | 只能同时新增一行的提示 | `ReactNode` | `只能新增一行` |\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的form属性如何使用？",
    "md": "属性: form\n描述: 可编辑表格的 form 实例，使用 `Form.useForm` 生成后使用\n类型: `FormInstance`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的formProps属性如何使用？",
    "md": "属性: formProps\n描述: 可以配置 form 的属性，但是不支持 onFinish\n类型: [`FormProps`](https://procomponents.ant.design/components/form#proform)\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的editableKeys属性如何使用？",
    "md": "属性: editableKeys\n描述: 正在编辑的行，受控属性。 默认 `key` 会使用 `rowKey` 的配置，如果没有配置会使用 `index`，建议使用 rowKey\n类型: `Key[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的onChange属性如何使用？",
    "md": "属性: onChange\n描述: 行数据被修改的时候触发\n类型: `(editableKeys: Key[], editableRows: T[]) => void`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的onSave属性如何使用？",
    "md": "属性: onSave\n描述: 保存一行的时候触发\n类型: `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的saveText属性如何使用？",
    "md": "属性: saveText\n描述: 保存一行的文字\n类型: `React.ReactNode`\n默认值: `保存`\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的onDelete属性如何使用？",
    "md": "属性: onDelete\n描述: 删除一行的时候触发\n类型: `(key: Key, row: T) => Promise<any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的deleteText属性如何使用？",
    "md": "属性: deleteText\n描述: 删除一行的文字\n类型: `React.ReactNode`\n默认值: `删除`\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的onCancel属性如何使用？",
    "md": "属性: onCancel\n描述: 取消编辑一行时触发\n类型: `(key: Key, row: T,originRow:T,newLine?:newLineConfig) => Promise<any>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的cancelText属性如何使用？",
    "md": "属性: cancelText\n描述: 取消编辑一行的文字\n类型: `React.ReactNode`\n默认值: `取消`\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的actionRender属性如何使用？",
    "md": "属性: actionRender\n描述: 自定义编辑模式的操作栏\n类型: `(row: T, config: ActionRenderConfig,defaultDom) => ReactNode[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的deletePopconfirmMessage属性如何使用？",
    "md": "属性: deletePopconfirmMessage\n描述: 删除时弹出的确认框提示消息\n类型: `ReactNode`\n默认值: `删除此项？`\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的onlyOneLineEditorAlertMessage属性如何使用？",
    "md": "属性: onlyOneLineEditorAlertMessage\n描述: 只能编辑一行的的提示\n类型: `ReactNode`\n默认值: `只能同时编辑一行`\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - editable 编辑配置的onlyAddOneLineAlertMessage属性如何使用？",
    "md": "属性: onlyAddOneLineAlertMessage\n描述: 只能同时新增一行的提示\n类型: `ReactNode`\n默认值: `只能新增一行`\n"
  },
  {
    "title": "pro-components 的 ProDescriptions - ProDescriptions.Item 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| label | 内容的描述 | ReactNode | - |\n| tooltip | 内容的补充描述，hover 后显示 | string | - |\n| ellipsis | 是否自动缩略 | `boolean` | - |\n| copyable | 是否支持复制 | `boolean` | - |\n| span | 包含列的数量 | number | 1 |\n| valueType | 格式化的类型 | `ValueType` | - |\n| valueEnum | 当前列值的枚举 [valueEnum](/components/table#valueenum) | `Record` | - |\n| request | 从网络请求枚举数据 | `()=>Promise<{[key:string`|`number]:any}>` | - |\n| dataIndex | 返回数据的 key 与 ProDescriptions 的 request 配合使用，用于配置式的定义列表 | `React.Text` | `React.Text[]` | - |\n| editable | 在编辑表格中是否可编辑的，函数的参数和 table 的 render 一样 | `false` | `(text: any, record: T,index: number) => boolean` | true |\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的label属性如何使用？",
    "md": "参数: label\n说明: 内容的描述\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 内容的补充描述，hover 后显示\n类型: string\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的ellipsis属性如何使用？",
    "md": "参数: ellipsis\n说明: 是否自动缩略\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的copyable属性如何使用？",
    "md": "参数: copyable\n说明: 是否支持复制\n类型: `boolean`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的span属性如何使用？",
    "md": "参数: span\n说明: 包含列的数量\n类型: number\n默认值: 1\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的valueType属性如何使用？",
    "md": "参数: valueType\n说明: 格式化的类型\n类型: `ValueType`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的valueEnum属性如何使用？",
    "md": "参数: valueEnum\n说明: 当前列值的枚举 [valueEnum](/components/table#valueenum)\n类型: `Record`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的request属性如何使用？",
    "md": "参数: request\n说明: 从网络请求枚举数据\n类型: `()=>Promise<{[key:string`|`number]:any}>`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: 返回数据的 key 与 ProDescriptions 的 request 配合使用，用于配置式的定义列表\n类型: `React.Text` | `React.Text[]`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProDescriptions - ProDescriptions.Item的editable属性如何使用？",
    "md": "参数: editable\n说明: 在编辑表格中是否可编辑的，函数的参数和 table 的 render 一样\n类型: `false` | `(text: any, record: T,index: number) => boolean`\n默认值: true\n"
  },
  {
    "title": "pro-components 的 Card 有哪些配置？",
    "md": "#### ProCard - ProCard\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| title | 标题 | `React.ReactNode` | - | - |\n| subTitle | 副标题 | `React.ReactNode` | - | - |\n| tooltip | 标题右侧图标 hover 提示信息 | `string` | - | - |\n| headStyle | 标题的 style 样式 | `CSSProperties` | - | - |\n| bodyStyle | 内容区的 style 样式 | `CSSProperties` | - | - |\n| extra | 右上角自定义区域 | `React.ReactNode` | - | - |\n| layout | 内容布局，支持垂直居中 | `default` | `center` | default | - |\n| loading | 加载中，支持自定义 loading 样式 | `boolean` | `ReactNode` | false | - |\n| colSpan | 栅格布局宽度，24 栅格，支持指定宽度 px 或百分比，支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`, 仅在嵌套的子卡片上设置有效。 | `number` | `string` | 24 | - |\n| gutter | 数字或使用数组形式同时设置 \\[水平间距，垂直间距], 支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}` | `number` | `array` | 0 | - |\n| split | 拆分卡片的方向 | `vertical` | `horizontal` | - | - |\n| type | 卡片类型 | `inner` | `default` | - | - |\n| size | 卡片尺寸 | `default` | `small` | - | - |\n| actions | 卡片操作组，位置在卡片底部 | `Array&lt;ReactNode>` | - | - |\n| direction | 指定 Flex 方向，仅在嵌套子卡片时有效，默认方向为 row 横向 | `column` | - | - |\n| wrap | 是否支持换行，仅在嵌套子卡片时有效 | false | - | 1.12.0 |\n| bordered | 是否有边框 | `boolean` | false | - |\n| ghost | 幽灵模式，即是否取消卡片内容区域的 padding 和 卡片的背景颜色。 | `boolean` | false | - |\n| headerBordered | 页头是否有分割线 | `boolean` | false | - |\n| collapsed | 受控属性，是否折叠 | `boolean` | false | - |\n| collapsible | 配置是否可折叠，受控时无效 | `boolean` | false | - |\n| collapsibleIconRender | 替换默认折叠图标 | `({ collapsed }: { collapsed: boolean }) => React.ReactNode` | - | - |\n| defaultCollapsed | 默认折叠，受控时无效 | `boolean` | false | - |\n| onCollapse | 收起卡片的事件，受控时无效 | `(collapsed: boolean) => void` | - | - |\n| tabs | 标签页配置 | 见下面 ProCardTabs | - | - |\n#### ProCard - ProCardTabs\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| activeKey | 当前选中项 | string | - |\n| type | 页签的基本样式，可选 `line`、`card`、`editable-card` 类型 | string | inline |\n| onChange | 回调 | `(activeKey: string) => void;` | - |\n| items | 基于 antd 拓展的页签的基本配置，必填 | `ItemsProps` | - |\n#### ProCard - ItemsProps\n| 参数      | 说明                 | 类型      | 默认值 |\n| --------- | -------------------- | --------- | ------ |\n| cardProps | ProCard 卡片属性透传 | `ProCard` | -      |\n#### ProCard - ProCard.TabPane\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| key | 对应 activeKey，用于标定是否选中和 dom 更新，一定不要重复，不然会造成表现异常 | `string` | - |\n| tab | 选项卡头显示文字 | `ReactNode` | - |\n| disabled | 不可用 | `boolean` | false |\n| cardProps | ProCard 卡片属性透传 | `ProCard` | - |\n#### ProCard - ProCard.Divider\n| 参数 | 说明     | 类型                     | 默认值 |\n| ---- | -------- | ------------------------ | ------ |\n| type | 分隔类型 | `horizontal \\| vertical` | -      |\n"
  },
  {
    "title": "pro-components 的 ProCard - ProCard 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| title | 标题 | `React.ReactNode` | - | - |\n| subTitle | 副标题 | `React.ReactNode` | - | - |\n| tooltip | 标题右侧图标 hover 提示信息 | `string` | - | - |\n| headStyle | 标题的 style 样式 | `CSSProperties` | - | - |\n| bodyStyle | 内容区的 style 样式 | `CSSProperties` | - | - |\n| extra | 右上角自定义区域 | `React.ReactNode` | - | - |\n| layout | 内容布局，支持垂直居中 | `default` | `center` | default | - |\n| loading | 加载中，支持自定义 loading 样式 | `boolean` | `ReactNode` | false | - |\n| colSpan | 栅格布局宽度，24 栅格，支持指定宽度 px 或百分比，支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`, 仅在嵌套的子卡片上设置有效。 | `number` | `string` | 24 | - |\n| gutter | 数字或使用数组形式同时设置 \\[水平间距，垂直间距], 支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}` | `number` | `array` | 0 | - |\n| split | 拆分卡片的方向 | `vertical` | `horizontal` | - | - |\n| type | 卡片类型 | `inner` | `default` | - | - |\n| size | 卡片尺寸 | `default` | `small` | - | - |\n| actions | 卡片操作组，位置在卡片底部 | `Array&lt;ReactNode>` | - | - |\n| direction | 指定 Flex 方向，仅在嵌套子卡片时有效，默认方向为 row 横向 | `column` | - | - |\n| wrap | 是否支持换行，仅在嵌套子卡片时有效 | false | - | 1.12.0 |\n| bordered | 是否有边框 | `boolean` | false | - |\n| ghost | 幽灵模式，即是否取消卡片内容区域的 padding 和 卡片的背景颜色。 | `boolean` | false | - |\n| headerBordered | 页头是否有分割线 | `boolean` | false | - |\n| collapsed | 受控属性，是否折叠 | `boolean` | false | - |\n| collapsible | 配置是否可折叠，受控时无效 | `boolean` | false | - |\n| collapsibleIconRender | 替换默认折叠图标 | `({ collapsed }: { collapsed: boolean }) => React.ReactNode` | - | - |\n| defaultCollapsed | 默认折叠，受控时无效 | `boolean` | false | - |\n| onCollapse | 收起卡片的事件，受控时无效 | `(collapsed: boolean) => void` | - | - |\n| tabs | 标签页配置 | 见下面 ProCardTabs | - | - |\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: `React.ReactNode`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的subTitle属性如何使用？",
    "md": "参数: subTitle\n说明: 副标题\n类型: `React.ReactNode`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 标题右侧图标 hover 提示信息\n类型: `string`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的headStyle属性如何使用？",
    "md": "参数: headStyle\n说明: 标题的 style 样式\n类型: `CSSProperties`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的bodyStyle属性如何使用？",
    "md": "参数: bodyStyle\n说明: 内容区的 style 样式\n类型: `CSSProperties`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的extra属性如何使用？",
    "md": "参数: extra\n说明: 右上角自定义区域\n类型: `React.ReactNode`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的layout属性如何使用？",
    "md": "参数: layout\n说明: 内容布局，支持垂直居中\n类型: `default` | `center`\n默认值: default\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的loading属性如何使用？",
    "md": "参数: loading\n说明: 加载中，支持自定义 loading 样式\n类型: `boolean` | `ReactNode`\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的colSpan属性如何使用？",
    "md": "参数: colSpan\n说明: 栅格布局宽度，24 栅格，支持指定宽度 px 或百分比，支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`, 仅在嵌套的子卡片上设置有效。\n类型: `number` | `string`\n默认值: 24\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的gutter属性如何使用？",
    "md": "参数: gutter\n说明: 数字或使用数组形式同时设置 \\[水平间距，垂直间距], 支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`\n类型: `number` | `array`\n默认值: 0\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的split属性如何使用？",
    "md": "参数: split\n说明: 拆分卡片的方向\n类型: `vertical` | `horizontal`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的type属性如何使用？",
    "md": "参数: type\n说明: 卡片类型\n类型: `inner` | `default`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的size属性如何使用？",
    "md": "参数: size\n说明: 卡片尺寸\n类型: `default` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的actions属性如何使用？",
    "md": "参数: actions\n说明: 卡片操作组，位置在卡片底部\n类型: `Array&lt;ReactNode>`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的direction属性如何使用？",
    "md": "参数: direction\n说明: 指定 Flex 方向，仅在嵌套子卡片时有效，默认方向为 row 横向\n类型: `column`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的wrap属性如何使用？",
    "md": "参数: wrap\n说明: 是否支持换行，仅在嵌套子卡片时有效\n类型: false\n默认值: -\n版本: 1.12.0\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否有边框\n类型: `boolean`\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的ghost属性如何使用？",
    "md": "参数: ghost\n说明: 幽灵模式，即是否取消卡片内容区域的 padding 和 卡片的背景颜色。\n类型: `boolean`\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的headerBordered属性如何使用？",
    "md": "参数: headerBordered\n说明: 页头是否有分割线\n类型: `boolean`\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的collapsed属性如何使用？",
    "md": "参数: collapsed\n说明: 受控属性，是否折叠\n类型: `boolean`\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的collapsible属性如何使用？",
    "md": "参数: collapsible\n说明: 配置是否可折叠，受控时无效\n类型: `boolean`\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的collapsibleIconRender属性如何使用？",
    "md": "参数: collapsibleIconRender\n说明: 替换默认折叠图标\n类型: `({ collapsed }: { collapsed: boolean }) => React.ReactNode`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的defaultCollapsed属性如何使用？",
    "md": "参数: defaultCollapsed\n说明: 默认折叠，受控时无效\n类型: `boolean`\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的onCollapse属性如何使用？",
    "md": "参数: onCollapse\n说明: 收起卡片的事件，受控时无效\n类型: `(collapsed: boolean) => void`\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard的tabs属性如何使用？",
    "md": "参数: tabs\n说明: 标签页配置\n类型: 见下面 ProCardTabs\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 的 ProCard - ProCardTabs 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| activeKey | 当前选中项 | string | - |\n| type | 页签的基本样式，可选 `line`、`card`、`editable-card` 类型 | string | inline |\n| onChange | 回调 | `(activeKey: string) => void;` | - |\n| items | 基于 antd 拓展的页签的基本配置，必填 | `ItemsProps` | - |\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCardTabs的activeKey属性如何使用？",
    "md": "参数: activeKey\n说明: 当前选中项\n类型: string\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCardTabs的type属性如何使用？",
    "md": "参数: type\n说明: 页签的基本样式，可选 `line`、`card`、`editable-card` 类型\n类型: string\n默认值: inline\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCardTabs的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 回调\n类型: `(activeKey: string) => void;`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCardTabs的items属性如何使用？",
    "md": "参数: items\n说明: 基于 antd 拓展的页签的基本配置，必填\n类型: `ItemsProps`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProCard - ItemsProps 有哪些配置？",
    "md": "| 参数      | 说明                 | 类型      | 默认值 |\n| --------- | -------------------- | --------- | ------ |\n| cardProps | ProCard 卡片属性透传 | `ProCard` | -      |\n"
  },
  {
    "title": "pro-components 中 ProCard - ItemsProps的cardProps属性如何使用？",
    "md": "参数: cardProps\n说明: ProCard 卡片属性透传\n类型: `ProCard`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProCard - ProCard.TabPane 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| key | 对应 activeKey，用于标定是否选中和 dom 更新，一定不要重复，不然会造成表现异常 | `string` | - |\n| tab | 选项卡头显示文字 | `ReactNode` | - |\n| disabled | 不可用 | `boolean` | false |\n| cardProps | ProCard 卡片属性透传 | `ProCard` | - |\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard.TabPane的key属性如何使用？",
    "md": "参数: key\n说明: 对应 activeKey，用于标定是否选中和 dom 更新，一定不要重复，不然会造成表现异常\n类型: `string`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard.TabPane的tab属性如何使用？",
    "md": "参数: tab\n说明: 选项卡头显示文字\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard.TabPane的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 不可用\n类型: `boolean`\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard.TabPane的cardProps属性如何使用？",
    "md": "参数: cardProps\n说明: ProCard 卡片属性透传\n类型: `ProCard`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProCard - ProCard.Divider 有哪些配置？",
    "md": "| 参数 | 说明     | 类型                     | 默认值 |\n| ---- | -------- | ------------------------ | ------ |\n| type | 分隔类型 | `horizontal \\| vertical` | -      |\n"
  },
  {
    "title": "pro-components 中 ProCard - ProCard.Divider的type属性如何使用？",
    "md": "参数: type\n说明: 分隔类型\n类型: `horizontal \\| vertical`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Card 有哪些配置？",
    "md": "#### ProCard - StatisticCard\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 卡片标题 | `string\\|ReactNode` | - |\n| extra | 卡片右上角的操作区域 | `string\\|ReactNode` | - |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean | false |\n| bordered | 是否有边框 | boolean | true |\n| chart | 图表卡片 | ReactNode | - |\n| statistic | 数值统计配置，布局默认为 `vertical` | 参数见下 Statistic | - |\n| chartPlacement | 图表位置，相对于 statistic 的位置 | `left \\| right \\| bottom` | - |\n| footer | 额外指标展示 | `ReactNode` | - |\n#### ProCard - Statistic\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| prefix | 设置数值的前缀 | string | ReactNode | - |\n| suffix | 设置数值的后缀 | string | ReactNode | - |\n| title | 数值的标题 | string | ReactNode | - |\n| tip | 标题提示 | string| ReactNode | - |\n| value | 数值内容 | string | number | - |\n| icon | 图标 | ReactNode | - |\n| status | 设置状态点，同 Badge 组件 | `Enum{ 'success', 'processing, 'default', 'error', 'warning' }` | - |\n| valueStyle | 设置数值的样式 | style | - |\n| description | 描述性标签 | React.ReactNode | () => React.ReactNode | - |\n| layout | 布局 | `horizontal \\| vertical \\| inline` | `inline` |\n| trend | 趋势 | `up \\| down \\|` | - |\n#### ProCard - Divider\n| 参数 | 说明     | 类型                     | 默认值 |\n| ---- | -------- | ------------------------ | ------ |\n| type | 分隔类型 | `horizontal \\| vertical` | -      |\n"
  },
  {
    "title": "pro-components 的 ProCard - StatisticCard 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| title | 卡片标题 | `string\\|ReactNode` | - |\n| extra | 卡片右上角的操作区域 | `string\\|ReactNode` | - |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean | false |\n| bordered | 是否有边框 | boolean | true |\n| chart | 图表卡片 | ReactNode | - |\n| statistic | 数值统计配置，布局默认为 `vertical` | 参数见下 Statistic | - |\n| chartPlacement | 图表位置，相对于 statistic 的位置 | `left \\| right \\| bottom` | - |\n| footer | 额外指标展示 | `ReactNode` | - |\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的title属性如何使用？",
    "md": "参数: title\n说明: 卡片标题\n类型: `string\\|ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的extra属性如何使用？",
    "md": "参数: extra\n说明: 卡片右上角的操作区域\n类型: `string\\|ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的loading属性如何使用？",
    "md": "参数: loading\n说明: 当卡片内容还在加载中时，可以用 loading 展示一个占位\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否有边框\n类型: boolean\n默认值: true\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的chart属性如何使用？",
    "md": "参数: chart\n说明: 图表卡片\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的statistic属性如何使用？",
    "md": "参数: statistic\n说明: 数值统计配置，布局默认为 `vertical`\n类型: 参数见下 Statistic\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的chartPlacement属性如何使用？",
    "md": "参数: chartPlacement\n说明: 图表位置，相对于 statistic 的位置\n类型: `left \\| right \\| bottom`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - StatisticCard的footer属性如何使用？",
    "md": "参数: footer\n说明: 额外指标展示\n类型: `ReactNode`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProCard - Statistic 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| prefix | 设置数值的前缀 | string | ReactNode | - |\n| suffix | 设置数值的后缀 | string | ReactNode | - |\n| title | 数值的标题 | string | ReactNode | - |\n| tip | 标题提示 | string| ReactNode | - |\n| value | 数值内容 | string | number | - |\n| icon | 图标 | ReactNode | - |\n| status | 设置状态点，同 Badge 组件 | `Enum{ 'success', 'processing, 'default', 'error', 'warning' }` | - |\n| valueStyle | 设置数值的样式 | style | - |\n| description | 描述性标签 | React.ReactNode | () => React.ReactNode | - |\n| layout | 布局 | `horizontal \\| vertical \\| inline` | `inline` |\n| trend | 趋势 | `up \\| down \\|` | - |\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的prefix属性如何使用？",
    "md": "参数: prefix\n说明: 设置数值的前缀\n类型: string | ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的suffix属性如何使用？",
    "md": "参数: suffix\n说明: 设置数值的后缀\n类型: string | ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的title属性如何使用？",
    "md": "参数: title\n说明: 数值的标题\n类型: string | ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的tip属性如何使用？",
    "md": "参数: tip\n说明: 标题提示\n类型: string| ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的value属性如何使用？",
    "md": "参数: value\n说明: 数值内容\n类型: string | number\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的icon属性如何使用？",
    "md": "参数: icon\n说明: 图标\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的status属性如何使用？",
    "md": "参数: status\n说明: 设置状态点，同 Badge 组件\n类型: `Enum{ 'success', 'processing, 'default', 'error', 'warning' }`\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的valueStyle属性如何使用？",
    "md": "参数: valueStyle\n说明: 设置数值的样式\n类型: style\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的description属性如何使用？",
    "md": "参数: description\n说明: 描述性标签\n类型: React.ReactNode | () => React.ReactNode\n默认值: -\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的layout属性如何使用？",
    "md": "参数: layout\n说明: 布局\n类型: `horizontal \\| vertical \\| inline`\n默认值: `inline`\n"
  },
  {
    "title": "pro-components 中 ProCard - Statistic的trend属性如何使用？",
    "md": "参数: trend\n说明: 趋势\n类型: `up \\| down \\|`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 ProCard - Divider 有哪些配置？",
    "md": "| 参数 | 说明     | 类型                     | 默认值 |\n| ---- | -------- | ------------------------ | ------ |\n| type | 分隔类型 | `horizontal \\| vertical` | -      |\n"
  },
  {
    "title": "pro-components 中 ProCard - Divider的type属性如何使用？",
    "md": "参数: type\n说明: 分隔类型\n类型: `horizontal \\| vertical`\n默认值: -\n"
  },
  {
    "title": "pro-components 的 Card 有哪些配置？",
    "md": "#### ProCard - CheckCard\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| checked | 指定当前是否选中 | boolean | false | - |\n| bordered | 是否显示边框 | boolean | true | 1.20.0 |\n| value | 选项值 | string | - | - |\n| defaultChecked | 初始是否选中 | boolean | false | - |\n| disabled | 失效状态 | boolean | false | - |\n| size | 选择框大小，可选 `large` `small` | string | `default` | - |\n| onChange | 变化时回调函数 | Function(checked) | - | - |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean | false | - |\n| title | 标题 | string | ReactNode | - | - |\n| description | 描述 | ReactNode | - | - |\n| avatar | 选项元素的图片地址 | link | ReactNode | - | - |\n| extra | 动作区域 | 卡片右上角的操作区域 | - | - |\n| cover | 卡片背景图片，注意使用该选项后`title`，`description`和`avatar`失效 | ReactNode | - | - |\n#### ProCard - CheckCard.Group\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| multiple | 多选 | boolean | false | - |\n| bordered | 是否显示边框 | boolean | true | 1.20.0 |\n| defaultValue | 默认选中的选项 | string | string\\[] | - | - |\n| disabled | 整组失效 | boolean | false | - |\n| loading | 当卡片组内容还在加载中时，可以用 loading 展示一个占位 | boolean | false | - |\n| options | 指定可选项 | string\\[] | Array<{ title: ReactNode, value: string, description?: ReactNode, avatar?: link or ReactNode, cover?:ReactNode, disabled?: boolean }> | \\[] | - |\n| value | 指定选中的选项 | string | string\\[] | - | - |\n| size | 选择框大小，可选 `large` `small` | string | `default` | - |\n| onChange | 变化时回调函数 | Function(checkedValue) | - | - |\n"
  },
  {
    "title": "pro-components 的 ProCard - CheckCard 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| checked | 指定当前是否选中 | boolean | false | - |\n| bordered | 是否显示边框 | boolean | true | 1.20.0 |\n| value | 选项值 | string | - | - |\n| defaultChecked | 初始是否选中 | boolean | false | - |\n| disabled | 失效状态 | boolean | false | - |\n| size | 选择框大小，可选 `large` `small` | string | `default` | - |\n| onChange | 变化时回调函数 | Function(checked) | - | - |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean | false | - |\n| title | 标题 | string | ReactNode | - | - |\n| description | 描述 | ReactNode | - | - |\n| avatar | 选项元素的图片地址 | link | ReactNode | - | - |\n| extra | 动作区域 | 卡片右上角的操作区域 | - | - |\n| cover | 卡片背景图片，注意使用该选项后`title`，`description`和`avatar`失效 | ReactNode | - | - |\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的checked属性如何使用？",
    "md": "参数: checked\n说明: 指定当前是否选中\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否显示边框\n类型: boolean\n默认值: true\n版本: 1.20.0\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的value属性如何使用？",
    "md": "参数: value\n说明: 选项值\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的defaultChecked属性如何使用？",
    "md": "参数: defaultChecked\n说明: 初始是否选中\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 失效状态\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的size属性如何使用？",
    "md": "参数: size\n说明: 选择框大小，可选 `large` `small`\n类型: string\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 变化时回调函数\n类型: Function(checked)\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的loading属性如何使用？",
    "md": "参数: loading\n说明: 当卡片内容还在加载中时，可以用 loading 展示一个占位\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: string | ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的description属性如何使用？",
    "md": "参数: description\n说明: 描述\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的avatar属性如何使用？",
    "md": "参数: avatar\n说明: 选项元素的图片地址\n类型: link | ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的extra属性如何使用？",
    "md": "参数: extra\n说明: 动作区域\n类型: 卡片右上角的操作区域\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard的cover属性如何使用？",
    "md": "参数: cover\n说明: 卡片背景图片，注意使用该选项后`title`，`description`和`avatar`失效\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 的 ProCard - CheckCard.Group 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| multiple | 多选 | boolean | false | - |\n| bordered | 是否显示边框 | boolean | true | 1.20.0 |\n| defaultValue | 默认选中的选项 | string | string\\[] | - | - |\n| disabled | 整组失效 | boolean | false | - |\n| loading | 当卡片组内容还在加载中时，可以用 loading 展示一个占位 | boolean | false | - |\n| options | 指定可选项 | string\\[] | Array<{ title: ReactNode, value: string, description?: ReactNode, avatar?: link or ReactNode, cover?:ReactNode, disabled?: boolean }> | \\[] | - |\n| value | 指定选中的选项 | string | string\\[] | - | - |\n| size | 选择框大小，可选 `large` `small` | string | `default` | - |\n| onChange | 变化时回调函数 | Function(checkedValue) | - | - |\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 多选\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否显示边框\n类型: boolean\n默认值: true\n版本: 1.20.0\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认选中的选项\n类型: string | string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 整组失效\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的loading属性如何使用？",
    "md": "参数: loading\n说明: 当卡片组内容还在加载中时，可以用 loading 展示一个占位\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的options属性如何使用？",
    "md": "参数: options\n说明: 指定可选项\n类型: string\\[] | Array<{ title: ReactNode, value: string, description?: ReactNode, avatar?: link or ReactNode, cover?:ReactNode, disabled?: boolean }>\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的value属性如何使用？",
    "md": "参数: value\n说明: 指定选中的选项\n类型: string | string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的size属性如何使用？",
    "md": "参数: size\n说明: 选择框大小，可选 `large` `small`\n类型: string\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "pro-components 中 ProCard - CheckCard.Group的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 变化时回调函数\n类型: Function(checkedValue)\n默认值: -\n版本: -\n"
  }
]