[
  {
    "title": "ProList 的常用参数有哪些？",
    "md": "ProList 的常用参数如下：\n* dataSource: 与 antd 相同的配置，表示数据源，类型为数组，默认值为 `false`。\n* actionRef: Table action 的引用，便于自定义触发，类型为 MutableRefObject<ActionType>。\n* metas: 列表项配置，类似 Table 中的 columns，类型为 Metas。\n* rowKey: 行的 key，一般是行 id，类型为 string 或者 `(row,index)=>string`，默认值为 `'id'`。\n* headerTitle: 列表头部主标题，类型为 React.ReactNode。\n* loading: 是否加载中，类型为 boolean 或者 `(item: any) => boolean`，默认值为 `false`。\n* split: 是否有分割线，类型为 boolean，默认值为 `false`。\n* rowSelection: 与 antd 相同的配置，表示行选择，类型为对象或者布尔值，默认值为 false。\n* expandable: 与 antd 相同的配置，表示可展开行的配置，类型为对象或者 `false`。\n* showActions: 何时展示 actions，CardList 模式下不生效，类型为 `'hover'` 或者 `'always'`，默认值为 `'always'`。\n* showExtr 何时展示 extra，类型为 `'hover'` 或者 `'always'`，默认值为 `'always'`。\n* onRow: 与 antd 相同的配置，当用户传入 `grid` 属性时，列表将会以卡片模式进行渲染，此事件将不会触发，请使用 `onItem`，类型为 `function(record, index)`。\n* onItem: 与 antd 相同的配置，表示在所有类型点击某个项目都会触发该事件，类型为 `function(record, index)`。\n* rowClassName: 自定义列表行的类名，类型为字符串或者 `(row, index) => string`。\n* itemHeaderRender: 自定义每一列的 header，不同于 itemRender 的是它会保留多选和展开收起。\n* itemCardProps: 自定义卡片列表的 proCard props，只在卡片列表下生效。\n"
  },
  {
    "title": "如何使用 itemHeaderRender 和 itemCardProps？",
    "md": "itemHeaderRender 和 itemCardProps 是 ProList 的两个参数。\n* itemHeaderRender 是用来自定义每一列的 header，与 itemRender 不同的是，它会保留多选和展开收起。你可以将自定义的组件传入到 itemHeaderRender 中，实现个性化的列表列头显示。\n\n* itemCardProps 是用来自定义卡片列表的 proCard 的 props，只在卡片列表下生效。你可以传入一个对象，设置 proCard 的属性，从而自定义卡片列表的显示样式。\n"
  },
  {
    "title": "Metas.\\[Meta] 通用 API",
    "md": ""
  },
  {
    "title": "参数",
    "md": "* **dataIndex**: 数据在数据项中对应的路径，支持通过数组查询嵌套路径\n\n  * 类型: `string` | `string[]`\n  * 默认值: `-`\n\n* **valueType**: 值的类型，和 ProTable 一致\n\n  * 类型: `'text'` | `'date'` ...\n  * 默认值: `'text'`\n\n* **render**: 自定义渲染函数\n  * 类型: `(text: React.ReactNode, record: T, index: number) => React.ReactNode | React.ReactNode[]`\n  * 默认值: `-`\n"
  },
  {
    "title": "说明",
    "md": "Metas.\\[Meta] 是一个通用 API，用于配置 ProTable 的元数据项。\n"
  },
  {
    "title": "示例",
    "md": "```jsx\nimport { ProTable } from 'antd';\n\nconst columns = [\n  {\n    title: '姓名',\n    dataIndex: 'name',\n  },\n  {\n    title: '年龄',\n    dataIndex: 'age',\n    valueType: 'number',\n  },\n  {\n    title: '操作',\n    render: (text, record, index) => (\n      <a onClick={() => handleEdit(record)}>编辑</a>\n    ),\n  },\n];\n\nconst dataSource = [\n  {\n    name: '张三',\n    age: 18,\n  },\n  {\n    name: '李四',\n    age: 20,\n  },\n];\n\nconst MyTable = () => {\n  return <ProTable columns={columns} dataSource={dataSource} />;\n};\n```\n"
  },
  {
    "title": "参考链接",
    "md": "* [ProTable API 文档](https://procomponents.ant.design/components/table#protable)\n"
  },
  {
    "title": "`dataSource` 的字段类型有哪些？",
    "md": "`dataSource` 的字段类型有 `'new'`、`'top'` 和 `'inline'`。\n"
  },
  {
    "title": "`dataSource` 字段类型的含义是什么？",
    "md": "* `'new'` 表示数据源是新的。\n* `'top'` 表示数据源是热门的。\n* `'inline'` 表示数据源是内联的。\n"
  },
  {
    "title": "`dataIndex` 参数的默认值是什么？",
    "md": "`dataIndex` 参数的默认值是 `'type'`。\n"
  },
  {
    "title": "Metas.description 的参数说明是什么？",
    "md": "Metas.description 的参数说明如下：\n| 参数      | 说明 | 类型 | 默认值          |\n| :-------- | :--- | :--- | :-------------- |\n| dataIndex | -    | -    | `'description'` |\n其中，`dataIndex` 参数表示元数据（Metas）的描述信息。默认值为 `'description'`。\n"
  },
  {
    "title": "Metas.actions 的参数 dataIndex 是什么意思？",
    "md": "参数 dataIndex 在 Metas.actions 中的作用是什么？\n"
  },
  {
    "title": "Metas.actions 的参数 cardActionProps 如何使用？",
    "md": "参数 cardActionProps 在 Metas.actions 中有什么用途？如何使用它？\n"
  },
  {
    "title": "Metas.actions 的参数 cardActionProps 的默认值是什么？",
    "md": "参数 cardActionProps 在 Metas.actions 中的默认值是什么？\n"
  }
]