[
  {
    "title": "### 交互式生成页面的基本使用方法",
    "md": "使用以下命令进行交互式页面生成：\n```bash\n$umi g page\n? What is the name of page? › mypage\n? How dou you want page files to be created? › - Use arrow-keys. Return to submit.\n❯   mypage/index.{tsx,less}\n    mypage.{tsx,less}\n```\n你需要输入页面的名称和文件生成方式。在这个例子中，我们输入了`mypage`作为页面的名称，并选择了`mypage/index.{tsx,less}`作为文件生成方式。\n"
  },
  {
    "title": "### 直接生成页面",
    "md": "如果你知道页面的名称，你可以直接生成页面，使用以下命令：\n```bash\n$umi g page foo\nWrite: src/pages/foo.tsx\nWrite: src/pages/foo.less\n```\n这个例子中，我们使用`foo`作为页面的名称，生成了`src/pages/foo.tsx`和`src/pages/foo.less`这两个文件。\n"
  },
  {
    "title": "### 目录方式生成页面",
    "md": "你也可以按照目录的方式生成页面，生成的页面会放在指定目录下的组件和样式文件中。使用以下命令：\n```bash\n$umi g page bar --dir\nWrite: src/pages/bar/index.less\nWrite: src/pages/bar/index.tsx\n```\n这个例子中，我们使用`bar`作为页面的名称，并且使用`--dir`参数，生成了`src/pages/bar/index.less`和`src/pages/bar/index.tsx`这两个文件。\n"
  },
  {
    "title": "### 嵌套生成页面",
    "md": "你可以嵌套生成页面，使用以下命令：\n```bash\n$umi g page far/far/away/kingdom\nWrite: src/pages/far/far/away/kingdom.tsx\nWrite: src/pages/far/far/away/kingdom.less\n```\n这个例子中，我们生成了一个名为`far/far/away/kingdom`的页面，生成了`src/pages/far/far/away/kingdom.tsx`和`src/pages/far/far/away/kingdom.less`这两个文件。\n"
  },
  {
    "title": "### 批量生成多个页面",
    "md": "如果你需要一次性生成多个页面，可以使用以下命令：\n```bash\n$umi g page  page1  page2   a/nested/page3\nWrite: src/pages/page1.tsx\nWrite: src/pages/page1.less\nWrite: src/pages/page2.tsx\nWrite: src/pages/page2.less\nWrite: src/pages/a/nested/page3.tsx\nWrite: src/pages/a/nested/page3.less\n```\n这个例子中，我们一次性生成了三个页面：`page1`、`page2`和`a/nested/page3`，并生成了对应的组件和样式文件。\n以上就是页面生成的基本使用方法。\n"
  },
  {
    "title": "### 如何对页面模板内容进行自定义?",
    "md": "如果页面生成器使用的默认模板不符合您的需求，您可以对模板内容进行自定义设置。\n1. 执行 `--eject` 命令:\n```bash\n$ umi g page --eject\n```\n2. 执行命令后，页面生成器会将其原始模板写入项目的 `/templates/page` 目录。你可以在该目录下找到以下文件:\n```\n.\n├── package.json\n└── templates\n    └── page\n        ├── index.less.tpl\n        └── index.tsx.tpl\n```\n在 `index.less.tpl` 和 `index.tsx.tpl` 文件中进行适当的修改和自定义，以满足您的需求。\n3. 根据您的需求修改模板文件后，页面生成器将使用您自定义的模板来生成页面。\n请注意，自定义模板可能会影响项目的其他部分，请谨慎修改模板内容。\n"
  },
  {
    "title": "### 如何在模板文件中插入变量？",
    "md": "模板文件支持模板语法，可以通过插入变量来自定义文件内容。以`.tsx`模板文件为例，可以像下面这样插入变量：\n```tsx\nimport React from 'react';\nimport './{{{name}}}.less'\n\nconst message = '{{{msg}}}'\nconst count = {{{count}}}\n```\n在上述代码中，通过`{{{name}}}`、`{{{msg}}}`和`{{{count}}}`的形式插入变量，变量名使用三个大括号包裹起来。\n"
  },
  {
    "title": "### 如何使用自定义参数值生成页面？",
    "md": "使用自定义参数值可以生成指定内容的页面。例如，运行以下命令：\n```bash\n$umi g page foo --msg \"Hello World\" --count 10\n```\n运行命令后，生成的页面内容如下：\n```tsx\nimport React from 'react';\nimport './foo.less';\n\nconst message = 'Hello World';\nconst count = 10;\n```\n在以上代码中，模板文件中的变量`{{{name}}}`被替换为`foo`，生成相应的文件。同时，变量`{{{msg}}}`被替换为`Hello World`，变量`{{{count}}}`被替换为`10`。\n"
  },
  {
    "title": "### 是否可以省略模板变量后缀名？",
    "md": "如果不需要使用模板变量，可以省略模板文件的后缀名。例如，将`.tpl`后缀名的文件名简写为该文件的原始后缀名。例如，将`index.tsx.tpl`简写为`index.tsx`，将`index.less.tpl`简写为`index.less`。\n通过省略后缀名，可以直接使用带有自定义参数值的模板文件生成页面内容。\n"
  },
  {
    "title": "### 预设变量中的 name 参数有什么作用？",
    "md": "预设变量中的 name 参数用于指定当前文件的名称。当使用 `pnpm umi g page foo` 命令生成页面时，会生成 `pages/foo.tsx` 和 `pages/foo.less` 两个文件，并且其中的 name 参数的值为 \"foo\"。这个参数可以帮助我们在生成文件时指定文件名，使文件的命名更加方便和准确。\n"
  },
  {
    "title": "### 预设变量中的 color 参数是什么意思？",
    "md": "预设变量中的 color 参数用于生成一个随机的 RGB 颜色。在模板中，我们可以通过引用 color 参数来设置页面的颜色样式，使页面具有不同的视觉效果。每次生成页面时，color 参数的值都会随机生成，这样可以使生成的页面颜色更加多样化。\n"
  },
  {
    "title": "### 预设变量中的 cssExt 参数的默认值是什么？",
    "md": "预设变量中的 cssExt 参数的默认值是 `less`。这个参数用于指定样式文件的后缀名。在生成页面时，如果没有显式地指定 cssExt 参数的值，那么就会默认使用 `less` 作为样式文件的后缀名。当然，如果需要的话，我们也可以在生成页面时自定义 cssExt 参数的值，从而指定其它的样式文件后缀名，以满足项目的需求。\n"
  },
  {
    "title": "### 什么是 `dir` 模式？",
    "md": "`dir` 模式是一种在页面模板文件夹中使用的模式。通常情况下，如果页面模板文件夹只有一个自定义模板文件，缺失的文件会自动选取默认的模板文件。然而，如果使用 `dir` 模式，生成的内容将和页面自定义模板文件夹保持一致，只有在页面自定义模板文件夹为空时才会使用默认的模板文件。\n"
  },
  {
    "title": "### 使用 `dir` 模式时的目录结构是怎样的？",
    "md": "当你使用 `dir` 模式时，生成的目录结构会和页面自定义模板文件夹保持一致。例如，假设你的页面自定义模板文件夹中有以下内容：\n```\n.\n├── a.tsx\n└── index.tsx.tpl\n```\n那么在使用 `dir` 模式生成的目录将是：\n```\n.\n├── a.tsx\n└── index.tsx\n```\n"
  },
  {
    "title": "### 如何判断是否要使用 `dir` 模式？",
    "md": "使用 `dir` 模式取决于页面自定义模板文件夹的内容。如果该文件夹为空，则会使用默认的模板文件。如果该文件夹不为空，则会使用页面自定义模板文件夹中的文件。因此，在决定是否使用 `dir` 模式时，需要考虑页面自定义模板文件夹是否为空。\n以上是关于 `dir` 模式的一些说明和用法。希望这些信息对你有所帮助！\n"
  },
  {
    "title": "### 交互式生成组件的基本使用方法是什么？",
    "md": "交互式生成组件的基本使用方法如下：\n```bash\n$umi g component\n✔ Please input you component Name … foo\nWrite: src/components/Foo/index.ts\nWrite: src/components/Foo/component.tsx\n```\n用户需要在命令行中执行`umi g component`命令，然后输入组件的名称。在以上示例中，用户输入了`foo`作为组件的名称。执行命令后，umi 会自动生成组件代码文件`src/components/Foo/index.ts`和`src/components/Foo/component.tsx`。\n"
  },
  {
    "title": "### 直接生成组件的基本使用方法是什么？",
    "md": "直接生成组件的基本使用方法如下：\n```bash\n$umi g component bar\nWrite: src/components/Bar/index.ts\nWrite: src/components/Bar/component.tsx\n```\n用户需要在命令行中执行`umi g component`命令，并直接在命令行中指定组件的名称。在以上示例中，用户输入了`bar`作为组件的名称。执行命令后，umi 会自动生成组件代码文件`src/components/Bar/index.ts`和`src/components/Bar/component.tsx`。\n"
  },
  {
    "title": "### 嵌套生成组件的基本使用方法是什么？",
    "md": "嵌套生成组件的基本使用方法如下：\n```bash\n$umi g component group/subgroup/baz\nWrite: src/components/group/subgroup/Baz/index.ts\nWrite: src/components/group/subgroup/Baz/component.tsx\n```\n用户需要在命令行中执行`umi g component`命令，并在命令行中指定嵌套的组件路径。在以上示例中，用户输入了`group/subgroup/baz`作为组件的路径，`baz`作为组件的名称。执行命令后，umi 会自动生成组件代码文件`src/components/group/subgroup/Baz/index.ts`和`src/components/group/subgroup/Baz/component.tsx`。\n"
  },
  {
    "title": "### 问题四：批量生成组件的基本使用方法是什么？",
    "md": "批量生成组件的基本使用方法如下：\n```bash\n$umi g component apple banana orange\nWrite: src/components/Apple/index.ts\nWrite: src/components/Apple/component.tsx\nWrite: src/components/Banana/index.ts\nWrite: src/components/Banana/component.tsx\nWrite: src/components/Orange/index.ts\nWrite: src/components/Orange/component.tsx\n```\n用户需要在命令行中执行`umi g component`命令，并在命令行中指定多个组件名称，各个组件名称之间用空格分隔。在以上示例中，用户输入了`apple banana orange`作为组件的名称。执行命令后，umi 会根据每个组件名称分别生成对应的组件代码文件。\n1. 如何使用模板变量生成自定义组件？根据提供的信息，可以在命令行中运行以下命令生成自定义组件：\n```bash\n$umi g component foo --msg \"Hello World\"\n```\n在自定义模板文件夹中，可以将`index.ts.tpl`简写为`index.ts`，将`component.tsx.tpl`简写为`component.tsx`。组件生成器会根据你的自定义模板文件夹生成相应的内容，你也可以根据需要添加更多的自定义模板文件。\n2. 如何简化自定义组件模板文件的后缀名？根据提供的信息，你可以将自定义组件模板的文件名后缀`.tpl`省略，例如将`index.ts.tpl`简写为`index.ts`，将`component.tsx.tpl`简写为`component.tsx`。\n\n3. 如何根据自定义模板文件生成组件？根据提供的信息，在命令行中运行`umi g component`命令，并指定自定义组件模板和相应的参数，例如：\n```bash\n$umi g component foo --msg \"Hello World\"\n```\n组件生成器会根据你的自定义模板文件夹中的内容生成组件，同时也可以根据需要添加更多的自定义模板文件。\n"
  },
  {
    "title": "### 生成 routeAPI 功能的模板文件",
    "md": "您可以使用 `umi g api` 命令来生成 routeAPI 功能的模板文件，具体操作如下：\n#### 交互式生成\n在命令行中执行以下命令：\n```bash\n$umi g api\n✔ please input your api name: … starwar/people\nWrite: api/starwar/people.ts\n```\n通过执行以上命令，您可以在 `api` 目录下生成一个名为 `starwar/people.ts` 的模板文件。\n#### 直接生成\n在命令行中执行以下命令：\n```bash\n$umi g api films\nWrite: api/films.ts\n```\n通过执行以上命令，您可以在 `api` 目录下生成一个名为 `films.ts` 的模板文件。\n#### 嵌套生成器\n在命令行中执行以下命令：\n```bash\n$umi g api planets/[id]\nWrite: api/planets/[id].ts\n```\n通过执行以上命令，您可以在 `api` 目录下生成一个名为 `planets/[id].ts` 的模板文件。\n#### 批量生成\n在命令行中执行以下命令：\n```bash\n$umi g api spaceships vehicles species\nWrite: api/spaceships.ts\nWrite: api/vehicles.ts\nWrite: api/species.ts\n```\n通过执行以上命令，您可以在 `api` 目录下生成三个模板文件，分别为 `spaceships.ts`、`vehicles.ts` 和 `species.ts`。\n以上是关于生成 routeAPI 功能模板文件的操作步骤，希望对您有所帮助。\n"
  },
  {
    "title": "### Mock 生成器",
    "md": "Mock 生成器是一个用于生成模板文件的功能，它可以帮助我们快速生成 mock 数据。具体的实现可以参考[文档](./mock)。\n#### 交互式生成\n交互式生成是一种通过命令行交互的方式来生成 mock 文件的方法。我们可以通过以下步骤来完成交互式生成：\n1. 执行命令 `umi g mock`\n2. 输入模板文件的名称，例如 `auth`\n3. 文件生成成功，路径为 `mock/auth.ts`\n示例：\n```bash\n$umi g mock\n✔ please input your mock file name … auth\nWrite: mock/auth.ts\n```\n#### 直接生成\n直接生成是一种不需要交互的方式来生成 mock 文件的方法。我们可以通过执行指定命令的方式来完成直接生成：\n1. 执行命令 `umi g mock acl`\n2. 文件生成成功，路径为 `mock/acl.ts`\n示例：\n```bash\n$umi g mock acl\nWrite: mock/acl.ts\n```\n#### 嵌套生成\n嵌套生成是一种在指定目录下生成嵌套的 mock 文件的方法。我们可以通过执行指定命令的方式来完成嵌套生成：\n1. 执行命令 `umi g mock users/profile`\n2. 文件生成成功，路径为 `mock/users/profile.ts`\n示例：\n```bash\n$umi g mock users/profile\nWrite: mock/users/profile.ts\n```\n通过以上信息，我们可以了解到 Mock 生成器的使用方法和示例。\n"
  },
  {
    "title": "### Prettier 配置生成器是什么？",
    "md": "Prettier 配置生成器是一个用于项目的工具，它可以帮助生成 [prettier](https://prettier.io/) 的配置文件。通过执行该工具的命令，我们可以得到推荐的 prettier 配置，并自动安装相应的依赖。\n"
  },
  {
    "title": "### 如何使用 Prettier 配置生成器？",
    "md": "使用 Prettier 配置生成器非常简单。只需执行以下命令，即可生成 prettier 的配置文件和相应的依赖安装：\n```bash\n$umi g prettier\n```\n执行以上命令后，我们会看到以下输出信息：\n```\ninfo  - Write package.json\ninfo  - Write .prettierrc\ninfo  - Write .prettierignore\n```\n这意味着成功生成了 `package.js`、`.prettierrc` 和 `.prettierignore` 三个文件。\n"
  },
  {
    "title": "### 为什么需要使用 Prettier 配置生成器？",
    "md": "Prettier 是一个代码格式化工具，可以帮助我们保持代码的一致性和可读性。然而，手动配置 Prettier 的规则可能会比较繁琐。因此，有了 Prettier 配置生成器，我们可以方便地生成推荐的配置文件，节省了手动配置的时间和精力。\n"
  },
  {
    "title": "### 如何自定义 Prettier 配置？",
    "md": "生成的 prettier 配置文件 `.prettierrc` 包含了 Prettier 的默认规则。如果需要自定义配置，只需在该文件中修改相应的规则即可。\n同时，`.prettierignore` 文件用于指定需要忽略的文件或目录，以免对它们进行格式化。\n"
  },
  {
    "title": "### 总结",
    "md": "Prettier 配置生成器是一个方便的工具，可以帮助我们快速生成 prettier 的配置文件，并自动安装相关依赖。通过使用该工具，我们可以提高代码的格式化效率，保持代码风格的一致性，提升代码的可读性。\n"
  },
  {
    "title": "### Jest 配置生成器的作用是什么？",
    "md": "Jest 配置生成器是一个用于生成项目的 [jest](https://jestjs.io/) 配置的工具。执行命令后，`umi` 将会生成 Jest 配置文件，并安装相应的依赖。根据需要，可以选择是否使用 [@testing-library/react](https://www.npmjs.com/package/@testing-library/react) 进行 UI 测试。\n"
  },
  {
    "title": "### 如何使用 Jest 配置生成器？",
    "md": "使用 Jest 配置生成器非常简单。在命令行中执行以下命令：\n```bash\n$ umi g jest\n```\n在执行命令后，会有一个提示问你是否要使用 [@testing-library/react](https://www.npmjs.com/package/@testing-library/react) 进行 UI 测试。根据需要选择相应的选项，确认后配置文件和依赖将会被生成。\n"
  },
  {
    "title": "### 生成的文件有哪些？",
    "md": "执行 Jest 配置生成器命令后，将会生成以下文件：\n* package.json：包含生成的依赖信息。\n* jest.config.ts：生成的 Jest 配置文件。\n这些文件将会被自动写入到项目中，并且可根据需要进行配置和使用。\n"
  },
  {
    "title": "### 如何为项目开启 Tailwind CSS 配置？",
    "md": "要为项目开启 Tailwind CSS 配置，需要执行以下命令：\n```bash\n$ umi g tailwindcss\n```\n执行完该命令后，`umi` 会生成 Tailwind CSS 相关文件，并安装相应的依赖。\n"
  },
  {
    "title": "### 生成 Tailwind CSS 配置后，具体都进行了哪些操作？",
    "md": "执行上述命令后，根据提供的信息，`umi` 完成了以下操作：\n1. 在项目的 `package.json` 文件中更新了配置。\n2. 在项目的 `.umirc.ts` 文件中配置了 `tailwindcss` 和 `plugins`。\n3. 创建了 `tailwind.config.js` 文件。\n4. 创建了 `tailwind.css` 文件。\n"
  },
  {
    "title": "### 在项目中启用 Tailwind CSS 配置有哪些好处？",
    "md": "通过为项目启用 Tailwind CSS 配置，可以实现以下优势：\n1. 提供了大量预定义的 CSS 类，使样式编写更加简单和高效。\n2. 可以自定义配置文件，根据项目需求进行样式的定制。\n3. 需要安装的依赖较少，减少了项目的依赖管理和打包体积。\n4. 支持响应式设计，可以根据不同的屏幕尺寸应用不同的样式。\n总之，通过启用 Tailwind CSS 配置，可以快速构建出漂亮、高效的界面，并提供灵活的样式定制能力。\n"
  },
  {
    "title": "### 如何为项目开启 Dva 配置？",
    "md": "要为项目开启 Dva 配置，可以通过以下步骤进行操作：\n1. 打开终端或命令行工具，在项目根目录下执行以下命令：\n```bash\n   $ umi g dva\n```\n这个命令会自动为项目生成 Dva 配置。\n2. 执行命令后，终端会显示一些相关信息，例如：\n```bash\n   set config:dva on /Users/umi/umi-playground/.umirc.ts\n   set config:plugins on /Users/umi/umi-playground/.umirc.ts\n   info  - Update config file\n   info  - Write example model\n```\n这些信息表示 Dva 配置已成功设置，并且配置文件已更新和模型例子已生成。\n以上就是开启 Dva 配置的步骤和相关信息。执行以上操作后，你的项目就可以使用 Dva 进行状态管理了。\n"
  },
  {
    "title": "### Precommit 配置生成器会为项目做哪些事情？",
    "md": "Precommit 配置生成器会为项目添加 husky 和 Git commit message 格式校验行为。执行该命令后，`umi` 会更新项目的 package.json 文件的 devDependencies 和 scripts 部分，并创建 .lintstagedrc 和 .husky 文件夹。同时，生成器还会在 .husky 文件夹中创建 commit-msg 和 pre-commit 文件。\n"
  },
  {
    "title": "### 为什么需要 Precommit 配置生成器？",
    "md": "Precommit 配置生成器的作用是在每次 Git commit 前将 Git 暂存区的代码默认格式化。通过添加 husky 和 Git commit message 格式校验行为，可以帮助保证代码的质量和一致性。\n"
  },
  {
    "title": "### 如何使用 Precommit 配置生成器？",
    "md": "使用 Precommit 配置生成器的命令如下：\n```bash\n$umi g precommit\n```\n执行该命令后，会输出一系列的信息，包括更新 package.json 文件和创建相关配置文件等操作。\n"
  },
  {
    "title": "### 需要注意什么？",
    "md": "如果是初始化出来的 @umijs/max 项目，通常不需要使用 Precommit 配置生成器，因为已经配置好 husky 了。但对于其他项目，使用该生成器可以帮助自动化处理 Git commit 相关的操作，提升代码质量和开发效率。\n"
  }
]