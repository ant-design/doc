[
  {
    "title": "### 如何升级项目的 Umi 版本和插件？",
    "md": "要升级项目的 Umi 版本和插件，需要进行以下步骤：\n1. 打开项目的 `package.json` 文件。\n2. 在 `devDependencies` 中找到之前使用的 Umi 相关的依赖项。\n3. 将之前的 Umi 相关依赖项的版本号改为新版的 Umi 和相关插件的版本号。例如，将 `umi` 的版本号改为 `\"^3.0.0\"`，将 `@umijs/preset-react` 的版本号改为 `\"^1.2.2\"`。\n4. 删除项目的 `node_modules` 文件夹，以确保之前安装的 Umi 版本和插件被完全移除。\n5. 执行 `npm install` 命令，重新安装项目的依赖。\n注意：如果之前使用的是 `umi` + `@umijs/preset-react` 的组合进行开发，那么可以直接将 Umi 的版本号改为新版的 `max`，然后执行步骤 4 和 5。\n"
  },
  {
    "title": "### 如何使用 `@umijs/max` 替换 `umi` 命令",
    "md": "如果你已经安装并使用了 `@umijs/max`，可以使用 `max` 命令来替换 `umi` 命令。例如，使用 `max dev` 替换 `umi dev` 来启动开发服务器，使用 `max build` 替换 `umi build` 来构建项目。\n在 `package.json` 文件中，修改相应的脚本命令：\n```diff\n{\n  \"scripts\": {\n-    \"build\": \"umi build\",\n+    \"build\": \"max build\",\n-    \"postinstall\": \"umi g tmp\",\n+    \"postinstall\": \"max setup\",\n-    \"start\": \"umi dev\",\n+    \"start\": \"max dev\",\n  }\n}\n```\n这样就可以使用 `max` 命令来代替相应的 `umi` 命令了。\n但是，需要注意的是，在 umi@4 中，一些项目前置操作被放到了 `setup` 命令中，例如 umi@3 中的 `umi g tmp` 等命令，需要使用 `max setup` 来替代。\n希望以上信息对你有帮助。\n"
  },
  {
    "title": "### 配置项 `fastRefresh` 的使用方法",
    "md": "在 `umi@3` 版本中，`fastRefresh` 配置项是一个对象，在 `umi@4` 版本中，`fastRefresh` 配置项改为直接配置为 `true` 来开启 Fast Refresh 功能。\n在 `umi@3` 中的配置示例：\n```typescript\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  fastRefresh: {},\n});\n```\n在 `umi@4` 中的配置示例：\n```typescript\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  fastRefresh: true,\n});\n```\n开启 `fastRefresh` 配置项后，可以实现在开发过程中的页面热更新功能，无需手动刷新页面即可查看最新的代码变更效果。\n"
  },
  {
    "title": "### 配置项 `dva` 的使用方法",
    "md": "在 `umi@3` 中，`dva` 配置项可以配置 `hmr` 参数来开启 Hot Module Replacement (HMR) 功能。但在 `umi@4` 中不再支持 `hmr` 参数。\n在 `umi@3` 中的配置示例：\n```typescript\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  dv{\n    hmr: true,\n  },\n});\n```\n在 `umi@4` 中的配置示例：\n```typescript\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  dv{},\n});\n```\n在 `umi@4` 中，不再需要配置 `hmr` 参数来开启 HMR 功能，因为 `umi@4` 默认支持 HMR，无需额外配置。\n"
  },
  {
    "title": "### 配置项 `webpack5` 的使用方法",
    "md": "在 `umi@4` 中，默认使用 webpack5 作为默认的构建工具。\n在 `umi@4` 中的配置示例：\n```typescript\nimport { defineConfig } from 'umi';\n\nexport default defineConfig({\n  webpack5: {},\n});\n```\n通过配置 `webpack5: {}`，即可启用 webpack5 的构建能力。\n请注意，在 `umi@4` 中，默认即开启了 webpack5 的支持，因此不需要额外的配置来开启 webpack5。\n"
  },
  {
    "title": "### Umi 4 中的路由相关使用差异",
    "md": "在 Umi 4 中，将 `react-router@5` 升级到了 `react-router@6`，因此在路由相关的一些 API 上存在一些使用上的差异。\n* 在 Umi 3 中，props 默认为空对象，以下属性不能直接从 props 中取出：\n\n  * history\n  * location\n  * match\n\n* 使用路由相关的 API 时，需要从 `useHistory()`，`useLocation()` 或 `useRouteMatch()` hook 中获取相应的属性。\n请根据 Umi 4 的文档以及具体的代码实现进行修改和适配。\n"
  }
]