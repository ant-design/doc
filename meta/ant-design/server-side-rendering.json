[
  {
    "title": "服务端渲染样式有哪两种方案？",
    "md": "服务端渲染样式有两种方案，分别是内联样式和整体导出。内联样式在渲染时无需额外请求样式文件，可以减少额外的网络请求；而整体导出则是提前烘焙 antd 组件样式为 css 文件，在页面中引入。内联样式的优点是减少网络请求，缺点是会增大 HTML 体积，影响首屏渲染速度。整体导出的优点是复用同一套 css 文件以命中缓存，缺点是在页面存在多主题时需要额外进行烘焙。\n"
  },
  {
    "title": "内联样式有哪些优缺点？",
    "md": "内联样式的优点是在渲染时无需额外请求样式文件，可以减少额外的网络请求。但其缺点是会使得 HTML 体积增大，影响首屏渲染速度。\n"
  },
  {
    "title": "整体导出的样式方案有什么优缺点？",
    "md": "整体导出的样式方案是将 antd 组件样式提前烘焙为 css 文件，在页面中引入。其优点是可以复用同一套 css 文件以命中缓存，提升页面加载速度。但其缺点是如果页面中存在多主题，则需要额外进行烘焙。\n"
  },
  {
    "title": "如何在 React 中使用内联样式？",
    "md": "在 React 中使用内联样式，你可以使用 `@ant-design/cssinjs` 包提供的功能。首先，需要引入所需的模块：\n```tsx\nimport React from 'react';\nimport { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\nimport type Entity from '@ant-design/cssinjs/es/Cache';\nimport { renderToString } from 'react-dom/server';\n```\n然后，创建一个组件，使用 `StyleProvider` 包裹该组件，并传入一个 `cache` 对象作为参数：\n```tsx\nconst App = () => {\n  const cache = React.useMemo<Entity>(() => createCache(), []);\n\n  // 其他逻辑代码...\n\n  return (\n    <StyleProvider cache={cache}>\n      <MyApp />\n    </StyleProvider>\n  );\n};\n```\n在服务器端进行渲染时，你可以使用 `renderToString` 将组件转换成 HTML 字符串：\n```tsx\nconst html = renderToString(\n  <StyleProvider cache={cache}>\n    <MyApp />\n  </StyleProvider>,\n);\n```\n接下来，使用 `extractStyle` 从 `cache` 对象中获取内联样式的文本：\n```tsx\nconst styleText = extractStyle(cache);\n```\n最后，将获取到的样式文本与 HTML 结构合并返回：\n```tsx\nreturn `\n  <!DOCTYPE html>\n  <html>\n    <head>\n      ${styleText}\n    </head>\n    <body>\n      <div id=\"root\">${html}</div>\n    </body>\n  </html>\n`;\n```\n这样，在使用 `@ant-design/cssinjs` 的过程中，你可以在 React 组件中使用内联样式，并通过服务器端渲染将样式转换为 HTML 字符串。\n"
  },
  {
    "title": "如何将样式文件抽离到 css 文件中？",
    "md": "如果你想要将样式文件抽离到 css 文件中，可以尝试以下方案：\n1. 安装依赖执行以下命令安装所需的依赖包：\n```tsx\n   npm install ts-node tslib cross-env --save-dev\n```\n2. 新增 tsconfig.node.json 文件在项目根目录下创建一个名为 `tsconfig.node.json` 的文件，并将以下内容添加到文件中：\n```json\n{\n  \"compilerOptions\": {\n    \"strictNullChecks\": true,\n    \"module\": \"NodeNext\",\n    \"jsx\": \"react\",\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"]\n}\n```\n3. 新增 scripts/genAntdCss.tsx 文件在项目根目录下创建一个名为 `scripts/genAntdCss.tsx` 的文件，并将以下内容添加到文件中：\n```tsx\n// scripts/genAntdCss.tsx\nimport fs from 'fs';\nimport { extractStyle } from '@ant-design/static-style-extract';\n\nconst outputPath = './public/antd.min.css';\n\nconst css = extractStyle();\n\nfs.writeFileSync(outputPath, css);\n```\n以上步骤完成后，运行 `scripts/genAntdCss.tsx` 脚本将会在当前项目的 `public` 目录下直接生成一个全量的 `antd.min.css` 文件，该文件即为抽离样式后的 CSS 文件。\n"
  },
  {
    "title": "如何使用混合主题或自定义主题？",
    "md": "若你想使用混合主题或自定义主题，可采用以下脚本：\n```tsx\nimport fs from 'fs';\nimport React from 'react';\nimport { extractStyle } from '@ant-design/static-style-extract';\nimport { ConfigProvider } from 'antd';\n\nconst outputPath = './public/antd.min.css';\n\nconst testGreenColor = '#008000';\nconst testRedColor = '#ff0000';\n\nconst css = extractStyle((node) => (\n  <>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorBgBase: testGreenColor,\n        },\n      }}\n    >\n      {node}\n    </ConfigProvider>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: testGreenColor,\n        },\n      }}\n    >\n      <ConfigProvider\n        theme={{\n          token: {\n            colorBgBase: testRedColor,\n          },\n        }}\n      >\n        {node}\n      </ConfigProvider>\n    </ConfigProvider>\n  </>\n));\n\nfs.writeFileSync(outputPath, css);\n```\n以上脚本将在运行时生成一个包含混合主题或自定义主题的 CSS 文件，并将其写入到 `public/antd.min.css` 文件中。\n"
  },
  {
    "title": "如何在 Next.js 中引入抽离后的样式文件？",
    "md": "以 Next.js 为例，可以按照以下步骤引入抽离后的样式文件：\n1. 在 package.json 中添加脚本依赖打开 `package.json` 文件，找到 `\"scripts\"` 字段，添加以下两行脚本：\n```json\n   \"predev\": \"ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx\",\n   \"prebuild\": \"cross-env NODE_ENV=production ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx\"\n```\n2. 在 pages/\\_app.tsx 中引入样式文件打开 `pages/_app.tsx` 文件，在文件开头添加以下行代码：\n```tsx\nimport '../public/antd.min.css';\n```\n以上步骤完成后，运行开发命令或编译命令时，会在项目的 `public` 目录下生成一个全量的 `antd.min.css` 文件。然后，在 `_app.tsx` 文件中引入该文件即可实现样式文件的抽离和使用。\n"
  },
  {
    "title": "如何在项目中使用自定义主题？",
    "md": "如果你的项目需要使用自定义主题，你可以通过以下方式来实现。\n首先，你需要引入 `@ant-design/static-style-extract` 模块，并使用其中的 `extractStyle` 方法对样式进行提取。代码示例如下：\n```tsx\nimport { extractStyle } from '@ant-design/static-style-extract';\n\nconst cssText = extractStyle((node) => {\n  // 在这里你可以使用任何你想要自定义的样式\n  return node;\n});\n```\n然后，在你的项目中，你可以使用 `ConfigProvider` 组件来设置自定义主题。在 `theme` 属性中，你可以指定各种样式的主题配置。以下是一个示例代码：\n```tsx\nimport { ConfigProvider } from 'antd';\n\n// 在这里使用 ConfigProvider 组件，并在 theme 属性中设置自定义主题\n<ConfigProvider\n  theme={{\n    // 在这里设置你的自定义主题样式\n    token: {\n      colorPrimary: 'red',\n    },\n  }}\n>\n  // 在这里放置你的组件和内容\n</ConfigProvider>;\n```\n这样就可以在项目中使用自定义主题了。\n"
  },
  {
    "title": "如何烘焙自定义主题的样式？",
    "md": "在前面的代码示例中，我们已经通过 `extractStyle` 方法提取了样式，并将其存储在 `cssText` 变量中。接下来，我们可以将提取到的样式应用到页面中。\n可以通过以下方式将样式应用到页面中：\n```tsx\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\n\n// 将提取到的样式添加到页面中\nconst html = `\n  ...\n  <style>${cssText}</style>\n  ...\n`;\n\n// 在这里将页面渲染成字符串，或者使用其他渲染方法\nconst renderedHTML = renderToString(<App />);\n```\n以上就是如何烘焙自定义主题样式的方法。\n"
  },
  {
    "title": "如何切换自定义主题？",
    "md": "如果你想在项目中切换自定义主题，可以通过修改 `ConfigProvider` 组件的 `theme` 属性来实现。\n首先，在切换主题的时候，你要根据用户的选择更新主题的配置。可以使用 `setState` 或其他方法来更新 `ConfigProvider` 组件的 `theme` 属性。\n以下是一个示例代码：\n```tsx\nimport React, { useState } from 'react';\nimport { ConfigProvider, Button } from 'antd';\n\nconst App = () => {\n  const [theme, setTheme] = useState({\n    // 初始主题配置\n    token: {\n      colorPrimary: 'red',\n    },\n  });\n\n  const handleThemeChange = () => {\n    // 在这里根据用户的选择更新主题配置\n    const newTheme = {\n      token: {\n        colorPrimary: 'blue',\n      },\n    };\n\n    setTheme(newTheme);\n  };\n\n  return (\n    <ConfigProvider theme={theme}>\n      // 在这里放置你的组件和内容\n      <Button onClick={handleThemeChange}>切换主题</Button>\n    </ConfigProvider>\n  );\n};\n```\n以上示例代码中，我们使用 `useState` 来管理主题的配置，并提供一个按钮来切换主题。当用户点击按钮时，`handleThemeChange` 函数会根据用户的选择更新主题配置，并使用 `setTheme` 方法来更新 `ConfigProvider` 组件的 `theme` 属性。\n这样，用户就可以通过点击按钮来切换自定义主题了。\n希望以上内容对你有所帮助！如果有任何问题，请随时向我提问。\n"
  },
  {
    "title": "如何在项目中使用混合主题？",
    "md": "如果你的项目中使用了混合主题，你可以尝试使用 `static-style-extract` 来进行烘焙。具体的实现方法如下：\n```tsx\nimport { extractStyle } from '@ant-design/static-style-extract';\nimport { ConfigProvider } from 'antd';\n\nconst cssText = extractStyle((node) => (\n  <>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorBgBase: 'green ',\n        },\n      }}\n    >\n      {node}\n    </ConfigProvider>\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: 'blue',\n        },\n      }}\n    >\n      <ConfigProvider\n        theme={{\n          token: {\n            colorBgBase: 'red ',\n          },\n        }}\n      >\n        {node}\n      </ConfigProvider>\n    </ConfigProvider>\n  </>\n));\n```\n你可以在项目中按照上述代码编写，然后通过 `static-style-extract` 来提取出生成的样式。更多关于 `static-style-extract` 的细节，你可以参考 [static-style-extract](https://github.com/ant-design/static-style-extract)。\n"
  },
  {
    "title": "`static-style-extract` 是什么？",
    "md": "`static-style-extract` 是一个用于提取静态样式的工具，它可以帮助你将设计规范中的样式提取出来，然后在项目中使用。在使用 `static-style-extract` 的过程中，你需要按照其提供的 API 将你的组件包裹起来，然后 `static-style-extract` 会扫描你的组件并提取出其中的样式，并将其生成为可以在你的项目中使用的 CSS 文本。这样，你就可以在项目中使用这些设计规范中的样式了。\n"
  },
  {
    "title": "`ConfigProvider` 是什么？",
    "md": "`ConfigProvider` 是 Ant Design 提供的一个组件，它可以用来设置整个应用的主题配置。通过在 `ConfigProvider` 中配置不同的主题，你可以实现在项目中使用不同的主题。在上面的代码中，我们通过多次嵌套使用 `ConfigProvider` 组件来实现混合主题的效果。每个 `ConfigProvider` 组件都可以单独设置不同的主题配置，从而实现了混合主题的效果。\n"
  },
  {
    "title": "如何使用 `genAntdCss.tsx` 文件中的 `doExtraStyle` 函数？",
    "md": "要使用 `genAntdCss.tsx` 文件中的 `doExtraStyle` 函数，首先需要安装依赖。然后，在需要使用的文件中导入 `doExtraStyle` 函数，并调用它。\n具体的步骤如下：\n1. 在项目根目录下执行以下命令安装所需依赖：\n```bash\nnpm install crypto fs path @ant-design/cssinjs\n```\n2. 在需要使用 `doExtraStyle` 函数的文件中，导入 `doExtraStyle` 函数：\n```typescript\nimport { doExtraStyle } from '路径/to/genAntdCss';\n```\n3. 调用 `doExtraStyle` 函数，并传入相应的参数：\n```typescript\nconst fileName = doExtraStyle({ cache });\n```\n注意，`doExtraStyle` 函数的参数是一个对象，其中 `cache` 是必填项。可以根据需要，传入不同的参数，例如 `dir` 和 `baseFileName`。\n"
  },
  {
    "title": "在 `_document.tsx` 文件中，如何使用 `genAntdCss.tsx` 中的 `doExtraStyle` 函数导出样式？",
    "md": "在 `_document.tsx` 文件中使用 `doExtraStyle` 函数导出样式，可以按需导出已使用的样式，并在页面中加载该样式。\n具体的步骤如下：\n1. 在 `_document.tsx` 文件中导入 `doExtraStyle` 函数：\n```typescript\nimport { doExtraStyle } from '路径/to/genAntdCss';\n```\n2. 在 `getInitialProps` 方法中调用 `doExtraStyle` 函数，并获取返回的文件名：\n```typescript\nconst fileName = doExtraStyle({ cache });\n```\n3. 将获取到的文件名添加到页面的 `<Head>` 部分中：\n```tsx\n{\n  fileName && <link rel=\"stylesheet\" href={`/${fileName}`} />;\n}\n```\n这样就可以按需导出已使用的样式，并在页面加载该样式了。通过这种方式，可以减少页面加载所需的样式文件大小，并提升性能。\n"
  },
  {
    "title": "如何在 Next.js 项目中使用 `genAntdCss.tsx` 文件？",
    "md": "要在 Next.js 项目中使用 `genAntdCss.tsx` 文件，需要将 `genAntdCss.tsx` 文件复制到项目中的相应位置，并进行相应的导入和调用。\n具体的步骤如下：\n1. 将 `genAntdCss.tsx` 文件复制到项目中的一个合适的位置，例如 `scripts` 目录。\n2. 在需要使用 `doExtraStyle` 函数的文件中，导入 `doExtraStyle` 函数：\n```typescript\nimport { doExtraStyle } from '路径/to/genAntdCss';\n```\n3. 调用 `doExtraStyle` 函数，并传入相应的参数：\n```typescript\nconst fileName = doExtraStyle({ cache });\n```\n注意，根据项目的具体情况，可能需要根据实际导入路径进行相应的调整。\n通过以上步骤，就可以在 Next.js 项目中使用 `genAntdCss.tsx` 文件了，实现按需导出样式和加载样式文件的功能。\n"
  }
]