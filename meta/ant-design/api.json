[
  {
    "title": "ant-design 的 Watermark 有哪些配置？",
    "md": "#### Watermark - Watermark\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| width | 水印的宽度，`content` 的默认值为自身的宽度 | number | 120 | - |\n| height | 水印的高度，`content` 的默认值为自身的高度 | number | 64 | - |\n| inherit | 是否将水印传导给弹出组件如 Modal、Drawer | boolean | true | 5.11.0 |\n| rotate | 水印绘制时，旋转的角度，单位 `°` | number | -22 | - |\n| zIndex | 追加的水印元素的 z-index | number | 9 | - |\n| image | 图片源，建议导出 2 倍或 3 倍图，优先级高 (支持 base64 格式) | string | - | - |\n| content | 水印文字内容 | string | string\\[] | - | - |\n| font | 文字样式 | [Font](#font) | [Font](#font) | - |\n| gap | 水印之间的间距 | \\[number, number] | \\[100, 100] | - |\n| offset | 水印距离容器左上角的偏移量，默认为 `gap/2` | \\[number, number] | \\[gap\\[0]/2, gap\\[1]/2] | - |\n#### Watermark - Font\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 字体颜色 | [CanvasFillStrokeStyles.fillStyle](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) | rgba(0,0,0,.15) | - |\n| fontSize | 字体大小 | number | 16 | - |\n| fontWeight | 字体粗细 | `normal` | `light` | `weight` | number | normal | - |\n| fontFamily | 字体类型 | string | sans-serif | - |\n| fontStyle | 字体样式 | `none` | `normal` | `italic` | `oblique` | normal | - |\n| textAlign | 指定文本对齐方向 | [CanvasTextAlign](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) | 5.10.0 |\n"
  },
  {
    "title": "ant-design 的 Watermark - Watermark 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| width | 水印的宽度，`content` 的默认值为自身的宽度 | number | 120 | - |\n| height | 水印的高度，`content` 的默认值为自身的高度 | number | 64 | - |\n| inherit | 是否将水印传导给弹出组件如 Modal、Drawer | boolean | true | 5.11.0 |\n| rotate | 水印绘制时，旋转的角度，单位 `°` | number | -22 | - |\n| zIndex | 追加的水印元素的 z-index | number | 9 | - |\n| image | 图片源，建议导出 2 倍或 3 倍图，优先级高 (支持 base64 格式) | string | - | - |\n| content | 水印文字内容 | string | string\\[] | - | - |\n| font | 文字样式 | [Font](#font) | [Font](#font) | - |\n| gap | 水印之间的间距 | \\[number, number] | \\[100, 100] | - |\n| offset | 水印距离容器左上角的偏移量，默认为 `gap/2` | \\[number, number] | \\[gap\\[0]/2, gap\\[1]/2] | - |\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的width属性如何使用？",
    "md": "参数: width\n说明: 水印的宽度，`content` 的默认值为自身的宽度\n类型: number\n默认值: 120\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的height属性如何使用？",
    "md": "参数: height\n说明: 水印的高度，`content` 的默认值为自身的高度\n类型: number\n默认值: 64\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的inherit属性如何使用？",
    "md": "参数: inherit\n说明: 是否将水印传导给弹出组件如 Modal、Drawer\n类型: boolean\n默认值: true\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的rotate属性如何使用？",
    "md": "参数: rotate\n说明: 水印绘制时，旋转的角度，单位 `°`\n类型: number\n默认值: -22\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的zIndex属性如何使用？",
    "md": "参数: zIndex\n说明: 追加的水印元素的 z-index\n类型: number\n默认值: 9\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的image属性如何使用？",
    "md": "参数: image\n说明: 图片源，建议导出 2 倍或 3 倍图，优先级高 (支持 base64 格式)\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的content属性如何使用？",
    "md": "参数: content\n说明: 水印文字内容\n类型: string | string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的font属性如何使用？",
    "md": "参数: font\n说明: 文字样式\n类型: [Font](#font)\n默认值: [Font](#font)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的gap属性如何使用？",
    "md": "参数: gap\n说明: 水印之间的间距\n类型: \\[number, number]\n默认值: \\[100, 100]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Watermark的offset属性如何使用？",
    "md": "参数: offset\n说明: 水印距离容器左上角的偏移量，默认为 `gap/2`\n类型: \\[number, number]\n默认值: \\[gap\\[0]/2, gap\\[1]/2]\n版本: -\n"
  },
  {
    "title": "ant-design 的 Watermark - Font 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 字体颜色 | [CanvasFillStrokeStyles.fillStyle](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) | rgba(0,0,0,.15) | - |\n| fontSize | 字体大小 | number | 16 | - |\n| fontWeight | 字体粗细 | `normal` | `light` | `weight` | number | normal | - |\n| fontFamily | 字体类型 | string | sans-serif | - |\n| fontStyle | 字体样式 | `none` | `normal` | `italic` | `oblique` | normal | - |\n| textAlign | 指定文本对齐方向 | [CanvasTextAlign](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) | 5.10.0 |\n"
  },
  {
    "title": "ant-design 中 Watermark - Font的color属性如何使用？",
    "md": "参数: color\n说明: 字体颜色\n类型: [CanvasFillStrokeStyles.fillStyle](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n默认值: rgba(0,0,0,.15)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Font的fontSize属性如何使用？",
    "md": "参数: fontSize\n说明: 字体大小\n类型: number\n默认值: 16\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Font的fontWeight属性如何使用？",
    "md": "参数: fontWeight\n说明: 字体粗细\n类型: `normal` | `light` | `weight` | number\n默认值: normal\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Font的fontFamily属性如何使用？",
    "md": "参数: fontFamily\n说明: 字体类型\n类型: string\n默认值: sans-serif\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Font的fontStyle属性如何使用？",
    "md": "参数: fontStyle\n说明: 字体样式\n类型: `none` | `normal` | `italic` | `oblique`\n默认值: normal\n版本: -\n"
  },
  {
    "title": "ant-design 中 Watermark - Font的textAlign属性如何使用？",
    "md": "参数: textAlign\n说明: 指定文本对齐方向\n类型: [CanvasTextAlign](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)\n默认值: 5.10.0\n"
  },
  {
    "title": "ant-design 的 Upload 有哪些配置？",
    "md": "#### Upload - Upload\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| accept | 接受上传的文件类型，详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) | string | - | - |\n| action | 上传的地址 | string | (file) => Promise\\<string> | - | - |\n| beforeUpload | 上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 `File` 或 `Blob` 对象则上传 resolve 传入对象）；也可以返回 `Upload.LIST_IGNORE`，此时列表中将不展示此文件。 **注意：IE9 不支持该方法** | (file, fileList) => boolean | Promise\\<File> | `Upload.LIST_IGNORE` | - | - |\n| customRequest | 通过覆盖默认的上传行为，可以自定义自己的上传实现 | function | - | - |\n| data | 上传所需额外参数或返回上传额外参数的方法 | object|(file) => object | Promise\\<object> | - | - |\n| defaultFileList | 默认已经上传的文件列表 | object\\[] | - | - |\n| directory | 支持上传文件夹（[caniuse](https://caniuse.com/#feat=input-file-directory)） | boolean | false | - |\n| disabled | 是否禁用 | boolean | false | 对于自定义 Upload children 时请将 disabled 属性同时传给 child node 确保 disabled 渲染效果保持一致 |\n| fileList | 已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423) | [UploadFile](#uploadfile)\\[] | - | - |\n| headers | 设置上传的请求头部，IE10 以上有效 | object | - | - |\n| iconRender | 自定义显示 icon | (file: UploadFile, listType?: UploadListType) => ReactNode | - | - |\n| isImageUrl | 自定义缩略图是否使用 \\<img /> 标签进行显示 | (file: UploadFile) => boolean | [(内部实现)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68) | - |\n| itemRender | 自定义上传列表项 | (originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode | - | 4.16.0 |\n| listType | 上传列表的内建样式，支持四种基本样式 `text`, `picture`, `picture-card` 和 `picture-circle` | string | `text` | `picture-circle`(5.2.0+) |\n| maxCount | 限制上传数量。当为 1 时，始终用最新上传的文件代替当前文件 | number | - | 4.10.0 |\n| method | 上传请求的 http method | string | `post` | - |\n| multiple | 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件 | boolean | false | - |\n| name | 发到后台的文件参数名 | string | `file` | - |\n| openFileDialogOnClick | 点击打开文件对话框 | boolean | true | - |\n| previewFile | 自定义文件预览逻辑 | (file: File | Blob) => Promise\\<dataURL: string> | - | - |\n| progress | 自定义进度条样式 | [ProgressProps](/components/progress-cn#api)（仅支持 `type=\"line\"`） | { strokeWidth: 2, showInfo: false } | 4.3.0 |\n| showUploadList | 是否展示文件列表, 可设为一个对象，用于单独设定 `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` 和 `downloadIcon` | boolean | { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean, previewIcon?: ReactNode | (file: UploadFile) => ReactNode, removeIcon?: ReactNode | (file: UploadFile) => ReactNode, downloadIcon?: ReactNode | (file: UploadFile) => ReactNode } | true | function: 4.7.0 |\n| withCredentials | 上传请求时是否携带 cookie | boolean | false | - |\n| onChange | 上传文件改变时的回调，上传每个阶段都会触发该事件。详见 [onChange](#onchange) | function | - | - |\n| onDrop | 当文件被拖入上传区域时执行的回调功能 | (event: React.DragEvent) => void | - | 4.16.0 |\n| onDownload | 点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页 | function(file): void | (跳转新标签页) | - |\n| onPreview | 点击文件链接或预览图标时的回调 | function(file) | - | - |\n| onRemove | 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除 | function(file): boolean | Promise | - | - |\n#### Upload - UploadFile\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| crossOrigin | CORS 属性设置 | `'anonymous'` | `'use-credentials'` | `''` | - | 4.20.0 |\n| name | 文件名 | string | - | - |\n| percent | 上传进度 | number | - | - |\n| status | 上传状态，不同状态展示颜色也会有所不同 | `error` | `done` | `uploading` | `removed` | - | - |\n| thumbUrl | 缩略图地址 | string | - | - |\n| uid | 唯一标识符，不设置时会自动生成 | string | - | - |\n| url | 下载地址 | string | - | - |\n"
  },
  {
    "title": "ant-design 的 Upload - Upload 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| accept | 接受上传的文件类型，详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) | string | - | - |\n| action | 上传的地址 | string | (file) => Promise\\<string> | - | - |\n| beforeUpload | 上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 `File` 或 `Blob` 对象则上传 resolve 传入对象）；也可以返回 `Upload.LIST_IGNORE`，此时列表中将不展示此文件。 **注意：IE9 不支持该方法** | (file, fileList) => boolean | Promise\\<File> | `Upload.LIST_IGNORE` | - | - |\n| customRequest | 通过覆盖默认的上传行为，可以自定义自己的上传实现 | function | - | - |\n| data | 上传所需额外参数或返回上传额外参数的方法 | object|(file) => object | Promise\\<object> | - | - |\n| defaultFileList | 默认已经上传的文件列表 | object\\[] | - | - |\n| directory | 支持上传文件夹（[caniuse](https://caniuse.com/#feat=input-file-directory)） | boolean | false | - |\n| disabled | 是否禁用 | boolean | false | 对于自定义 Upload children 时请将 disabled 属性同时传给 child node 确保 disabled 渲染效果保持一致 |\n| fileList | 已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423) | [UploadFile](#uploadfile)\\[] | - | - |\n| headers | 设置上传的请求头部，IE10 以上有效 | object | - | - |\n| iconRender | 自定义显示 icon | (file: UploadFile, listType?: UploadListType) => ReactNode | - | - |\n| isImageUrl | 自定义缩略图是否使用 \\<img /> 标签进行显示 | (file: UploadFile) => boolean | [(内部实现)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68) | - |\n| itemRender | 自定义上传列表项 | (originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode | - | 4.16.0 |\n| listType | 上传列表的内建样式，支持四种基本样式 `text`, `picture`, `picture-card` 和 `picture-circle` | string | `text` | `picture-circle`(5.2.0+) |\n| maxCount | 限制上传数量。当为 1 时，始终用最新上传的文件代替当前文件 | number | - | 4.10.0 |\n| method | 上传请求的 http method | string | `post` | - |\n| multiple | 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件 | boolean | false | - |\n| name | 发到后台的文件参数名 | string | `file` | - |\n| openFileDialogOnClick | 点击打开文件对话框 | boolean | true | - |\n| previewFile | 自定义文件预览逻辑 | (file: File | Blob) => Promise\\<dataURL: string> | - | - |\n| progress | 自定义进度条样式 | [ProgressProps](/components/progress-cn#api)（仅支持 `type=\"line\"`） | { strokeWidth: 2, showInfo: false } | 4.3.0 |\n| showUploadList | 是否展示文件列表, 可设为一个对象，用于单独设定 `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` 和 `downloadIcon` | boolean | { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean, previewIcon?: ReactNode | (file: UploadFile) => ReactNode, removeIcon?: ReactNode | (file: UploadFile) => ReactNode, downloadIcon?: ReactNode | (file: UploadFile) => ReactNode } | true | function: 4.7.0 |\n| withCredentials | 上传请求时是否携带 cookie | boolean | false | - |\n| onChange | 上传文件改变时的回调，上传每个阶段都会触发该事件。详见 [onChange](#onchange) | function | - | - |\n| onDrop | 当文件被拖入上传区域时执行的回调功能 | (event: React.DragEvent) => void | - | 4.16.0 |\n| onDownload | 点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页 | function(file): void | (跳转新标签页) | - |\n| onPreview | 点击文件链接或预览图标时的回调 | function(file) | - | - |\n| onRemove | 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除 | function(file): boolean | Promise | - | - |\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的accept属性如何使用？",
    "md": "参数: accept\n说明: 接受上传的文件类型，详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的action属性如何使用？",
    "md": "参数: action\n说明: 上传的地址\n类型: string | (file) => Promise\\<string>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的beforeUpload属性如何使用？",
    "md": "参数: beforeUpload\n说明: 上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 `File` 或 `Blob` 对象则上传 resolve 传入对象）；也可以返回 `Upload.LIST_IGNORE`，此时列表中将不展示此文件。 **注意：IE9 不支持该方法**\n类型: (file, fileList) => boolean | Promise\\<File> | `Upload.LIST_IGNORE`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的customRequest属性如何使用？",
    "md": "参数: customRequest\n说明: 通过覆盖默认的上传行为，可以自定义自己的上传实现\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的data属性如何使用？",
    "md": "参数: data\n说明: 上传所需额外参数或返回上传额外参数的方法\n类型: object|(file) => object | Promise\\<object>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的defaultFileList属性如何使用？",
    "md": "参数: defaultFileList\n说明: 默认已经上传的文件列表\n类型: object\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的directory属性如何使用？",
    "md": "参数: directory\n说明: 支持上传文件夹（[caniuse](https://caniuse.com/#feat=input-file-directory)）\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: 对于自定义 Upload children 时请将 disabled 属性同时传给 child node 确保 disabled 渲染效果保持一致\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的fileList属性如何使用？",
    "md": "参数: fileList\n说明: 已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423)\n类型: [UploadFile](#uploadfile)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的headers属性如何使用？",
    "md": "参数: headers\n说明: 设置上传的请求头部，IE10 以上有效\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的iconRender属性如何使用？",
    "md": "参数: iconRender\n说明: 自定义显示 icon\n类型: (file: UploadFile, listType?: UploadListType) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的isImageUrl属性如何使用？",
    "md": "参数: isImageUrl\n说明: 自定义缩略图是否使用 \\<img /> 标签进行显示\n类型: (file: UploadFile) => boolean\n默认值: [(内部实现)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的itemRender属性如何使用？",
    "md": "参数: itemRender\n说明: 自定义上传列表项\n类型: (originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode\n默认值: -\n版本: 4.16.0\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的listType属性如何使用？",
    "md": "参数: listType\n说明: 上传列表的内建样式，支持四种基本样式 `text`, `picture`, `picture-card` 和 `picture-circle`\n类型: string\n默认值: `text`\n版本: `picture-circle`(5.2.0+)\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的maxCount属性如何使用？",
    "md": "参数: maxCount\n说明: 限制上传数量。当为 1 时，始终用最新上传的文件代替当前文件\n类型: number\n默认值: -\n版本: 4.10.0\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的method属性如何使用？",
    "md": "参数: method\n说明: 上传请求的 http method\n类型: string\n默认值: `post`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的name属性如何使用？",
    "md": "参数: name\n说明: 发到后台的文件参数名\n类型: string\n默认值: `file`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的openFileDialogOnClick属性如何使用？",
    "md": "参数: openFileDialogOnClick\n说明: 点击打开文件对话框\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的previewFile属性如何使用？",
    "md": "参数: previewFile\n说明: 自定义文件预览逻辑\n类型: (file: File | Blob) => Promise\\<dataURL: string>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的progress属性如何使用？",
    "md": "参数: progress\n说明: 自定义进度条样式\n类型: [ProgressProps](/components/progress-cn#api)（仅支持 `type=\"line\"`）\n默认值: { strokeWidth: 2, showInfo: false }\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的showUploadList属性如何使用？",
    "md": "参数: showUploadList\n说明: 是否展示文件列表, 可设为一个对象，用于单独设定 `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` 和 `downloadIcon`\n类型: boolean | { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean, previewIcon?: ReactNode | (file: UploadFile) => ReactNode, removeIcon?: ReactNode | (file: UploadFile) => ReactNode, downloadIcon?: ReactNode | (file: UploadFile) => ReactNode }\n默认值: true\n版本: function: 4.7.0\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的withCredentials属性如何使用？",
    "md": "参数: withCredentials\n说明: 上传请求时是否携带 cookie\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 上传文件改变时的回调，上传每个阶段都会触发该事件。详见 [onChange](#onchange)\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的onDrop属性如何使用？",
    "md": "参数: onDrop\n说明: 当文件被拖入上传区域时执行的回调功能\n类型: (event: React.DragEvent) => void\n默认值: -\n版本: 4.16.0\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的onDownload属性如何使用？",
    "md": "参数: onDownload\n说明: 点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页\n类型: function(file): void\n默认值: (跳转新标签页)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的onPreview属性如何使用？",
    "md": "参数: onPreview\n说明: 点击文件链接或预览图标时的回调\n类型: function(file)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - Upload的onRemove属性如何使用？",
    "md": "参数: onRemove\n说明: 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除\n类型: function(file): boolean | Promise\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Upload - UploadFile 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| crossOrigin | CORS 属性设置 | `'anonymous'` | `'use-credentials'` | `''` | - | 4.20.0 |\n| name | 文件名 | string | - | - |\n| percent | 上传进度 | number | - | - |\n| status | 上传状态，不同状态展示颜色也会有所不同 | `error` | `done` | `uploading` | `removed` | - | - |\n| thumbUrl | 缩略图地址 | string | - | - |\n| uid | 唯一标识符，不设置时会自动生成 | string | - | - |\n| url | 下载地址 | string | - | - |\n"
  },
  {
    "title": "ant-design 中 Upload - UploadFile的crossOrigin属性如何使用？",
    "md": "参数: crossOrigin\n说明: CORS 属性设置\n类型: `'anonymous'` | `'use-credentials'` | `''`\n默认值: -\n版本: 4.20.0\n"
  },
  {
    "title": "ant-design 中 Upload - UploadFile的name属性如何使用？",
    "md": "参数: name\n说明: 文件名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - UploadFile的percent属性如何使用？",
    "md": "参数: percent\n说明: 上传进度\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - UploadFile的status属性如何使用？",
    "md": "参数: status\n说明: 上传状态，不同状态展示颜色也会有所不同\n类型: `error` | `done` | `uploading` | `removed`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - UploadFile的thumbUrl属性如何使用？",
    "md": "参数: thumbUrl\n说明: 缩略图地址\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - UploadFile的uid属性如何使用？",
    "md": "参数: uid\n说明: 唯一标识符，不设置时会自动生成\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Upload - UploadFile的url属性如何使用？",
    "md": "参数: url\n说明: 下载地址\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Typography 有哪些配置？",
    "md": "#### Typography - Typography.Text\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false | - |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean | [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false | - |\n| disabled | 禁用文本 | boolean | false | - |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean | [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时不能设置省略行数、是否可展开、onExpand 展开事件。不同于 Typography.Paragraph，Text 组件自身不带 100% 宽度样式，因而默认情况下初次缩略后宽度便不再变化。如果需要自适应宽度，请手工配置宽度样式 | boolean | [Omit\\<ellipsis, 'expandable' | 'rows' | 'onExpand'>](#ellipsis) | false | [ellipsis](#ellipsis) |\n| keyboard | 添加键盘样式 | boolean | false | 4.3.0 |\n| mark | 添加标记样式 | boolean | false | - |\n| onClick | 点击 Text 时的回调 | (event) => void | - | - |\n| strong | 是否加粗 | boolean | false | - |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` | `success` | `warning` | `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false | - |\n#### Typography - Typography.Title\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false | - |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean | [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false | - |\n| disabled | 禁用文本 | boolean | false | - |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean | [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | boolean | [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| level | 重要程度，相当于 `h1`、`h2`、`h3`、`h4`、`h5` | number: 1, 2, 3, 4, 5 | 1 | 5: 4.6.0 |\n| mark | 添加标记样式 | boolean | false | - |\n| onClick | 点击 Title 时的回调 | (event) => void | - | - |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` | `success` | `warning` | `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false | - |\n#### Typography - Typography.Paragraph\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false | - |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean | [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false | - |\n| disabled | 禁用文本 | boolean | false | - |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean | [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | boolean | [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| mark | 添加标记样式 | boolean | false | - |\n| onClick | 点击 Paragraph 时的回调 | (event) => void | - | - |\n| strong | 是否加粗 | boolean | false | - |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` | `success` | `warning` | `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false | - |\n#### Typography - copyable\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 剪切板数据的 Mime Type | 'text/plain' | 'text/html' | - | 4.21.0 |\n| icon | 自定义拷贝图标：\\[默认图标, 拷贝后的图标] | \\[ReactNode, ReactNode] | - | 4.6.0 |\n| text | 拷贝到剪切板里的文本 | string | - | - |\n| tooltips | 自定义提示文案，为 false 时隐藏文案 | \\[ReactNode, ReactNode] | \\[`复制`, `复制成功`] | 4.4.0 |\n| onCopy | 拷贝成功的回调函数 | function | - | - |\n#### Typography - editable\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoSize | 自动 resize 文本域 | boolean | { minRows: number, maxRows: number } | - | 4.4.0 |\n| editing | 控制是否是编辑中状态 | boolean | false | - |\n| icon | 自定义编辑图标 | ReactNode | \\<EditOutlined /> | 4.6.0 |\n| maxLength | 编辑中文本域最大长度 | number | - | 4.4.0 |\n| tooltip | 自定义提示文本，为 false 时关闭 | ReactNode | `编辑` | 4.6.0 |\n| text | 显式地指定编辑文案，为空时将隐式地使用 children | string | - | 4.24.0 |\n| onChange | 文本域编辑时触发 | function(value: string) | - | - |\n| onCancel | 按 ESC 退出编辑状态时触发 | function | - | - |\n| onStart | 进入编辑中状态时触发 | function | - | - |\n| onEnd | 按 ENTER 结束编辑状态时触发 | function | - | 4.14.0 |\n| triggerType | 编辑模式触发器类型，图标、文本或者两者都设置（不设置图标作为触发器时它会隐藏） | Array<`icon`|`text`> | \\[`icon`] | - |\n| enterIcon | 在编辑段中自定义“enter”图标（传递“null”将删除图标） | ReactNode | `<EnterOutlined />` | 4.17.0 |\n#### Typography - ellipsis\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| expandable | 是否可展开 | boolean | - | - |\n| rows | 最多显示的行数 | number | - | - |\n| suffix | 自定义省略内容后缀 | string | - | - |\n| symbol | 自定义展开描述文案 | ReactNode | `展开` | - |\n| tooltip | 省略时，展示提示信息 | ReactNode | [TooltipProps](/components/tooltip-cn/#api) | - | 4.11.0 |\n| onEllipsis | 触发省略时的回调 | function(ellipsis) | - | 4.2.0 |\n| onExpand | 点击展开时的回调 | function(event) | - | - |\n"
  },
  {
    "title": "ant-design 的 Typography - Typography.Text 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false | - |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean | [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false | - |\n| disabled | 禁用文本 | boolean | false | - |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean | [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时不能设置省略行数、是否可展开、onExpand 展开事件。不同于 Typography.Paragraph，Text 组件自身不带 100% 宽度样式，因而默认情况下初次缩略后宽度便不再变化。如果需要自适应宽度，请手工配置宽度样式 | boolean | [Omit\\<ellipsis, 'expandable' | 'rows' | 'onExpand'>](#ellipsis) | false | [ellipsis](#ellipsis) |\n| keyboard | 添加键盘样式 | boolean | false | 4.3.0 |\n| mark | 添加标记样式 | boolean | false | - |\n| onClick | 点击 Text 时的回调 | (event) => void | - | - |\n| strong | 是否加粗 | boolean | false | - |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` | `success` | `warning` | `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false | - |\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的code属性如何使用？",
    "md": "参数: code\n说明: 添加代码样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的copyable属性如何使用？",
    "md": "参数: copyable\n说明: 是否可拷贝，为对象时可进行各种自定义\n类型: boolean | [copyable](#copyable)\n默认值: false\n版本: [copyable](#copyable)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的delete属性如何使用？",
    "md": "参数: delete\n说明: 添加删除线样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用文本\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的editable属性如何使用？",
    "md": "参数: editable\n说明: 是否可编辑，为对象时可对编辑进行控制\n类型: boolean | [editable](#editable)\n默认值: false\n版本: [editable](#editable)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的ellipsis属性如何使用？",
    "md": "参数: ellipsis\n说明: 自动溢出省略，为对象时不能设置省略行数、是否可展开、onExpand 展开事件。不同于 Typography.Paragraph，Text 组件自身不带 100% 宽度样式，因而默认情况下初次缩略后宽度便不再变化。如果需要自适应宽度，请手工配置宽度样式\n类型: boolean | [Omit\\<ellipsis, 'expandable' | 'rows' | 'onExpand'>](#ellipsis)\n默认值: false\n版本: [ellipsis](#ellipsis)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的keyboard属性如何使用？",
    "md": "参数: keyboard\n说明: 添加键盘样式\n类型: boolean\n默认值: false\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的mark属性如何使用？",
    "md": "参数: mark\n说明: 添加标记样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击 Text 时的回调\n类型: (event) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的strong属性如何使用？",
    "md": "参数: strong\n说明: 是否加粗\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的italic属性如何使用？",
    "md": "参数: italic\n说明: 是否斜体\n类型: boolean\n默认值: false\n版本: 4.16.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的type属性如何使用？",
    "md": "参数: type\n说明: 文本类型\n类型: `secondary` | `success` | `warning` | `danger`\n默认值: -\n版本: success: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Text的underline属性如何使用？",
    "md": "参数: underline\n说明: 添加下划线样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 的 Typography - Typography.Title 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false | - |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean | [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false | - |\n| disabled | 禁用文本 | boolean | false | - |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean | [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | boolean | [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| level | 重要程度，相当于 `h1`、`h2`、`h3`、`h4`、`h5` | number: 1, 2, 3, 4, 5 | 1 | 5: 4.6.0 |\n| mark | 添加标记样式 | boolean | false | - |\n| onClick | 点击 Title 时的回调 | (event) => void | - | - |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` | `success` | `warning` | `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false | - |\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的code属性如何使用？",
    "md": "参数: code\n说明: 添加代码样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的copyable属性如何使用？",
    "md": "参数: copyable\n说明: 是否可拷贝，为对象时可进行各种自定义\n类型: boolean | [copyable](#copyable)\n默认值: false\n版本: [copyable](#copyable)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的delete属性如何使用？",
    "md": "参数: delete\n说明: 添加删除线样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用文本\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的editable属性如何使用？",
    "md": "参数: editable\n说明: 是否可编辑，为对象时可对编辑进行控制\n类型: boolean | [editable](#editable)\n默认值: false\n版本: [editable](#editable)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的ellipsis属性如何使用？",
    "md": "参数: ellipsis\n说明: 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等\n类型: boolean | [ellipsis](#ellipsis)\n默认值: false\n版本: [ellipsis](#ellipsis)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的level属性如何使用？",
    "md": "参数: level\n说明: 重要程度，相当于 `h1`、`h2`、`h3`、`h4`、`h5`\n类型: number: 1, 2, 3, 4, 5\n默认值: 1\n版本: 5: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的mark属性如何使用？",
    "md": "参数: mark\n说明: 添加标记样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击 Title 时的回调\n类型: (event) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的italic属性如何使用？",
    "md": "参数: italic\n说明: 是否斜体\n类型: boolean\n默认值: false\n版本: 4.16.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的type属性如何使用？",
    "md": "参数: type\n说明: 文本类型\n类型: `secondary` | `success` | `warning` | `danger`\n默认值: -\n版本: success: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Title的underline属性如何使用？",
    "md": "参数: underline\n说明: 添加下划线样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 的 Typography - Typography.Paragraph 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false | - |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean | [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false | - |\n| disabled | 禁用文本 | boolean | false | - |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean | [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | boolean | [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| mark | 添加标记样式 | boolean | false | - |\n| onClick | 点击 Paragraph 时的回调 | (event) => void | - | - |\n| strong | 是否加粗 | boolean | false | - |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` | `success` | `warning` | `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false | - |\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的code属性如何使用？",
    "md": "参数: code\n说明: 添加代码样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的copyable属性如何使用？",
    "md": "参数: copyable\n说明: 是否可拷贝，为对象时可进行各种自定义\n类型: boolean | [copyable](#copyable)\n默认值: false\n版本: [copyable](#copyable)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的delete属性如何使用？",
    "md": "参数: delete\n说明: 添加删除线样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用文本\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的editable属性如何使用？",
    "md": "参数: editable\n说明: 是否可编辑，为对象时可对编辑进行控制\n类型: boolean | [editable](#editable)\n默认值: false\n版本: [editable](#editable)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的ellipsis属性如何使用？",
    "md": "参数: ellipsis\n说明: 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等\n类型: boolean | [ellipsis](#ellipsis)\n默认值: false\n版本: [ellipsis](#ellipsis)\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的mark属性如何使用？",
    "md": "参数: mark\n说明: 添加标记样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击 Paragraph 时的回调\n类型: (event) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的strong属性如何使用？",
    "md": "参数: strong\n说明: 是否加粗\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的italic属性如何使用？",
    "md": "参数: italic\n说明: 是否斜体\n类型: boolean\n默认值: false\n版本: 4.16.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的type属性如何使用？",
    "md": "参数: type\n说明: 文本类型\n类型: `secondary` | `success` | `warning` | `danger`\n默认值: -\n版本: success: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Typography - Typography.Paragraph的underline属性如何使用？",
    "md": "参数: underline\n说明: 添加下划线样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 的 Typography - copyable 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 剪切板数据的 Mime Type | 'text/plain' | 'text/html' | - | 4.21.0 |\n| icon | 自定义拷贝图标：\\[默认图标, 拷贝后的图标] | \\[ReactNode, ReactNode] | - | 4.6.0 |\n| text | 拷贝到剪切板里的文本 | string | - | - |\n| tooltips | 自定义提示文案，为 false 时隐藏文案 | \\[ReactNode, ReactNode] | \\[`复制`, `复制成功`] | 4.4.0 |\n| onCopy | 拷贝成功的回调函数 | function | - | - |\n"
  },
  {
    "title": "ant-design 中 Typography - copyable的format属性如何使用？",
    "md": "参数: format\n说明: 剪切板数据的 Mime Type\n类型: 'text/plain' | 'text/html'\n默认值: -\n版本: 4.21.0\n"
  },
  {
    "title": "ant-design 中 Typography - copyable的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义拷贝图标：\\[默认图标, 拷贝后的图标]\n类型: \\[ReactNode, ReactNode]\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Typography - copyable的text属性如何使用？",
    "md": "参数: text\n说明: 拷贝到剪切板里的文本\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - copyable的tooltips属性如何使用？",
    "md": "参数: tooltips\n说明: 自定义提示文案，为 false 时隐藏文案\n类型: \\[ReactNode, ReactNode]\n默认值: \\[`复制`, `复制成功`]\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Typography - copyable的onCopy属性如何使用？",
    "md": "参数: onCopy\n说明: 拷贝成功的回调函数\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Typography - editable 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoSize | 自动 resize 文本域 | boolean | { minRows: number, maxRows: number } | - | 4.4.0 |\n| editing | 控制是否是编辑中状态 | boolean | false | - |\n| icon | 自定义编辑图标 | ReactNode | \\<EditOutlined /> | 4.6.0 |\n| maxLength | 编辑中文本域最大长度 | number | - | 4.4.0 |\n| tooltip | 自定义提示文本，为 false 时关闭 | ReactNode | `编辑` | 4.6.0 |\n| text | 显式地指定编辑文案，为空时将隐式地使用 children | string | - | 4.24.0 |\n| onChange | 文本域编辑时触发 | function(value: string) | - | - |\n| onCancel | 按 ESC 退出编辑状态时触发 | function | - | - |\n| onStart | 进入编辑中状态时触发 | function | - | - |\n| onEnd | 按 ENTER 结束编辑状态时触发 | function | - | 4.14.0 |\n| triggerType | 编辑模式触发器类型，图标、文本或者两者都设置（不设置图标作为触发器时它会隐藏） | Array<`icon`|`text`> | \\[`icon`] | - |\n| enterIcon | 在编辑段中自定义“enter”图标（传递“null”将删除图标） | ReactNode | `<EnterOutlined />` | 4.17.0 |\n"
  },
  {
    "title": "ant-design 中 Typography - editable的autoSize属性如何使用？",
    "md": "参数: autoSize\n说明: 自动 resize 文本域\n类型: boolean | { minRows: number, maxRows: number }\n默认值: -\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Typography - editable的editing属性如何使用？",
    "md": "参数: editing\n说明: 控制是否是编辑中状态\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - editable的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义编辑图标\n类型: ReactNode\n默认值: \\<EditOutlined />\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Typography - editable的maxLength属性如何使用？",
    "md": "参数: maxLength\n说明: 编辑中文本域最大长度\n类型: number\n默认值: -\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Typography - editable的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 自定义提示文本，为 false 时关闭\n类型: ReactNode\n默认值: `编辑`\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Typography - editable的text属性如何使用？",
    "md": "参数: text\n说明: 显式地指定编辑文案，为空时将隐式地使用 children\n类型: string\n默认值: -\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Typography - editable的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 文本域编辑时触发\n类型: function(value: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - editable的onCancel属性如何使用？",
    "md": "参数: onCancel\n说明: 按 ESC 退出编辑状态时触发\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - editable的onStart属性如何使用？",
    "md": "参数: onStart\n说明: 进入编辑中状态时触发\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - editable的onEnd属性如何使用？",
    "md": "参数: onEnd\n说明: 按 ENTER 结束编辑状态时触发\n类型: function\n默认值: -\n版本: 4.14.0\n"
  },
  {
    "title": "ant-design 中 Typography - editable的triggerType属性如何使用？",
    "md": "参数: triggerType\n说明: 编辑模式触发器类型，图标、文本或者两者都设置（不设置图标作为触发器时它会隐藏）\n类型: Array<`icon`|`text`>\n默认值: \\[`icon`]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - editable的enterIcon属性如何使用？",
    "md": "参数: enterIcon\n说明: 在编辑段中自定义“enter”图标（传递“null”将删除图标）\n类型: ReactNode\n默认值: `<EnterOutlined />`\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 的 Typography - ellipsis 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| expandable | 是否可展开 | boolean | - | - |\n| rows | 最多显示的行数 | number | - | - |\n| suffix | 自定义省略内容后缀 | string | - | - |\n| symbol | 自定义展开描述文案 | ReactNode | `展开` | - |\n| tooltip | 省略时，展示提示信息 | ReactNode | [TooltipProps](/components/tooltip-cn/#api) | - | 4.11.0 |\n| onEllipsis | 触发省略时的回调 | function(ellipsis) | - | 4.2.0 |\n| onExpand | 点击展开时的回调 | function(event) | - | - |\n"
  },
  {
    "title": "ant-design 中 Typography - ellipsis的expandable属性如何使用？",
    "md": "参数: expandable\n说明: 是否可展开\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - ellipsis的rows属性如何使用？",
    "md": "参数: rows\n说明: 最多显示的行数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - ellipsis的suffix属性如何使用？",
    "md": "参数: suffix\n说明: 自定义省略内容后缀\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - ellipsis的symbol属性如何使用？",
    "md": "参数: symbol\n说明: 自定义展开描述文案\n类型: ReactNode\n默认值: `展开`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Typography - ellipsis的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 省略时，展示提示信息\n类型: ReactNode | [TooltipProps](/components/tooltip-cn/#api)\n默认值: -\n版本: 4.11.0\n"
  },
  {
    "title": "ant-design 中 Typography - ellipsis的onEllipsis属性如何使用？",
    "md": "参数: onEllipsis\n说明: 触发省略时的回调\n类型: function(ellipsis)\n默认值: -\n版本: 4.2.0\n"
  },
  {
    "title": "ant-design 中 Typography - ellipsis的onExpand属性如何使用？",
    "md": "参数: onExpand\n说明: 点击展开时的回调\n类型: function(event)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 TreeSelect 有哪些配置？",
    "md": "#### TreeSelect - Tree props\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |\n| autoClearSearchValue | 当多选模式下值被选择，自动清空搜索框 | boolean | true | - |\n| defaultValue | 指定默认选中的条目 | string | string\\[] | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean | number | true | 5.5.0 |\n| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode, props) => ReactNode | - | - |\n| dropdownStyle | 下拉菜单的样式 | object | - | - |\n| fieldNames | 自定义节点 label、value、children 的字段 | object | { label: `label`, value: `value`, children: `children` } | 4.17.0 |\n| filterTreeNode | 是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值 | boolean | function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值) | function | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body | - |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 {value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string\\[] } 的格式 | boolean | false | - |\n| listHeight | 设置弹窗滚动高度 | number | 256 | - |\n| loadData | 异步加载数据。在过滤时不会调用以防止网络堵塞，可参考 FAQ 获得更多内容 | function(node) | - | - |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number | `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode | function(omittedValues) | - | - |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - | - |\n| multiple | 支持多选（当设置 treeCheckable 时自动变为 true） | boolean | false | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` | - |\n| placeholder | 选择框默认文字 | string | - | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| searchValue | 搜索框的值，可以通过 `onSearch` 获取用户输入 | string | - | - |\n| showCheckedStrategy | 配置 `treeCheckable` 时，定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点)。`TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时)。 默认只显示子节点 | `TreeSelect.SHOW_ALL` | `TreeSelect.SHOW_PARENT` | `TreeSelect.SHOW_CHILD` | `TreeSelect.SHOW_CHILD` | - |\n| showSearch | 是否支持搜索框 | boolean | 单选：false | 多选：true | - |\n| size | 选择框大小 | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | `<DownOutlined />` | - |\n| switcherIcon | 自定义树节点的展开/折叠图标 | ReactNode | ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| tagRender | 自定义 tag 内容，多选时生效 | (props) => ReactNode | - | - |\n| treeCheckable | 显示 Checkbox | boolean | false | - |\n| treeCheckStrictly | `checkable` 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true | boolean | false | - |\n| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一） | array<{value, title, children, \\[disabled, disableCheckbox, selectable, checkable]}> | \\[] | - |\n| treeDataSimpleMode | 使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...]， `pId` 是父节点的 id) | boolean | object<{ id: string, pId: string, rootPId: string }> | false | - |\n| treeDefaultExpandAll | 默认展开所有树节点 | boolean | false | - |\n| treeDefaultExpandedKeys | 默认展开的树节点 | string\\[] | - | - |\n| treeExpandAction | 点击节点 title 时的展开逻辑，可选：false | `click` | `doubleClick` | string | boolean | false | 4.21.0 |\n| treeExpandedKeys | 设置展开的树节点 | string\\[] | - | - |\n| treeIcon | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式 | boolean | false | - |\n| treeLine | 是否展示线条样式，请参考 [Tree - showLine](/components/tree-cn#components-tree-demo-line) | boolean | object | false | 4.17.0 |\n| treeLoadedKeys | （受控）已经加载的节点，需要配合 `loadData` 使用 | string\\[] | \\[] | - |\n| treeNodeFilterProp | 输入项过滤对应的 treeNode 属性 | string | `value` | - |\n| treeNodeLabelProp | 作为显示的 prop 设置 | string | `title` | - |\n| value | 指定当前选中的条目 | string | string\\[] | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onChange | 选中树节点时调用此函数 | function(value, label, extra) | - | - |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - | - |\n| onSearch | 文本框值变化时的回调 | function(value: string) | - | - |\n| onSelect | 被选中时调用 | function(value, node, extra) | - | - |\n| onTreeExpand | 展示节点时调用 | function(expandedKeys) | - | - |\n#### TreeSelect - Tree 方法\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n#### TreeSelect - TreeNode props\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| checkable | 当树为 Checkbox 时，设置独立节点是否展示 Checkbox | boolean | - | - |\n| disableCheckbox | 禁掉 Checkbox | boolean | false | - |\n| disabled | 是否禁用 | boolean | false | - |\n| isLeaf | 是否是叶子节点 | boolean | false | - |\n| key | 此项必须设置（其值在整个树范围内唯一） | string | - | - |\n| selectable | 是否可选 | boolean | true | - |\n| title | 树节点显示的内容 | ReactNode | `---` | - |\n| value | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | string | - | - |\n"
  },
  {
    "title": "ant-design 的 TreeSelect - Tree props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |\n| autoClearSearchValue | 当多选模式下值被选择，自动清空搜索框 | boolean | true | - |\n| defaultValue | 指定默认选中的条目 | string | string\\[] | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean | number | true | 5.5.0 |\n| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode, props) => ReactNode | - | - |\n| dropdownStyle | 下拉菜单的样式 | object | - | - |\n| fieldNames | 自定义节点 label、value、children 的字段 | object | { label: `label`, value: `value`, children: `children` } | 4.17.0 |\n| filterTreeNode | 是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值 | boolean | function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值) | function | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body | - |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 {value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string\\[] } 的格式 | boolean | false | - |\n| listHeight | 设置弹窗滚动高度 | number | 256 | - |\n| loadData | 异步加载数据。在过滤时不会调用以防止网络堵塞，可参考 FAQ 获得更多内容 | function(node) | - | - |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number | `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode | function(omittedValues) | - | - |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - | - |\n| multiple | 支持多选（当设置 treeCheckable 时自动变为 true） | boolean | false | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` | - |\n| placeholder | 选择框默认文字 | string | - | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| searchValue | 搜索框的值，可以通过 `onSearch` 获取用户输入 | string | - | - |\n| showCheckedStrategy | 配置 `treeCheckable` 时，定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点)。`TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时)。 默认只显示子节点 | `TreeSelect.SHOW_ALL` | `TreeSelect.SHOW_PARENT` | `TreeSelect.SHOW_CHILD` | `TreeSelect.SHOW_CHILD` | - |\n| showSearch | 是否支持搜索框 | boolean | 单选：false | 多选：true | - |\n| size | 选择框大小 | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | `<DownOutlined />` | - |\n| switcherIcon | 自定义树节点的展开/折叠图标 | ReactNode | ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| tagRender | 自定义 tag 内容，多选时生效 | (props) => ReactNode | - | - |\n| treeCheckable | 显示 Checkbox | boolean | false | - |\n| treeCheckStrictly | `checkable` 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true | boolean | false | - |\n| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一） | array<{value, title, children, \\[disabled, disableCheckbox, selectable, checkable]}> | \\[] | - |\n| treeDataSimpleMode | 使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...]， `pId` 是父节点的 id) | boolean | object<{ id: string, pId: string, rootPId: string }> | false | - |\n| treeDefaultExpandAll | 默认展开所有树节点 | boolean | false | - |\n| treeDefaultExpandedKeys | 默认展开的树节点 | string\\[] | - | - |\n| treeExpandAction | 点击节点 title 时的展开逻辑，可选：false | `click` | `doubleClick` | string | boolean | false | 4.21.0 |\n| treeExpandedKeys | 设置展开的树节点 | string\\[] | - | - |\n| treeIcon | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式 | boolean | false | - |\n| treeLine | 是否展示线条样式，请参考 [Tree - showLine](/components/tree-cn#components-tree-demo-line) | boolean | object | false | 4.17.0 |\n| treeLoadedKeys | （受控）已经加载的节点，需要配合 `loadData` 使用 | string\\[] | \\[] | - |\n| treeNodeFilterProp | 输入项过滤对应的 treeNode 属性 | string | `value` | - |\n| treeNodeLabelProp | 作为显示的 prop 设置 | string | `title` | - |\n| value | 指定当前选中的条目 | string | string\\[] | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onChange | 选中树节点时调用此函数 | function(value, label, extra) | - | - |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - | - |\n| onSearch | 文本框值变化时的回调 | function(value: string) | - | - |\n| onSelect | 被选中时调用 | function(value, node, extra) | - | - |\n| onTreeExpand | 展示节点时调用 | function(expandedKeys) | - | - |\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 自定义清除按钮\n类型: boolean | { clearIcon?: ReactNode }\n默认值: false\n版本: 5.8.0: 支持对象形式\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的autoClearSearchValue属性如何使用？",
    "md": "参数: autoClearSearchValue\n说明: 当多选模式下值被选择，自动清空搜索框\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 指定默认选中的条目\n类型: string | string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 下拉菜单的 className 属性\n类型: string\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的popupMatchSelectWidth属性如何使用？",
    "md": "参数: popupMatchSelectWidth\n说明: 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动\n类型: boolean | number\n默认值: true\n版本: 5.5.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的dropdownRender属性如何使用？",
    "md": "参数: dropdownRender\n说明: 自定义下拉框内容\n类型: (originNode: ReactNode, props) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的dropdownStyle属性如何使用？",
    "md": "参数: dropdownStyle\n说明: 下拉菜单的样式\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的fieldNames属性如何使用？",
    "md": "参数: fieldNames\n说明: 自定义节点 label、value、children 的字段\n类型: object\n默认值: { label: `label`, value: `value`, children: `children` }\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的filterTreeNode属性如何使用？",
    "md": "参数: filterTreeNode\n说明: 是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值\n类型: boolean | function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值)\n默认值: function\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)\n类型: function(triggerNode)\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的labelInValue属性如何使用？",
    "md": "参数: labelInValue\n说明: 是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 {value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string\\[] } 的格式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的listHeight属性如何使用？",
    "md": "参数: listHeight\n说明: 设置弹窗滚动高度\n类型: number\n默认值: 256\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的loadData属性如何使用？",
    "md": "参数: loadData\n说明: 异步加载数据。在过滤时不会调用以防止网络堵塞，可参考 FAQ 获得更多内容\n类型: function(node)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的maxTagCount属性如何使用？",
    "md": "参数: maxTagCount\n说明: 最多显示多少个 tag，响应式模式会对性能产生损耗\n类型: number | `responsive`\n默认值: -\n版本: responsive: 4.10\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的maxTagPlaceholder属性如何使用？",
    "md": "参数: maxTagPlaceholder\n说明: 隐藏 tag 时显示的内容\n类型: ReactNode | function(omittedValues)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的maxTagTextLength属性如何使用？",
    "md": "参数: maxTagTextLength\n说明: 最大显示的 tag 文本长度\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 支持多选（当设置 treeCheckable 时自动变为 true）\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的notFoundContent属性如何使用？",
    "md": "参数: notFoundContent\n说明: 当下拉列表为空时显示的内容\n类型: ReactNode\n默认值: `Not Found`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 选择框默认文字\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的placement属性如何使用？",
    "md": "参数: placement\n说明: 选择框弹出的位置\n类型: `bottomLeft` `bottomRight` `topLeft` `topRight`\n默认值: bottomLeft\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的searchValue属性如何使用？",
    "md": "参数: searchValue\n说明: 搜索框的值，可以通过 `onSearch` 获取用户输入\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的showCheckedStrategy属性如何使用？",
    "md": "参数: showCheckedStrategy\n说明: 配置 `treeCheckable` 时，定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点)。`TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时)。 默认只显示子节点\n类型: `TreeSelect.SHOW_ALL` | `TreeSelect.SHOW_PARENT` | `TreeSelect.SHOW_CHILD`\n默认值: `TreeSelect.SHOW_CHILD`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的showSearch属性如何使用？",
    "md": "参数: showSearch\n说明: 是否支持搜索框\n类型: boolean\n默认值: 单选：false | 多选：true\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的size属性如何使用？",
    "md": "参数: size\n说明: 选择框大小\n类型: `large` | `middle` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的suffixIcon属性如何使用？",
    "md": "参数: suffixIcon\n说明: 自定义的选择框后缀图标\n类型: ReactNode\n默认值: `<DownOutlined />`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的switcherIcon属性如何使用？",
    "md": "参数: switcherIcon\n说明: 自定义树节点的展开/折叠图标\n类型: ReactNode | ((props: AntTreeNodeProps) => ReactNode)\n默认值: -\n版本: renderProps: 4.20.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的tagRender属性如何使用？",
    "md": "参数: tagRender\n说明: 自定义 tag 内容，多选时生效\n类型: (props) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeCheckable属性如何使用？",
    "md": "参数: treeCheckable\n说明: 显示 Checkbox\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeCheckStrictly属性如何使用？",
    "md": "参数: treeCheckStrictly\n说明: `checkable` 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeData属性如何使用？",
    "md": "参数: treeData\n说明: treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）\n类型: array<{value, title, children, \\[disabled, disableCheckbox, selectable, checkable]}>\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeDataSimpleMode属性如何使用？",
    "md": "参数: treeDataSimpleMode\n说明: 使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...]， `pId` 是父节点的 id)\n类型: boolean | object<{ id: string, pId: string, rootPId: string }>\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeDefaultExpandAll属性如何使用？",
    "md": "参数: treeDefaultExpandAll\n说明: 默认展开所有树节点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeDefaultExpandedKeys属性如何使用？",
    "md": "参数: treeDefaultExpandedKeys\n说明: 默认展开的树节点\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeExpandAction属性如何使用？",
    "md": "参数: treeExpandAction\n说明: 点击节点 title 时的展开逻辑，可选：false | `click` | `doubleClick`\n类型: string | boolean\n默认值: false\n版本: 4.21.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeExpandedKeys属性如何使用？",
    "md": "参数: treeExpandedKeys\n说明: 设置展开的树节点\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeIcon属性如何使用？",
    "md": "参数: treeIcon\n说明: 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeLine属性如何使用？",
    "md": "参数: treeLine\n说明: 是否展示线条样式，请参考 [Tree - showLine](/components/tree-cn#components-tree-demo-line)\n类型: boolean | object\n默认值: false\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeLoadedKeys属性如何使用？",
    "md": "参数: treeLoadedKeys\n说明: （受控）已经加载的节点，需要配合 `loadData` 使用\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeNodeFilterProp属性如何使用？",
    "md": "参数: treeNodeFilterProp\n说明: 输入项过滤对应的 treeNode 属性\n类型: string\n默认值: `value`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的treeNodeLabelProp属性如何使用？",
    "md": "参数: treeNodeLabelProp\n说明: 作为显示的 prop 设置\n类型: string\n默认值: `title`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的value属性如何使用？",
    "md": "参数: value\n说明: 指定当前选中的条目\n类型: string | string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的virtual属性如何使用？",
    "md": "参数: virtual\n说明: 设置 false 时关闭虚拟滚动\n类型: boolean\n默认值: true\n版本: 4.1.0\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选中树节点时调用此函数\n类型: function(value, label, extra)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的onDropdownVisibleChange属性如何使用？",
    "md": "参数: onDropdownVisibleChange\n说明: 展开下拉菜单的回调\n类型: function(open)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的onSearch属性如何使用？",
    "md": "参数: onSearch\n说明: 文本框值变化时的回调\n类型: function(value: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 被选中时调用\n类型: function(value, node, extra)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree props的onTreeExpand属性如何使用？",
    "md": "参数: onTreeExpand\n说明: 展示节点时调用\n类型: function(expandedKeys)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 TreeSelect - Tree 方法 有哪些配置？",
    "md": "| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - Tree 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 TreeSelect - TreeNode props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| checkable | 当树为 Checkbox 时，设置独立节点是否展示 Checkbox | boolean | - | - |\n| disableCheckbox | 禁掉 Checkbox | boolean | false | - |\n| disabled | 是否禁用 | boolean | false | - |\n| isLeaf | 是否是叶子节点 | boolean | false | - |\n| key | 此项必须设置（其值在整个树范围内唯一） | string | - | - |\n| selectable | 是否可选 | boolean | true | - |\n| title | 树节点显示的内容 | ReactNode | `---` | - |\n| value | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | string | - | - |\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的checkable属性如何使用？",
    "md": "参数: checkable\n说明: 当树为 Checkbox 时，设置独立节点是否展示 Checkbox\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的disableCheckbox属性如何使用？",
    "md": "参数: disableCheckbox\n说明: 禁掉 Checkbox\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的isLeaf属性如何使用？",
    "md": "参数: isLeaf\n说明: 是否是叶子节点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的key属性如何使用？",
    "md": "参数: key\n说明: 此项必须设置（其值在整个树范围内唯一）\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的selectable属性如何使用？",
    "md": "参数: selectable\n说明: 是否可选\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的title属性如何使用？",
    "md": "参数: title\n说明: 树节点显示的内容\n类型: ReactNode\n默认值: `---`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TreeSelect - TreeNode props的value属性如何使用？",
    "md": "参数: value\n说明: 默认根据此属性值进行筛选（其值在整个树范围内唯一）\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Tree 有哪些配置？",
    "md": "#### Tree - Tree props\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowDrop | 是否允许拖拽时放置在该节点 | ({ dropNode, dropPosition }) => boolean | - | - |\n| autoExpandParent | 是否自动展开父节点 | boolean | false | - |\n| blockNode | 是否节点占据一行 | boolean | false | - |\n| checkable | 节点前添加 Checkbox 复选框 | boolean | false | - |\n| checkedKeys | （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置 `checkable` 和 `checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联 | string\\[] | {checked: string\\[], halfChecked: string\\[]} | \\[] | - |\n| checkStrictly | checkable 状态下节点选择完全受控（父子节点选中状态不再关联） | boolean | false | - |\n| defaultCheckedKeys | 默认选中复选框的树节点 | string\\[] | \\[] | - |\n| defaultExpandAll | 默认展开所有树节点 | boolean | false | - |\n| defaultExpandedKeys | 默认展开指定的树节点 | string\\[] | \\[] | - |\n| defaultExpandParent | 默认展开父节点 | boolean | true | - |\n| defaultSelectedKeys | 默认选中的树节点 | string\\[] | \\[] | - |\n| disabled | 将树禁用 | boolean | false | - |\n| draggable | 设置节点可拖拽，可以通过 `icon: false` 关闭拖拽提示图标 | boolean | ((node: DataNode) => boolean) | { icon?: React.ReactNode | false, nodeDraggable?: (node: DataNode) => boolean } | false | `config`: 4.17.0 |\n| expandedKeys | （受控）展开指定的树节点 | string\\[] | \\[] | - |\n| fieldNames | 自定义节点 title、key、children 的字段 | object | { title: `title`, key: `key`, children: `children` } | 4.17.0 |\n| filterTreeNode | 按需筛选树节点（高亮），返回 true | function(node) | - | - |\n| height | 设置虚拟滚动容器高度，设置后内部节点不再支持横向滚动 | number | - | - |\n| icon | 自定义树节点图标。 | ReactNode | (props) => ReactNode | - | - |\n| loadData | 异步加载数据 | function(node) | - | - |\n| loadedKeys | （受控）已经加载的节点，需要配合 `loadData` 使用 | string\\[] | \\[] | - |\n| multiple | 支持点选多个节点（节点本身） | boolean | false | - |\n| rootStyle | 添加在 Tree 最外层的 style | CSSProperties | - | 4.20.0 |\n| selectable | 是否可选中 | boolean | true | - |\n| selectedKeys | （受控）设置选中的树节点，多选需设置 `multiple` 为 true | string\\[] | - | - |\n| showIcon | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式 | boolean | false | - |\n| showLine | 是否展示连接线 | boolean | { showLeafIcon: ReactNode | ((props: AntTreeNodeProps) => ReactNode) } | false | - |\n| switcherIcon | 自定义树节点的展开/折叠图标 | ReactNode | ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| titleRender | 自定义渲染节点 | (nodeData) => ReactNode | - | 4.5.0 |\n| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一） | array<{key, title, children, \\[disabled, selectable]}> | - | - |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onCheck | 点击复选框触发 | function(checkedKeys, e:{checked: boolean, checkedNodes, node, event, halfCheckedKeys}) | - | - |\n| onDragEnd | dragend 触发时调用 | function({event, node}) | - | - |\n| onDragEnter | dragenter 触发时调用 | function({event, node, expandedKeys}) | - | - |\n| onDragLeave | dragleave 触发时调用 | function({event, node}) | - | - |\n| onDragOver | dragover 触发时调用 | function({event, node}) | - | - |\n| onDragStart | 开始拖拽时调用 | function({event, node}) | - | - |\n| onDrop | drop 触发时调用 | function({event, node, dragNode, dragNodesKeys}) | - | - |\n| onExpand | 展开/收起节点时触发 | function(expandedKeys, {expanded: boolean, node}) | - | - |\n| onLoad | 节点加载完毕时触发 | function(loadedKeys, {event, node}) | - | - |\n| onRightClick | 响应右键点击 | function({event, node}) | - | - |\n| onSelect | 点击树节点触发 | function(selectedKeys, e:{selected: boolean, selectedNodes, node, event}) | - | - |\n#### Tree - TreeNode props\n| 参数 | 说明 | 类型 | 默认值 | - |\n| --- | --- | --- | --- | --- |\n| checkable | 当树为 checkable 时，设置独立节点是否展示 Checkbox | boolean | - | - |\n| disableCheckbox | 禁掉 checkbox | boolean | false | - |\n| disabled | 禁掉响应 | boolean | false | - |\n| icon | 自定义图标。可接收组件，props 为当前节点 props | ReactNode | (props) => ReactNode | - | - |\n| isLeaf | 设置为叶子节点 (设置了 `loadData` 时有效)。为 `false` 时会强制将其作为父节点 | boolean | - | - |\n| key | 被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！ | string | (内部计算出的节点位置) | - |\n| selectable | 设置节点是否可被选中 | boolean | true | - |\n| title | 标题 | ReactNode | `---` | - |\n#### Tree - DirectoryTree props\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| expandAction | 目录展开逻辑，可选：false | `click` | `doubleClick` | string | boolean | `click` |\n#### Tree - Tree 方法\n| 名称 | 说明 |\n| --- | --- |\n| scrollTo({ key: string | number; align?: 'top' | 'bottom' | 'auto'; offset?: number }) | 虚拟滚动下，滚动到指定 key 条目 |\n"
  },
  {
    "title": "ant-design 的 Tree - Tree props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowDrop | 是否允许拖拽时放置在该节点 | ({ dropNode, dropPosition }) => boolean | - | - |\n| autoExpandParent | 是否自动展开父节点 | boolean | false | - |\n| blockNode | 是否节点占据一行 | boolean | false | - |\n| checkable | 节点前添加 Checkbox 复选框 | boolean | false | - |\n| checkedKeys | （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置 `checkable` 和 `checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联 | string\\[] | {checked: string\\[], halfChecked: string\\[]} | \\[] | - |\n| checkStrictly | checkable 状态下节点选择完全受控（父子节点选中状态不再关联） | boolean | false | - |\n| defaultCheckedKeys | 默认选中复选框的树节点 | string\\[] | \\[] | - |\n| defaultExpandAll | 默认展开所有树节点 | boolean | false | - |\n| defaultExpandedKeys | 默认展开指定的树节点 | string\\[] | \\[] | - |\n| defaultExpandParent | 默认展开父节点 | boolean | true | - |\n| defaultSelectedKeys | 默认选中的树节点 | string\\[] | \\[] | - |\n| disabled | 将树禁用 | boolean | false | - |\n| draggable | 设置节点可拖拽，可以通过 `icon: false` 关闭拖拽提示图标 | boolean | ((node: DataNode) => boolean) | { icon?: React.ReactNode | false, nodeDraggable?: (node: DataNode) => boolean } | false | `config`: 4.17.0 |\n| expandedKeys | （受控）展开指定的树节点 | string\\[] | \\[] | - |\n| fieldNames | 自定义节点 title、key、children 的字段 | object | { title: `title`, key: `key`, children: `children` } | 4.17.0 |\n| filterTreeNode | 按需筛选树节点（高亮），返回 true | function(node) | - | - |\n| height | 设置虚拟滚动容器高度，设置后内部节点不再支持横向滚动 | number | - | - |\n| icon | 自定义树节点图标。 | ReactNode | (props) => ReactNode | - | - |\n| loadData | 异步加载数据 | function(node) | - | - |\n| loadedKeys | （受控）已经加载的节点，需要配合 `loadData` 使用 | string\\[] | \\[] | - |\n| multiple | 支持点选多个节点（节点本身） | boolean | false | - |\n| rootStyle | 添加在 Tree 最外层的 style | CSSProperties | - | 4.20.0 |\n| selectable | 是否可选中 | boolean | true | - |\n| selectedKeys | （受控）设置选中的树节点，多选需设置 `multiple` 为 true | string\\[] | - | - |\n| showIcon | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式 | boolean | false | - |\n| showLine | 是否展示连接线 | boolean | { showLeafIcon: ReactNode | ((props: AntTreeNodeProps) => ReactNode) } | false | - |\n| switcherIcon | 自定义树节点的展开/折叠图标 | ReactNode | ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| titleRender | 自定义渲染节点 | (nodeData) => ReactNode | - | 4.5.0 |\n| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一） | array<{key, title, children, \\[disabled, selectable]}> | - | - |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onCheck | 点击复选框触发 | function(checkedKeys, e:{checked: boolean, checkedNodes, node, event, halfCheckedKeys}) | - | - |\n| onDragEnd | dragend 触发时调用 | function({event, node}) | - | - |\n| onDragEnter | dragenter 触发时调用 | function({event, node, expandedKeys}) | - | - |\n| onDragLeave | dragleave 触发时调用 | function({event, node}) | - | - |\n| onDragOver | dragover 触发时调用 | function({event, node}) | - | - |\n| onDragStart | 开始拖拽时调用 | function({event, node}) | - | - |\n| onDrop | drop 触发时调用 | function({event, node, dragNode, dragNodesKeys}) | - | - |\n| onExpand | 展开/收起节点时触发 | function(expandedKeys, {expanded: boolean, node}) | - | - |\n| onLoad | 节点加载完毕时触发 | function(loadedKeys, {event, node}) | - | - |\n| onRightClick | 响应右键点击 | function({event, node}) | - | - |\n| onSelect | 点击树节点触发 | function(selectedKeys, e:{selected: boolean, selectedNodes, node, event}) | - | - |\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的allowDrop属性如何使用？",
    "md": "参数: allowDrop\n说明: 是否允许拖拽时放置在该节点\n类型: ({ dropNode, dropPosition }) => boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的autoExpandParent属性如何使用？",
    "md": "参数: autoExpandParent\n说明: 是否自动展开父节点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的blockNode属性如何使用？",
    "md": "参数: blockNode\n说明: 是否节点占据一行\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的checkable属性如何使用？",
    "md": "参数: checkable\n说明: 节点前添加 Checkbox 复选框\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的checkedKeys属性如何使用？",
    "md": "参数: checkedKeys\n说明: （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置 `checkable` 和 `checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联\n类型: string\\[] | {checked: string\\[], halfChecked: string\\[]}\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的checkStrictly属性如何使用？",
    "md": "参数: checkStrictly\n说明: checkable 状态下节点选择完全受控（父子节点选中状态不再关联）\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的defaultCheckedKeys属性如何使用？",
    "md": "参数: defaultCheckedKeys\n说明: 默认选中复选框的树节点\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的defaultExpandAll属性如何使用？",
    "md": "参数: defaultExpandAll\n说明: 默认展开所有树节点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的defaultExpandedKeys属性如何使用？",
    "md": "参数: defaultExpandedKeys\n说明: 默认展开指定的树节点\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的defaultExpandParent属性如何使用？",
    "md": "参数: defaultExpandParent\n说明: 默认展开父节点\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的defaultSelectedKeys属性如何使用？",
    "md": "参数: defaultSelectedKeys\n说明: 默认选中的树节点\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 将树禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的draggable属性如何使用？",
    "md": "参数: draggable\n说明: 设置节点可拖拽，可以通过 `icon: false` 关闭拖拽提示图标\n类型: boolean | ((node: DataNode) => boolean) | { icon?: React.ReactNode | false, nodeDraggable?: (node: DataNode) => boolean }\n默认值: false\n版本: `config`: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的expandedKeys属性如何使用？",
    "md": "参数: expandedKeys\n说明: （受控）展开指定的树节点\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的fieldNames属性如何使用？",
    "md": "参数: fieldNames\n说明: 自定义节点 title、key、children 的字段\n类型: object\n默认值: { title: `title`, key: `key`, children: `children` }\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的filterTreeNode属性如何使用？",
    "md": "参数: filterTreeNode\n说明: 按需筛选树节点（高亮），返回 true\n类型: function(node)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的height属性如何使用？",
    "md": "参数: height\n说明: 设置虚拟滚动容器高度，设置后内部节点不再支持横向滚动\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义树节点图标。\n类型: ReactNode | (props) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的loadData属性如何使用？",
    "md": "参数: loadData\n说明: 异步加载数据\n类型: function(node)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的loadedKeys属性如何使用？",
    "md": "参数: loadedKeys\n说明: （受控）已经加载的节点，需要配合 `loadData` 使用\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 支持点选多个节点（节点本身）\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的rootStyle属性如何使用？",
    "md": "参数: rootStyle\n说明: 添加在 Tree 最外层的 style\n类型: CSSProperties\n默认值: -\n版本: 4.20.0\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的selectable属性如何使用？",
    "md": "参数: selectable\n说明: 是否可选中\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的selectedKeys属性如何使用？",
    "md": "参数: selectedKeys\n说明: （受控）设置选中的树节点，多选需设置 `multiple` 为 true\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的showIcon属性如何使用？",
    "md": "参数: showIcon\n说明: 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的showLine属性如何使用？",
    "md": "参数: showLine\n说明: 是否展示连接线\n类型: boolean | { showLeafIcon: ReactNode | ((props: AntTreeNodeProps) => ReactNode) }\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的switcherIcon属性如何使用？",
    "md": "参数: switcherIcon\n说明: 自定义树节点的展开/折叠图标\n类型: ReactNode | ((props: AntTreeNodeProps) => ReactNode)\n默认值: -\n版本: renderProps: 4.20.0\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的titleRender属性如何使用？",
    "md": "参数: titleRender\n说明: 自定义渲染节点\n类型: (nodeData) => ReactNode\n默认值: -\n版本: 4.5.0\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的treeData属性如何使用？",
    "md": "参数: treeData\n说明: treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一）\n类型: array<{key, title, children, \\[disabled, selectable]}>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的virtual属性如何使用？",
    "md": "参数: virtual\n说明: 设置 false 时关闭虚拟滚动\n类型: boolean\n默认值: true\n版本: 4.1.0\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onCheck属性如何使用？",
    "md": "参数: onCheck\n说明: 点击复选框触发\n类型: function(checkedKeys, e:{checked: boolean, checkedNodes, node, event, halfCheckedKeys})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onDragEnd属性如何使用？",
    "md": "参数: onDragEnd\n说明: dragend 触发时调用\n类型: function({event, node})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onDragEnter属性如何使用？",
    "md": "参数: onDragEnter\n说明: dragenter 触发时调用\n类型: function({event, node, expandedKeys})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onDragLeave属性如何使用？",
    "md": "参数: onDragLeave\n说明: dragleave 触发时调用\n类型: function({event, node})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onDragOver属性如何使用？",
    "md": "参数: onDragOver\n说明: dragover 触发时调用\n类型: function({event, node})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onDragStart属性如何使用？",
    "md": "参数: onDragStart\n说明: 开始拖拽时调用\n类型: function({event, node})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onDrop属性如何使用？",
    "md": "参数: onDrop\n说明: drop 触发时调用\n类型: function({event, node, dragNode, dragNodesKeys})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onExpand属性如何使用？",
    "md": "参数: onExpand\n说明: 展开/收起节点时触发\n类型: function(expandedKeys, {expanded: boolean, node})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onLoad属性如何使用？",
    "md": "参数: onLoad\n说明: 节点加载完毕时触发\n类型: function(loadedKeys, {event, node})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onRightClick属性如何使用？",
    "md": "参数: onRightClick\n说明: 响应右键点击\n类型: function({event, node})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tree - Tree props的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 点击树节点触发\n类型: function(selectedKeys, e:{selected: boolean, selectedNodes, node, event})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Tree - TreeNode props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | - |\n| --- | --- | --- | --- | --- |\n| checkable | 当树为 checkable 时，设置独立节点是否展示 Checkbox | boolean | - | - |\n| disableCheckbox | 禁掉 checkbox | boolean | false | - |\n| disabled | 禁掉响应 | boolean | false | - |\n| icon | 自定义图标。可接收组件，props 为当前节点 props | ReactNode | (props) => ReactNode | - | - |\n| isLeaf | 设置为叶子节点 (设置了 `loadData` 时有效)。为 `false` 时会强制将其作为父节点 | boolean | - | - |\n| key | 被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！ | string | (内部计算出的节点位置) | - |\n| selectable | 设置节点是否可被选中 | boolean | true | - |\n| title | 标题 | ReactNode | `---` | - |\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的checkable属性如何使用？",
    "md": "参数: checkable\n说明: 当树为 checkable 时，设置独立节点是否展示 Checkbox\n类型: boolean\n默认值: -\n-: -\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的disableCheckbox属性如何使用？",
    "md": "参数: disableCheckbox\n说明: 禁掉 checkbox\n类型: boolean\n默认值: false\n-: -\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁掉响应\n类型: boolean\n默认值: false\n-: -\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义图标。可接收组件，props 为当前节点 props\n类型: ReactNode | (props) => ReactNode\n默认值: -\n-: -\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的isLeaf属性如何使用？",
    "md": "参数: isLeaf\n说明: 设置为叶子节点 (设置了 `loadData` 时有效)。为 `false` 时会强制将其作为父节点\n类型: boolean\n默认值: -\n-: -\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的key属性如何使用？",
    "md": "参数: key\n说明: 被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！\n类型: string\n默认值: (内部计算出的节点位置)\n-: -\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的selectable属性如何使用？",
    "md": "参数: selectable\n说明: 设置节点是否可被选中\n类型: boolean\n默认值: true\n-: -\n"
  },
  {
    "title": "ant-design 中 Tree - TreeNode props的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: ReactNode\n默认值: `---`\n-: -\n"
  },
  {
    "title": "ant-design 的 Tree - DirectoryTree props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| expandAction | 目录展开逻辑，可选：false | `click` | `doubleClick` | string | boolean | `click` |\n"
  },
  {
    "title": "ant-design 中 Tree - DirectoryTree props的expandAction属性如何使用？",
    "md": "参数: expandAction\n说明: 目录展开逻辑，可选：false | `click` | `doubleClick`\n类型: string | boolean\n默认值: `click`\n"
  },
  {
    "title": "ant-design 的 Tree - Tree 方法 有哪些配置？",
    "md": "| 名称 | 说明 |\n| --- | --- |\n| scrollTo({ key: string | number; align?: 'top' | 'bottom' | 'auto'; offset?: number }) | 虚拟滚动下，滚动到指定 key 条目 |\n"
  },
  {
    "title": "ant-design 中 Tree - Tree 方法的scrollTo({ key: string | number; align?: 'top' | 'bottom' | 'auto'; offset?: number })属性如何使用？",
    "md": "名称: scrollTo({ key: string | number; align?: 'top' | 'bottom' | 'auto'; offset?: number })\n说明: 虚拟滚动下，滚动到指定 key 条目\n"
  },
  {
    "title": "ant-design 的 Transfer 有哪些配置？",
    "md": "#### Transfer - Transfer\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| dataSource | 数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外 | [RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[] | \\[] | - |\n| disabled | 是否禁用 | boolean | false | - |\n| selectionsIcon | 自定义下拉菜单图标 | React.ReactNode | - | 5.8.0 |\n| filterOption | 根据搜索内容进行筛选，接收 `inputValue` `option` `direction` 三个参数，(`direction` 自5.9.0+支持)，当 `option` 符合筛选条件时，应返回 true，反之则返回 false | (inputValue, option, direction: `left` | `right`): boolean | - | - |\n| footer | 底部渲染函数 | (props, { direction }) => ReactNode | - | direction: 4.17.0 |\n| listStyle | 两个穿梭框的自定义样式 | object|({direction: `left` | `right`}) => object | - | - |\n| locale | 各种语言 | { itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode | ReactNode\\[]; } | { itemUnit: `项`, itemsUnit: `项`, searchPlaceholder: `请输入搜索内容` } | - |\n| oneWay | 展示为单向样式 | boolean | false | 4.3.0 |\n| operations | 操作文案集合，顺序从上至下 | string\\[] | \\[`>`, `<`] | - |\n| operationStyle | 操作栏的自定义样式 | CSSProperties | - | - |\n| pagination | 使用分页样式，自定义渲染列表下无效 | boolean | { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean } | false | 4.3.0 |\n| render | 每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 `label` 字段为 ReactElement，`value` 字段为 title | (record) => ReactNode | - | - |\n| selectAllLabels | 自定义顶部多选框标题的集合 | (ReactNode | (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[] | - | - |\n| selectedKeys | 设置哪些项应该被选中 | string\\[] | \\[] | - |\n| showSearch | 是否显示搜索框 | boolean | false | - |\n| showSelectAll | 是否展示全选勾选框 | boolean | true | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| targetKeys | 显示在右侧框数据的 key 集合 | string\\[] | \\[] | - |\n| titles | 标题集合，顺序从左至右 | ReactNode\\[] | - | - |\n| onChange | 选项在两栏之间转移时的回调函数 | (targetKeys, direction, moveKeys): void | - | - |\n| onScroll | 选项列表滚动时的回调函数 | (direction, event): void | - | - |\n| onSearch | 搜索框内容时改变时的回调函数 | (direction: `left` | `right`, value: string): void | - | - |\n| onSelectChange | 选中项发生改变时的回调函数 | (sourceSelectedKeys, targetSelectedKeys): void | - | - |\n#### Transfer - Render Props\n| 参数 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| direction | 渲染列表的方向 | `left` | `right` | - |\n| disabled | 是否禁用列表 | boolean | - |\n| filteredItems | 过滤后的数据 | RecordType\\[] | - |\n| selectedKeys | 选中的条目 | string\\[] | - |\n| onItemSelect | 勾选条目 | (key: string, selected: boolean) | - |\n| onItemSelectAll | 勾选一组条目 | (keys: string\\[], selected: boolean) | - |\n"
  },
  {
    "title": "ant-design 的 Transfer - Transfer 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| dataSource | 数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外 | [RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[] | \\[] | - |\n| disabled | 是否禁用 | boolean | false | - |\n| selectionsIcon | 自定义下拉菜单图标 | React.ReactNode | - | 5.8.0 |\n| filterOption | 根据搜索内容进行筛选，接收 `inputValue` `option` `direction` 三个参数，(`direction` 自5.9.0+支持)，当 `option` 符合筛选条件时，应返回 true，反之则返回 false | (inputValue, option, direction: `left` | `right`): boolean | - | - |\n| footer | 底部渲染函数 | (props, { direction }) => ReactNode | - | direction: 4.17.0 |\n| listStyle | 两个穿梭框的自定义样式 | object|({direction: `left` | `right`}) => object | - | - |\n| locale | 各种语言 | { itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode | ReactNode\\[]; } | { itemUnit: `项`, itemsUnit: `项`, searchPlaceholder: `请输入搜索内容` } | - |\n| oneWay | 展示为单向样式 | boolean | false | 4.3.0 |\n| operations | 操作文案集合，顺序从上至下 | string\\[] | \\[`>`, `<`] | - |\n| operationStyle | 操作栏的自定义样式 | CSSProperties | - | - |\n| pagination | 使用分页样式，自定义渲染列表下无效 | boolean | { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean } | false | 4.3.0 |\n| render | 每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 `label` 字段为 ReactElement，`value` 字段为 title | (record) => ReactNode | - | - |\n| selectAllLabels | 自定义顶部多选框标题的集合 | (ReactNode | (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[] | - | - |\n| selectedKeys | 设置哪些项应该被选中 | string\\[] | \\[] | - |\n| showSearch | 是否显示搜索框 | boolean | false | - |\n| showSelectAll | 是否展示全选勾选框 | boolean | true | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| targetKeys | 显示在右侧框数据的 key 集合 | string\\[] | \\[] | - |\n| titles | 标题集合，顺序从左至右 | ReactNode\\[] | - | - |\n| onChange | 选项在两栏之间转移时的回调函数 | (targetKeys, direction, moveKeys): void | - | - |\n| onScroll | 选项列表滚动时的回调函数 | (direction, event): void | - | - |\n| onSearch | 搜索框内容时改变时的回调函数 | (direction: `left` | `right`, value: string): void | - | - |\n| onSelectChange | 选中项发生改变时的回调函数 | (sourceSelectedKeys, targetSelectedKeys): void | - | - |\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的dataSource属性如何使用？",
    "md": "参数: dataSource\n说明: 数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外\n类型: [RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的selectionsIcon属性如何使用？",
    "md": "参数: selectionsIcon\n说明: 自定义下拉菜单图标\n类型: React.ReactNode\n默认值: -\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的filterOption属性如何使用？",
    "md": "参数: filterOption\n说明: 根据搜索内容进行筛选，接收 `inputValue` `option` `direction` 三个参数，(`direction` 自5.9.0+支持)，当 `option` 符合筛选条件时，应返回 true，反之则返回 false\n类型: (inputValue, option, direction: `left` | `right`): boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的footer属性如何使用？",
    "md": "参数: footer\n说明: 底部渲染函数\n类型: (props, { direction }) => ReactNode\n默认值: -\n版本: direction: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的listStyle属性如何使用？",
    "md": "参数: listStyle\n说明: 两个穿梭框的自定义样式\n类型: object|({direction: `left` | `right`}) => object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的locale属性如何使用？",
    "md": "参数: locale\n说明: 各种语言\n类型: { itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode | ReactNode\\[]; }\n默认值: { itemUnit: `项`, itemsUnit: `项`, searchPlaceholder: `请输入搜索内容` }\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的oneWay属性如何使用？",
    "md": "参数: oneWay\n说明: 展示为单向样式\n类型: boolean\n默认值: false\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的operations属性如何使用？",
    "md": "参数: operations\n说明: 操作文案集合，顺序从上至下\n类型: string\\[]\n默认值: \\[`>`, `<`]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的operationStyle属性如何使用？",
    "md": "参数: operationStyle\n说明: 操作栏的自定义样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的pagination属性如何使用？",
    "md": "参数: pagination\n说明: 使用分页样式，自定义渲染列表下无效\n类型: boolean | { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean }\n默认值: false\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的render属性如何使用？",
    "md": "参数: render\n说明: 每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 `label` 字段为 ReactElement，`value` 字段为 title\n类型: (record) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的selectAllLabels属性如何使用？",
    "md": "参数: selectAllLabels\n说明: 自定义顶部多选框标题的集合\n类型: (ReactNode | (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的selectedKeys属性如何使用？",
    "md": "参数: selectedKeys\n说明: 设置哪些项应该被选中\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的showSearch属性如何使用？",
    "md": "参数: showSearch\n说明: 是否显示搜索框\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的showSelectAll属性如何使用？",
    "md": "参数: showSelectAll\n说明: 是否展示全选勾选框\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的targetKeys属性如何使用？",
    "md": "参数: targetKeys\n说明: 显示在右侧框数据的 key 集合\n类型: string\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的titles属性如何使用？",
    "md": "参数: titles\n说明: 标题集合，顺序从左至右\n类型: ReactNode\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选项在两栏之间转移时的回调函数\n类型: (targetKeys, direction, moveKeys): void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的onScroll属性如何使用？",
    "md": "参数: onScroll\n说明: 选项列表滚动时的回调函数\n类型: (direction, event): void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的onSearch属性如何使用？",
    "md": "参数: onSearch\n说明: 搜索框内容时改变时的回调函数\n类型: (direction: `left` | `right`, value: string): void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Transfer的onSelectChange属性如何使用？",
    "md": "参数: onSelectChange\n说明: 选中项发生改变时的回调函数\n类型: (sourceSelectedKeys, targetSelectedKeys): void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Transfer - Render Props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| direction | 渲染列表的方向 | `left` | `right` | - |\n| disabled | 是否禁用列表 | boolean | - |\n| filteredItems | 过滤后的数据 | RecordType\\[] | - |\n| selectedKeys | 选中的条目 | string\\[] | - |\n| onItemSelect | 勾选条目 | (key: string, selected: boolean) | - |\n| onItemSelectAll | 勾选一组条目 | (keys: string\\[], selected: boolean) | - |\n"
  },
  {
    "title": "ant-design 中 Transfer - Render Props的direction属性如何使用？",
    "md": "参数: direction\n说明: 渲染列表的方向\n类型: `left` | `right`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Render Props的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用列表\n类型: boolean\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Render Props的filteredItems属性如何使用？",
    "md": "参数: filteredItems\n说明: 过滤后的数据\n类型: RecordType\\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Render Props的selectedKeys属性如何使用？",
    "md": "参数: selectedKeys\n说明: 选中的条目\n类型: string\\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Render Props的onItemSelect属性如何使用？",
    "md": "参数: onItemSelect\n说明: 勾选条目\n类型: (key: string, selected: boolean)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Transfer - Render Props的onItemSelectAll属性如何使用？",
    "md": "参数: onItemSelectAll\n说明: 勾选一组条目\n类型: (keys: string\\[], selected: boolean)\n版本: -\n"
  },
  {
    "title": "ant-design 的 Tour 有哪些配置？",
    "md": "#### Tour - Tour\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| arrow | 是否显示箭头，包含是否指向元素中心的配置 | `boolean` | `{ pointAtCenter: boolean}` | `true` | - |\n| closeIcon | 自定义关闭按钮 | `React.ReactNode` | `true` | 5.9.0 |\n| disabledInteraction | 禁用高亮区域交互 | `boolean` | `false` | 5.13.0 |\n| placement | 引导卡片相对于目标元素的位置 | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | `bottom` | - |\n| onClose | 关闭引导时的回调函数 | `Function` | - | - |\n| onFinish | 引导完成时的回调 | `Function` | - | - |\n| mask | 是否启用蒙层，也可传入配置改变蒙层样式和填充色 | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` | - |\n| type | 类型，影响底色与文字颜色 | `default` | `primary` | `default` | - |\n| open | 打开引导 | `boolean` | - | - |\n| onChange | 步骤改变时的回调，current 为当前的步骤 | `(current: number) => void` | - | - |\n| current | 当前处于哪一步 | `number` | - | - |\n| scrollIntoViewOptions | 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数 | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n| indicatorsRender | 自定义指示器 | `(current: number, total: number) => ReactNode` | - | 5.2.0 |\n| zIndex | Tour 的层级 | number | 1001 | 5.3.0 |\n| getPopupContainer | 设置 Tour 浮层的渲染节点，默认是 body | `(node: HTMLElement) => HTMLElement` | body | 5.12.0 |\n#### Tour - TourStep 引导步骤卡片\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| target | 获取引导卡片指向的元素，为空时居中于屏幕 | `() => HTMLElement` | `HTMLElement` | - | - |\n| arrow | 是否显示箭头，包含是否指向元素中心的配置 | `boolean` | `{ pointAtCenter: boolean}` | `true` | - |\n| closeIcon | 自定义关闭按钮 | `React.ReactNode` | `true` | 5.9.0 |\n| cover | 展示的图片或者视频 | `ReactNode` | - | - |\n| title | 标题 | `ReactNode` | - | - |\n| description | 主要描述部分 | `ReactNode` | - | - |\n| placement | 引导卡片相对于目标元素的位置 | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` `bottom` | - | - |\n| onClose | 关闭引导时的回调函数 | `Function` | - | - |\n| mask | 是否启用蒙层，也可传入配置改变蒙层样式和填充色，默认跟随 Tour 的 `mask` 属性 | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` | - |\n| type | 类型，影响底色与文字颜色 | `default` | `primary` | `default` | - |\n| nextButtonProps | 下一步按钮的属性 | `{ children: ReactNode; onClick: Function }` | - | - |\n| prevButtonProps | 上一步按钮的属性 | `{ children: ReactNode; onClick: Function }` | - | - |\n| scrollIntoViewOptions | 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数，默认跟随 Tour 的 `scrollIntoViewOptions` 属性 | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n"
  },
  {
    "title": "ant-design 的 Tour - Tour 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| arrow | 是否显示箭头，包含是否指向元素中心的配置 | `boolean` | `{ pointAtCenter: boolean}` | `true` | - |\n| closeIcon | 自定义关闭按钮 | `React.ReactNode` | `true` | 5.9.0 |\n| disabledInteraction | 禁用高亮区域交互 | `boolean` | `false` | 5.13.0 |\n| placement | 引导卡片相对于目标元素的位置 | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | `bottom` | - |\n| onClose | 关闭引导时的回调函数 | `Function` | - | - |\n| onFinish | 引导完成时的回调 | `Function` | - | - |\n| mask | 是否启用蒙层，也可传入配置改变蒙层样式和填充色 | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` | - |\n| type | 类型，影响底色与文字颜色 | `default` | `primary` | `default` | - |\n| open | 打开引导 | `boolean` | - | - |\n| onChange | 步骤改变时的回调，current 为当前的步骤 | `(current: number) => void` | - | - |\n| current | 当前处于哪一步 | `number` | - | - |\n| scrollIntoViewOptions | 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数 | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n| indicatorsRender | 自定义指示器 | `(current: number, total: number) => ReactNode` | - | 5.2.0 |\n| zIndex | Tour 的层级 | number | 1001 | 5.3.0 |\n| getPopupContainer | 设置 Tour 浮层的渲染节点，默认是 body | `(node: HTMLElement) => HTMLElement` | body | 5.12.0 |\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的arrow属性如何使用？",
    "md": "属性: arrow\n说明: 是否显示箭头，包含是否指向元素中心的配置\n类型: `boolean` | `{ pointAtCenter: boolean}`\n默认值: `true`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的closeIcon属性如何使用？",
    "md": "属性: closeIcon\n说明: 自定义关闭按钮\n类型: `React.ReactNode`\n默认值: `true`\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的disabledInteraction属性如何使用？",
    "md": "属性: disabledInteraction\n说明: 禁用高亮区域交互\n类型: `boolean`\n默认值: `false`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的placement属性如何使用？",
    "md": "属性: placement\n说明: 引导卡片相对于目标元素的位置\n类型: `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`\n默认值: `bottom`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的onClose属性如何使用？",
    "md": "属性: onClose\n说明: 关闭引导时的回调函数\n类型: `Function`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的onFinish属性如何使用？",
    "md": "属性: onFinish\n说明: 引导完成时的回调\n类型: `Function`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的mask属性如何使用？",
    "md": "属性: mask\n说明: 是否启用蒙层，也可传入配置改变蒙层样式和填充色\n类型: `boolean \\| { style?: React.CSSProperties; color?: string; }`\n默认值: `true`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的type属性如何使用？",
    "md": "属性: type\n说明: 类型，影响底色与文字颜色\n类型: `default` | `primary`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的open属性如何使用？",
    "md": "属性: open\n说明: 打开引导\n类型: `boolean`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的onChange属性如何使用？",
    "md": "属性: onChange\n说明: 步骤改变时的回调，current 为当前的步骤\n类型: `(current: number) => void`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的current属性如何使用？",
    "md": "属性: current\n说明: 当前处于哪一步\n类型: `number`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的scrollIntoViewOptions属性如何使用？",
    "md": "属性: scrollIntoViewOptions\n说明: 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数\n类型: `boolean \\| ScrollIntoViewOptions`\n默认值: `true`\n版本: 5.2.0\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的indicatorsRender属性如何使用？",
    "md": "属性: indicatorsRender\n说明: 自定义指示器\n类型: `(current: number, total: number) => ReactNode`\n默认值: -\n版本: 5.2.0\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的zIndex属性如何使用？",
    "md": "属性: zIndex\n说明: Tour 的层级\n类型: number\n默认值: 1001\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 中 Tour - Tour的getPopupContainer属性如何使用？",
    "md": "属性: getPopupContainer\n说明: 设置 Tour 浮层的渲染节点，默认是 body\n类型: `(node: HTMLElement) => HTMLElement`\n默认值: body\n版本: 5.12.0\n"
  },
  {
    "title": "ant-design 的 Tour - TourStep 引导步骤卡片 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| target | 获取引导卡片指向的元素，为空时居中于屏幕 | `() => HTMLElement` | `HTMLElement` | - | - |\n| arrow | 是否显示箭头，包含是否指向元素中心的配置 | `boolean` | `{ pointAtCenter: boolean}` | `true` | - |\n| closeIcon | 自定义关闭按钮 | `React.ReactNode` | `true` | 5.9.0 |\n| cover | 展示的图片或者视频 | `ReactNode` | - | - |\n| title | 标题 | `ReactNode` | - | - |\n| description | 主要描述部分 | `ReactNode` | - | - |\n| placement | 引导卡片相对于目标元素的位置 | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` `bottom` | - | - |\n| onClose | 关闭引导时的回调函数 | `Function` | - | - |\n| mask | 是否启用蒙层，也可传入配置改变蒙层样式和填充色，默认跟随 Tour 的 `mask` 属性 | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` | - |\n| type | 类型，影响底色与文字颜色 | `default` | `primary` | `default` | - |\n| nextButtonProps | 下一步按钮的属性 | `{ children: ReactNode; onClick: Function }` | - | - |\n| prevButtonProps | 上一步按钮的属性 | `{ children: ReactNode; onClick: Function }` | - | - |\n| scrollIntoViewOptions | 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数，默认跟随 Tour 的 `scrollIntoViewOptions` 属性 | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的target属性如何使用？",
    "md": "属性: target\n说明: 获取引导卡片指向的元素，为空时居中于屏幕\n类型: `() => HTMLElement` | `HTMLElement`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的arrow属性如何使用？",
    "md": "属性: arrow\n说明: 是否显示箭头，包含是否指向元素中心的配置\n类型: `boolean` | `{ pointAtCenter: boolean}`\n默认值: `true`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的closeIcon属性如何使用？",
    "md": "属性: closeIcon\n说明: 自定义关闭按钮\n类型: `React.ReactNode`\n默认值: `true`\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的cover属性如何使用？",
    "md": "属性: cover\n说明: 展示的图片或者视频\n类型: `ReactNode`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的title属性如何使用？",
    "md": "属性: title\n说明: 标题\n类型: `ReactNode`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的description属性如何使用？",
    "md": "属性: description\n说明: 主要描述部分\n类型: `ReactNode`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的placement属性如何使用？",
    "md": "属性: placement\n说明: 引导卡片相对于目标元素的位置\n类型: `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` `bottom`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的onClose属性如何使用？",
    "md": "属性: onClose\n说明: 关闭引导时的回调函数\n类型: `Function`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的mask属性如何使用？",
    "md": "属性: mask\n说明: 是否启用蒙层，也可传入配置改变蒙层样式和填充色，默认跟随 Tour 的 `mask` 属性\n类型: `boolean \\| { style?: React.CSSProperties; color?: string; }`\n默认值: `true`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的type属性如何使用？",
    "md": "属性: type\n说明: 类型，影响底色与文字颜色\n类型: `default` | `primary`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的nextButtonProps属性如何使用？",
    "md": "属性: nextButtonProps\n说明: 下一步按钮的属性\n类型: `{ children: ReactNode; onClick: Function }`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的prevButtonProps属性如何使用？",
    "md": "属性: prevButtonProps\n说明: 上一步按钮的属性\n类型: `{ children: ReactNode; onClick: Function }`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tour - TourStep 引导步骤卡片的scrollIntoViewOptions属性如何使用？",
    "md": "属性: scrollIntoViewOptions\n说明: 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数，默认跟随 Tour 的 `scrollIntoViewOptions` 属性\n类型: `boolean \\| ScrollIntoViewOptions`\n默认值: `true`\n版本: 5.2.0\n"
  },
  {
    "title": "ant-design 的 Tooltip 有哪些配置？",
    "md": "#### Tooltip - Tooltip\n| 参数  | 说明     | 类型                         | 默认值 |\n| ----- | -------- | ---------------------------- | ------ |\n| title | 提示文字 | ReactNode | () => ReactNode | -      |\n#### Tooltip - Tooltip\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 该值将合并到 placement 的配置中，设置参考 [rc-tooltip](https://github.com/react-component/tooltip) | object | - | - |\n| arrow | 修改箭头的显示状态以及修改箭头是否指向目标元素中心 | boolean | { pointAtCenter: boolean } | true | 5.2.0 |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置 | boolean | true | - |\n| color | 背景颜色 | string | - | 4.3.0 |\n| defaultOpen | 默认是否显隐 | boolean | false | 4.23.0 |\n| destroyTooltipOnHide | 关闭后是否销毁 Tooltip | boolean | false | - |\n| fresh | 默认情况下，Tooltip 在关闭时会缓存内容。设置该属性后会始终保持更新 | boolean | false | 5.10.0 |\n| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上 | (triggerNode: HTMLElement) => HTMLElement | () => document.body | - |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0.1 | - |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 | - |\n| overlayClassName | 卡片类名 | string | - | - |\n| overlayStyle | 卡片样式 | object | - | - |\n| overlayInnerStyle | 卡片内容区域的样式对象 | object | - | - |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` | - |\n| trigger | 触发行为，可选 `hover` | `focus` | `click` | `contextMenu`，可使用数组设置多个触发行为 | string | string\\[] | `hover` | - |\n| open | 用于手动控制浮层显隐，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | boolean | false | 4.23.0 |\n| zIndex | 设置 Tooltip 的 `z-index` | number | - | - |\n| onOpenChange | 显示隐藏的回调 | (open: boolean) => void | - | 4.23.0 |\n"
  },
  {
    "title": "ant-design 的 Tooltip - Tooltip 有哪些配置？",
    "md": "| 参数  | 说明     | 类型                         | 默认值 |\n| ----- | -------- | ---------------------------- | ------ |\n| title | 提示文字 | ReactNode | () => ReactNode | -      |\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的title属性如何使用？",
    "md": "参数: title\n说明: 提示文字\n类型: ReactNode | () => ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Tooltip - Tooltip 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 该值将合并到 placement 的配置中，设置参考 [rc-tooltip](https://github.com/react-component/tooltip) | object | - | - |\n| arrow | 修改箭头的显示状态以及修改箭头是否指向目标元素中心 | boolean | { pointAtCenter: boolean } | true | 5.2.0 |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置 | boolean | true | - |\n| color | 背景颜色 | string | - | 4.3.0 |\n| defaultOpen | 默认是否显隐 | boolean | false | 4.23.0 |\n| destroyTooltipOnHide | 关闭后是否销毁 Tooltip | boolean | false | - |\n| fresh | 默认情况下，Tooltip 在关闭时会缓存内容。设置该属性后会始终保持更新 | boolean | false | 5.10.0 |\n| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上 | (triggerNode: HTMLElement) => HTMLElement | () => document.body | - |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0.1 | - |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 | - |\n| overlayClassName | 卡片类名 | string | - | - |\n| overlayStyle | 卡片样式 | object | - | - |\n| overlayInnerStyle | 卡片内容区域的样式对象 | object | - | - |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` | - |\n| trigger | 触发行为，可选 `hover` | `focus` | `click` | `contextMenu`，可使用数组设置多个触发行为 | string | string\\[] | `hover` | - |\n| open | 用于手动控制浮层显隐，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | boolean | false | 4.23.0 |\n| zIndex | 设置 Tooltip 的 `z-index` | number | - | - |\n| onOpenChange | 显示隐藏的回调 | (open: boolean) => void | - | 4.23.0 |\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的align属性如何使用？",
    "md": "参数: align\n说明: 该值将合并到 placement 的配置中，设置参考 [rc-tooltip](https://github.com/react-component/tooltip)\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的arrow属性如何使用？",
    "md": "参数: arrow\n说明: 修改箭头的显示状态以及修改箭头是否指向目标元素中心\n类型: boolean | { pointAtCenter: boolean }\n默认值: true\n版本: 5.2.0\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的autoAdjustOverflow属性如何使用？",
    "md": "参数: autoAdjustOverflow\n说明: 气泡被遮挡时自动调整位置\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的color属性如何使用？",
    "md": "参数: color\n说明: 背景颜色\n类型: string\n默认值: -\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的defaultOpen属性如何使用？",
    "md": "参数: defaultOpen\n说明: 默认是否显隐\n类型: boolean\n默认值: false\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的destroyTooltipOnHide属性如何使用？",
    "md": "参数: destroyTooltipOnHide\n说明: 关闭后是否销毁 Tooltip\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的fresh属性如何使用？",
    "md": "参数: fresh\n说明: 默认情况下，Tooltip 在关闭时会缓存内容。设置该属性后会始终保持更新\n类型: boolean\n默认值: false\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 浮层渲染父节点，默认渲染到 body 上\n类型: (triggerNode: HTMLElement) => HTMLElement\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的mouseEnterDelay属性如何使用？",
    "md": "参数: mouseEnterDelay\n说明: 鼠标移入后延时多少才显示 Tooltip，单位：秒\n类型: number\n默认值: 0.1\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的mouseLeaveDelay属性如何使用？",
    "md": "参数: mouseLeaveDelay\n说明: 鼠标移出后延时多少才隐藏 Tooltip，单位：秒\n类型: number\n默认值: 0.1\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的overlayClassName属性如何使用？",
    "md": "参数: overlayClassName\n说明: 卡片类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的overlayStyle属性如何使用？",
    "md": "参数: overlayStyle\n说明: 卡片样式\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的overlayInnerStyle属性如何使用？",
    "md": "参数: overlayInnerStyle\n说明: 卡片内容区域的样式对象\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的placement属性如何使用？",
    "md": "参数: placement\n说明: 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`\n类型: string\n默认值: `top`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 触发行为，可选 `hover` | `focus` | `click` | `contextMenu`，可使用数组设置多个触发行为\n类型: string | string\\[]\n默认值: `hover`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的open属性如何使用？",
    "md": "参数: open\n说明: 用于手动控制浮层显隐，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）\n类型: boolean\n默认值: false\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的zIndex属性如何使用？",
    "md": "参数: zIndex\n说明: 设置 Tooltip 的 `z-index`\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tooltip - Tooltip的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: 显示隐藏的回调\n类型: (open: boolean) => void\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 的 Timeline 有哪些配置？",
    "md": "#### Timeline - Timeline\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| mode | 通过设置 `mode` 可以改变时间轴和内容的相对位置 | `left` | `alternate` | `right` | - |\n| pending | 指定最后一个幽灵节点是否存在或内容 | ReactNode | false |\n| pendingDot | 当最后一个幽灵节点存在時，指定其时间图点 | ReactNode | \\<LoadingOutlined /> |\n| reverse | 节点排序 | boolean | false |\n| items | 选项配置 | [Items](#Items)\\[] | 5.2.0 |\n#### Timeline - Items\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| color | 指定圆圈颜色 `blue`、`red`、`green`、`gray`，或自定义的色值 | string | `blue` |\n| dot | 自定义时间轴点 | ReactNode | - |\n| label | 设置标签 | ReactNode | - |\n| children | 设置内容 | ReactNode | - |\n| position | 自定义节点位置 | `left` | `right` | - |\n"
  },
  {
    "title": "ant-design 的 Timeline - Timeline 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| mode | 通过设置 `mode` 可以改变时间轴和内容的相对位置 | `left` | `alternate` | `right` | - |\n| pending | 指定最后一个幽灵节点是否存在或内容 | ReactNode | false |\n| pendingDot | 当最后一个幽灵节点存在時，指定其时间图点 | ReactNode | \\<LoadingOutlined /> |\n| reverse | 节点排序 | boolean | false |\n| items | 选项配置 | [Items](#Items)\\[] | 5.2.0 |\n"
  },
  {
    "title": "ant-design 中 Timeline - Timeline的mode属性如何使用？",
    "md": "参数: mode\n说明: 通过设置 `mode` 可以改变时间轴和内容的相对位置\n类型: `left` | `alternate` | `right`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Timeline - Timeline的pending属性如何使用？",
    "md": "参数: pending\n说明: 指定最后一个幽灵节点是否存在或内容\n类型: ReactNode\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Timeline - Timeline的pendingDot属性如何使用？",
    "md": "参数: pendingDot\n说明: 当最后一个幽灵节点存在時，指定其时间图点\n类型: ReactNode\n默认值: \\<LoadingOutlined />\n"
  },
  {
    "title": "ant-design 中 Timeline - Timeline的reverse属性如何使用？",
    "md": "参数: reverse\n说明: 节点排序\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Timeline - Timeline的items属性如何使用？",
    "md": "参数: items\n说明: 选项配置\n类型: [Items](#Items)\\[]\n默认值: 5.2.0\n"
  },
  {
    "title": "ant-design 的 Timeline - Items 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| color | 指定圆圈颜色 `blue`、`red`、`green`、`gray`，或自定义的色值 | string | `blue` |\n| dot | 自定义时间轴点 | ReactNode | - |\n| label | 设置标签 | ReactNode | - |\n| children | 设置内容 | ReactNode | - |\n| position | 自定义节点位置 | `left` | `right` | - |\n"
  },
  {
    "title": "ant-design 中 Timeline - Items的color属性如何使用？",
    "md": "参数: color\n说明: 指定圆圈颜色 `blue`、`red`、`green`、`gray`，或自定义的色值\n类型: string\n默认值: `blue`\n"
  },
  {
    "title": "ant-design 中 Timeline - Items的dot属性如何使用？",
    "md": "参数: dot\n说明: 自定义时间轴点\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Timeline - Items的label属性如何使用？",
    "md": "参数: label\n说明: 设置标签\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Timeline - Items的children属性如何使用？",
    "md": "参数: children\n说明: 设置内容\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Timeline - Items的position属性如何使用？",
    "md": "参数: position\n说明: 自定义节点位置\n类型: `left` | `right`\n默认值: -\n"
  },
  {
    "title": "ant-design 的 TimePicker 有哪些配置？",
    "md": "#### TimePicker - TimePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | true | 5.8.0: 支持对象类型 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| cellRender | 自定义单元格的内容 | (current: number, info: { originNode: React.ReactNode, today: dayjs, range?: 'start' | 'end', subType: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| changeOnScroll | 在滚动时改变选择值 | boolean | false | 5.14.0 |\n| className | 选择器类名 | string | - | - |\n| defaultValue | 默认时间 | [dayjs](http://day.js.org/) | - | - |\n| disabled | 禁用全部操作 | boolean | false | - |\n| disabledTime | 不可选择的时间 | [DisabledTime](#disabledtime) | - | 4.19.0 |\n| format | 展示的时间格式 | string | `HH:mm:ss` | - |\n| getPopupContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | - | - |\n| hideDisabledOptions | 隐藏禁止选择的选项 | boolean | false | - |\n| hourStep | 小时选项间隔 | number | 1 | - |\n| inputReadOnly | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | boolean | false | - |\n| minuteStep | 分钟选项间隔 | number | 1 | - |\n| needConfirm | 是否需要确认按钮，为 `false` 时失去焦点即代表选择 | boolean | - | 5.14.0 |\n| open | 面板是否打开 | boolean | false | - |\n| placeholder | 没有值的时候显示的内容 | string | \\[string, string] | `请选择时间` | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| popupClassName | 弹出层类名 | string | - | - |\n| popupStyle | 弹出层样式对象 | object | - | - |\n| renderExtraFooter | 选择框底部显示自定义的内容 | () => ReactNode | - | - |\n| secondStep | 秒选项间隔 | number | 1 | - |\n| showNow | 面板是否显示“此刻”按钮 | boolean | - | 4.4.0 |\n| size | 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - | - |\n| use12Hours | 使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a` | boolean | false | - |\n| value | 当前时间 | [dayjs](http://day.js.org/) | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 时间发生变化的回调 | function(time: dayjs, timeString: string): void | - | - |\n| onOpenChange | 面板打开/关闭时的回调 | (open: boolean) => void | - | - |\n#### TimePicker - 方法\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n#### TimePicker - RangePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| disabledTime | 不可选择的时间 | [RangeDisabledTime](#rangedisabledtime) | - | 4.19.0 |\n| order | 始末时间是否自动排序 | boolean | true | 4.1.0 |\n"
  },
  {
    "title": "ant-design 的 TimePicker - TimePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | true | 5.8.0: 支持对象类型 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| cellRender | 自定义单元格的内容 | (current: number, info: { originNode: React.ReactNode, today: dayjs, range?: 'start' | 'end', subType: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| changeOnScroll | 在滚动时改变选择值 | boolean | false | 5.14.0 |\n| className | 选择器类名 | string | - | - |\n| defaultValue | 默认时间 | [dayjs](http://day.js.org/) | - | - |\n| disabled | 禁用全部操作 | boolean | false | - |\n| disabledTime | 不可选择的时间 | [DisabledTime](#disabledtime) | - | 4.19.0 |\n| format | 展示的时间格式 | string | `HH:mm:ss` | - |\n| getPopupContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | - | - |\n| hideDisabledOptions | 隐藏禁止选择的选项 | boolean | false | - |\n| hourStep | 小时选项间隔 | number | 1 | - |\n| inputReadOnly | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | boolean | false | - |\n| minuteStep | 分钟选项间隔 | number | 1 | - |\n| needConfirm | 是否需要确认按钮，为 `false` 时失去焦点即代表选择 | boolean | - | 5.14.0 |\n| open | 面板是否打开 | boolean | false | - |\n| placeholder | 没有值的时候显示的内容 | string | \\[string, string] | `请选择时间` | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| popupClassName | 弹出层类名 | string | - | - |\n| popupStyle | 弹出层样式对象 | object | - | - |\n| renderExtraFooter | 选择框底部显示自定义的内容 | () => ReactNode | - | - |\n| secondStep | 秒选项间隔 | number | 1 | - |\n| showNow | 面板是否显示“此刻”按钮 | boolean | - | 4.4.0 |\n| size | 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - | - |\n| use12Hours | 使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a` | boolean | false | - |\n| value | 当前时间 | [dayjs](http://day.js.org/) | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 时间发生变化的回调 | function(time: dayjs, timeString: string): void | - | - |\n| onOpenChange | 面板打开/关闭时的回调 | (open: boolean) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 自定义清除按钮\n类型: boolean | { clearIcon?: ReactNode }\n默认值: true\n版本: 5.8.0: 支持对象类型\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的cellRender属性如何使用？",
    "md": "参数: cellRender\n说明: 自定义单元格的内容\n类型: (current: number, info: { originNode: React.ReactNode, today: dayjs, range?: 'start' | 'end', subType: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的changeOnScroll属性如何使用？",
    "md": "参数: changeOnScroll\n说明: 在滚动时改变选择值\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的className属性如何使用？",
    "md": "参数: className\n说明: 选择器类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认时间\n类型: [dayjs](http://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用全部操作\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的disabledTime属性如何使用？",
    "md": "参数: disabledTime\n说明: 不可选择的时间\n类型: [DisabledTime](#disabledtime)\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的format属性如何使用？",
    "md": "参数: format\n说明: 展示的时间格式\n类型: string\n默认值: `HH:mm:ss`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 定义浮层的容器，默认为 body 上新建 div\n类型: function(trigger)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的hideDisabledOptions属性如何使用？",
    "md": "参数: hideDisabledOptions\n说明: 隐藏禁止选择的选项\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的hourStep属性如何使用？",
    "md": "参数: hourStep\n说明: 小时选项间隔\n类型: number\n默认值: 1\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的inputReadOnly属性如何使用？",
    "md": "参数: inputReadOnly\n说明: 设置输入框为只读（避免在移动设备上打开虚拟键盘）\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的minuteStep属性如何使用？",
    "md": "参数: minuteStep\n说明: 分钟选项间隔\n类型: number\n默认值: 1\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的needConfirm属性如何使用？",
    "md": "参数: needConfirm\n说明: 是否需要确认按钮，为 `false` 时失去焦点即代表选择\n类型: boolean\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的open属性如何使用？",
    "md": "参数: open\n说明: 面板是否打开\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 没有值的时候显示的内容\n类型: string | \\[string, string]\n默认值: `请选择时间`\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的placement属性如何使用？",
    "md": "参数: placement\n说明: 选择框弹出的位置\n类型: `bottomLeft` `bottomRight` `topLeft` `topRight`\n默认值: bottomLeft\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 弹出层类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的popupStyle属性如何使用？",
    "md": "参数: popupStyle\n说明: 弹出层样式对象\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的renderExtraFooter属性如何使用？",
    "md": "参数: renderExtraFooter\n说明: 选择框底部显示自定义的内容\n类型: () => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的secondStep属性如何使用？",
    "md": "参数: secondStep\n说明: 秒选项间隔\n类型: number\n默认值: 1\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的showNow属性如何使用？",
    "md": "参数: showNow\n说明: 面板是否显示“此刻”按钮\n类型: boolean\n默认值: -\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的size属性如何使用？",
    "md": "参数: size\n说明: 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px\n类型: `large` | `middle` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的suffixIcon属性如何使用？",
    "md": "参数: suffixIcon\n说明: 自定义的选择框后缀图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的use12Hours属性如何使用？",
    "md": "参数: use12Hours\n说明: 使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a`\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的value属性如何使用？",
    "md": "参数: value\n说明: 当前时间\n类型: [dayjs](http://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 时间发生变化的回调\n类型: function(time: dayjs, timeString: string): void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - TimePicker的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: 面板打开/关闭时的回调\n类型: (open: boolean) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 TimePicker - 方法 有哪些配置？",
    "md": "| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 TimePicker - 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 TimePicker - 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 TimePicker - RangePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| disabledTime | 不可选择的时间 | [RangeDisabledTime](#rangedisabledtime) | - | 4.19.0 |\n| order | 始末时间是否自动排序 | boolean | true | 4.1.0 |\n"
  },
  {
    "title": "ant-design 中 TimePicker - RangePicker的disabledTime属性如何使用？",
    "md": "参数: disabledTime\n说明: 不可选择的时间\n类型: [RangeDisabledTime](#rangedisabledtime)\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 TimePicker - RangePicker的order属性如何使用？",
    "md": "参数: order\n说明: 始末时间是否自动排序\n类型: boolean\n默认值: true\n版本: 4.1.0\n"
  },
  {
    "title": "ant-design 的 Tag 有哪些配置？",
    "md": "#### Tag - Tag\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| closeIcon | 自定义关闭按钮。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | false | 4.4.0 |\n| color | 标签色 | string | - | - |\n| icon | 设置图标 | ReactNode | - | - |\n| bordered | 是否有边框 | boolean | true | 5.4.0 |\n| onClose | 关闭时的回调（可通过 `e.preventDefault()` 来阻止默认行为） | (e) => void | - | - |\n#### Tag - Tag.CheckableTag\n| 参数     | 说明                 | 类型              | 默认值 |\n| -------- | -------------------- | ----------------- | ------ |\n| checked  | 设置标签的选中状态   | boolean           | false  |\n| onChange | 点击标签时触发的回调 | (checked) => void | -      |\n"
  },
  {
    "title": "ant-design 的 Tag - Tag 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| closeIcon | 自定义关闭按钮。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | false | 4.4.0 |\n| color | 标签色 | string | - | - |\n| icon | 设置图标 | ReactNode | - | - |\n| bordered | 是否有边框 | boolean | true | 5.4.0 |\n| onClose | 关闭时的回调（可通过 `e.preventDefault()` 来阻止默认行为） | (e) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Tag - Tag的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭按钮。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮\n类型: ReactNode\n默认值: false\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Tag - Tag的color属性如何使用？",
    "md": "参数: color\n说明: 标签色\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tag - Tag的icon属性如何使用？",
    "md": "参数: icon\n说明: 设置图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tag - Tag的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否有边框\n类型: boolean\n默认值: true\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Tag - Tag的onClose属性如何使用？",
    "md": "参数: onClose\n说明: 关闭时的回调（可通过 `e.preventDefault()` 来阻止默认行为）\n类型: (e) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Tag - Tag.CheckableTag 有哪些配置？",
    "md": "| 参数     | 说明                 | 类型              | 默认值 |\n| -------- | -------------------- | ----------------- | ------ |\n| checked  | 设置标签的选中状态   | boolean           | false  |\n| onChange | 点击标签时触发的回调 | (checked) => void | -      |\n"
  },
  {
    "title": "ant-design 中 Tag - Tag.CheckableTag的checked属性如何使用？",
    "md": "参数: checked\n说明: 设置标签的选中状态\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Tag - Tag.CheckableTag的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 点击标签时触发的回调\n类型: (checked) => void\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Tabs 有哪些配置？",
    "md": "#### Tabs - Tabs\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| activeKey | 当前激活 tab 面板的 key | string | - | - |\n| addIcon | 自定义添加按钮 | ReactNode | - | 4.4.0 |\n| animated | 是否使用动画切换 Tabs | boolean| { inkBar: boolean, tabPane: boolean } | { inkBar: true, tabPane: false } | - |\n| centered | 标签居中展示 | boolean | false | 4.4.0 |\n| defaultActiveKey | 初始化选中面板的 key，如果没有设置 activeKey | string | `第一个面板` | - |\n| hideAdd | 是否隐藏加号图标，在 `type=\"editable-card\"` 时有效 | boolean | false | - |\n| indicator | 自定义指示条的长度和对齐方式 | { size?: number | (origin: number) => number; align: `start` | `center` | `end`; } | - | 5.13.0 |\n| items | 配置选项卡内容 | [TabItemType](#tabitemtype) | \\[] | 4.23.0 |\n| moreIcon | 自定义折叠 icon | ReactNode | \\<EllipsisOutlined /> | 4.14.0 |\n| popupClassName | 更多菜单的 `className` | string | - | 4.21.0 |\n| renderTabBar | 替换 TabBar，用于二次封装标签头 | (props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement | - | - |\n| size | 大小，提供 `large` `middle` 和 `small` 三种大小 | string | `middle` | - |\n| tabBarExtraContent | tab bar 上额外的元素 | ReactNode | {left?: ReactNode, right?: ReactNode} | - | object: 4.6.0 |\n| tabBarGutter | tabs 之间的间隙 | number | - | - |\n| tabBarStyle | tab bar 的样式对象 | CSSProperties | - | - |\n| tabPosition | 页签位置，可选值有 `top` `right` `bottom` `left` | string | `top` | - |\n| destroyInactiveTabPane | 被隐藏时是否销毁 DOM 结构 | boolean | false | - |\n| type | 页签的基本样式，可选 `line`、`card` `editable-card` 类型 | string | `line` | - |\n| onChange | 切换面板的回调 | (activeKey: string) => void | - | - |\n| onEdit | 新增和删除页签的回调，在 `type=\"editable-card\"` 时有效 | (action === 'add' ? event : targetKey, action) => void | - | - |\n| onTabClick | tab 被点击的回调 | (key: string, event: MouseEvent) => void | - | - |\n| onTabScroll | tab 滚动时触发 | ({ direction: `left` | `right` | `top` | `bottom` }) => void | - | 4.3.0 |\n#### Tabs - TabItemType\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| closeIcon | 自定义关闭图标，在 `type=\"editable-card\"` 时有效。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | - | - |\n| destroyInactiveTabPane | 被隐藏时是否销毁 DOM 结构 | boolean | false | 5.11.0 |\n| disabled | 禁用某一项 | boolean | false | - |\n| forceRender | 被隐藏时是否渲染 DOM 结构 | boolean | false | - |\n| key | 对应 activeKey | string | - | - |\n| label | 选项卡头显示文字 | ReactNode | - | - |\n| icon | 选项卡头显示图标 | ReactNode | - | 5.12.0 |\n| children | 选项卡头显示内容 | ReactNode | - | - |\n| closable | 是否显示选项卡的关闭按钮，在 `type=\"editable-card\"` 时有效 | boolean | true | - |\n"
  },
  {
    "title": "ant-design 的 Tabs - Tabs 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| activeKey | 当前激活 tab 面板的 key | string | - | - |\n| addIcon | 自定义添加按钮 | ReactNode | - | 4.4.0 |\n| animated | 是否使用动画切换 Tabs | boolean| { inkBar: boolean, tabPane: boolean } | { inkBar: true, tabPane: false } | - |\n| centered | 标签居中展示 | boolean | false | 4.4.0 |\n| defaultActiveKey | 初始化选中面板的 key，如果没有设置 activeKey | string | `第一个面板` | - |\n| hideAdd | 是否隐藏加号图标，在 `type=\"editable-card\"` 时有效 | boolean | false | - |\n| indicator | 自定义指示条的长度和对齐方式 | { size?: number | (origin: number) => number; align: `start` | `center` | `end`; } | - | 5.13.0 |\n| items | 配置选项卡内容 | [TabItemType](#tabitemtype) | \\[] | 4.23.0 |\n| moreIcon | 自定义折叠 icon | ReactNode | \\<EllipsisOutlined /> | 4.14.0 |\n| popupClassName | 更多菜单的 `className` | string | - | 4.21.0 |\n| renderTabBar | 替换 TabBar，用于二次封装标签头 | (props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement | - | - |\n| size | 大小，提供 `large` `middle` 和 `small` 三种大小 | string | `middle` | - |\n| tabBarExtraContent | tab bar 上额外的元素 | ReactNode | {left?: ReactNode, right?: ReactNode} | - | object: 4.6.0 |\n| tabBarGutter | tabs 之间的间隙 | number | - | - |\n| tabBarStyle | tab bar 的样式对象 | CSSProperties | - | - |\n| tabPosition | 页签位置，可选值有 `top` `right` `bottom` `left` | string | `top` | - |\n| destroyInactiveTabPane | 被隐藏时是否销毁 DOM 结构 | boolean | false | - |\n| type | 页签的基本样式，可选 `line`、`card` `editable-card` 类型 | string | `line` | - |\n| onChange | 切换面板的回调 | (activeKey: string) => void | - | - |\n| onEdit | 新增和删除页签的回调，在 `type=\"editable-card\"` 时有效 | (action === 'add' ? event : targetKey, action) => void | - | - |\n| onTabClick | tab 被点击的回调 | (key: string, event: MouseEvent) => void | - | - |\n| onTabScroll | tab 滚动时触发 | ({ direction: `left` | `right` | `top` | `bottom` }) => void | - | 4.3.0 |\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的activeKey属性如何使用？",
    "md": "参数: activeKey\n说明: 当前激活 tab 面板的 key\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的addIcon属性如何使用？",
    "md": "参数: addIcon\n说明: 自定义添加按钮\n类型: ReactNode\n默认值: -\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的animated属性如何使用？",
    "md": "参数: animated\n说明: 是否使用动画切换 Tabs\n类型: boolean| { inkBar: boolean, tabPane: boolean }\n默认值: { inkBar: true, tabPane: false }\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的centered属性如何使用？",
    "md": "参数: centered\n说明: 标签居中展示\n类型: boolean\n默认值: false\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的defaultActiveKey属性如何使用？",
    "md": "参数: defaultActiveKey\n说明: 初始化选中面板的 key，如果没有设置 activeKey\n类型: string\n默认值: `第一个面板`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的hideAdd属性如何使用？",
    "md": "参数: hideAdd\n说明: 是否隐藏加号图标，在 `type=\"editable-card\"` 时有效\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的indicator属性如何使用？",
    "md": "参数: indicator\n说明: 自定义指示条的长度和对齐方式\n类型: { size?: number | (origin: number) => number; align: `start` | `center` | `end`; }\n默认值: -\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的items属性如何使用？",
    "md": "参数: items\n说明: 配置选项卡内容\n类型: [TabItemType](#tabitemtype)\n默认值: \\[]\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的moreIcon属性如何使用？",
    "md": "参数: moreIcon\n说明: 自定义折叠 icon\n类型: ReactNode\n默认值: \\<EllipsisOutlined />\n版本: 4.14.0\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 更多菜单的 `className`\n类型: string\n默认值: -\n版本: 4.21.0\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的renderTabBar属性如何使用？",
    "md": "参数: renderTabBar\n说明: 替换 TabBar，用于二次封装标签头\n类型: (props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的size属性如何使用？",
    "md": "参数: size\n说明: 大小，提供 `large` `middle` 和 `small` 三种大小\n类型: string\n默认值: `middle`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的tabBarExtraContent属性如何使用？",
    "md": "参数: tabBarExtraContent\n说明: tab bar 上额外的元素\n类型: ReactNode | {left?: ReactNode, right?: ReactNode}\n默认值: -\n版本: object: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的tabBarGutter属性如何使用？",
    "md": "参数: tabBarGutter\n说明: tabs 之间的间隙\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的tabBarStyle属性如何使用？",
    "md": "参数: tabBarStyle\n说明: tab bar 的样式对象\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的tabPosition属性如何使用？",
    "md": "参数: tabPosition\n说明: 页签位置，可选值有 `top` `right` `bottom` `left`\n类型: string\n默认值: `top`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的destroyInactiveTabPane属性如何使用？",
    "md": "参数: destroyInactiveTabPane\n说明: 被隐藏时是否销毁 DOM 结构\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的type属性如何使用？",
    "md": "参数: type\n说明: 页签的基本样式，可选 `line`、`card` `editable-card` 类型\n类型: string\n默认值: `line`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 切换面板的回调\n类型: (activeKey: string) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的onEdit属性如何使用？",
    "md": "参数: onEdit\n说明: 新增和删除页签的回调，在 `type=\"editable-card\"` 时有效\n类型: (action === 'add' ? event : targetKey, action) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的onTabClick属性如何使用？",
    "md": "参数: onTabClick\n说明: tab 被点击的回调\n类型: (key: string, event: MouseEvent) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - Tabs的onTabScroll属性如何使用？",
    "md": "参数: onTabScroll\n说明: tab 滚动时触发\n类型: ({ direction: `left` | `right` | `top` | `bottom` }) => void\n默认值: -\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 的 Tabs - TabItemType 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| closeIcon | 自定义关闭图标，在 `type=\"editable-card\"` 时有效。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | - | - |\n| destroyInactiveTabPane | 被隐藏时是否销毁 DOM 结构 | boolean | false | 5.11.0 |\n| disabled | 禁用某一项 | boolean | false | - |\n| forceRender | 被隐藏时是否渲染 DOM 结构 | boolean | false | - |\n| key | 对应 activeKey | string | - | - |\n| label | 选项卡头显示文字 | ReactNode | - | - |\n| icon | 选项卡头显示图标 | ReactNode | - | 5.12.0 |\n| children | 选项卡头显示内容 | ReactNode | - | - |\n| closable | 是否显示选项卡的关闭按钮，在 `type=\"editable-card\"` 时有效 | boolean | true | - |\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭图标，在 `type=\"editable-card\"` 时有效。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的destroyInactiveTabPane属性如何使用？",
    "md": "参数: destroyInactiveTabPane\n说明: 被隐藏时是否销毁 DOM 结构\n类型: boolean\n默认值: false\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用某一项\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的forceRender属性如何使用？",
    "md": "参数: forceRender\n说明: 被隐藏时是否渲染 DOM 结构\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的key属性如何使用？",
    "md": "参数: key\n说明: 对应 activeKey\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的label属性如何使用？",
    "md": "参数: label\n说明: 选项卡头显示文字\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的icon属性如何使用？",
    "md": "参数: icon\n说明: 选项卡头显示图标\n类型: ReactNode\n默认值: -\n版本: 5.12.0\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的children属性如何使用？",
    "md": "参数: children\n说明: 选项卡头显示内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Tabs - TabItemType的closable属性如何使用？",
    "md": "参数: closable\n说明: 是否显示选项卡的关闭按钮，在 `type=\"editable-card\"` 时有效\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 的 Table 有哪些配置？",
    "md": "#### Table - Table\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示外边框和列边框 | boolean | false | - |\n| columns | 表格列的配置描述，具体项见下表 | [ColumnsType](#column)\\[] | - | - |\n| components | 覆盖默认的 table 元素 | [TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129) | - | - |\n| dataSource | 数据数组 | object\\[] | - | - |\n| expandable | 配置展开属性 | [expandable](#expandable) | - | - |\n| footer | 表格尾部 | function(currentPageData) | - | - |\n| getPopupContainer | 设置表格内各类浮层的渲染节点，如筛选菜单 | (triggerNode) => HTMLElement | () => TableHtmlElement | - |\n| loading | 页面是否加载中 | boolean | [Spin Props](/components/spin-cn#api) | false | - |\n| locale | 默认文案设置，目前包括排序、过滤、空数据文案 | object | [默认值](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/zh_CN.tsx#L20-L37) | - |\n| pagination | 分页器，参考[配置项](#pagination)或 [pagination](/components/pagination-cn) 文档，设为 false 时不展示和进行分页 | object | `false` | - | - |\n| rowClassName | 表格行的类名 | function(record, index): string | - | - |\n| rowKey | 表格行 key 的取值，可以是字符串或一个函数 | string | function(record): string | `key` | - |\n| rowSelection | 表格行是否可选择，[配置项](#rowselection) | object | - | - |\n| scroll | 表格是否可滚动，也可以指定滚动区域的宽、高，[配置项](#scroll) | object | - | - |\n| showHeader | 是否显示表头 | boolean | true | - |\n| showSorterTooltip | 表头是否显示下一次排序的 tooltip 提示。当参数类型为对象时，将被设置为 Tooltip 的属性 | boolean | [Tooltip props](/components/tooltip-cn) | true | - |\n| size | 表格大小 | `large` | `middle` | `small` | `large` | - |\n| sortDirections | 支持的排序方式，取值为 `ascend` `descend` | Array | \\[`ascend`, `descend`] | - |\n| sticky | 设置粘性头部和滚动条 | boolean | `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}` | - | 4.6.0 (getContainer: 4.7.0) |\n| summary | 总结栏 | (currentData) => ReactNode | - | - |\n| tableLayout | 表格元素的 [table-layout](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout) 属性，设为 `fixed` 表示内容不会影响列的布局 | - | `auto` | `fixed` | 无<hr />固定表头/列或使用了 `column.ellipsis` 时，默认值为 `fixed` | - |\n| title | 表格标题 | function(currentPageData) | - | - |\n| onChange | 分页、排序、筛选变化时触发 | function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` | `sort` | `filter` }) | - | - |\n| onHeaderRow | 设置头部行属性 | function(columns, index) | - | - |\n| onRow | 设置行属性 | function(record, index) | - | - |\n| virtual | 支持虚拟列表 | boolean | - | 5.9.0 |\n#### Table - Table ref\n| 参数 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| nativeElement | 最外层 div 元素 | HTMLDivElement | 5.11.0 |\n| scrollTo | 滚动到目标位置（设置 `key` 时为 Record 对应的 `rowKey`） | (config: { index?: number, key?: React.Key, top?: number }) => void | 5.11.0 |\n#### Table - Column\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 设置列的对齐方式 | `left` | `right` | `center` | `left` | - |\n| className | 列样式类名 | string | - | - |\n| colSpan | 表头列合并，设置为 0 时，不渲染 | number | - | - |\n| dataIndex | 列数据在数据项中对应的路径，支持通过数组查询嵌套路径 | string | string\\[] | - | - |\n| defaultFilteredValue | 默认筛选值 | string\\[] | - | - |\n| filterResetToDefaultFilteredValue | 点击重置按钮的时候，是否恢复默认筛选值 | boolean | false | - |\n| defaultSortOrder | 默认排序顺序 | `ascend` | `descend` | - | - |\n| ellipsis | 超过宽度将自动省略，暂不支持和排序筛选一起使用。<br />设置为 `true` 或 `{ showTitle?: boolean }` 时，表格布局将变成 `tableLayout=\"fixed\"`。 | boolean | { showTitle?: boolean } | false | showTitle: 4.3.0 |\n| filterDropdown | 可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互 | ReactNode | (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode | - | - |\n| filterDropdownOpen | 用于控制自定义筛选菜单是否可见 | boolean | - | - |\n| filtered | 标识数据是否经过过滤，筛选图标会高亮 | boolean | false | - |\n| filteredValue | 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组 | string\\[] | - | - |\n| filterIcon | 自定义 filter 图标。 | ReactNode | (filtered: boolean) => ReactNode | false | - |\n| filterMultiple | 是否多选 | boolean | true | - |\n| filterMode | 指定筛选菜单的用户界面 | 'menu' | 'tree' | 'menu' | 4.17.0 |\n| filterSearch | 筛选菜单项是否可搜索 | boolean | function(input, record):boolean | false | boolean:4.17.0 function:4.19.0 |\n| filters | 表头的筛选菜单项 | object\\[] | - | - |\n| fixed | （IE 下无效）列是否固定，可选 `true` (等效于 `left`) `left` `right` | boolean | string | false | - |\n| key | React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性 | string | - | - |\n| render | 生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引 | function(text, record, index) {} | - | - |\n| responsive | 响应式 breakpoint 配置列表。未设置则始终可见。 | [Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[] | - | 4.2.0 |\n| rowScope | 设置列范围 | `row` | `rowgroup` | - | 5.1.0 |\n| shouldCellUpdate | 自定义单元格渲染时机 | (record, prevRecord) => boolean | - | 4.3.0 |\n| showSorterTooltip | 表头显示下一次排序的 tooltip 提示, 覆盖 table 中 `showSorterTooltip` | boolean | [Tooltip props](/components/tooltip-cn/#api) | true | - |\n| sortDirections | 支持的排序方式，覆盖 `Table` 中 `sortDirections`， 取值为 `ascend` `descend` | Array | \\[`ascend`, `descend`] | - |\n| sorter | 排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)。需要服务端排序可设为 `true`（单列排序） 或 `{ multiple: number }`（多列排序） | function | boolean | { compare: function, multiple: number } | - | - |\n| sortOrder | 排序的受控属性，外界可用此控制列的排序，可设置为 `ascend` `descend` `null` | `ascend` | `descend` | null | - | - |\n| sortIcon | 自定义 sort 图标 | (props: { sortOrder }) => ReactNode | - | 5.6.0 |\n| title | 列头显示文字（函数用法 `3.10.0` 后支持） | ReactNode | ({ sortOrder, sortColumn, filters }) => ReactNode | - | - |\n| width | 列宽度（[指定了也不生效？](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)） | string | number | - | - |\n| hidden | 隐藏列 | boolean | false | 5.13.0 |\n| onCell | 设置单元格属性 | function(record, rowIndex) | - | - |\n| onFilter | 本地模式下，确定筛选的运行函数 | function | - | - |\n| onFilterDropdownOpenChange | 自定义筛选菜单可见变化时调用 | function(visible) {} | - | - |\n| onHeaderCell | 设置头部单元格属性 | function(column) | - | - |\n#### Table - ColumnGroup\n| 参数  | 说明         | 类型      | 默认值 |\n| ----- | ------------ | --------- | ------ |\n| title | 列头显示文字 | ReactNode | -      |\n#### Table - pagination\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| position | 指定分页显示的位置， 取值为`topLeft` | `topCenter` | `topRight` |`bottomLeft` | `bottomCenter` | `bottomRight` | Array | \\[`bottomRight`] |\n#### Table - expandable\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| childrenColumnName | 指定树形结构的列名 | string | children | - |\n| columnTitle | 自定义展开列表头 | ReactNode | - | 4.23.0 |\n| columnWidth | 自定义展开列宽度 | string | number | - | - |\n| defaultExpandAllRows | 初始时，是否展开所有行 | boolean | false | - |\n| defaultExpandedRowKeys | 默认展开的行 | string\\[] | - | - |\n| expandedRowClassName | 展开行的 className | function(record, index, indent): string | - | - |\n| expandedRowKeys | 展开的行，控制属性 | string\\[] | - | - |\n| expandedRowRender | 额外的展开行 | function(record, index, indent, expanded): ReactNode | - | - |\n| expandIcon | 自定义展开图标，参考[示例](https://codesandbox.io/s/fervent-bird-nuzpr) | function(props): ReactNode | - | - |\n| expandRowByClick | 通过点击行来展开子行 | boolean | false | - |\n| fixed | 控制展开图标是否固定，可选 `true` `'left'` `'right'` | boolean | string | false | 4.16.0 |\n| indentSize | 展示树形数据时，每层缩进的宽度，以 px 为单位 | number | 15 | - |\n| rowExpandable | 设置是否允许行展开 | (record) => boolean | - | - |\n| showExpandColumn | 设置是否展示行展开列 | boolean | true | 4.18.0 |\n| onExpand | 点击展开图标时触发 | function(record, event) | - | - |\n| onExpandedRowsChange | 展开的行变化时触发 | function(expandedRows) | - | - |\n#### Table - rowSelection\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| checkStrictly | checkable 状态下节点选择完全受控（父子数据选中状态不再关联） | boolean | true | 4.4.0 |\n| columnTitle | 自定义列表选择框标题 | ReactNode | (originalNode: ReactNode) => ReactNode | - | - |\n| columnWidth | 自定义列表选择框宽度 | string | number | `32px` | - |\n| fixed | 把选择框列固定在左边 | boolean | - | - |\n| getCheckboxProps | 选择框的默认属性配置 | function(record) | - | - |\n| hideSelectAll | 隐藏全选勾选框与自定义选择项 | boolean | false | 4.3.0 |\n| preserveSelectedRowKeys | 当数据被删除时仍然保留选项的 `key` | boolean | - | 4.4.0 |\n| renderCell | 渲染勾选框，用法与 Column 的 `render` 相同 | function(checked, record, index, originNode) {} | - | 4.1.0 |\n| selectedRowKeys | 指定选中项的 key 数组，需要和 onChange 进行配合 | string\\[] | number\\[] | \\[] | - |\n| defaultSelectedRowKeys | 默认选中项的 key 数组 | string\\[] | number\\[] | \\[] | - |\n| selections | 自定义选择项 [配置项](#selection), 设为 `true` 时使用默认选择项 | object\\[] | boolean | true | - |\n| type | 多选/单选 | `checkbox` | `radio` | `checkbox` | - |\n| onCell | 设置单元格属性，用法与 Column 的 `onCell` 相同 | function(record, rowIndex) | - | 5.5.0 |\n| onChange | 选中项发生变化时的回调 | function(selectedRowKeys, selectedRows, info: { type }) | - | `info.type`: 4.21.0 |\n| onSelect | 用户手动选择/取消选择某行的回调 | function(record, selected, selectedRows, nativeEvent) | - | - |\n| onSelectAll | 用户手动选择/取消选择所有行的回调 | function(selected, selectedRows, changeRows) | - | - |\n| onSelectInvert | 用户手动选择反选的回调 | function(selectedRowKeys) | - | - |\n| onSelectNone | 用户清空选择的回调 | function() | - | - |\n| onSelectMultiple | 用户使用键盘 shift 选择多行的回调 | function(selected, selectedRows, changeRows) | - | - |\n#### Table - scroll\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| scrollToFirstRowOnChange | 当分页、排序、筛选变化后是否滚动到表格顶部 | boolean | - |\n| x | 设置横向滚动，也可用于指定滚动区域的宽，可以设置为像素值，百分比，`true` 和 ['max-content'](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content) | string | number | true | - |\n| y | 设置纵向滚动，也可用于指定滚动区域的高，可以设置为像素值 | string | number | - |\n#### Table - selection\n| 参数     | 说明                       | 类型                        | 默认值 |\n| -------- | -------------------------- | --------------------------- | ------ |\n| key      | React 需要的 key，建议设置 | string                      | -      |\n| text     | 选择项显示的文字           | ReactNode                   | -      |\n| onSelect | 选择项点击回调             | function(changeableRowKeys) | -      |\n"
  },
  {
    "title": "ant-design 的 Table - Table 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示外边框和列边框 | boolean | false | - |\n| columns | 表格列的配置描述，具体项见下表 | [ColumnsType](#column)\\[] | - | - |\n| components | 覆盖默认的 table 元素 | [TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129) | - | - |\n| dataSource | 数据数组 | object\\[] | - | - |\n| expandable | 配置展开属性 | [expandable](#expandable) | - | - |\n| footer | 表格尾部 | function(currentPageData) | - | - |\n| getPopupContainer | 设置表格内各类浮层的渲染节点，如筛选菜单 | (triggerNode) => HTMLElement | () => TableHtmlElement | - |\n| loading | 页面是否加载中 | boolean | [Spin Props](/components/spin-cn#api) | false | - |\n| locale | 默认文案设置，目前包括排序、过滤、空数据文案 | object | [默认值](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/zh_CN.tsx#L20-L37) | - |\n| pagination | 分页器，参考[配置项](#pagination)或 [pagination](/components/pagination-cn) 文档，设为 false 时不展示和进行分页 | object | `false` | - | - |\n| rowClassName | 表格行的类名 | function(record, index): string | - | - |\n| rowKey | 表格行 key 的取值，可以是字符串或一个函数 | string | function(record): string | `key` | - |\n| rowSelection | 表格行是否可选择，[配置项](#rowselection) | object | - | - |\n| scroll | 表格是否可滚动，也可以指定滚动区域的宽、高，[配置项](#scroll) | object | - | - |\n| showHeader | 是否显示表头 | boolean | true | - |\n| showSorterTooltip | 表头是否显示下一次排序的 tooltip 提示。当参数类型为对象时，将被设置为 Tooltip 的属性 | boolean | [Tooltip props](/components/tooltip-cn) | true | - |\n| size | 表格大小 | `large` | `middle` | `small` | `large` | - |\n| sortDirections | 支持的排序方式，取值为 `ascend` `descend` | Array | \\[`ascend`, `descend`] | - |\n| sticky | 设置粘性头部和滚动条 | boolean | `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}` | - | 4.6.0 (getContainer: 4.7.0) |\n| summary | 总结栏 | (currentData) => ReactNode | - | - |\n| tableLayout | 表格元素的 [table-layout](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout) 属性，设为 `fixed` 表示内容不会影响列的布局 | - | `auto` | `fixed` | 无<hr />固定表头/列或使用了 `column.ellipsis` 时，默认值为 `fixed` | - |\n| title | 表格标题 | function(currentPageData) | - | - |\n| onChange | 分页、排序、筛选变化时触发 | function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` | `sort` | `filter` }) | - | - |\n| onHeaderRow | 设置头部行属性 | function(columns, index) | - | - |\n| onRow | 设置行属性 | function(record, index) | - | - |\n| virtual | 支持虚拟列表 | boolean | - | 5.9.0 |\n"
  },
  {
    "title": "ant-design 中 Table - Table的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否展示外边框和列边框\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的columns属性如何使用？",
    "md": "参数: columns\n说明: 表格列的配置描述，具体项见下表\n类型: [ColumnsType](#column)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的components属性如何使用？",
    "md": "参数: components\n说明: 覆盖默认的 table 元素\n类型: [TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的dataSource属性如何使用？",
    "md": "参数: dataSource\n说明: 数据数组\n类型: object\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的expandable属性如何使用？",
    "md": "参数: expandable\n说明: 配置展开属性\n类型: [expandable](#expandable)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的footer属性如何使用？",
    "md": "参数: footer\n说明: 表格尾部\n类型: function(currentPageData)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 设置表格内各类浮层的渲染节点，如筛选菜单\n类型: (triggerNode) => HTMLElement\n默认值: () => TableHtmlElement\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的loading属性如何使用？",
    "md": "参数: loading\n说明: 页面是否加载中\n类型: boolean | [Spin Props](/components/spin-cn#api)\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的locale属性如何使用？",
    "md": "参数: locale\n说明: 默认文案设置，目前包括排序、过滤、空数据文案\n类型: object\n默认值: [默认值](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/zh_CN.tsx#L20-L37)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的pagination属性如何使用？",
    "md": "参数: pagination\n说明: 分页器，参考[配置项](#pagination)或 [pagination](/components/pagination-cn) 文档，设为 false 时不展示和进行分页\n类型: object | `false`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的rowClassName属性如何使用？",
    "md": "参数: rowClassName\n说明: 表格行的类名\n类型: function(record, index): string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的rowKey属性如何使用？",
    "md": "参数: rowKey\n说明: 表格行 key 的取值，可以是字符串或一个函数\n类型: string | function(record): string\n默认值: `key`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的rowSelection属性如何使用？",
    "md": "参数: rowSelection\n说明: 表格行是否可选择，[配置项](#rowselection)\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的scroll属性如何使用？",
    "md": "参数: scroll\n说明: 表格是否可滚动，也可以指定滚动区域的宽、高，[配置项](#scroll)\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的showHeader属性如何使用？",
    "md": "参数: showHeader\n说明: 是否显示表头\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的showSorterTooltip属性如何使用？",
    "md": "参数: showSorterTooltip\n说明: 表头是否显示下一次排序的 tooltip 提示。当参数类型为对象时，将被设置为 Tooltip 的属性\n类型: boolean | [Tooltip props](/components/tooltip-cn)\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的size属性如何使用？",
    "md": "参数: size\n说明: 表格大小\n类型: `large` | `middle` | `small`\n默认值: `large`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的sortDirections属性如何使用？",
    "md": "参数: sortDirections\n说明: 支持的排序方式，取值为 `ascend` `descend`\n类型: Array\n默认值: \\[`ascend`, `descend`]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的sticky属性如何使用？",
    "md": "参数: sticky\n说明: 设置粘性头部和滚动条\n类型: boolean | `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}`\n默认值: -\n版本: 4.6.0 (getContainer: 4.7.0)\n"
  },
  {
    "title": "ant-design 中 Table - Table的summary属性如何使用？",
    "md": "参数: summary\n说明: 总结栏\n类型: (currentData) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的tableLayout属性如何使用？",
    "md": "参数: tableLayout\n说明: 表格元素的 [table-layout](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout) 属性，设为 `fixed` 表示内容不会影响列的布局\n类型: - | `auto` | `fixed`\n默认值: 无<hr />固定表头/列或使用了 `column.ellipsis` 时，默认值为 `fixed`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的title属性如何使用？",
    "md": "参数: title\n说明: 表格标题\n类型: function(currentPageData)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 分页、排序、筛选变化时触发\n类型: function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` | `sort` | `filter` })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的onHeaderRow属性如何使用？",
    "md": "参数: onHeaderRow\n说明: 设置头部行属性\n类型: function(columns, index)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的onRow属性如何使用？",
    "md": "参数: onRow\n说明: 设置行属性\n类型: function(record, index)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Table的virtual属性如何使用？",
    "md": "参数: virtual\n说明: 支持虚拟列表\n类型: boolean\n默认值: -\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 的 Table - Table ref 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| nativeElement | 最外层 div 元素 | HTMLDivElement | 5.11.0 |\n| scrollTo | 滚动到目标位置（设置 `key` 时为 Record 对应的 `rowKey`） | (config: { index?: number, key?: React.Key, top?: number }) => void | 5.11.0 |\n"
  },
  {
    "title": "ant-design 中 Table - Table ref的nativeElement属性如何使用？",
    "md": "参数: nativeElement\n说明: 最外层 div 元素\n类型: HTMLDivElement\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 Table - Table ref的scrollTo属性如何使用？",
    "md": "参数: scrollTo\n说明: 滚动到目标位置（设置 `key` 时为 Record 对应的 `rowKey`）\n类型: (config: { index?: number, key?: React.Key, top?: number }) => void\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 的 Table - Column 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 设置列的对齐方式 | `left` | `right` | `center` | `left` | - |\n| className | 列样式类名 | string | - | - |\n| colSpan | 表头列合并，设置为 0 时，不渲染 | number | - | - |\n| dataIndex | 列数据在数据项中对应的路径，支持通过数组查询嵌套路径 | string | string\\[] | - | - |\n| defaultFilteredValue | 默认筛选值 | string\\[] | - | - |\n| filterResetToDefaultFilteredValue | 点击重置按钮的时候，是否恢复默认筛选值 | boolean | false | - |\n| defaultSortOrder | 默认排序顺序 | `ascend` | `descend` | - | - |\n| ellipsis | 超过宽度将自动省略，暂不支持和排序筛选一起使用。<br />设置为 `true` 或 `{ showTitle?: boolean }` 时，表格布局将变成 `tableLayout=\"fixed\"`。 | boolean | { showTitle?: boolean } | false | showTitle: 4.3.0 |\n| filterDropdown | 可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互 | ReactNode | (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode | - | - |\n| filterDropdownOpen | 用于控制自定义筛选菜单是否可见 | boolean | - | - |\n| filtered | 标识数据是否经过过滤，筛选图标会高亮 | boolean | false | - |\n| filteredValue | 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组 | string\\[] | - | - |\n| filterIcon | 自定义 filter 图标。 | ReactNode | (filtered: boolean) => ReactNode | false | - |\n| filterMultiple | 是否多选 | boolean | true | - |\n| filterMode | 指定筛选菜单的用户界面 | 'menu' | 'tree' | 'menu' | 4.17.0 |\n| filterSearch | 筛选菜单项是否可搜索 | boolean | function(input, record):boolean | false | boolean:4.17.0 function:4.19.0 |\n| filters | 表头的筛选菜单项 | object\\[] | - | - |\n| fixed | （IE 下无效）列是否固定，可选 `true` (等效于 `left`) `left` `right` | boolean | string | false | - |\n| key | React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性 | string | - | - |\n| render | 生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引 | function(text, record, index) {} | - | - |\n| responsive | 响应式 breakpoint 配置列表。未设置则始终可见。 | [Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[] | - | 4.2.0 |\n| rowScope | 设置列范围 | `row` | `rowgroup` | - | 5.1.0 |\n| shouldCellUpdate | 自定义单元格渲染时机 | (record, prevRecord) => boolean | - | 4.3.0 |\n| showSorterTooltip | 表头显示下一次排序的 tooltip 提示, 覆盖 table 中 `showSorterTooltip` | boolean | [Tooltip props](/components/tooltip-cn/#api) | true | - |\n| sortDirections | 支持的排序方式，覆盖 `Table` 中 `sortDirections`， 取值为 `ascend` `descend` | Array | \\[`ascend`, `descend`] | - |\n| sorter | 排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)。需要服务端排序可设为 `true`（单列排序） 或 `{ multiple: number }`（多列排序） | function | boolean | { compare: function, multiple: number } | - | - |\n| sortOrder | 排序的受控属性，外界可用此控制列的排序，可设置为 `ascend` `descend` `null` | `ascend` | `descend` | null | - | - |\n| sortIcon | 自定义 sort 图标 | (props: { sortOrder }) => ReactNode | - | 5.6.0 |\n| title | 列头显示文字（函数用法 `3.10.0` 后支持） | ReactNode | ({ sortOrder, sortColumn, filters }) => ReactNode | - | - |\n| width | 列宽度（[指定了也不生效？](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)） | string | number | - | - |\n| hidden | 隐藏列 | boolean | false | 5.13.0 |\n| onCell | 设置单元格属性 | function(record, rowIndex) | - | - |\n| onFilter | 本地模式下，确定筛选的运行函数 | function | - | - |\n| onFilterDropdownOpenChange | 自定义筛选菜单可见变化时调用 | function(visible) {} | - | - |\n| onHeaderCell | 设置头部单元格属性 | function(column) | - | - |\n"
  },
  {
    "title": "ant-design 中 Table - Column的align属性如何使用？",
    "md": "参数: align\n说明: 设置列的对齐方式\n类型: `left` | `right` | `center`\n默认值: `left`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的className属性如何使用？",
    "md": "参数: className\n说明: 列样式类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的colSpan属性如何使用？",
    "md": "参数: colSpan\n说明: 表头列合并，设置为 0 时，不渲染\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的dataIndex属性如何使用？",
    "md": "参数: dataIndex\n说明: 列数据在数据项中对应的路径，支持通过数组查询嵌套路径\n类型: string | string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的defaultFilteredValue属性如何使用？",
    "md": "参数: defaultFilteredValue\n说明: 默认筛选值\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的filterResetToDefaultFilteredValue属性如何使用？",
    "md": "参数: filterResetToDefaultFilteredValue\n说明: 点击重置按钮的时候，是否恢复默认筛选值\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的defaultSortOrder属性如何使用？",
    "md": "参数: defaultSortOrder\n说明: 默认排序顺序\n类型: `ascend` | `descend`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的ellipsis属性如何使用？",
    "md": "参数: ellipsis\n说明: 超过宽度将自动省略，暂不支持和排序筛选一起使用。<br />设置为 `true` 或 `{ showTitle?: boolean }` 时，表格布局将变成 `tableLayout=\"fixed\"`。\n类型: boolean | { showTitle?: boolean }\n默认值: false\n版本: showTitle: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的filterDropdown属性如何使用？",
    "md": "参数: filterDropdown\n说明: 可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互\n类型: ReactNode | (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的filterDropdownOpen属性如何使用？",
    "md": "参数: filterDropdownOpen\n说明: 用于控制自定义筛选菜单是否可见\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的filtered属性如何使用？",
    "md": "参数: filtered\n说明: 标识数据是否经过过滤，筛选图标会高亮\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的filteredValue属性如何使用？",
    "md": "参数: filteredValue\n说明: 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的filterIcon属性如何使用？",
    "md": "参数: filterIcon\n说明: 自定义 filter 图标。\n类型: ReactNode | (filtered: boolean) => ReactNode\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的filterMultiple属性如何使用？",
    "md": "参数: filterMultiple\n说明: 是否多选\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的filterMode属性如何使用？",
    "md": "参数: filterMode\n说明: 指定筛选菜单的用户界面\n类型: 'menu' | 'tree'\n默认值: 'menu'\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的filterSearch属性如何使用？",
    "md": "参数: filterSearch\n说明: 筛选菜单项是否可搜索\n类型: boolean | function(input, record):boolean\n默认值: false\n版本: boolean:4.17.0 function:4.19.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的filters属性如何使用？",
    "md": "参数: filters\n说明: 表头的筛选菜单项\n类型: object\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的fixed属性如何使用？",
    "md": "参数: fixed\n说明: （IE 下无效）列是否固定，可选 `true` (等效于 `left`) `left` `right`\n类型: boolean | string\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的key属性如何使用？",
    "md": "参数: key\n说明: React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的render属性如何使用？",
    "md": "参数: render\n说明: 生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引\n类型: function(text, record, index) {}\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的responsive属性如何使用？",
    "md": "参数: responsive\n说明: 响应式 breakpoint 配置列表。未设置则始终可见。\n类型: [Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[]\n默认值: -\n版本: 4.2.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的rowScope属性如何使用？",
    "md": "参数: rowScope\n说明: 设置列范围\n类型: `row` | `rowgroup`\n默认值: -\n版本: 5.1.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的shouldCellUpdate属性如何使用？",
    "md": "参数: shouldCellUpdate\n说明: 自定义单元格渲染时机\n类型: (record, prevRecord) => boolean\n默认值: -\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的showSorterTooltip属性如何使用？",
    "md": "参数: showSorterTooltip\n说明: 表头显示下一次排序的 tooltip 提示, 覆盖 table 中 `showSorterTooltip`\n类型: boolean | [Tooltip props](/components/tooltip-cn/#api)\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的sortDirections属性如何使用？",
    "md": "参数: sortDirections\n说明: 支持的排序方式，覆盖 `Table` 中 `sortDirections`， 取值为 `ascend` `descend`\n类型: Array\n默认值: \\[`ascend`, `descend`]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的sorter属性如何使用？",
    "md": "参数: sorter\n说明: 排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)。需要服务端排序可设为 `true`（单列排序） 或 `{ multiple: number }`（多列排序）\n类型: function | boolean | { compare: function, multiple: number }\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的sortOrder属性如何使用？",
    "md": "参数: sortOrder\n说明: 排序的受控属性，外界可用此控制列的排序，可设置为 `ascend` `descend` `null`\n类型: `ascend` | `descend` | null\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的sortIcon属性如何使用？",
    "md": "参数: sortIcon\n说明: 自定义 sort 图标\n类型: (props: { sortOrder }) => ReactNode\n默认值: -\n版本: 5.6.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的title属性如何使用？",
    "md": "参数: title\n说明: 列头显示文字（函数用法 `3.10.0` 后支持）\n类型: ReactNode | ({ sortOrder, sortColumn, filters }) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的width属性如何使用？",
    "md": "参数: width\n说明: 列宽度（[指定了也不生效？](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)）\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的hidden属性如何使用？",
    "md": "参数: hidden\n说明: 隐藏列\n类型: boolean\n默认值: false\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Table - Column的onCell属性如何使用？",
    "md": "参数: onCell\n说明: 设置单元格属性\n类型: function(record, rowIndex)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的onFilter属性如何使用？",
    "md": "参数: onFilter\n说明: 本地模式下，确定筛选的运行函数\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的onFilterDropdownOpenChange属性如何使用？",
    "md": "参数: onFilterDropdownOpenChange\n说明: 自定义筛选菜单可见变化时调用\n类型: function(visible) {}\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - Column的onHeaderCell属性如何使用？",
    "md": "参数: onHeaderCell\n说明: 设置头部单元格属性\n类型: function(column)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Table - ColumnGroup 有哪些配置？",
    "md": "| 参数  | 说明         | 类型      | 默认值 |\n| ----- | ------------ | --------- | ------ |\n| title | 列头显示文字 | ReactNode | -      |\n"
  },
  {
    "title": "ant-design 中 Table - ColumnGroup的title属性如何使用？",
    "md": "参数: title\n说明: 列头显示文字\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Table - pagination 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| position | 指定分页显示的位置， 取值为`topLeft` | `topCenter` | `topRight` |`bottomLeft` | `bottomCenter` | `bottomRight` | Array | \\[`bottomRight`] |\n"
  },
  {
    "title": "ant-design 中 Table - pagination的position属性如何使用？",
    "md": "参数: position\n说明: 指定分页显示的位置， 取值为`topLeft` | `topCenter` | `topRight` |`bottomLeft` | `bottomCenter` | `bottomRight`\n类型: Array\n默认值: \\[`bottomRight`]\n"
  },
  {
    "title": "ant-design 的 Table - expandable 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| childrenColumnName | 指定树形结构的列名 | string | children | - |\n| columnTitle | 自定义展开列表头 | ReactNode | - | 4.23.0 |\n| columnWidth | 自定义展开列宽度 | string | number | - | - |\n| defaultExpandAllRows | 初始时，是否展开所有行 | boolean | false | - |\n| defaultExpandedRowKeys | 默认展开的行 | string\\[] | - | - |\n| expandedRowClassName | 展开行的 className | function(record, index, indent): string | - | - |\n| expandedRowKeys | 展开的行，控制属性 | string\\[] | - | - |\n| expandedRowRender | 额外的展开行 | function(record, index, indent, expanded): ReactNode | - | - |\n| expandIcon | 自定义展开图标，参考[示例](https://codesandbox.io/s/fervent-bird-nuzpr) | function(props): ReactNode | - | - |\n| expandRowByClick | 通过点击行来展开子行 | boolean | false | - |\n| fixed | 控制展开图标是否固定，可选 `true` `'left'` `'right'` | boolean | string | false | 4.16.0 |\n| indentSize | 展示树形数据时，每层缩进的宽度，以 px 为单位 | number | 15 | - |\n| rowExpandable | 设置是否允许行展开 | (record) => boolean | - | - |\n| showExpandColumn | 设置是否展示行展开列 | boolean | true | 4.18.0 |\n| onExpand | 点击展开图标时触发 | function(record, event) | - | - |\n| onExpandedRowsChange | 展开的行变化时触发 | function(expandedRows) | - | - |\n"
  },
  {
    "title": "ant-design 中 Table - expandable的childrenColumnName属性如何使用？",
    "md": "参数: childrenColumnName\n说明: 指定树形结构的列名\n类型: string\n默认值: children\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的columnTitle属性如何使用？",
    "md": "参数: columnTitle\n说明: 自定义展开列表头\n类型: ReactNode\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Table - expandable的columnWidth属性如何使用？",
    "md": "参数: columnWidth\n说明: 自定义展开列宽度\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的defaultExpandAllRows属性如何使用？",
    "md": "参数: defaultExpandAllRows\n说明: 初始时，是否展开所有行\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的defaultExpandedRowKeys属性如何使用？",
    "md": "参数: defaultExpandedRowKeys\n说明: 默认展开的行\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的expandedRowClassName属性如何使用？",
    "md": "参数: expandedRowClassName\n说明: 展开行的 className\n类型: function(record, index, indent): string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的expandedRowKeys属性如何使用？",
    "md": "参数: expandedRowKeys\n说明: 展开的行，控制属性\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的expandedRowRender属性如何使用？",
    "md": "参数: expandedRowRender\n说明: 额外的展开行\n类型: function(record, index, indent, expanded): ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的expandIcon属性如何使用？",
    "md": "参数: expandIcon\n说明: 自定义展开图标，参考[示例](https://codesandbox.io/s/fervent-bird-nuzpr)\n类型: function(props): ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的expandRowByClick属性如何使用？",
    "md": "参数: expandRowByClick\n说明: 通过点击行来展开子行\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的fixed属性如何使用？",
    "md": "参数: fixed\n说明: 控制展开图标是否固定，可选 `true` `'left'` `'right'`\n类型: boolean | string\n默认值: false\n版本: 4.16.0\n"
  },
  {
    "title": "ant-design 中 Table - expandable的indentSize属性如何使用？",
    "md": "参数: indentSize\n说明: 展示树形数据时，每层缩进的宽度，以 px 为单位\n类型: number\n默认值: 15\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的rowExpandable属性如何使用？",
    "md": "参数: rowExpandable\n说明: 设置是否允许行展开\n类型: (record) => boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的showExpandColumn属性如何使用？",
    "md": "参数: showExpandColumn\n说明: 设置是否展示行展开列\n类型: boolean\n默认值: true\n版本: 4.18.0\n"
  },
  {
    "title": "ant-design 中 Table - expandable的onExpand属性如何使用？",
    "md": "参数: onExpand\n说明: 点击展开图标时触发\n类型: function(record, event)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - expandable的onExpandedRowsChange属性如何使用？",
    "md": "参数: onExpandedRowsChange\n说明: 展开的行变化时触发\n类型: function(expandedRows)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Table - rowSelection 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| checkStrictly | checkable 状态下节点选择完全受控（父子数据选中状态不再关联） | boolean | true | 4.4.0 |\n| columnTitle | 自定义列表选择框标题 | ReactNode | (originalNode: ReactNode) => ReactNode | - | - |\n| columnWidth | 自定义列表选择框宽度 | string | number | `32px` | - |\n| fixed | 把选择框列固定在左边 | boolean | - | - |\n| getCheckboxProps | 选择框的默认属性配置 | function(record) | - | - |\n| hideSelectAll | 隐藏全选勾选框与自定义选择项 | boolean | false | 4.3.0 |\n| preserveSelectedRowKeys | 当数据被删除时仍然保留选项的 `key` | boolean | - | 4.4.0 |\n| renderCell | 渲染勾选框，用法与 Column 的 `render` 相同 | function(checked, record, index, originNode) {} | - | 4.1.0 |\n| selectedRowKeys | 指定选中项的 key 数组，需要和 onChange 进行配合 | string\\[] | number\\[] | \\[] | - |\n| defaultSelectedRowKeys | 默认选中项的 key 数组 | string\\[] | number\\[] | \\[] | - |\n| selections | 自定义选择项 [配置项](#selection), 设为 `true` 时使用默认选择项 | object\\[] | boolean | true | - |\n| type | 多选/单选 | `checkbox` | `radio` | `checkbox` | - |\n| onCell | 设置单元格属性，用法与 Column 的 `onCell` 相同 | function(record, rowIndex) | - | 5.5.0 |\n| onChange | 选中项发生变化时的回调 | function(selectedRowKeys, selectedRows, info: { type }) | - | `info.type`: 4.21.0 |\n| onSelect | 用户手动选择/取消选择某行的回调 | function(record, selected, selectedRows, nativeEvent) | - | - |\n| onSelectAll | 用户手动选择/取消选择所有行的回调 | function(selected, selectedRows, changeRows) | - | - |\n| onSelectInvert | 用户手动选择反选的回调 | function(selectedRowKeys) | - | - |\n| onSelectNone | 用户清空选择的回调 | function() | - | - |\n| onSelectMultiple | 用户使用键盘 shift 选择多行的回调 | function(selected, selectedRows, changeRows) | - | - |\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的checkStrictly属性如何使用？",
    "md": "参数: checkStrictly\n说明: checkable 状态下节点选择完全受控（父子数据选中状态不再关联）\n类型: boolean\n默认值: true\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的columnTitle属性如何使用？",
    "md": "参数: columnTitle\n说明: 自定义列表选择框标题\n类型: ReactNode | (originalNode: ReactNode) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的columnWidth属性如何使用？",
    "md": "参数: columnWidth\n说明: 自定义列表选择框宽度\n类型: string | number\n默认值: `32px`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的fixed属性如何使用？",
    "md": "参数: fixed\n说明: 把选择框列固定在左边\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的getCheckboxProps属性如何使用？",
    "md": "参数: getCheckboxProps\n说明: 选择框的默认属性配置\n类型: function(record)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的hideSelectAll属性如何使用？",
    "md": "参数: hideSelectAll\n说明: 隐藏全选勾选框与自定义选择项\n类型: boolean\n默认值: false\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的preserveSelectedRowKeys属性如何使用？",
    "md": "参数: preserveSelectedRowKeys\n说明: 当数据被删除时仍然保留选项的 `key`\n类型: boolean\n默认值: -\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的renderCell属性如何使用？",
    "md": "参数: renderCell\n说明: 渲染勾选框，用法与 Column 的 `render` 相同\n类型: function(checked, record, index, originNode) {}\n默认值: -\n版本: 4.1.0\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的selectedRowKeys属性如何使用？",
    "md": "参数: selectedRowKeys\n说明: 指定选中项的 key 数组，需要和 onChange 进行配合\n类型: string\\[] | number\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的defaultSelectedRowKeys属性如何使用？",
    "md": "参数: defaultSelectedRowKeys\n说明: 默认选中项的 key 数组\n类型: string\\[] | number\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的selections属性如何使用？",
    "md": "参数: selections\n说明: 自定义选择项 [配置项](#selection), 设为 `true` 时使用默认选择项\n类型: object\\[] | boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的type属性如何使用？",
    "md": "参数: type\n说明: 多选/单选\n类型: `checkbox` | `radio`\n默认值: `checkbox`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的onCell属性如何使用？",
    "md": "参数: onCell\n说明: 设置单元格属性，用法与 Column 的 `onCell` 相同\n类型: function(record, rowIndex)\n默认值: -\n版本: 5.5.0\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选中项发生变化时的回调\n类型: function(selectedRowKeys, selectedRows, info: { type })\n默认值: -\n版本: `info.type`: 4.21.0\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 用户手动选择/取消选择某行的回调\n类型: function(record, selected, selectedRows, nativeEvent)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的onSelectAll属性如何使用？",
    "md": "参数: onSelectAll\n说明: 用户手动选择/取消选择所有行的回调\n类型: function(selected, selectedRows, changeRows)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的onSelectInvert属性如何使用？",
    "md": "参数: onSelectInvert\n说明: 用户手动选择反选的回调\n类型: function(selectedRowKeys)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的onSelectNone属性如何使用？",
    "md": "参数: onSelectNone\n说明: 用户清空选择的回调\n类型: function()\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Table - rowSelection的onSelectMultiple属性如何使用？",
    "md": "参数: onSelectMultiple\n说明: 用户使用键盘 shift 选择多行的回调\n类型: function(selected, selectedRows, changeRows)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Table - scroll 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| scrollToFirstRowOnChange | 当分页、排序、筛选变化后是否滚动到表格顶部 | boolean | - |\n| x | 设置横向滚动，也可用于指定滚动区域的宽，可以设置为像素值，百分比，`true` 和 ['max-content'](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content) | string | number | true | - |\n| y | 设置纵向滚动，也可用于指定滚动区域的高，可以设置为像素值 | string | number | - |\n"
  },
  {
    "title": "ant-design 中 Table - scroll的scrollToFirstRowOnChange属性如何使用？",
    "md": "参数: scrollToFirstRowOnChange\n说明: 当分页、排序、筛选变化后是否滚动到表格顶部\n类型: boolean\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Table - scroll的x属性如何使用？",
    "md": "参数: x\n说明: 设置横向滚动，也可用于指定滚动区域的宽，可以设置为像素值，百分比，`true` 和 ['max-content'](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content)\n类型: string | number | true\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Table - scroll的y属性如何使用？",
    "md": "参数: y\n说明: 设置纵向滚动，也可用于指定滚动区域的高，可以设置为像素值\n类型: string | number\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Table - selection 有哪些配置？",
    "md": "| 参数     | 说明                       | 类型                        | 默认值 |\n| -------- | -------------------------- | --------------------------- | ------ |\n| key      | React 需要的 key，建议设置 | string                      | -      |\n| text     | 选择项显示的文字           | ReactNode                   | -      |\n| onSelect | 选择项点击回调             | function(changeableRowKeys) | -      |\n"
  },
  {
    "title": "ant-design 中 Table - selection的key属性如何使用？",
    "md": "参数: key\n说明: React 需要的 key，建议设置\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Table - selection的text属性如何使用？",
    "md": "参数: text\n说明: 选择项显示的文字\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Table - selection的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 选择项点击回调\n类型: function(changeableRowKeys)\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Switch 有哪些配置？",
    "md": "#### Switch - Switch\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 组件自动获取焦点 | boolean | false | - |\n| checked | 指定当前是否选中 | boolean | false | - |\n| checkedChildren | 选中时的内容 | ReactNode | - | - |\n| className | Switch 器类名 | string | - | - |\n| defaultChecked | 初始是否选中 | boolean | false | - |\n| defaultValue | `defaultChecked` 的别名 | boolean | - | 5.12.0 |\n| disabled | 是否禁用 | boolean | false | - |\n| loading | 加载中的开关 | boolean | false | - |\n| size | 开关大小，可选值：`default` `small` | string | `default` | - |\n| unCheckedChildren | 非选中时的内容 | ReactNode | - | - |\n| value | `checked` 的别名 | boolean | - | 5.12.0 |\n| onChange | 变化时的回调函数 | function(checked: boolean, event: Event) | - | - |\n| onClick | 点击时的回调函数 | function(checked: boolean, event: Event) | - | - |\n#### Switch - 方法\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 的 Switch - Switch 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 组件自动获取焦点 | boolean | false | - |\n| checked | 指定当前是否选中 | boolean | false | - |\n| checkedChildren | 选中时的内容 | ReactNode | - | - |\n| className | Switch 器类名 | string | - | - |\n| defaultChecked | 初始是否选中 | boolean | false | - |\n| defaultValue | `defaultChecked` 的别名 | boolean | - | 5.12.0 |\n| disabled | 是否禁用 | boolean | false | - |\n| loading | 加载中的开关 | boolean | false | - |\n| size | 开关大小，可选值：`default` `small` | string | `default` | - |\n| unCheckedChildren | 非选中时的内容 | ReactNode | - | - |\n| value | `checked` 的别名 | boolean | - | 5.12.0 |\n| onChange | 变化时的回调函数 | function(checked: boolean, event: Event) | - | - |\n| onClick | 点击时的回调函数 | function(checked: boolean, event: Event) | - | - |\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 组件自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的checked属性如何使用？",
    "md": "参数: checked\n说明: 指定当前是否选中\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的checkedChildren属性如何使用？",
    "md": "参数: checkedChildren\n说明: 选中时的内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的className属性如何使用？",
    "md": "参数: className\n说明: Switch 器类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的defaultChecked属性如何使用？",
    "md": "参数: defaultChecked\n说明: 初始是否选中\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: `defaultChecked` 的别名\n类型: boolean\n默认值: -\n版本: 5.12.0\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的loading属性如何使用？",
    "md": "参数: loading\n说明: 加载中的开关\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的size属性如何使用？",
    "md": "参数: size\n说明: 开关大小，可选值：`default` `small`\n类型: string\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的unCheckedChildren属性如何使用？",
    "md": "参数: unCheckedChildren\n说明: 非选中时的内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的value属性如何使用？",
    "md": "参数: value\n说明: `checked` 的别名\n类型: boolean\n默认值: -\n版本: 5.12.0\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 变化时的回调函数\n类型: function(checked: boolean, event: Event)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Switch - Switch的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击时的回调函数\n类型: function(checked: boolean, event: Event)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Switch - 方法 有哪些配置？",
    "md": "| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 中 Switch - 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n"
  },
  {
    "title": "ant-design 中 Switch - 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n"
  },
  {
    "title": "ant-design 的 Steps 有哪些配置？",
    "md": "#### Steps - Steps\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 步骤条类名 | string | - | - |\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 | - |\n| direction | 指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向 | string | `horizontal` | - |\n| initial | 起始序号，从 0 开始记数 | number | 0 | - |\n| labelPlacement | 指定标签放置位置，默认水平放图标右侧，可选 `vertical` 放图标下方 | string | `horizontal` | - |\n| percent | 当前 `process` 步骤显示的进度条进度（只对基本类型的 Steps 生效） | number | - | 4.5.0 |\n| progressDot | 点状步骤条，可以设置为一个 function，labelPlacement 将强制为 `vertical` | boolean | (iconDot, {index, status, title, description}) => ReactNode | false | - |\n| responsive | 当屏幕宽度小于 `532px` 时自动变为垂直模式 | boolean | true | - |\n| size | 指定大小，目前支持普通（`default`）和迷你（`small`） | string | `default` | - |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | `process` | - |\n| type | 步骤条类型，可选 `default` `navigation` `inline` | string | `default` | inline: 5.0 |\n| onChange | 点击切换步骤时触发 | (current) => void | - | - |\n| items | 配置选项卡内容 | [StepItem](#stepitem) | \\[] | 4.24.0 |\n#### Steps - Steps\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 步骤条类名 | string | - | - |\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 | - |\n| initial | 起始序号，从 0 开始记数 | number | 0 | - |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | `process` | - |\n| onChange | 点击切换步骤时触发 | (current) => void | - | - |\n| items | 配置选项卡内容，不支持 `icon` `subtitle` | [StepItem](#stepitem) | \\[] | 4.24.0 |\n#### Steps - StepItem\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 步骤的详情描述，可选 | ReactNode | - | - |\n| disabled | 禁用点击 | boolean | false | - |\n| icon | 步骤图标的类型，可选 | ReactNode | - | - |\n| status | 指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error` | string | `wait` | - |\n| subTitle | 子标题 | ReactNode | - | - |\n| title | 标题 | ReactNode | - | - |\n"
  },
  {
    "title": "ant-design 的 Steps - Steps 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 步骤条类名 | string | - | - |\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 | - |\n| direction | 指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向 | string | `horizontal` | - |\n| initial | 起始序号，从 0 开始记数 | number | 0 | - |\n| labelPlacement | 指定标签放置位置，默认水平放图标右侧，可选 `vertical` 放图标下方 | string | `horizontal` | - |\n| percent | 当前 `process` 步骤显示的进度条进度（只对基本类型的 Steps 生效） | number | - | 4.5.0 |\n| progressDot | 点状步骤条，可以设置为一个 function，labelPlacement 将强制为 `vertical` | boolean | (iconDot, {index, status, title, description}) => ReactNode | false | - |\n| responsive | 当屏幕宽度小于 `532px` 时自动变为垂直模式 | boolean | true | - |\n| size | 指定大小，目前支持普通（`default`）和迷你（`small`） | string | `default` | - |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | `process` | - |\n| type | 步骤条类型，可选 `default` `navigation` `inline` | string | `default` | inline: 5.0 |\n| onChange | 点击切换步骤时触发 | (current) => void | - | - |\n| items | 配置选项卡内容 | [StepItem](#stepitem) | \\[] | 4.24.0 |\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的className属性如何使用？",
    "md": "参数: className\n说明: 步骤条类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的current属性如何使用？",
    "md": "参数: current\n说明: 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的direction属性如何使用？",
    "md": "参数: direction\n说明: 指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向\n类型: string\n默认值: `horizontal`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的initial属性如何使用？",
    "md": "参数: initial\n说明: 起始序号，从 0 开始记数\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的labelPlacement属性如何使用？",
    "md": "参数: labelPlacement\n说明: 指定标签放置位置，默认水平放图标右侧，可选 `vertical` 放图标下方\n类型: string\n默认值: `horizontal`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的percent属性如何使用？",
    "md": "参数: percent\n说明: 当前 `process` 步骤显示的进度条进度（只对基本类型的 Steps 生效）\n类型: number\n默认值: -\n版本: 4.5.0\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的progressDot属性如何使用？",
    "md": "参数: progressDot\n说明: 点状步骤条，可以设置为一个 function，labelPlacement 将强制为 `vertical`\n类型: boolean | (iconDot, {index, status, title, description}) => ReactNode\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的responsive属性如何使用？",
    "md": "参数: responsive\n说明: 当屏幕宽度小于 `532px` 时自动变为垂直模式\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的size属性如何使用？",
    "md": "参数: size\n说明: 指定大小，目前支持普通（`default`）和迷你（`small`）\n类型: string\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的status属性如何使用？",
    "md": "参数: status\n说明: 指定当前步骤的状态，可选 `wait` `process` `finish` `error`\n类型: string\n默认值: `process`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的type属性如何使用？",
    "md": "参数: type\n说明: 步骤条类型，可选 `default` `navigation` `inline`\n类型: string\n默认值: `default`\n版本: inline: 5.0\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 点击切换步骤时触发\n类型: (current) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的items属性如何使用？",
    "md": "参数: items\n说明: 配置选项卡内容\n类型: [StepItem](#stepitem)\n默认值: \\[]\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 的 Steps - Steps 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 步骤条类名 | string | - | - |\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 | - |\n| initial | 起始序号，从 0 开始记数 | number | 0 | - |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | `process` | - |\n| onChange | 点击切换步骤时触发 | (current) => void | - | - |\n| items | 配置选项卡内容，不支持 `icon` `subtitle` | [StepItem](#stepitem) | \\[] | 4.24.0 |\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的className属性如何使用？",
    "md": "参数: className\n说明: 步骤条类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的current属性如何使用？",
    "md": "参数: current\n说明: 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的initial属性如何使用？",
    "md": "参数: initial\n说明: 起始序号，从 0 开始记数\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的status属性如何使用？",
    "md": "参数: status\n说明: 指定当前步骤的状态，可选 `wait` `process` `finish` `error`\n类型: string\n默认值: `process`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 点击切换步骤时触发\n类型: (current) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - Steps的items属性如何使用？",
    "md": "参数: items\n说明: 配置选项卡内容，不支持 `icon` `subtitle`\n类型: [StepItem](#stepitem)\n默认值: \\[]\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 的 Steps - StepItem 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 步骤的详情描述，可选 | ReactNode | - | - |\n| disabled | 禁用点击 | boolean | false | - |\n| icon | 步骤图标的类型，可选 | ReactNode | - | - |\n| status | 指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error` | string | `wait` | - |\n| subTitle | 子标题 | ReactNode | - | - |\n| title | 标题 | ReactNode | - | - |\n"
  },
  {
    "title": "ant-design 中 Steps - StepItem的description属性如何使用？",
    "md": "参数: description\n说明: 步骤的详情描述，可选\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - StepItem的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用点击\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - StepItem的icon属性如何使用？",
    "md": "参数: icon\n说明: 步骤图标的类型，可选\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - StepItem的status属性如何使用？",
    "md": "参数: status\n说明: 指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error`\n类型: string\n默认值: `wait`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - StepItem的subTitle属性如何使用？",
    "md": "参数: subTitle\n说明: 子标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Steps - StepItem的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Statistic 有哪些配置？",
    "md": "#### Statistic - Statistic\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| decimalSeparator | 设置小数点 | string | `.` | - |\n| formatter | 自定义数值展示 | (value) => ReactNode | - | - |\n| groupSeparator | 设置千分位标识符 | string | `,` | - |\n| loading | 数值是否加载中 | boolean | false | 4.8.0 |\n| precision | 数值精度 | number | - | - |\n| prefix | 设置数值的前缀 | ReactNode | - | - |\n| suffix | 设置数值的后缀 | ReactNode | - | - |\n| title | 数值的标题 | ReactNode | - | - |\n| value | 数值内容 | string | number | - | - |\n| valueStyle | 设置数值区域的样式 | CSSProperties | - | - |\n#### Statistic - Statistic.Countdown\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 格式化倒计时展示，参考 [dayjs](https://day.js.org/) | string | `HH:mm:ss` | - |\n| prefix | 设置数值的前缀 | ReactNode | - | - |\n| suffix | 设置数值的后缀 | ReactNode | - | - |\n| title | 数值的标题 | ReactNode | - | - |\n| value | 数值内容 | number | dayjs | - | - |\n| valueStyle | 设置数值区域的样式 | CSSProperties | - | - |\n| onFinish | 倒计时完成时触发 | () => void | - | - |\n| onChange | 倒计时时间变化时触发 | (value: number) => void | - | 4.16.0 |\n"
  },
  {
    "title": "ant-design 的 Statistic - Statistic 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| decimalSeparator | 设置小数点 | string | `.` | - |\n| formatter | 自定义数值展示 | (value) => ReactNode | - | - |\n| groupSeparator | 设置千分位标识符 | string | `,` | - |\n| loading | 数值是否加载中 | boolean | false | 4.8.0 |\n| precision | 数值精度 | number | - | - |\n| prefix | 设置数值的前缀 | ReactNode | - | - |\n| suffix | 设置数值的后缀 | ReactNode | - | - |\n| title | 数值的标题 | ReactNode | - | - |\n| value | 数值内容 | string | number | - | - |\n| valueStyle | 设置数值区域的样式 | CSSProperties | - | - |\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的decimalSeparator属性如何使用？",
    "md": "参数: decimalSeparator\n说明: 设置小数点\n类型: string\n默认值: `.`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的formatter属性如何使用？",
    "md": "参数: formatter\n说明: 自定义数值展示\n类型: (value) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的groupSeparator属性如何使用？",
    "md": "参数: groupSeparator\n说明: 设置千分位标识符\n类型: string\n默认值: `,`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的loading属性如何使用？",
    "md": "参数: loading\n说明: 数值是否加载中\n类型: boolean\n默认值: false\n版本: 4.8.0\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的precision属性如何使用？",
    "md": "参数: precision\n说明: 数值精度\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的prefix属性如何使用？",
    "md": "参数: prefix\n说明: 设置数值的前缀\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的suffix属性如何使用？",
    "md": "参数: suffix\n说明: 设置数值的后缀\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的title属性如何使用？",
    "md": "参数: title\n说明: 数值的标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的value属性如何使用？",
    "md": "参数: value\n说明: 数值内容\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic的valueStyle属性如何使用？",
    "md": "参数: valueStyle\n说明: 设置数值区域的样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Statistic - Statistic.Countdown 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 格式化倒计时展示，参考 [dayjs](https://day.js.org/) | string | `HH:mm:ss` | - |\n| prefix | 设置数值的前缀 | ReactNode | - | - |\n| suffix | 设置数值的后缀 | ReactNode | - | - |\n| title | 数值的标题 | ReactNode | - | - |\n| value | 数值内容 | number | dayjs | - | - |\n| valueStyle | 设置数值区域的样式 | CSSProperties | - | - |\n| onFinish | 倒计时完成时触发 | () => void | - | - |\n| onChange | 倒计时时间变化时触发 | (value: number) => void | - | 4.16.0 |\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的format属性如何使用？",
    "md": "参数: format\n说明: 格式化倒计时展示，参考 [dayjs](https://day.js.org/)\n类型: string\n默认值: `HH:mm:ss`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的prefix属性如何使用？",
    "md": "参数: prefix\n说明: 设置数值的前缀\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的suffix属性如何使用？",
    "md": "参数: suffix\n说明: 设置数值的后缀\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的title属性如何使用？",
    "md": "参数: title\n说明: 数值的标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的value属性如何使用？",
    "md": "参数: value\n说明: 数值内容\n类型: number | dayjs\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的valueStyle属性如何使用？",
    "md": "参数: valueStyle\n说明: 设置数值区域的样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的onFinish属性如何使用？",
    "md": "参数: onFinish\n说明: 倒计时完成时触发\n类型: () => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Statistic - Statistic.Countdown的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 倒计时时间变化时触发\n类型: (value: number) => void\n默认值: -\n版本: 4.16.0\n"
  },
  {
    "title": "ant-design 的 Spin 有哪些配置？",
    "md": "#### Spin - Spin\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- | --- |\n| delay | 延迟显示加载效果的时间（防止闪烁） | number (毫秒) | - |\n| indicator | 加载指示符 | ReactNode | - |\n| size | 组件大小，可选值为 `small` `default` `large` | string | `default` |\n| spinning | 是否为加载中状态 | boolean | true |\n| tip | 当作为包裹元素时，可以自定义描述文案 | ReactNode | - |\n| wrapperClassName | 包装器的类属性 | string | - |\n| fullscreen | 显示带有 `Spin` 组件的背景 | boolean | false | 5.11.0 |\n"
  },
  {
    "title": "ant-design 的 Spin - Spin 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- | --- |\n| delay | 延迟显示加载效果的时间（防止闪烁） | number (毫秒) | - |\n| indicator | 加载指示符 | ReactNode | - |\n| size | 组件大小，可选值为 `small` `default` `large` | string | `default` |\n| spinning | 是否为加载中状态 | boolean | true |\n| tip | 当作为包裹元素时，可以自定义描述文案 | ReactNode | - |\n| wrapperClassName | 包装器的类属性 | string | - |\n| fullscreen | 显示带有 `Spin` 组件的背景 | boolean | false | 5.11.0 |\n"
  },
  {
    "title": "ant-design 中 Spin - Spin的delay属性如何使用？",
    "md": "参数: delay\n说明: 延迟显示加载效果的时间（防止闪烁）\n类型: number (毫秒)\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Spin - Spin的indicator属性如何使用？",
    "md": "参数: indicator\n说明: 加载指示符\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Spin - Spin的size属性如何使用？",
    "md": "参数: size\n说明: 组件大小，可选值为 `small` `default` `large`\n类型: string\n默认值: `default`\n"
  },
  {
    "title": "ant-design 中 Spin - Spin的spinning属性如何使用？",
    "md": "参数: spinning\n说明: 是否为加载中状态\n类型: boolean\n默认值: true\n"
  },
  {
    "title": "ant-design 中 Spin - Spin的tip属性如何使用？",
    "md": "参数: tip\n说明: 当作为包裹元素时，可以自定义描述文案\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Spin - Spin的wrapperClassName属性如何使用？",
    "md": "参数: wrapperClassName\n说明: 包装器的类属性\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Spin - Spin的fullscreen属性如何使用？",
    "md": "参数: fullscreen\n说明: 显示带有 `Spin` 组件的背景\n类型: boolean\n默认值: false\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 的 Space 有哪些配置？",
    "md": "#### Space - Space\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 对齐方式 | `start` | `end` |`center` |`baseline` | - | 4.2.0 |\n| classNames | 语义化 className | [Record\\<SemanticDOM, string>](#semantic-dom) | - | - |\n| direction | 间距方向 | `vertical` | `horizontal` | `horizontal` | 4.1.0 |\n| size | 间距大小 | [Size](#size) | [Size\\[\\]](#size) | `small` | 4.1.0 | Array: 4.9.0 |\n| split | 设置拆分 | ReactNode | - | 4.7.0 |\n| styles | 语义化 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | - |\n| wrap | 是否自动换行，仅在 `horizontal` 时有效 | boolean | false | 4.9.0 |\n#### Space - Space.Compact\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将宽度调整为父元素宽度的选项 | boolean | false | 4.24.0 |\n| direction | 指定排列方向 | `vertical` | `horizontal` | `horizontal` | 4.24.0 |\n| size | 子组件大小 | `large` | `middle` | `small` | `middle` | 4.24.0 |\n"
  },
  {
    "title": "ant-design 的 Space - Space 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 对齐方式 | `start` | `end` |`center` |`baseline` | - | 4.2.0 |\n| classNames | 语义化 className | [Record\\<SemanticDOM, string>](#semantic-dom) | - | - |\n| direction | 间距方向 | `vertical` | `horizontal` | `horizontal` | 4.1.0 |\n| size | 间距大小 | [Size](#size) | [Size\\[\\]](#size) | `small` | 4.1.0 | Array: 4.9.0 |\n| split | 设置拆分 | ReactNode | - | 4.7.0 |\n| styles | 语义化 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | - |\n| wrap | 是否自动换行，仅在 `horizontal` 时有效 | boolean | false | 4.9.0 |\n"
  },
  {
    "title": "ant-design 中 Space - Space的align属性如何使用？",
    "md": "参数: align\n说明: 对齐方式\n类型: `start` | `end` |`center` |`baseline`\n默认值: -\n版本: 4.2.0\n"
  },
  {
    "title": "ant-design 中 Space - Space的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 语义化 className\n类型: [Record\\<SemanticDOM, string>](#semantic-dom)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Space - Space的direction属性如何使用？",
    "md": "参数: direction\n说明: 间距方向\n类型: `vertical` | `horizontal`\n默认值: `horizontal`\n版本: 4.1.0\n"
  },
  {
    "title": "ant-design 中 Space - Space的size属性如何使用？",
    "md": "参数: size\n说明: 间距大小\n类型: [Size](#size) | [Size\\[\\]](#size)\n默认值: `small`\n版本: 4.1.0 | Array: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Space - Space的split属性如何使用？",
    "md": "参数: split\n说明: 设置拆分\n类型: ReactNode\n默认值: -\n版本: 4.7.0\n"
  },
  {
    "title": "ant-design 中 Space - Space的styles属性如何使用？",
    "md": "参数: styles\n说明: 语义化 style\n类型: [Record\\<SemanticDOM, CSSProperties>](#semantic-dom)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Space - Space的wrap属性如何使用？",
    "md": "参数: wrap\n说明: 是否自动换行，仅在 `horizontal` 时有效\n类型: boolean\n默认值: false\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 的 Space - Space.Compact 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将宽度调整为父元素宽度的选项 | boolean | false | 4.24.0 |\n| direction | 指定排列方向 | `vertical` | `horizontal` | `horizontal` | 4.24.0 |\n| size | 子组件大小 | `large` | `middle` | `small` | `middle` | 4.24.0 |\n"
  },
  {
    "title": "ant-design 中 Space - Space.Compact的block属性如何使用？",
    "md": "参数: block\n说明: 将宽度调整为父元素宽度的选项\n类型: boolean\n默认值: false\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Space - Space.Compact的direction属性如何使用？",
    "md": "参数: direction\n说明: 指定排列方向\n类型: `vertical` | `horizontal`\n默认值: `horizontal`\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Space - Space.Compact的size属性如何使用？",
    "md": "参数: size\n说明: 子组件大小\n类型: `large` | `middle` | `small`\n默认值: `middle`\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 的 Slider 有哪些配置？",
    "md": "#### Slider - Slider\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| classNames | 语义化结构 className | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.10.0 |\n| defaultValue | 设置初始取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number] | number | \\[number, number] | 0 | \\[0, 0] | - |\n| disabled | 值为 true 时，滑块为禁用状态 | boolean | false | - |\n| keyboard | 支持使用键盘操作 handler | boolean | true | 5.2.0+ |\n| dots | 是否只能拖拽到刻度上 | boolean | false | - |\n| included | `marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列 | boolean | true | - |\n| marks | 刻度标记，key 的类型必须为 `number` 且取值在闭区间 \\[min, max] 内，每个标签可以单独设置样式 | object | { number: ReactNode } or { number: { style: CSSProperties, label: ReactNode } } | - |\n| max | 最大值 | number | 100 | - |\n| min | 最小值 | number | 0 | - |\n| range | 双滑块模式 | boolean | [range](#range) | false | - |\n| reverse | 反向坐标轴 | boolean | false | - |\n| step | 步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 null，此时 Slider 的可选值仅有 marks 标出来的部分 | number | null | 1 | - |\n| styles | 语义化结构 styles | [Record\\<SemanticDOM, React.CSSProperties>](#semantic-dom) | - | 5.10.0 |\n| tooltip | 设置 Tooltip 相关属性 | [tooltip](#tooltip) | - | 4.23.0 |\n| value | 设置当前取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number] | number | \\[number, number] | - | - |\n| vertical | 值为 true 时，Slider 为垂直方向 | boolean | false | - |\n| onChangeComplete | 与 `mouseup` 和 `keyup` 触发时机一致，把当前值作为参数传入 | (value) => void | - | - |\n| onChange | 当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入 | (value) => void | - | - |\n#### Slider - range\n| 参数           | 说明                 | 类型    | 默认值 | 版本   |\n| -------------- | -------------------- | ------- | ------ | ------ |\n| draggableTrack | 范围刻度是否可被拖拽 | boolean | false  | 4.10.0 |\n#### Slider - tooltip\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoAdjustOverflow | 是否自动调整弹出位置 | boolean | true | 5.8.0 |\n| open | 值为 true 时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时 | boolean | - | 4.23.0 |\n| placement | 设置 Tooltip 展示位置。参考 [Tooltip](/components/tooltip-cn) | string | - | 4.23.0 |\n| getPopupContainer | Tooltip 渲染父节点，默认渲染到 body 上 | (triggerNode) => HTMLElement | () => document.body | 4.23.0 |\n| formatter | Slider 会把当前值传给 `formatter`，并在 Tooltip 中显示 `formatter` 的返回值，若为 null，则隐藏 Tooltip | value => ReactNode | null | IDENTITY | 4.23.0 |\n#### Slider - 方法\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 的 Slider - Slider 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| classNames | 语义化结构 className | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.10.0 |\n| defaultValue | 设置初始取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number] | number | \\[number, number] | 0 | \\[0, 0] | - |\n| disabled | 值为 true 时，滑块为禁用状态 | boolean | false | - |\n| keyboard | 支持使用键盘操作 handler | boolean | true | 5.2.0+ |\n| dots | 是否只能拖拽到刻度上 | boolean | false | - |\n| included | `marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列 | boolean | true | - |\n| marks | 刻度标记，key 的类型必须为 `number` 且取值在闭区间 \\[min, max] 内，每个标签可以单独设置样式 | object | { number: ReactNode } or { number: { style: CSSProperties, label: ReactNode } } | - |\n| max | 最大值 | number | 100 | - |\n| min | 最小值 | number | 0 | - |\n| range | 双滑块模式 | boolean | [range](#range) | false | - |\n| reverse | 反向坐标轴 | boolean | false | - |\n| step | 步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 null，此时 Slider 的可选值仅有 marks 标出来的部分 | number | null | 1 | - |\n| styles | 语义化结构 styles | [Record\\<SemanticDOM, React.CSSProperties>](#semantic-dom) | - | 5.10.0 |\n| tooltip | 设置 Tooltip 相关属性 | [tooltip](#tooltip) | - | 4.23.0 |\n| value | 设置当前取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number] | number | \\[number, number] | - | - |\n| vertical | 值为 true 时，Slider 为垂直方向 | boolean | false | - |\n| onChangeComplete | 与 `mouseup` 和 `keyup` 触发时机一致，把当前值作为参数传入 | (value) => void | - | - |\n| onChange | 当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入 | (value) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 语义化结构 className\n类型: [Record\\<SemanticDOM, string>](#semantic-dom)\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 设置初始取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number]\n类型: number | \\[number, number]\n默认值: 0 | \\[0, 0]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 值为 true 时，滑块为禁用状态\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的keyboard属性如何使用？",
    "md": "参数: keyboard\n说明: 支持使用键盘操作 handler\n类型: boolean\n默认值: true\n版本: 5.2.0+\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的dots属性如何使用？",
    "md": "参数: dots\n说明: 是否只能拖拽到刻度上\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的included属性如何使用？",
    "md": "参数: included\n说明: `marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的marks属性如何使用？",
    "md": "参数: marks\n说明: 刻度标记，key 的类型必须为 `number` 且取值在闭区间 \\[min, max] 内，每个标签可以单独设置样式\n类型: object\n默认值: { number: ReactNode } or { number: { style: CSSProperties, label: ReactNode } }\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的max属性如何使用？",
    "md": "参数: max\n说明: 最大值\n类型: number\n默认值: 100\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的min属性如何使用？",
    "md": "参数: min\n说明: 最小值\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的range属性如何使用？",
    "md": "参数: range\n说明: 双滑块模式\n类型: boolean | [range](#range)\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的reverse属性如何使用？",
    "md": "参数: reverse\n说明: 反向坐标轴\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的step属性如何使用？",
    "md": "参数: step\n说明: 步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 null，此时 Slider 的可选值仅有 marks 标出来的部分\n类型: number | null\n默认值: 1\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的styles属性如何使用？",
    "md": "参数: styles\n说明: 语义化结构 styles\n类型: [Record\\<SemanticDOM, React.CSSProperties>](#semantic-dom)\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 设置 Tooltip 相关属性\n类型: [tooltip](#tooltip)\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的value属性如何使用？",
    "md": "参数: value\n说明: 设置当前取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number]\n类型: number | \\[number, number]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的vertical属性如何使用？",
    "md": "参数: vertical\n说明: 值为 true 时，Slider 为垂直方向\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的onChangeComplete属性如何使用？",
    "md": "参数: onChangeComplete\n说明: 与 `mouseup` 和 `keyup` 触发时机一致，把当前值作为参数传入\n类型: (value) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - Slider的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入\n类型: (value) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Slider - range 有哪些配置？",
    "md": "| 参数           | 说明                 | 类型    | 默认值 | 版本   |\n| -------------- | -------------------- | ------- | ------ | ------ |\n| draggableTrack | 范围刻度是否可被拖拽 | boolean | false  | 4.10.0 |\n"
  },
  {
    "title": "ant-design 中 Slider - range的draggableTrack属性如何使用？",
    "md": "参数: draggableTrack\n说明: 范围刻度是否可被拖拽\n类型: boolean\n默认值: false\n版本: 4.10.0\n"
  },
  {
    "title": "ant-design 的 Slider - tooltip 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoAdjustOverflow | 是否自动调整弹出位置 | boolean | true | 5.8.0 |\n| open | 值为 true 时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时 | boolean | - | 4.23.0 |\n| placement | 设置 Tooltip 展示位置。参考 [Tooltip](/components/tooltip-cn) | string | - | 4.23.0 |\n| getPopupContainer | Tooltip 渲染父节点，默认渲染到 body 上 | (triggerNode) => HTMLElement | () => document.body | 4.23.0 |\n| formatter | Slider 会把当前值传给 `formatter`，并在 Tooltip 中显示 `formatter` 的返回值，若为 null，则隐藏 Tooltip | value => ReactNode | null | IDENTITY | 4.23.0 |\n"
  },
  {
    "title": "ant-design 中 Slider - tooltip的autoAdjustOverflow属性如何使用？",
    "md": "参数: autoAdjustOverflow\n说明: 是否自动调整弹出位置\n类型: boolean\n默认值: true\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 中 Slider - tooltip的open属性如何使用？",
    "md": "参数: open\n说明: 值为 true 时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时\n类型: boolean\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Slider - tooltip的placement属性如何使用？",
    "md": "参数: placement\n说明: 设置 Tooltip 展示位置。参考 [Tooltip](/components/tooltip-cn)\n类型: string\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Slider - tooltip的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: Tooltip 渲染父节点，默认渲染到 body 上\n类型: (triggerNode) => HTMLElement\n默认值: () => document.body\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Slider - tooltip的formatter属性如何使用？",
    "md": "参数: formatter\n说明: Slider 会把当前值传给 `formatter`，并在 Tooltip 中显示 `formatter` 的返回值，若为 null，则隐藏 Tooltip\n类型: value => ReactNode | null\n默认值: IDENTITY\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 的 Slider - 方法 有哪些配置？",
    "md": "| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 Slider - 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 Slider - 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 Skeleton 有哪些配置？",
    "md": "#### Skeleton - Skeleton\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| active | 是否展示动画效果 | boolean | false |\n| avatar | 是否显示头像占位图 | boolean | [SkeletonAvatarProps](#skeletonavatarprops) | false |\n| loading | 为 true 时，显示占位图。反之则直接展示子组件 | boolean | - |\n| paragraph | 是否显示段落占位图 | boolean | [SkeletonParagraphProps](#skeletonparagraphprops) | true |\n| round | 为 true 时，段落和标题显示圆角 | boolean | false |\n| title | 是否显示标题占位图 | boolean | [SkeletonTitleProps](#skeletontitleprops) | true |\n#### Skeleton - SkeletonAvatarProps\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| active | 是否展示动画效果，仅在单独使用头像骨架时生效 | boolean | false |\n| shape | 指定头像的形状 | `circle` | `square` | - |\n| size | 设置头像占位图的大小 | number | `large` | `small` | `default` | - |\n#### Skeleton - SkeletonTitleProps\n| 属性  | 说明                 | 类型             | 默认值 |\n| ----- | -------------------- | ---------------- | ------ |\n| width | 设置标题占位图的宽度 | number | string | -      |\n#### Skeleton - SkeletonParagraphProps\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| rows | 设置段落占位图的行数 | number | - |\n| width | 设置段落占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度 | number | string | Array\\<number | string> | - |\n#### Skeleton - SkeletonButtonProps\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| active | 是否展示动画效果 | boolean | false | - |\n| block | 将按钮宽度调整为其父宽度的选项 | boolean | false | 4.17.0 |\n| shape | 指定按钮的形状 | `circle` | `round` | `square` | `default` | - | - |\n| size | 设置按钮的大小 | `large` | `small` | `default` | - | - |\n#### Skeleton - SkeletonInputProps\n| 属性   | 说明             | 类型                            | 默认值 |\n| ------ | ---------------- | ------------------------------- | ------ |\n| active | 是否展示动画效果 | boolean                         | false  |\n| size   | 设置输入框的大小 | `large` | `small` | `default` | -      |\n"
  },
  {
    "title": "ant-design 的 Skeleton - Skeleton 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| active | 是否展示动画效果 | boolean | false |\n| avatar | 是否显示头像占位图 | boolean | [SkeletonAvatarProps](#skeletonavatarprops) | false |\n| loading | 为 true 时，显示占位图。反之则直接展示子组件 | boolean | - |\n| paragraph | 是否显示段落占位图 | boolean | [SkeletonParagraphProps](#skeletonparagraphprops) | true |\n| round | 为 true 时，段落和标题显示圆角 | boolean | false |\n| title | 是否显示标题占位图 | boolean | [SkeletonTitleProps](#skeletontitleprops) | true |\n"
  },
  {
    "title": "ant-design 中 Skeleton - Skeleton的active属性如何使用？",
    "md": "属性: active\n说明: 是否展示动画效果\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Skeleton - Skeleton的avatar属性如何使用？",
    "md": "属性: avatar\n说明: 是否显示头像占位图\n类型: boolean | [SkeletonAvatarProps](#skeletonavatarprops)\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Skeleton - Skeleton的loading属性如何使用？",
    "md": "属性: loading\n说明: 为 true 时，显示占位图。反之则直接展示子组件\n类型: boolean\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Skeleton - Skeleton的paragraph属性如何使用？",
    "md": "属性: paragraph\n说明: 是否显示段落占位图\n类型: boolean | [SkeletonParagraphProps](#skeletonparagraphprops)\n默认值: true\n"
  },
  {
    "title": "ant-design 中 Skeleton - Skeleton的round属性如何使用？",
    "md": "属性: round\n说明: 为 true 时，段落和标题显示圆角\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Skeleton - Skeleton的title属性如何使用？",
    "md": "属性: title\n说明: 是否显示标题占位图\n类型: boolean | [SkeletonTitleProps](#skeletontitleprops)\n默认值: true\n"
  },
  {
    "title": "ant-design 的 Skeleton - SkeletonAvatarProps 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| active | 是否展示动画效果，仅在单独使用头像骨架时生效 | boolean | false |\n| shape | 指定头像的形状 | `circle` | `square` | - |\n| size | 设置头像占位图的大小 | number | `large` | `small` | `default` | - |\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonAvatarProps的active属性如何使用？",
    "md": "属性: active\n说明: 是否展示动画效果，仅在单独使用头像骨架时生效\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonAvatarProps的shape属性如何使用？",
    "md": "属性: shape\n说明: 指定头像的形状\n类型: `circle` | `square`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonAvatarProps的size属性如何使用？",
    "md": "属性: size\n说明: 设置头像占位图的大小\n类型: number | `large` | `small` | `default`\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Skeleton - SkeletonTitleProps 有哪些配置？",
    "md": "| 属性  | 说明                 | 类型             | 默认值 |\n| ----- | -------------------- | ---------------- | ------ |\n| width | 设置标题占位图的宽度 | number | string | -      |\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonTitleProps的width属性如何使用？",
    "md": "属性: width\n说明: 设置标题占位图的宽度\n类型: number | string\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Skeleton - SkeletonParagraphProps 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| rows | 设置段落占位图的行数 | number | - |\n| width | 设置段落占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度 | number | string | Array\\<number | string> | - |\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonParagraphProps的rows属性如何使用？",
    "md": "属性: rows\n说明: 设置段落占位图的行数\n类型: number\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonParagraphProps的width属性如何使用？",
    "md": "属性: width\n说明: 设置段落占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度\n类型: number | string | Array\\<number | string>\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Skeleton - SkeletonButtonProps 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| active | 是否展示动画效果 | boolean | false | - |\n| block | 将按钮宽度调整为其父宽度的选项 | boolean | false | 4.17.0 |\n| shape | 指定按钮的形状 | `circle` | `round` | `square` | `default` | - | - |\n| size | 设置按钮的大小 | `large` | `small` | `default` | - | - |\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonButtonProps的active属性如何使用？",
    "md": "属性: active\n说明: 是否展示动画效果\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonButtonProps的block属性如何使用？",
    "md": "属性: block\n说明: 将按钮宽度调整为其父宽度的选项\n类型: boolean\n默认值: false\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonButtonProps的shape属性如何使用？",
    "md": "属性: shape\n说明: 指定按钮的形状\n类型: `circle` | `round` | `square` | `default`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonButtonProps的size属性如何使用？",
    "md": "属性: size\n说明: 设置按钮的大小\n类型: `large` | `small` | `default`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Skeleton - SkeletonInputProps 有哪些配置？",
    "md": "| 属性   | 说明             | 类型                            | 默认值 |\n| ------ | ---------------- | ------------------------------- | ------ |\n| active | 是否展示动画效果 | boolean                         | false  |\n| size   | 设置输入框的大小 | `large` | `small` | `default` | -      |\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonInputProps的active属性如何使用？",
    "md": "属性: active\n说明: 是否展示动画效果\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Skeleton - SkeletonInputProps的size属性如何使用？",
    "md": "属性: size\n说明: 设置输入框的大小\n类型: `large` | `small` | `default`\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Select 有哪些配置？",
    "md": "#### Select - Select props\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | false | 5.8.0: 支持对象类型 |\n| autoClearSearchValue | 是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效 | boolean | true | - |\n| autoFocus | 默认获取焦点 | boolean | false | - |\n| defaultActiveFirstOption | 是否默认高亮第一个选项 | boolean | true | - |\n| defaultOpen | 是否默认展开下拉菜单 | boolean | - | - |\n| defaultValue | 指定默认选中的条目 | string | string\\[] |<br />number | number\\[] | <br />LabeledValue | LabeledValue\\[] | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean | number | true | 5.5.0 |\n| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode) => ReactNode | - | - |\n| dropdownStyle | 下拉菜单的 style 属性 | CSSProperties | - | - |\n| fieldNames | 自定义节点 label、value、options、groupLabel 的字段 | object | { label: `label`, value: `value`, options: `options`, groupLabel: `label` } | 4.17.0（`groupLabel` 在 5.6.0 新增） |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false。[示例](#select-demo-search) | boolean | function(inputValue, option) | true | - |\n| filterSort | 搜索时对筛选结果项的排序函数, 类似[Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)里的 compareFunction | (optionA: Option, optionB: Option) => number | - | 4.9.0 |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body | - |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 { value: string, label: ReactNode } 的格式 | boolean | false | - |\n| listHeight | 设置弹窗滚动高度 | number | 256 | - |\n| loading | 加载中状态 | boolean | false | - |\n| maxCount | 指定可选中的最多 items 数量，仅在 `mode` 为 `multiple` 或 `tags` 时生效 | number | - | 5.13.0 |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number | `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode | function(omittedValues) | - | - |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - | - |\n| menuItemSelectedIcon | 自定义多选时当前选中的条目图标 | ReactNode | - | - |\n| mode | 设置 Select 的模式为多选或标签 | `multiple` | `tags` | - | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` | - |\n| open | 是否展开下拉菜单 | boolean | - | - |\n| optionFilterProp | 搜索时过滤对应的 `option` 属性，如设置为 `children` 表示对内嵌内容进行搜索。若通过 `options` 属性配置选项内容，建议设置 `optionFilterProp=\"label\"` 来对内容进行搜索。 | string | `value` | - |\n| optionLabelProp | 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。[示例](https://codesandbox.io/s/antd-reproduction-template-tk678) | string | `children` | - |\n| options | 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能 | { label, value }\\[] | - | - |\n| optionRender | 自定义渲染下拉选项 | (option: FlattenOptionData\\<BaseOptionType> , info: { index: number }) => React.ReactNode | - | 5.11.0 |\n| placeholder | 选择框默认文本 | string | - | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| removeIcon | 自定义的多选框清除图标 | ReactNode | - | - |\n| searchValue | 控制搜索文本 | string | - | - |\n| showSearch | 配置是否可搜索 | boolean | 单选为 false，多选为 true | - |\n| size | 选择框大小 | `large` | `middle` | `small` | `middle` | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标。以防止图标被用于其他交互，替换的图标默认不会响应展开、收缩事件，可以通过添加 `pointer-events: none` 样式透传。 | ReactNode | `<DownOutlined />` | - |\n| tagRender | 自定义 tag 内容 render，仅在 `mode` 为 `multiple` 或 `tags` 时生效 | (props) => ReactNode | - | - |\n| tokenSeparators | 自动分词的分隔符，仅在 `mode=\"tags\"` 时生效 | string\\[] | - | - |\n| value | 指定当前选中的条目，多选时为一个数组。（value 数组引用未变化时，Select 不会更新） | string | string\\[] | <br />number | number\\[] | <br />LabeledValue | LabeledValue\\[] | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onBlur | 失去焦点时回调 | function | - | - |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value, option:Option | Array\\<Option>) | - | - |\n| onClear | 清除内容时回调 | function | - | 4.6.0 |\n| onDeselect | 取消选中时调用，参数为选中项的 value (或 key) 值，仅在 `multiple` 或 `tags` 模式下生效 | function(value: string | number | LabeledValue) | - | - |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - | - |\n| onFocus | 获得焦点时回调 | function | - | - |\n| onInputKeyDown | 按键按下时回调 | function | - | - |\n| onMouseEnter | 鼠标移入时回调 | function | - | - |\n| onMouseLeave | 鼠标移出时回调 | function | - | - |\n| onPopupScroll | 下拉列表滚动时的回调 | function | - | - |\n| onSearch | 文本框值变化时回调 | function(value: string) | - | - |\n| onSelect | 被选中时调用，参数为选中项的 value (或 key) 值 | function(value: string | number | LabeledValue, option: Option) | - | - |\n#### Select - Select Methods\n| 名称    | 说明     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 取消焦点 | -    |\n| focus() | 获取焦点 | -    |\n#### Select - Option props\n| 参数      | 说明                     | 类型             | 默认值 | 版本 |\n| --------- | ------------------------ | ---------------- | ------ | ---- |\n| className | Option 器类名            | string           | -      | -    |\n| disabled  | 是否禁用                 | boolean          | false  | -    |\n| title     | 选项上的原生 title 提示  | string           | -      | -    |\n| value     | 默认根据此属性值进行筛选 | string | number | -      | -    |\n#### Select - OptGroup props\n| 参数  | 说明 | 类型                    | 默认值 | 版本 |\n| ----- | ---- | ----------------------- | ------ | ---- |\n| key   | Key  | string                  | -      | -    |\n| label | 组名 | string | React.Element | -      | -    |\n"
  },
  {
    "title": "ant-design 的 Select - Select props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | false | 5.8.0: 支持对象类型 |\n| autoClearSearchValue | 是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效 | boolean | true | - |\n| autoFocus | 默认获取焦点 | boolean | false | - |\n| defaultActiveFirstOption | 是否默认高亮第一个选项 | boolean | true | - |\n| defaultOpen | 是否默认展开下拉菜单 | boolean | - | - |\n| defaultValue | 指定默认选中的条目 | string | string\\[] |<br />number | number\\[] | <br />LabeledValue | LabeledValue\\[] | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean | number | true | 5.5.0 |\n| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode) => ReactNode | - | - |\n| dropdownStyle | 下拉菜单的 style 属性 | CSSProperties | - | - |\n| fieldNames | 自定义节点 label、value、options、groupLabel 的字段 | object | { label: `label`, value: `value`, options: `options`, groupLabel: `label` } | 4.17.0（`groupLabel` 在 5.6.0 新增） |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false。[示例](#select-demo-search) | boolean | function(inputValue, option) | true | - |\n| filterSort | 搜索时对筛选结果项的排序函数, 类似[Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)里的 compareFunction | (optionA: Option, optionB: Option) => number | - | 4.9.0 |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body | - |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 { value: string, label: ReactNode } 的格式 | boolean | false | - |\n| listHeight | 设置弹窗滚动高度 | number | 256 | - |\n| loading | 加载中状态 | boolean | false | - |\n| maxCount | 指定可选中的最多 items 数量，仅在 `mode` 为 `multiple` 或 `tags` 时生效 | number | - | 5.13.0 |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number | `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode | function(omittedValues) | - | - |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - | - |\n| menuItemSelectedIcon | 自定义多选时当前选中的条目图标 | ReactNode | - | - |\n| mode | 设置 Select 的模式为多选或标签 | `multiple` | `tags` | - | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` | - |\n| open | 是否展开下拉菜单 | boolean | - | - |\n| optionFilterProp | 搜索时过滤对应的 `option` 属性，如设置为 `children` 表示对内嵌内容进行搜索。若通过 `options` 属性配置选项内容，建议设置 `optionFilterProp=\"label\"` 来对内容进行搜索。 | string | `value` | - |\n| optionLabelProp | 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。[示例](https://codesandbox.io/s/antd-reproduction-template-tk678) | string | `children` | - |\n| options | 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能 | { label, value }\\[] | - | - |\n| optionRender | 自定义渲染下拉选项 | (option: FlattenOptionData\\<BaseOptionType> , info: { index: number }) => React.ReactNode | - | 5.11.0 |\n| placeholder | 选择框默认文本 | string | - | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| removeIcon | 自定义的多选框清除图标 | ReactNode | - | - |\n| searchValue | 控制搜索文本 | string | - | - |\n| showSearch | 配置是否可搜索 | boolean | 单选为 false，多选为 true | - |\n| size | 选择框大小 | `large` | `middle` | `small` | `middle` | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标。以防止图标被用于其他交互，替换的图标默认不会响应展开、收缩事件，可以通过添加 `pointer-events: none` 样式透传。 | ReactNode | `<DownOutlined />` | - |\n| tagRender | 自定义 tag 内容 render，仅在 `mode` 为 `multiple` 或 `tags` 时生效 | (props) => ReactNode | - | - |\n| tokenSeparators | 自动分词的分隔符，仅在 `mode=\"tags\"` 时生效 | string\\[] | - | - |\n| value | 指定当前选中的条目，多选时为一个数组。（value 数组引用未变化时，Select 不会更新） | string | string\\[] | <br />number | number\\[] | <br />LabeledValue | LabeledValue\\[] | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onBlur | 失去焦点时回调 | function | - | - |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value, option:Option | Array\\<Option>) | - | - |\n| onClear | 清除内容时回调 | function | - | 4.6.0 |\n| onDeselect | 取消选中时调用，参数为选中项的 value (或 key) 值，仅在 `multiple` 或 `tags` 模式下生效 | function(value: string | number | LabeledValue) | - | - |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - | - |\n| onFocus | 获得焦点时回调 | function | - | - |\n| onInputKeyDown | 按键按下时回调 | function | - | - |\n| onMouseEnter | 鼠标移入时回调 | function | - | - |\n| onMouseLeave | 鼠标移出时回调 | function | - | - |\n| onPopupScroll | 下拉列表滚动时的回调 | function | - | - |\n| onSearch | 文本框值变化时回调 | function(value: string) | - | - |\n| onSelect | 被选中时调用，参数为选中项的 value (或 key) 值 | function(value: string | number | LabeledValue, option: Option) | - | - |\n"
  },
  {
    "title": "ant-design 中 Select - Select props的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 自定义清除按钮\n类型: boolean | { clearIcon?: ReactNode }\n默认值: false\n版本: 5.8.0: 支持对象类型\n"
  },
  {
    "title": "ant-design 中 Select - Select props的autoClearSearchValue属性如何使用？",
    "md": "参数: autoClearSearchValue\n说明: 是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 默认获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的defaultActiveFirstOption属性如何使用？",
    "md": "参数: defaultActiveFirstOption\n说明: 是否默认高亮第一个选项\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的defaultOpen属性如何使用？",
    "md": "参数: defaultOpen\n说明: 是否默认展开下拉菜单\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 指定默认选中的条目\n类型: string | string\\[] |<br />number | number\\[] | <br />LabeledValue | LabeledValue\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 下拉菜单的 className 属性\n类型: string\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的popupMatchSelectWidth属性如何使用？",
    "md": "参数: popupMatchSelectWidth\n说明: 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动\n类型: boolean | number\n默认值: true\n版本: 5.5.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的dropdownRender属性如何使用？",
    "md": "参数: dropdownRender\n说明: 自定义下拉框内容\n类型: (originNode: ReactNode) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的dropdownStyle属性如何使用？",
    "md": "参数: dropdownStyle\n说明: 下拉菜单的 style 属性\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的fieldNames属性如何使用？",
    "md": "参数: fieldNames\n说明: 自定义节点 label、value、options、groupLabel 的字段\n类型: object\n默认值: { label: `label`, value: `value`, options: `options`, groupLabel: `label` }\n版本: 4.17.0（`groupLabel` 在 5.6.0 新增）\n"
  },
  {
    "title": "ant-design 中 Select - Select props的filterOption属性如何使用？",
    "md": "参数: filterOption\n说明: 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false。[示例](#select-demo-search)\n类型: boolean | function(inputValue, option)\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的filterSort属性如何使用？",
    "md": "参数: filterSort\n说明: 搜索时对筛选结果项的排序函数, 类似[Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)里的 compareFunction\n类型: (optionA: Option, optionB: Option) => number\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)\n类型: function(triggerNode)\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的labelInValue属性如何使用？",
    "md": "参数: labelInValue\n说明: 是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 { value: string, label: ReactNode } 的格式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的listHeight属性如何使用？",
    "md": "参数: listHeight\n说明: 设置弹窗滚动高度\n类型: number\n默认值: 256\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的loading属性如何使用？",
    "md": "参数: loading\n说明: 加载中状态\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的maxCount属性如何使用？",
    "md": "参数: maxCount\n说明: 指定可选中的最多 items 数量，仅在 `mode` 为 `multiple` 或 `tags` 时生效\n类型: number\n默认值: -\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的maxTagCount属性如何使用？",
    "md": "参数: maxTagCount\n说明: 最多显示多少个 tag，响应式模式会对性能产生损耗\n类型: number | `responsive`\n默认值: -\n版本: responsive: 4.10\n"
  },
  {
    "title": "ant-design 中 Select - Select props的maxTagPlaceholder属性如何使用？",
    "md": "参数: maxTagPlaceholder\n说明: 隐藏 tag 时显示的内容\n类型: ReactNode | function(omittedValues)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的maxTagTextLength属性如何使用？",
    "md": "参数: maxTagTextLength\n说明: 最大显示的 tag 文本长度\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的menuItemSelectedIcon属性如何使用？",
    "md": "参数: menuItemSelectedIcon\n说明: 自定义多选时当前选中的条目图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的mode属性如何使用？",
    "md": "参数: mode\n说明: 设置 Select 的模式为多选或标签\n类型: `multiple` | `tags`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的notFoundContent属性如何使用？",
    "md": "参数: notFoundContent\n说明: 当下拉列表为空时显示的内容\n类型: ReactNode\n默认值: `Not Found`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的open属性如何使用？",
    "md": "参数: open\n说明: 是否展开下拉菜单\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的optionFilterProp属性如何使用？",
    "md": "参数: optionFilterProp\n说明: 搜索时过滤对应的 `option` 属性，如设置为 `children` 表示对内嵌内容进行搜索。若通过 `options` 属性配置选项内容，建议设置 `optionFilterProp=\"label\"` 来对内容进行搜索。\n类型: string\n默认值: `value`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的optionLabelProp属性如何使用？",
    "md": "参数: optionLabelProp\n说明: 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。[示例](https://codesandbox.io/s/antd-reproduction-template-tk678)\n类型: string\n默认值: `children`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的options属性如何使用？",
    "md": "参数: options\n说明: 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能\n类型: { label, value }\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的optionRender属性如何使用？",
    "md": "参数: optionRender\n说明: 自定义渲染下拉选项\n类型: (option: FlattenOptionData\\<BaseOptionType> , info: { index: number }) => React.ReactNode\n默认值: -\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 选择框默认文本\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的placement属性如何使用？",
    "md": "参数: placement\n说明: 选择框弹出的位置\n类型: `bottomLeft` `bottomRight` `topLeft` `topRight`\n默认值: bottomLeft\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的removeIcon属性如何使用？",
    "md": "参数: removeIcon\n说明: 自定义的多选框清除图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的searchValue属性如何使用？",
    "md": "参数: searchValue\n说明: 控制搜索文本\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的showSearch属性如何使用？",
    "md": "参数: showSearch\n说明: 配置是否可搜索\n类型: boolean\n默认值: 单选为 false，多选为 true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的size属性如何使用？",
    "md": "参数: size\n说明: 选择框大小\n类型: `large` | `middle` | `small`\n默认值: `middle`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的suffixIcon属性如何使用？",
    "md": "参数: suffixIcon\n说明: 自定义的选择框后缀图标。以防止图标被用于其他交互，替换的图标默认不会响应展开、收缩事件，可以通过添加 `pointer-events: none` 样式透传。\n类型: ReactNode\n默认值: `<DownOutlined />`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的tagRender属性如何使用？",
    "md": "参数: tagRender\n说明: 自定义 tag 内容 render，仅在 `mode` 为 `multiple` 或 `tags` 时生效\n类型: (props) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的tokenSeparators属性如何使用？",
    "md": "参数: tokenSeparators\n说明: 自动分词的分隔符，仅在 `mode=\"tags\"` 时生效\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的value属性如何使用？",
    "md": "参数: value\n说明: 指定当前选中的条目，多选时为一个数组。（value 数组引用未变化时，Select 不会更新）\n类型: string | string\\[] | <br />number | number\\[] | <br />LabeledValue | LabeledValue\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的virtual属性如何使用？",
    "md": "参数: virtual\n说明: 设置 false 时关闭虚拟滚动\n类型: boolean\n默认值: true\n版本: 4.1.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onBlur属性如何使用？",
    "md": "参数: onBlur\n说明: 失去焦点时回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选中 option，或 input 的 value 变化时，调用此函数\n类型: function(value, option:Option | Array\\<Option>)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onClear属性如何使用？",
    "md": "参数: onClear\n说明: 清除内容时回调\n类型: function\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onDeselect属性如何使用？",
    "md": "参数: onDeselect\n说明: 取消选中时调用，参数为选中项的 value (或 key) 值，仅在 `multiple` 或 `tags` 模式下生效\n类型: function(value: string | number | LabeledValue)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onDropdownVisibleChange属性如何使用？",
    "md": "参数: onDropdownVisibleChange\n说明: 展开下拉菜单的回调\n类型: function(open)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onFocus属性如何使用？",
    "md": "参数: onFocus\n说明: 获得焦点时回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onInputKeyDown属性如何使用？",
    "md": "参数: onInputKeyDown\n说明: 按键按下时回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onMouseEnter属性如何使用？",
    "md": "参数: onMouseEnter\n说明: 鼠标移入时回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onMouseLeave属性如何使用？",
    "md": "参数: onMouseLeave\n说明: 鼠标移出时回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onPopupScroll属性如何使用？",
    "md": "参数: onPopupScroll\n说明: 下拉列表滚动时的回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onSearch属性如何使用？",
    "md": "参数: onSearch\n说明: 文本框值变化时回调\n类型: function(value: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select props的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 被选中时调用，参数为选中项的 value (或 key) 值\n类型: function(value: string | number | LabeledValue, option: Option)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Select - Select Methods 有哪些配置？",
    "md": "| 名称    | 说明     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 取消焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 Select - Select Methods的blur()属性如何使用？",
    "md": "名称: blur()\n说明: 取消焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Select Methods的focus()属性如何使用？",
    "md": "名称: focus()\n说明: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 Select - Option props 有哪些配置？",
    "md": "| 参数      | 说明                     | 类型             | 默认值 | 版本 |\n| --------- | ------------------------ | ---------------- | ------ | ---- |\n| className | Option 器类名            | string           | -      | -    |\n| disabled  | 是否禁用                 | boolean          | false  | -    |\n| title     | 选项上的原生 title 提示  | string           | -      | -    |\n| value     | 默认根据此属性值进行筛选 | string | number | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Select - Option props的className属性如何使用？",
    "md": "参数: className\n说明: Option 器类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Option props的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Option props的title属性如何使用？",
    "md": "参数: title\n说明: 选项上的原生 title 提示\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - Option props的value属性如何使用？",
    "md": "参数: value\n说明: 默认根据此属性值进行筛选\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Select - OptGroup props 有哪些配置？",
    "md": "| 参数  | 说明 | 类型                    | 默认值 | 版本 |\n| ----- | ---- | ----------------------- | ------ | ---- |\n| key   | Key  | string                  | -      | -    |\n| label | 组名 | string | React.Element | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Select - OptGroup props的key属性如何使用？",
    "md": "参数: key\n说明: Key\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Select - OptGroup props的label属性如何使用？",
    "md": "参数: label\n说明: 组名\n类型: string | React.Element\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Segmented 有哪些配置？",
    "md": "#### Segmented - Segmented\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将宽度调整为父元素宽度的选项 | boolean | false | - |\n| defaultValue | 默认选中的值 | string | number | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| onChange | 选项变化时的回调函数 | function(value: string | number) | - | - |\n| options | 数据化配置选项内容 | string\\[] | number\\[] | Array<{ label: ReactNode value: string icon? ReactNode disabled?: boolean className?: string }> | \\[] | - |\n| size | 控件尺寸 | `large` | `middle` | `small` | `middle` | - |\n| value | 当前选中的值 | string | number | - | - |\n"
  },
  {
    "title": "ant-design 的 Segmented - Segmented 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将宽度调整为父元素宽度的选项 | boolean | false | - |\n| defaultValue | 默认选中的值 | string | number | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| onChange | 选项变化时的回调函数 | function(value: string | number) | - | - |\n| options | 数据化配置选项内容 | string\\[] | number\\[] | Array<{ label: ReactNode value: string icon? ReactNode disabled?: boolean className?: string }> | \\[] | - |\n| size | 控件尺寸 | `large` | `middle` | `small` | `middle` | - |\n| value | 当前选中的值 | string | number | - | - |\n"
  },
  {
    "title": "ant-design 中 Segmented - Segmented的block属性如何使用？",
    "md": "参数: block\n说明: 将宽度调整为父元素宽度的选项\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Segmented - Segmented的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认选中的值\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Segmented - Segmented的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Segmented - Segmented的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选项变化时的回调函数\n类型: function(value: string | number)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Segmented - Segmented的options属性如何使用？",
    "md": "参数: options\n说明: 数据化配置选项内容\n类型: string\\[] | number\\[] | Array<{ label: ReactNode value: string icon? ReactNode disabled?: boolean className?: string }>\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Segmented - Segmented的size属性如何使用？",
    "md": "参数: size\n说明: 控件尺寸\n类型: `large` | `middle` | `small`\n默认值: `middle`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Segmented - Segmented的value属性如何使用？",
    "md": "参数: value\n说明: 当前选中的值\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Result 有哪些配置？",
    "md": "#### Result - Result\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| extra | 操作区 | ReactNode | - |\n| icon | 自定义 icon | ReactNode | - |\n| status | 结果的状态，决定图标和颜色 | `success` | `error` | `info` | `warning` | `404` | `403` | `500` | `info` |\n| subTitle | subTitle 文字 | ReactNode | - |\n| title | title 文字 | ReactNode | - |\n"
  },
  {
    "title": "ant-design 的 Result - Result 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| extra | 操作区 | ReactNode | - |\n| icon | 自定义 icon | ReactNode | - |\n| status | 结果的状态，决定图标和颜色 | `success` | `error` | `info` | `warning` | `404` | `403` | `500` | `info` |\n| subTitle | subTitle 文字 | ReactNode | - |\n| title | title 文字 | ReactNode | - |\n"
  },
  {
    "title": "ant-design 中 Result - Result的extra属性如何使用？",
    "md": "参数: extra\n说明: 操作区\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Result - Result的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义 icon\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Result - Result的status属性如何使用？",
    "md": "参数: status\n说明: 结果的状态，决定图标和颜色\n类型: `success` | `error` | `info` | `warning` | `404` | `403` | `500`\n默认值: `info`\n"
  },
  {
    "title": "ant-design 中 Result - Result的subTitle属性如何使用？",
    "md": "参数: subTitle\n说明: subTitle 文字\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Result - Result的title属性如何使用？",
    "md": "参数: title\n说明: title 文字\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Rate 有哪些配置？",
    "md": "#### Rate - Rate\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 是否允许再次点击后清除 | boolean | true | - |\n| allowHalf | 是否允许半选 | boolean | false | - |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| character | 自定义字符 | ReactNode | (RateProps) => ReactNode | \\<StarFilled /> | function(): 4.4.0 |\n| className | 自定义样式类名 | string | - | - |\n| count | star 总数 | number | 5 | - |\n| defaultValue | 默认值 | number | 0 | - |\n| disabled | 只读，无法进行交互 | boolean | false | - |\n| style | 自定义样式对象 | CSSProperties | - | - |\n| tooltips | 自定义每项的提示信息 | string\\[] | - | - |\n| value | 当前数，受控值 | number | - | - |\n| onBlur | 失去焦点时的回调 | function() | - | - |\n| onChange | 选择时的回调 | function(value: number) | - | - |\n| onFocus | 获取焦点时的回调 | function() | - | - |\n| onHoverChange | 鼠标经过时数值变化的回调 | function(value: number) | - | - |\n| onKeyDown | 按键回调 | function(event) | - | - |\n#### Rate - 方法\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 的 Rate - Rate 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 是否允许再次点击后清除 | boolean | true | - |\n| allowHalf | 是否允许半选 | boolean | false | - |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| character | 自定义字符 | ReactNode | (RateProps) => ReactNode | \\<StarFilled /> | function(): 4.4.0 |\n| className | 自定义样式类名 | string | - | - |\n| count | star 总数 | number | 5 | - |\n| defaultValue | 默认值 | number | 0 | - |\n| disabled | 只读，无法进行交互 | boolean | false | - |\n| style | 自定义样式对象 | CSSProperties | - | - |\n| tooltips | 自定义每项的提示信息 | string\\[] | - | - |\n| value | 当前数，受控值 | number | - | - |\n| onBlur | 失去焦点时的回调 | function() | - | - |\n| onChange | 选择时的回调 | function(value: number) | - | - |\n| onFocus | 获取焦点时的回调 | function() | - | - |\n| onHoverChange | 鼠标经过时数值变化的回调 | function(value: number) | - | - |\n| onKeyDown | 按键回调 | function(event) | - | - |\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的allowClear属性如何使用？",
    "md": "属性: allowClear\n说明: 是否允许再次点击后清除\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的allowHalf属性如何使用？",
    "md": "属性: allowHalf\n说明: 是否允许半选\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的autoFocus属性如何使用？",
    "md": "属性: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的character属性如何使用？",
    "md": "属性: character\n说明: 自定义字符\n类型: ReactNode | (RateProps) => ReactNode\n默认值: \\<StarFilled />\n版本: function(): 4.4.0\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的className属性如何使用？",
    "md": "属性: className\n说明: 自定义样式类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的count属性如何使用？",
    "md": "属性: count\n说明: star 总数\n类型: number\n默认值: 5\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的defaultValue属性如何使用？",
    "md": "属性: defaultValue\n说明: 默认值\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的disabled属性如何使用？",
    "md": "属性: disabled\n说明: 只读，无法进行交互\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的style属性如何使用？",
    "md": "属性: style\n说明: 自定义样式对象\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的tooltips属性如何使用？",
    "md": "属性: tooltips\n说明: 自定义每项的提示信息\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的value属性如何使用？",
    "md": "属性: value\n说明: 当前数，受控值\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的onBlur属性如何使用？",
    "md": "属性: onBlur\n说明: 失去焦点时的回调\n类型: function()\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的onChange属性如何使用？",
    "md": "属性: onChange\n说明: 选择时的回调\n类型: function(value: number)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的onFocus属性如何使用？",
    "md": "属性: onFocus\n说明: 获取焦点时的回调\n类型: function()\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的onHoverChange属性如何使用？",
    "md": "属性: onHoverChange\n说明: 鼠标经过时数值变化的回调\n类型: function(value: number)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Rate - Rate的onKeyDown属性如何使用？",
    "md": "属性: onKeyDown\n说明: 按键回调\n类型: function(event)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Rate - 方法 有哪些配置？",
    "md": "| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 中 Rate - 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n"
  },
  {
    "title": "ant-design 中 Rate - 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n"
  },
  {
    "title": "ant-design 的 Radio 有哪些配置？",
    "md": "#### Radio - Radio/Radio.Button\n| 参数           | 说明                              | 类型    | 默认值 |\n| -------------- | --------------------------------- | ------- | ------ |\n| autoFocus      | 自动获取焦点                      | boolean | false  |\n| checked        | 指定当前是否选中                  | boolean | false  |\n| defaultChecked | 初始是否选中                      | boolean | false  |\n| disabled       | 禁用 Radio                        | boolean | false  |\n| value          | 根据 value 进行比较，判断是否选中 | any     | -      |\n#### Radio - Radio.Group\n| 参数 | 说明 | 类型 | 默认值 | 版本 | undefined |\n| --- | --- | --- | --- | --- | --- |\n| buttonStyle | RadioButton 的风格样式，目前有描边和填色两种风格 | `outline` | `solid` | `outline` | - | - |\n| defaultValue | 默认选中的值 | any | - | - | - |\n| disabled | 禁选所有子单选器 | boolean | false | - | - |\n| name | RadioGroup 下所有 `input[type=\"radio\"]` 的 `name` 属性 | string | - | - | - |\n| options | 以配置形式设置子元素 | string\\[] | number\\[] | Array<{ label: ReactNode; value: string; disabled?: boolean; }> | - | - | - |\n| optionType | 用于设置 Radio `options` 类型 | `default` | `button` | `default` | 4.4.0 | - |\n| size | 大小，只对按钮样式生效 | `large` | `middle` | `small` | - | - | - |\n| value | 用于设置当前选中的值 | any | - | - | - |\n| onChange | 选项变化时的回调函数 | function(e:Event) | - | - | - |\n#### Radio - Radio\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 的 Radio - Radio/Radio.Button 有哪些配置？",
    "md": "| 参数           | 说明                              | 类型    | 默认值 |\n| -------------- | --------------------------------- | ------- | ------ |\n| autoFocus      | 自动获取焦点                      | boolean | false  |\n| checked        | 指定当前是否选中                  | boolean | false  |\n| defaultChecked | 初始是否选中                      | boolean | false  |\n| disabled       | 禁用 Radio                        | boolean | false  |\n| value          | 根据 value 进行比较，判断是否选中 | any     | -      |\n"
  },
  {
    "title": "ant-design 中 Radio - Radio/Radio.Button的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Radio - Radio/Radio.Button的checked属性如何使用？",
    "md": "参数: checked\n说明: 指定当前是否选中\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Radio - Radio/Radio.Button的defaultChecked属性如何使用？",
    "md": "参数: defaultChecked\n说明: 初始是否选中\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Radio - Radio/Radio.Button的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用 Radio\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Radio - Radio/Radio.Button的value属性如何使用？",
    "md": "参数: value\n说明: 根据 value 进行比较，判断是否选中\n类型: any\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Radio - Radio.Group 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 | undefined |\n| --- | --- | --- | --- | --- | --- |\n| buttonStyle | RadioButton 的风格样式，目前有描边和填色两种风格 | `outline` | `solid` | `outline` | - | - |\n| defaultValue | 默认选中的值 | any | - | - | - |\n| disabled | 禁选所有子单选器 | boolean | false | - | - |\n| name | RadioGroup 下所有 `input[type=\"radio\"]` 的 `name` 属性 | string | - | - | - |\n| options | 以配置形式设置子元素 | string\\[] | number\\[] | Array<{ label: ReactNode; value: string; disabled?: boolean; }> | - | - | - |\n| optionType | 用于设置 Radio `options` 类型 | `default` | `button` | `default` | 4.4.0 | - |\n| size | 大小，只对按钮样式生效 | `large` | `middle` | `small` | - | - | - |\n| value | 用于设置当前选中的值 | any | - | - | - |\n| onChange | 选项变化时的回调函数 | function(e:Event) | - | - | - |\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的buttonStyle属性如何使用？",
    "md": "参数: buttonStyle\n说明: RadioButton 的风格样式，目前有描边和填色两种风格\n类型: `outline` | `solid`\n默认值: `outline`\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认选中的值\n类型: any\n默认值: -\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁选所有子单选器\n类型: boolean\n默认值: false\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的name属性如何使用？",
    "md": "参数: name\n说明: RadioGroup 下所有 `input[type=\"radio\"]` 的 `name` 属性\n类型: string\n默认值: -\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的options属性如何使用？",
    "md": "参数: options\n说明: 以配置形式设置子元素\n类型: string\\[] | number\\[] | Array<{ label: ReactNode; value: string; disabled?: boolean; }>\n默认值: -\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的optionType属性如何使用？",
    "md": "参数: optionType\n说明: 用于设置 Radio `options` 类型\n类型: `default` | `button`\n默认值: `default`\n版本: 4.4.0\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的size属性如何使用？",
    "md": "参数: size\n说明: 大小，只对按钮样式生效\n类型: `large` | `middle` | `small`\n默认值: -\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的value属性如何使用？",
    "md": "参数: value\n说明: 用于设置当前选中的值\n类型: any\n默认值: -\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 中 Radio - Radio.Group的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选项变化时的回调函数\n类型: function(e:Event)\n默认值: -\n版本: -\nundefined: -\n"
  },
  {
    "title": "ant-design 的 Radio - Radio 有哪些配置？",
    "md": "| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 中 Radio - Radio的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n"
  },
  {
    "title": "ant-design 中 Radio - Radio的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n"
  },
  {
    "title": "ant-design 的 QrCode 有哪些配置？",
    "md": "#### QrCode - QrCode\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- | --- |\n| value | 扫描后的文本 | string | - |\n| type | 渲染类型 | `canvas \\| svg ` | `canvas` | 5.6.0 |\n| icon | 二维码中图片的地址（目前只支持图片地址） | string | - |\n| size | 二维码大小 | number | 160 |\n| iconSize | 二维码中图片的大小 | number | 40 |\n| color | 二维码颜色 | string | `#000` |\n| bgColor | 二维码背景颜色 | string | `transparent` | 5.5.0 |\n| bordered | 是否有边框 | boolean | `true` |\n| errorLevel | 二维码纠错等级 | `'L' \\| 'M' \\| 'Q' \\| 'H' ` | `M` |\n| status | 二维码状态 | `active \\| expired \\| loading \\| scanned` | `active` | scanned: 5.13.0 |\n| onRefresh | 点击\"点击刷新\"的回调 | `() => void` | - |\n"
  },
  {
    "title": "ant-design 的 QrCode - QrCode 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- | --- |\n| value | 扫描后的文本 | string | - |\n| type | 渲染类型 | `canvas \\| svg ` | `canvas` | 5.6.0 |\n| icon | 二维码中图片的地址（目前只支持图片地址） | string | - |\n| size | 二维码大小 | number | 160 |\n| iconSize | 二维码中图片的大小 | number | 40 |\n| color | 二维码颜色 | string | `#000` |\n| bgColor | 二维码背景颜色 | string | `transparent` | 5.5.0 |\n| bordered | 是否有边框 | boolean | `true` |\n| errorLevel | 二维码纠错等级 | `'L' \\| 'M' \\| 'Q' \\| 'H' ` | `M` |\n| status | 二维码状态 | `active \\| expired \\| loading \\| scanned` | `active` | scanned: 5.13.0 |\n| onRefresh | 点击\"点击刷新\"的回调 | `() => void` | - |\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的value属性如何使用？",
    "md": "参数: value\n说明: 扫描后的文本\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的type属性如何使用？",
    "md": "参数: type\n说明: 渲染类型\n类型: `canvas \\| svg `\n默认值: `canvas`\n版本: 5.6.0\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的icon属性如何使用？",
    "md": "参数: icon\n说明: 二维码中图片的地址（目前只支持图片地址）\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的size属性如何使用？",
    "md": "参数: size\n说明: 二维码大小\n类型: number\n默认值: 160\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的iconSize属性如何使用？",
    "md": "参数: iconSize\n说明: 二维码中图片的大小\n类型: number\n默认值: 40\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的color属性如何使用？",
    "md": "参数: color\n说明: 二维码颜色\n类型: string\n默认值: `#000`\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的bgColor属性如何使用？",
    "md": "参数: bgColor\n说明: 二维码背景颜色\n类型: string\n默认值: `transparent`\n版本: 5.5.0\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否有边框\n类型: boolean\n默认值: `true`\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的errorLevel属性如何使用？",
    "md": "参数: errorLevel\n说明: 二维码纠错等级\n类型: `'L' \\| 'M' \\| 'Q' \\| 'H' `\n默认值: `M`\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的status属性如何使用？",
    "md": "参数: status\n说明: 二维码状态\n类型: `active \\| expired \\| loading \\| scanned`\n默认值: `active`\n版本: scanned: 5.13.0\n"
  },
  {
    "title": "ant-design 中 QrCode - QrCode的onRefresh属性如何使用？",
    "md": "参数: onRefresh\n说明: 点击\"点击刷新\"的回调\n类型: `() => void`\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Progress 有哪些配置？",
    "md": "#### Progress - Progress\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 内容的模板函数 | function(percent, successPercent) | (percent) => percent + `%` | - |\n| percent | 百分比 | number | 0 | - |\n| showInfo | 是否显示进度数值或状态图标 | boolean | true | - |\n| status | 状态，可选：`success` `exception` `normal` `active`(仅限 line) | string | - | - |\n| strokeColor | 进度条的色彩 | string | - | - |\n| strokeLinecap | 进度条的样式 | `round` | `butt` | `square`，区别详见 [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) | `round` | - |\n| success | 成功进度条相关配置 | { percent: number, strokeColor: string } | - | - |\n| trailColor | 未完成的分段的颜色 | string | - | - |\n| type | 类型，可选 `line` `circle` `dashboard` | string | `line` | - |\n| size | 进度条的尺寸 | number | \\[number | string, number] | \"small\" | \"default\" | \"default\" | v5.3.0 |\n#### Progress - Progress\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| steps | 进度条总共步数 | number | - | - |\n| strokeColor | 进度条的色彩，传入 object 时为渐变。当有 `steps` 时支持传入一个数组。 | string | string\\[] | { from: string; to: string; direction: string } | - | 4.21.0: `string[]` |\n#### Progress - Progress\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| strokeColor | 圆形进度条线的色彩，传入 object 时为渐变 | string | { number%: string } | - | - |\n| strokeWidth | 圆形进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 | - |\n#### Progress - Progress\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| gapDegree | 仪表盘进度条缺口角度，可取值 0 ~ 295 | number | 75 | - |\n| gapPosition | 仪表盘进度条缺口位置 | `top` | `bottom` | `left` | `right` | `bottom` | - |\n| strokeWidth | 仪表盘进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 | - |\n"
  },
  {
    "title": "ant-design 的 Progress - Progress 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 内容的模板函数 | function(percent, successPercent) | (percent) => percent + `%` | - |\n| percent | 百分比 | number | 0 | - |\n| showInfo | 是否显示进度数值或状态图标 | boolean | true | - |\n| status | 状态，可选：`success` `exception` `normal` `active`(仅限 line) | string | - | - |\n| strokeColor | 进度条的色彩 | string | - | - |\n| strokeLinecap | 进度条的样式 | `round` | `butt` | `square`，区别详见 [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) | `round` | - |\n| success | 成功进度条相关配置 | { percent: number, strokeColor: string } | - | - |\n| trailColor | 未完成的分段的颜色 | string | - | - |\n| type | 类型，可选 `line` `circle` `dashboard` | string | `line` | - |\n| size | 进度条的尺寸 | number | \\[number | string, number] | \"small\" | \"default\" | \"default\" | v5.3.0 |\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的format属性如何使用？",
    "md": "属性: format\n说明: 内容的模板函数\n类型: function(percent, successPercent)\n默认值: (percent) => percent + `%`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的percent属性如何使用？",
    "md": "属性: percent\n说明: 百分比\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的showInfo属性如何使用？",
    "md": "属性: showInfo\n说明: 是否显示进度数值或状态图标\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的status属性如何使用？",
    "md": "属性: status\n说明: 状态，可选：`success` `exception` `normal` `active`(仅限 line)\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的strokeColor属性如何使用？",
    "md": "属性: strokeColor\n说明: 进度条的色彩\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的strokeLinecap属性如何使用？",
    "md": "属性: strokeLinecap\n说明: 进度条的样式\n类型: `round` | `butt` | `square`，区别详见 [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap)\n默认值: `round`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的success属性如何使用？",
    "md": "属性: success\n说明: 成功进度条相关配置\n类型: { percent: number, strokeColor: string }\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的trailColor属性如何使用？",
    "md": "属性: trailColor\n说明: 未完成的分段的颜色\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的type属性如何使用？",
    "md": "属性: type\n说明: 类型，可选 `line` `circle` `dashboard`\n类型: string\n默认值: `line`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的size属性如何使用？",
    "md": "属性: size\n说明: 进度条的尺寸\n类型: number | \\[number | string, number] | \"small\" | \"default\"\n默认值: \"default\"\n版本: v5.3.0\n"
  },
  {
    "title": "ant-design 的 Progress - Progress 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| steps | 进度条总共步数 | number | - | - |\n| strokeColor | 进度条的色彩，传入 object 时为渐变。当有 `steps` 时支持传入一个数组。 | string | string\\[] | { from: string; to: string; direction: string } | - | 4.21.0: `string[]` |\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的steps属性如何使用？",
    "md": "属性: steps\n说明: 进度条总共步数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的strokeColor属性如何使用？",
    "md": "属性: strokeColor\n说明: 进度条的色彩，传入 object 时为渐变。当有 `steps` 时支持传入一个数组。\n类型: string | string\\[] | { from: string; to: string; direction: string }\n默认值: -\n版本: 4.21.0: `string[]`\n"
  },
  {
    "title": "ant-design 的 Progress - Progress 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| strokeColor | 圆形进度条线的色彩，传入 object 时为渐变 | string | { number%: string } | - | - |\n| strokeWidth | 圆形进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 | - |\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的strokeColor属性如何使用？",
    "md": "属性: strokeColor\n说明: 圆形进度条线的色彩，传入 object 时为渐变\n类型: string | { number%: string }\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的strokeWidth属性如何使用？",
    "md": "属性: strokeWidth\n说明: 圆形进度条线的宽度，单位是进度条画布宽度的百分比\n类型: number\n默认值: 6\n版本: -\n"
  },
  {
    "title": "ant-design 的 Progress - Progress 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| gapDegree | 仪表盘进度条缺口角度，可取值 0 ~ 295 | number | 75 | - |\n| gapPosition | 仪表盘进度条缺口位置 | `top` | `bottom` | `left` | `right` | `bottom` | - |\n| strokeWidth | 仪表盘进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 | - |\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的gapDegree属性如何使用？",
    "md": "属性: gapDegree\n说明: 仪表盘进度条缺口角度，可取值 0 ~ 295\n类型: number\n默认值: 75\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的gapPosition属性如何使用？",
    "md": "属性: gapPosition\n说明: 仪表盘进度条缺口位置\n类型: `top` | `bottom` | `left` | `right`\n默认值: `bottom`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Progress - Progress的strokeWidth属性如何使用？",
    "md": "属性: strokeWidth\n说明: 仪表盘进度条线的宽度，单位是进度条画布宽度的百分比\n类型: number\n默认值: 6\n版本: -\n"
  },
  {
    "title": "ant-design 的 Popover 有哪些配置？",
    "md": "#### Popover - Popover\n| 参数    | 说明     | 类型                         | 默认值 | 版本 |\n| ------- | -------- | ---------------------------- | ------ | ---- |\n| content | 卡片内容 | ReactNode | () => ReactNode | -      | -    |\n| title   | 卡片标题 | ReactNode | () => ReactNode | -      | -    |\n"
  },
  {
    "title": "ant-design 的 Popover - Popover 有哪些配置？",
    "md": "| 参数    | 说明     | 类型                         | 默认值 | 版本 |\n| ------- | -------- | ---------------------------- | ------ | ---- |\n| content | 卡片内容 | ReactNode | () => ReactNode | -      | -    |\n| title   | 卡片标题 | ReactNode | () => ReactNode | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Popover - Popover的content属性如何使用？",
    "md": "参数: content\n说明: 卡片内容\n类型: ReactNode | () => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popover - Popover的title属性如何使用？",
    "md": "参数: title\n说明: 卡片标题\n类型: ReactNode | () => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Popconfirm 有哪些配置？",
    "md": "#### Popconfirm - Popconfirm\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| cancelText | 取消按钮文字 | string | `取消` | - |\n| disabled | 阻止点击 Popconfirm 子元素时弹出确认框 | boolean | false | - |\n| icon | 自定义弹出气泡 Icon 图标 | ReactNode | \\<ExclamationCircle /> | - |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| okText | 确认按钮文字 | string | `确定` | - |\n| okType | 确认按钮类型 | string | `primary` | - |\n| showCancel | 是否显示取消按钮 | boolean | true | 4.18.0 |\n| title | 确认框标题 | ReactNode | () => ReactNode | - | - |\n| description | 确认内容的详细描述 | ReactNode | () => ReactNode | - | 5.1.0 |\n| onCancel | 点击取消的回调 | function(e) | - | - |\n| onConfirm | 点击确认的回调 | function(e) | - | - |\n| onPopupClick | 弹出气泡点击事件 | function(e) | - | 5.5.0 |\n"
  },
  {
    "title": "ant-design 的 Popconfirm - Popconfirm 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| cancelText | 取消按钮文字 | string | `取消` | - |\n| disabled | 阻止点击 Popconfirm 子元素时弹出确认框 | boolean | false | - |\n| icon | 自定义弹出气泡 Icon 图标 | ReactNode | \\<ExclamationCircle /> | - |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| okText | 确认按钮文字 | string | `确定` | - |\n| okType | 确认按钮类型 | string | `primary` | - |\n| showCancel | 是否显示取消按钮 | boolean | true | 4.18.0 |\n| title | 确认框标题 | ReactNode | () => ReactNode | - | - |\n| description | 确认内容的详细描述 | ReactNode | () => ReactNode | - | 5.1.0 |\n| onCancel | 点击取消的回调 | function(e) | - | - |\n| onConfirm | 点击确认的回调 | function(e) | - | - |\n| onPopupClick | 弹出气泡点击事件 | function(e) | - | 5.5.0 |\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的cancelButtonProps属性如何使用？",
    "md": "参数: cancelButtonProps\n说明: cancel 按钮 props\n类型: [ButtonProps](/components/button-cn#api)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的cancelText属性如何使用？",
    "md": "参数: cancelText\n说明: 取消按钮文字\n类型: string\n默认值: `取消`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 阻止点击 Popconfirm 子元素时弹出确认框\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义弹出气泡 Icon 图标\n类型: ReactNode\n默认值: \\<ExclamationCircle />\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的okButtonProps属性如何使用？",
    "md": "参数: okButtonProps\n说明: ok 按钮 props\n类型: [ButtonProps](/components/button-cn#api)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的okText属性如何使用？",
    "md": "参数: okText\n说明: 确认按钮文字\n类型: string\n默认值: `确定`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的okType属性如何使用？",
    "md": "参数: okType\n说明: 确认按钮类型\n类型: string\n默认值: `primary`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的showCancel属性如何使用？",
    "md": "参数: showCancel\n说明: 是否显示取消按钮\n类型: boolean\n默认值: true\n版本: 4.18.0\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的title属性如何使用？",
    "md": "参数: title\n说明: 确认框标题\n类型: ReactNode | () => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的description属性如何使用？",
    "md": "参数: description\n说明: 确认内容的详细描述\n类型: ReactNode | () => ReactNode\n默认值: -\n版本: 5.1.0\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的onCancel属性如何使用？",
    "md": "参数: onCancel\n说明: 点击取消的回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的onConfirm属性如何使用？",
    "md": "参数: onConfirm\n说明: 点击确认的回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Popconfirm - Popconfirm的onPopupClick属性如何使用？",
    "md": "参数: onPopupClick\n说明: 弹出气泡点击事件\n类型: function(e)\n默认值: -\n版本: 5.5.0\n"
  },
  {
    "title": "ant-design 的 Pagination 有哪些配置？",
    "md": "#### Pagination - Pagination\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| current | 当前页数 | number | - | - |\n| defaultCurrent | 默认的当前页数 | number | 1 | - |\n| defaultPageSize | 默认的每页条数 | number | 10 | - |\n| disabled | 禁用分页 | boolean | - | - |\n| hideOnSinglePage | 只有一页时是否隐藏分页器 | boolean | false | - |\n| itemRender | 用于自定义页码的结构，可用于优化 SEO | (page, type: 'page' | 'prev' | 'next', originalElement) => React.ReactNode | - | - |\n| pageSize | 每页条数 | number | - | - |\n| pageSizeOptions | 指定每页可以显示多少条 | string\\[] | number\\[] | \\[`10`, `20`, `50`, `100`] | - |\n| responsive | 当 size 未指定时，根据屏幕宽度自动调整尺寸 | boolean | - | - |\n| showLessItems | 是否显示较少页面内容 | boolean | false | - |\n| showQuickJumper | 是否可以快速跳转至某页 | boolean | { goButton: ReactNode } | false | - |\n| showSizeChanger | 是否展示 `pageSize` 切换器，当 `total` 大于 50 时默认为 true | boolean | - | - |\n| showTitle | 是否显示原生 tooltip 页码提示 | boolean | true | - |\n| showTotal | 用于显示数据总量和当前数据顺序 | function(total, range) | - | - |\n| simple | 当添加该属性时，显示为简单分页 | boolean | - | - |\n| size | 当为 `small` 时，是小尺寸分页 | `default` | `small` | `default` | - |\n| total | 数据总数 | number | 0 | - |\n| onChange | 页码或 `pageSize` 改变的回调，参数是改变后的页码及每页条数 | function(page, pageSize) | - | - |\n| onShowSizeChange | pageSize 变化的回调 | function(current, size) | - | - |\n"
  },
  {
    "title": "ant-design 的 Pagination - Pagination 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| current | 当前页数 | number | - | - |\n| defaultCurrent | 默认的当前页数 | number | 1 | - |\n| defaultPageSize | 默认的每页条数 | number | 10 | - |\n| disabled | 禁用分页 | boolean | - | - |\n| hideOnSinglePage | 只有一页时是否隐藏分页器 | boolean | false | - |\n| itemRender | 用于自定义页码的结构，可用于优化 SEO | (page, type: 'page' | 'prev' | 'next', originalElement) => React.ReactNode | - | - |\n| pageSize | 每页条数 | number | - | - |\n| pageSizeOptions | 指定每页可以显示多少条 | string\\[] | number\\[] | \\[`10`, `20`, `50`, `100`] | - |\n| responsive | 当 size 未指定时，根据屏幕宽度自动调整尺寸 | boolean | - | - |\n| showLessItems | 是否显示较少页面内容 | boolean | false | - |\n| showQuickJumper | 是否可以快速跳转至某页 | boolean | { goButton: ReactNode } | false | - |\n| showSizeChanger | 是否展示 `pageSize` 切换器，当 `total` 大于 50 时默认为 true | boolean | - | - |\n| showTitle | 是否显示原生 tooltip 页码提示 | boolean | true | - |\n| showTotal | 用于显示数据总量和当前数据顺序 | function(total, range) | - | - |\n| simple | 当添加该属性时，显示为简单分页 | boolean | - | - |\n| size | 当为 `small` 时，是小尺寸分页 | `default` | `small` | `default` | - |\n| total | 数据总数 | number | 0 | - |\n| onChange | 页码或 `pageSize` 改变的回调，参数是改变后的页码及每页条数 | function(page, pageSize) | - | - |\n| onShowSizeChange | pageSize 变化的回调 | function(current, size) | - | - |\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的current属性如何使用？",
    "md": "参数: current\n说明: 当前页数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的defaultCurrent属性如何使用？",
    "md": "参数: defaultCurrent\n说明: 默认的当前页数\n类型: number\n默认值: 1\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的defaultPageSize属性如何使用？",
    "md": "参数: defaultPageSize\n说明: 默认的每页条数\n类型: number\n默认值: 10\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用分页\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的hideOnSinglePage属性如何使用？",
    "md": "参数: hideOnSinglePage\n说明: 只有一页时是否隐藏分页器\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的itemRender属性如何使用？",
    "md": "参数: itemRender\n说明: 用于自定义页码的结构，可用于优化 SEO\n类型: (page, type: 'page' | 'prev' | 'next', originalElement) => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的pageSize属性如何使用？",
    "md": "参数: pageSize\n说明: 每页条数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的pageSizeOptions属性如何使用？",
    "md": "参数: pageSizeOptions\n说明: 指定每页可以显示多少条\n类型: string\\[] | number\\[]\n默认值: \\[`10`, `20`, `50`, `100`]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的responsive属性如何使用？",
    "md": "参数: responsive\n说明: 当 size 未指定时，根据屏幕宽度自动调整尺寸\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的showLessItems属性如何使用？",
    "md": "参数: showLessItems\n说明: 是否显示较少页面内容\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的showQuickJumper属性如何使用？",
    "md": "参数: showQuickJumper\n说明: 是否可以快速跳转至某页\n类型: boolean | { goButton: ReactNode }\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的showSizeChanger属性如何使用？",
    "md": "参数: showSizeChanger\n说明: 是否展示 `pageSize` 切换器，当 `total` 大于 50 时默认为 true\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的showTitle属性如何使用？",
    "md": "参数: showTitle\n说明: 是否显示原生 tooltip 页码提示\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的showTotal属性如何使用？",
    "md": "参数: showTotal\n说明: 用于显示数据总量和当前数据顺序\n类型: function(total, range)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的simple属性如何使用？",
    "md": "参数: simple\n说明: 当添加该属性时，显示为简单分页\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的size属性如何使用？",
    "md": "参数: size\n说明: 当为 `small` 时，是小尺寸分页\n类型: `default` | `small`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的total属性如何使用？",
    "md": "参数: total\n说明: 数据总数\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 页码或 `pageSize` 改变的回调，参数是改变后的页码及每页条数\n类型: function(page, pageSize)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Pagination - Pagination的onShowSizeChange属性如何使用？",
    "md": "参数: onShowSizeChange\n说明: pageSize 变化的回调\n类型: function(current, size)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Notification 有哪些配置？",
    "md": "#### Notification - Notification\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| btn | 自定义关闭按钮 | ReactNode | - | - |\n| className | 自定义 CSS class | string | - | - |\n| closeIcon | 自定义关闭图标 | ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| description | 通知提醒内容，必选 | ReactNode | - | - |\n| duration | 默认 4.5 秒后自动关闭，配置为 null 则不自动关闭 | number | 4.5 | - |\n| icon | 自定义图标 | ReactNode | - | - |\n| key | 当前通知唯一标志 | string | - | - |\n| message | 通知提醒标题，必选 | ReactNode | - | - |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| style | 自定义内联样式 | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - | - |\n| role | 供屏幕阅读器识别的通知内容语义，默认为 `alert`。此情况下屏幕阅读器会立即打断当前正在阅读的其他内容，转而阅读通知内容 | `alert \\| status` | `alert` | 5.6.0 |\n| onClick | 点击通知时触发的回调函数 | function | - | - |\n| onClose | 当通知关闭时触发 | function | - | - |\n| props | 透传至通知 `div` 上的 props 对象，支持传入 `data-*` `aria-*` 或 `role` 作为对象的属性。需要注意的是，虽然在 TypeScript 类型中声明的类型支持传入 `data-*` 作为对象的属性，但目前只允许传入 `data-testid` 作为对象的属性。 详见 <https://github.com/microsoft/TypeScript/issues/28960> | Object | - | - |\n#### Notification - Notification\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bottom | 消息从底部弹出时，距离底部的位置，单位像素 | number | 24 | - |\n| closeIcon | 自定义关闭图标 | ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| getContainer | 配置渲染节点的输出位置 | () => HTMLNode | () => document.body | - |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| rtl | 是否开启 RTL 模式 | boolean | false | - |\n| stack | 堆叠模式，超过阈值时会将所有消息收起 | boolean | `{ threshold: number }` | `{ threshold: 3 }` | 5.10.0 |\n| top | 消息从顶部弹出时，距离顶部的位置，单位像素 | number | 24 | - |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | 4.17.0 |\n#### Notification - notification.config\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bottom | 消息从底部弹出时，距离底部的位置，单位像素 | number | 24 | - |\n| closeIcon | 自定义关闭图标 | ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| duration | 默认自动关闭延时，单位秒 | number | 4.5 | - |\n| getContainer | 配置渲染节点的输出位置，但依旧为全屏展示 | () => HTMLNode | () => document.body | - |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| rtl | 是否开启 RTL 模式 | boolean | false | - |\n| top | 消息从顶部弹出时，距离顶部的位置，单位像素 | number | 24 | - |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | 4.17.0 |\n"
  },
  {
    "title": "ant-design 的 Notification - Notification 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| btn | 自定义关闭按钮 | ReactNode | - | - |\n| className | 自定义 CSS class | string | - | - |\n| closeIcon | 自定义关闭图标 | ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| description | 通知提醒内容，必选 | ReactNode | - | - |\n| duration | 默认 4.5 秒后自动关闭，配置为 null 则不自动关闭 | number | 4.5 | - |\n| icon | 自定义图标 | ReactNode | - | - |\n| key | 当前通知唯一标志 | string | - | - |\n| message | 通知提醒标题，必选 | ReactNode | - | - |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| style | 自定义内联样式 | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - | - |\n| role | 供屏幕阅读器识别的通知内容语义，默认为 `alert`。此情况下屏幕阅读器会立即打断当前正在阅读的其他内容，转而阅读通知内容 | `alert \\| status` | `alert` | 5.6.0 |\n| onClick | 点击通知时触发的回调函数 | function | - | - |\n| onClose | 当通知关闭时触发 | function | - | - |\n| props | 透传至通知 `div` 上的 props 对象，支持传入 `data-*` `aria-*` 或 `role` 作为对象的属性。需要注意的是，虽然在 TypeScript 类型中声明的类型支持传入 `data-*` 作为对象的属性，但目前只允许传入 `data-testid` 作为对象的属性。 详见 <https://github.com/microsoft/TypeScript/issues/28960> | Object | - | - |\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的btn属性如何使用？",
    "md": "参数: btn\n说明: 自定义关闭按钮\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的className属性如何使用？",
    "md": "参数: className\n说明: 自定义 CSS class\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭图标\n类型: ReactNode\n默认值: true\n版本: 5.7.0：设置为 null 或 false 时隐藏关闭按钮\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的description属性如何使用？",
    "md": "参数: description\n说明: 通知提醒内容，必选\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的duration属性如何使用？",
    "md": "参数: duration\n说明: 默认 4.5 秒后自动关闭，配置为 null 则不自动关闭\n类型: number\n默认值: 4.5\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的key属性如何使用？",
    "md": "参数: key\n说明: 当前通知唯一标志\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的message属性如何使用？",
    "md": "参数: message\n说明: 通知提醒标题，必选\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的placement属性如何使用？",
    "md": "参数: placement\n说明: 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`\n类型: string\n默认值: `topRight`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的style属性如何使用？",
    "md": "参数: style\n说明: 自定义内联样式\n类型: [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的role属性如何使用？",
    "md": "参数: role\n说明: 供屏幕阅读器识别的通知内容语义，默认为 `alert`。此情况下屏幕阅读器会立即打断当前正在阅读的其他内容，转而阅读通知内容\n类型: `alert \\| status`\n默认值: `alert`\n版本: 5.6.0\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击通知时触发的回调函数\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的onClose属性如何使用？",
    "md": "参数: onClose\n说明: 当通知关闭时触发\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的props属性如何使用？",
    "md": "参数: props\n说明: 透传至通知 `div` 上的 props 对象，支持传入 `data-*` `aria-*` 或 `role` 作为对象的属性。需要注意的是，虽然在 TypeScript 类型中声明的类型支持传入 `data-*` 作为对象的属性，但目前只允许传入 `data-testid` 作为对象的属性。 详见 <https://github.com/microsoft/TypeScript/issues/28960>\n类型: Object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Notification - Notification 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bottom | 消息从底部弹出时，距离底部的位置，单位像素 | number | 24 | - |\n| closeIcon | 自定义关闭图标 | ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| getContainer | 配置渲染节点的输出位置 | () => HTMLNode | () => document.body | - |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| rtl | 是否开启 RTL 模式 | boolean | false | - |\n| stack | 堆叠模式，超过阈值时会将所有消息收起 | boolean | `{ threshold: number }` | `{ threshold: 3 }` | 5.10.0 |\n| top | 消息从顶部弹出时，距离顶部的位置，单位像素 | number | 24 | - |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | 4.17.0 |\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的bottom属性如何使用？",
    "md": "参数: bottom\n说明: 消息从底部弹出时，距离底部的位置，单位像素\n类型: number\n默认值: 24\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭图标\n类型: ReactNode\n默认值: true\n版本: 5.7.0：设置为 null 或 false 时隐藏关闭按钮\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 配置渲染节点的输出位置\n类型: () => HTMLNode\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的placement属性如何使用？",
    "md": "参数: placement\n说明: 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`\n类型: string\n默认值: `topRight`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的rtl属性如何使用？",
    "md": "参数: rtl\n说明: 是否开启 RTL 模式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的stack属性如何使用？",
    "md": "参数: stack\n说明: 堆叠模式，超过阈值时会将所有消息收起\n类型: boolean | `{ threshold: number }`\n默认值: `{ threshold: 3 }`\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的top属性如何使用？",
    "md": "参数: top\n说明: 消息从顶部弹出时，距离顶部的位置，单位像素\n类型: number\n默认值: 24\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - Notification的maxCount属性如何使用？",
    "md": "参数: maxCount\n说明: 最大显示数，超过限制时，最早的消息会被自动关闭\n类型: number\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 的 Notification - notification.config 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bottom | 消息从底部弹出时，距离底部的位置，单位像素 | number | 24 | - |\n| closeIcon | 自定义关闭图标 | ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| duration | 默认自动关闭延时，单位秒 | number | 4.5 | - |\n| getContainer | 配置渲染节点的输出位置，但依旧为全屏展示 | () => HTMLNode | () => document.body | - |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| rtl | 是否开启 RTL 模式 | boolean | false | - |\n| top | 消息从顶部弹出时，距离顶部的位置，单位像素 | number | 24 | - |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | 4.17.0 |\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的bottom属性如何使用？",
    "md": "参数: bottom\n说明: 消息从底部弹出时，距离底部的位置，单位像素\n类型: number\n默认值: 24\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭图标\n类型: ReactNode\n默认值: true\n版本: 5.7.0：设置为 null 或 false 时隐藏关闭按钮\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的duration属性如何使用？",
    "md": "参数: duration\n说明: 默认自动关闭延时，单位秒\n类型: number\n默认值: 4.5\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 配置渲染节点的输出位置，但依旧为全屏展示\n类型: () => HTMLNode\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的placement属性如何使用？",
    "md": "参数: placement\n说明: 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`\n类型: string\n默认值: `topRight`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的rtl属性如何使用？",
    "md": "参数: rtl\n说明: 是否开启 RTL 模式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的top属性如何使用？",
    "md": "参数: top\n说明: 消息从顶部弹出时，距离顶部的位置，单位像素\n类型: number\n默认值: 24\n版本: -\n"
  },
  {
    "title": "ant-design 中 Notification - notification.config的maxCount属性如何使用？",
    "md": "参数: maxCount\n说明: 最大显示数，超过限制时，最早的消息会被自动关闭\n类型: number\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 的 Modal 有哪些配置？",
    "md": "#### Modal - Modal\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| afterClose | Modal 完全关闭后的回调 | function | - | - |\n| classNames | 配置弹窗内置模块的 className | `header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;` | - | - |\n| styles | 配置弹窗内置模块的 style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties;` | - | 5.10.0 |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| cancelText | 取消按钮文字 | ReactNode | `取消` | - |\n| centered | 垂直居中展示 Modal | boolean | false | - |\n| closeIcon | 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | \\<CloseOutlined /> | - |\n| confirmLoading | 确定按钮 loading | boolean | false | - |\n| destroyOnClose | 关闭时销毁 Modal 里的子元素 | boolean | false | - |\n| focusTriggerAfterClose | 对话框关闭后是否需要聚焦触发元素 | boolean | true | 4.9.0 |\n| footer | 底部内容，当不需要默认底部按钮时，可以设为 `footer={null}` | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode | (确定取消按钮) | 5.9.0 |\n| forceRender | 强制渲染 Modal | boolean | false | - |\n| getContainer | 指定 Modal 挂载的节点，但依旧为全屏展示，`false` 为挂载在当前位置 | HTMLElement | () => HTMLElement | Selectors | false | document.body | - |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true | - |\n| mask | 是否展示遮罩 | boolean | true | - |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | true | - |\n| modalRender | 自定义渲染对话框 | (node: ReactNode) => ReactNode | - | 4.7.0 |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| okText | 确认按钮文字 | ReactNode | `确定` | - |\n| okType | 确认按钮类型 | string | `primary` | - |\n| style | 可用于设置浮层的样式，调整浮层位置等 | CSSProperties | - | - |\n| title | 标题 | ReactNode | - | - |\n| open | 对话框是否可见 | boolean | - | - |\n| width | 宽度 | string | number | 520 | - |\n| wrapClassName | 对话框外层容器的类名 | string | - | - |\n| zIndex | 设置 Modal 的 `z-index` | number | 1000 | - |\n| onCancel | 点击遮罩层或右上角叉或取消按钮的回调 | function(e) | - | - |\n| onOk | 点击确定回调 | function(e) | - | - |\n| afterOpenChange | 打开和关闭 Modal 时动画结束后的回调 | (open: boolean) => void | - | 5.4.0 |\n#### Modal - Modal.method()\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| afterClose | Modal 完全关闭后的回调 | function | - | 4.9.0 |\n| autoFocusButton | 指定自动获得焦点的按钮 | null | `ok` | `cancel` | `ok` | - |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| cancelText | 设置 Modal.confirm 取消按钮文字 | string | `取消` | - |\n| centered | 垂直居中展示 Modal | boolean | false | - |\n| className | 容器类名 | string | - | - |\n| closable | 是否显示右上角的关闭按钮 | boolean | false | 4.9.0 |\n| closeIcon | 自定义关闭图标 | ReactNode | undefined | 4.9.0 |\n| content | 内容 | ReactNode | - | - |\n| footer | 底部内容，当不需要默认底部按钮时，可以设为 `footer: null` | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode | - | 5.9.0 |\n| getContainer | 指定 Modal 挂载的 HTML 节点，false 为挂载在当前 dom | HTMLElement | () => HTMLElement | Selectors | false | document.body | - |\n| icon | 自定义图标 | ReactNode | \\<ExclamationCircleFilled /> | - |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true | - |\n| mask | 是否展示遮罩 | boolean | true | - |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | false | - |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| okText | 确认按钮文字 | string | `确定` | - |\n| okType | 确认按钮类型 | string | `primary` | - |\n| style | 可用于设置浮层的样式，调整浮层位置等 | CSSProperties | - | - |\n| title | 标题 | ReactNode | - | - |\n| width | 宽度 | string | number | 416 | - |\n| wrapClassName | 对话框外层容器的类名 | string | - | 4.18.0 |\n| zIndex | 设置 Modal 的 `z-index` | number | 1000 | - |\n| onCancel | 取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭 | function(close) | - | - |\n| onOk | 点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭 | function(close) | - | - |\n#### Modal - footerRenderParams\n| 参数       | 说明     | 类型                         | 默认值 |\n| ---------- | -------- | ---------------------------- | ------ |\n| originNode | 默认节点 | React.ReactNode              | -      |\n| extra      | 扩展选项 | { OkBtn: FC; CancelBtn: FC } | -      |\n"
  },
  {
    "title": "ant-design 的 Modal - Modal 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| afterClose | Modal 完全关闭后的回调 | function | - | - |\n| classNames | 配置弹窗内置模块的 className | `header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;` | - | - |\n| styles | 配置弹窗内置模块的 style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties;` | - | 5.10.0 |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| cancelText | 取消按钮文字 | ReactNode | `取消` | - |\n| centered | 垂直居中展示 Modal | boolean | false | - |\n| closeIcon | 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | \\<CloseOutlined /> | - |\n| confirmLoading | 确定按钮 loading | boolean | false | - |\n| destroyOnClose | 关闭时销毁 Modal 里的子元素 | boolean | false | - |\n| focusTriggerAfterClose | 对话框关闭后是否需要聚焦触发元素 | boolean | true | 4.9.0 |\n| footer | 底部内容，当不需要默认底部按钮时，可以设为 `footer={null}` | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode | (确定取消按钮) | 5.9.0 |\n| forceRender | 强制渲染 Modal | boolean | false | - |\n| getContainer | 指定 Modal 挂载的节点，但依旧为全屏展示，`false` 为挂载在当前位置 | HTMLElement | () => HTMLElement | Selectors | false | document.body | - |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true | - |\n| mask | 是否展示遮罩 | boolean | true | - |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | true | - |\n| modalRender | 自定义渲染对话框 | (node: ReactNode) => ReactNode | - | 4.7.0 |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| okText | 确认按钮文字 | ReactNode | `确定` | - |\n| okType | 确认按钮类型 | string | `primary` | - |\n| style | 可用于设置浮层的样式，调整浮层位置等 | CSSProperties | - | - |\n| title | 标题 | ReactNode | - | - |\n| open | 对话框是否可见 | boolean | - | - |\n| width | 宽度 | string | number | 520 | - |\n| wrapClassName | 对话框外层容器的类名 | string | - | - |\n| zIndex | 设置 Modal 的 `z-index` | number | 1000 | - |\n| onCancel | 点击遮罩层或右上角叉或取消按钮的回调 | function(e) | - | - |\n| onOk | 点击确定回调 | function(e) | - | - |\n| afterOpenChange | 打开和关闭 Modal 时动画结束后的回调 | (open: boolean) => void | - | 5.4.0 |\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的afterClose属性如何使用？",
    "md": "参数: afterClose\n说明: Modal 完全关闭后的回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 配置弹窗内置模块的 className\n类型: `header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的styles属性如何使用？",
    "md": "参数: styles\n说明: 配置弹窗内置模块的 style\n类型: `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties;`\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的cancelButtonProps属性如何使用？",
    "md": "参数: cancelButtonProps\n说明: cancel 按钮 props\n类型: [ButtonProps](/components/button-cn#api)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的cancelText属性如何使用？",
    "md": "参数: cancelText\n说明: 取消按钮文字\n类型: ReactNode\n默认值: `取消`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的centered属性如何使用？",
    "md": "参数: centered\n说明: 垂直居中展示 Modal\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮\n类型: ReactNode\n默认值: \\<CloseOutlined />\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的confirmLoading属性如何使用？",
    "md": "参数: confirmLoading\n说明: 确定按钮 loading\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的destroyOnClose属性如何使用？",
    "md": "参数: destroyOnClose\n说明: 关闭时销毁 Modal 里的子元素\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的focusTriggerAfterClose属性如何使用？",
    "md": "参数: focusTriggerAfterClose\n说明: 对话框关闭后是否需要聚焦触发元素\n类型: boolean\n默认值: true\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的footer属性如何使用？",
    "md": "参数: footer\n说明: 底部内容，当不需要默认底部按钮时，可以设为 `footer={null}`\n类型: (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode\n默认值: (确定取消按钮)\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的forceRender属性如何使用？",
    "md": "参数: forceRender\n说明: 强制渲染 Modal\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 指定 Modal 挂载的节点，但依旧为全屏展示，`false` 为挂载在当前位置\n类型: HTMLElement | () => HTMLElement | Selectors | false\n默认值: document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的keyboard属性如何使用？",
    "md": "参数: keyboard\n说明: 是否支持键盘 esc 关闭\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的mask属性如何使用？",
    "md": "参数: mask\n说明: 是否展示遮罩\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的maskClosable属性如何使用？",
    "md": "参数: maskClosable\n说明: 点击蒙层是否允许关闭\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的modalRender属性如何使用？",
    "md": "参数: modalRender\n说明: 自定义渲染对话框\n类型: (node: ReactNode) => ReactNode\n默认值: -\n版本: 4.7.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的okButtonProps属性如何使用？",
    "md": "参数: okButtonProps\n说明: ok 按钮 props\n类型: [ButtonProps](/components/button-cn#api)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的okText属性如何使用？",
    "md": "参数: okText\n说明: 确认按钮文字\n类型: ReactNode\n默认值: `确定`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的okType属性如何使用？",
    "md": "参数: okType\n说明: 确认按钮类型\n类型: string\n默认值: `primary`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的style属性如何使用？",
    "md": "参数: style\n说明: 可用于设置浮层的样式，调整浮层位置等\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的open属性如何使用？",
    "md": "参数: open\n说明: 对话框是否可见\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的width属性如何使用？",
    "md": "参数: width\n说明: 宽度\n类型: string | number\n默认值: 520\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的wrapClassName属性如何使用？",
    "md": "参数: wrapClassName\n说明: 对话框外层容器的类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的zIndex属性如何使用？",
    "md": "参数: zIndex\n说明: 设置 Modal 的 `z-index`\n类型: number\n默认值: 1000\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的onCancel属性如何使用？",
    "md": "参数: onCancel\n说明: 点击遮罩层或右上角叉或取消按钮的回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的onOk属性如何使用？",
    "md": "参数: onOk\n说明: 点击确定回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal的afterOpenChange属性如何使用？",
    "md": "参数: afterOpenChange\n说明: 打开和关闭 Modal 时动画结束后的回调\n类型: (open: boolean) => void\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 的 Modal - Modal.method() 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| afterClose | Modal 完全关闭后的回调 | function | - | 4.9.0 |\n| autoFocusButton | 指定自动获得焦点的按钮 | null | `ok` | `cancel` | `ok` | - |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| cancelText | 设置 Modal.confirm 取消按钮文字 | string | `取消` | - |\n| centered | 垂直居中展示 Modal | boolean | false | - |\n| className | 容器类名 | string | - | - |\n| closable | 是否显示右上角的关闭按钮 | boolean | false | 4.9.0 |\n| closeIcon | 自定义关闭图标 | ReactNode | undefined | 4.9.0 |\n| content | 内容 | ReactNode | - | - |\n| footer | 底部内容，当不需要默认底部按钮时，可以设为 `footer: null` | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode | - | 5.9.0 |\n| getContainer | 指定 Modal 挂载的 HTML 节点，false 为挂载在当前 dom | HTMLElement | () => HTMLElement | Selectors | false | document.body | - |\n| icon | 自定义图标 | ReactNode | \\<ExclamationCircleFilled /> | - |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true | - |\n| mask | 是否展示遮罩 | boolean | true | - |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | false | - |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - | - |\n| okText | 确认按钮文字 | string | `确定` | - |\n| okType | 确认按钮类型 | string | `primary` | - |\n| style | 可用于设置浮层的样式，调整浮层位置等 | CSSProperties | - | - |\n| title | 标题 | ReactNode | - | - |\n| width | 宽度 | string | number | 416 | - |\n| wrapClassName | 对话框外层容器的类名 | string | - | 4.18.0 |\n| zIndex | 设置 Modal 的 `z-index` | number | 1000 | - |\n| onCancel | 取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭 | function(close) | - | - |\n| onOk | 点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭 | function(close) | - | - |\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的afterClose属性如何使用？",
    "md": "参数: afterClose\n说明: Modal 完全关闭后的回调\n类型: function\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的autoFocusButton属性如何使用？",
    "md": "参数: autoFocusButton\n说明: 指定自动获得焦点的按钮\n类型: null | `ok` | `cancel`\n默认值: `ok`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的cancelButtonProps属性如何使用？",
    "md": "参数: cancelButtonProps\n说明: cancel 按钮 props\n类型: [ButtonProps](/components/button-cn#api)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的cancelText属性如何使用？",
    "md": "参数: cancelText\n说明: 设置 Modal.confirm 取消按钮文字\n类型: string\n默认值: `取消`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的centered属性如何使用？",
    "md": "参数: centered\n说明: 垂直居中展示 Modal\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的className属性如何使用？",
    "md": "参数: className\n说明: 容器类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的closable属性如何使用？",
    "md": "参数: closable\n说明: 是否显示右上角的关闭按钮\n类型: boolean\n默认值: false\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭图标\n类型: ReactNode\n默认值: undefined\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的content属性如何使用？",
    "md": "参数: content\n说明: 内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的footer属性如何使用？",
    "md": "参数: footer\n说明: 底部内容，当不需要默认底部按钮时，可以设为 `footer: null`\n类型: (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode | React.ReactNode\n默认值: -\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 指定 Modal 挂载的 HTML 节点，false 为挂载在当前 dom\n类型: HTMLElement | () => HTMLElement | Selectors | false\n默认值: document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义图标\n类型: ReactNode\n默认值: \\<ExclamationCircleFilled />\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的keyboard属性如何使用？",
    "md": "参数: keyboard\n说明: 是否支持键盘 esc 关闭\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的mask属性如何使用？",
    "md": "参数: mask\n说明: 是否展示遮罩\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的maskClosable属性如何使用？",
    "md": "参数: maskClosable\n说明: 点击蒙层是否允许关闭\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的okButtonProps属性如何使用？",
    "md": "参数: okButtonProps\n说明: ok 按钮 props\n类型: [ButtonProps](/components/button-cn#api)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的okText属性如何使用？",
    "md": "参数: okText\n说明: 确认按钮文字\n类型: string\n默认值: `确定`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的okType属性如何使用？",
    "md": "参数: okType\n说明: 确认按钮类型\n类型: string\n默认值: `primary`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的style属性如何使用？",
    "md": "参数: style\n说明: 可用于设置浮层的样式，调整浮层位置等\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的width属性如何使用？",
    "md": "参数: width\n说明: 宽度\n类型: string | number\n默认值: 416\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的wrapClassName属性如何使用？",
    "md": "参数: wrapClassName\n说明: 对话框外层容器的类名\n类型: string\n默认值: -\n版本: 4.18.0\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的zIndex属性如何使用？",
    "md": "参数: zIndex\n说明: 设置 Modal 的 `z-index`\n类型: number\n默认值: 1000\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的onCancel属性如何使用？",
    "md": "参数: onCancel\n说明: 取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭\n类型: function(close)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Modal - Modal.method()的onOk属性如何使用？",
    "md": "参数: onOk\n说明: 点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭\n类型: function(close)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Modal - footerRenderParams 有哪些配置？",
    "md": "| 参数       | 说明     | 类型                         | 默认值 |\n| ---------- | -------- | ---------------------------- | ------ |\n| originNode | 默认节点 | React.ReactNode              | -      |\n| extra      | 扩展选项 | { OkBtn: FC; CancelBtn: FC } | -      |\n"
  },
  {
    "title": "ant-design 中 Modal - footerRenderParams的originNode属性如何使用？",
    "md": "参数: originNode\n说明: 默认节点\n类型: React.ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Modal - footerRenderParams的extra属性如何使用？",
    "md": "参数: extra\n说明: 扩展选项\n类型: { OkBtn: FC; CancelBtn: FC }\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Message 有哪些配置？",
    "md": "#### Message - Message\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| content | 提示内容 | ReactNode | config | - |\n| duration | 自动关闭的延时，单位秒。设为 0 时不自动关闭 | number | 3 |\n| onClose | 关闭时触发的回调函数 | function | - |\n#### Message - Message\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| className | 自定义 CSS class | string | - |\n| content | 提示内容 | ReactNode | - |\n| duration | 自动关闭的延时，单位秒。设为 0 时不自动关闭 | number | 3 |\n| icon | 自定义图标 | ReactNode | - |\n| key | 当前提示的唯一标志 | string | number | - |\n| style | 自定义内联样式 | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - |\n| onClick | 点击 message 时触发的回调函数 | function | - |\n| onClose | 关闭时触发的回调函数 | function | - |\n#### Message - message.config\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| duration | 默认自动关闭延时，单位秒 | number | 3 | - |\n| getContainer | 配置渲染节点的输出位置，但依旧为全屏展示 | () => HTMLElement | () => document.body | - |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | - |\n| prefixCls | 消息节点的 className 前缀 | string | `ant-message` | 4.5.0 |\n| rtl | 是否开启 RTL 模式 | boolean | false | - |\n| top | 消息距离顶部的位置 | number | 8 | - |\n"
  },
  {
    "title": "ant-design 的 Message - Message 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| content | 提示内容 | ReactNode | config | - |\n| duration | 自动关闭的延时，单位秒。设为 0 时不自动关闭 | number | 3 |\n| onClose | 关闭时触发的回调函数 | function | - |\n"
  },
  {
    "title": "ant-design 中 Message - Message的content属性如何使用？",
    "md": "参数: content\n说明: 提示内容\n类型: ReactNode | config\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Message - Message的duration属性如何使用？",
    "md": "参数: duration\n说明: 自动关闭的延时，单位秒。设为 0 时不自动关闭\n类型: number\n默认值: 3\n"
  },
  {
    "title": "ant-design 中 Message - Message的onClose属性如何使用？",
    "md": "参数: onClose\n说明: 关闭时触发的回调函数\n类型: function\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Message - Message 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| className | 自定义 CSS class | string | - |\n| content | 提示内容 | ReactNode | - |\n| duration | 自动关闭的延时，单位秒。设为 0 时不自动关闭 | number | 3 |\n| icon | 自定义图标 | ReactNode | - |\n| key | 当前提示的唯一标志 | string | number | - |\n| style | 自定义内联样式 | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - |\n| onClick | 点击 message 时触发的回调函数 | function | - |\n| onClose | 关闭时触发的回调函数 | function | - |\n"
  },
  {
    "title": "ant-design 中 Message - Message的className属性如何使用？",
    "md": "参数: className\n说明: 自定义 CSS class\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Message - Message的content属性如何使用？",
    "md": "参数: content\n说明: 提示内容\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Message - Message的duration属性如何使用？",
    "md": "参数: duration\n说明: 自动关闭的延时，单位秒。设为 0 时不自动关闭\n类型: number\n默认值: 3\n"
  },
  {
    "title": "ant-design 中 Message - Message的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义图标\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Message - Message的key属性如何使用？",
    "md": "参数: key\n说明: 当前提示的唯一标志\n类型: string | number\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Message - Message的style属性如何使用？",
    "md": "参数: style\n说明: 自定义内联样式\n类型: [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794)\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Message - Message的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击 message 时触发的回调函数\n类型: function\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Message - Message的onClose属性如何使用？",
    "md": "参数: onClose\n说明: 关闭时触发的回调函数\n类型: function\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Message - message.config 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| duration | 默认自动关闭延时，单位秒 | number | 3 | - |\n| getContainer | 配置渲染节点的输出位置，但依旧为全屏展示 | () => HTMLElement | () => document.body | - |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | - |\n| prefixCls | 消息节点的 className 前缀 | string | `ant-message` | 4.5.0 |\n| rtl | 是否开启 RTL 模式 | boolean | false | - |\n| top | 消息距离顶部的位置 | number | 8 | - |\n"
  },
  {
    "title": "ant-design 中 Message - message.config的duration属性如何使用？",
    "md": "参数: duration\n说明: 默认自动关闭延时，单位秒\n类型: number\n默认值: 3\n版本: -\n"
  },
  {
    "title": "ant-design 中 Message - message.config的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 配置渲染节点的输出位置，但依旧为全屏展示\n类型: () => HTMLElement\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Message - message.config的maxCount属性如何使用？",
    "md": "参数: maxCount\n说明: 最大显示数，超过限制时，最早的消息会被自动关闭\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Message - message.config的prefixCls属性如何使用？",
    "md": "参数: prefixCls\n说明: 消息节点的 className 前缀\n类型: string\n默认值: `ant-message`\n版本: 4.5.0\n"
  },
  {
    "title": "ant-design 中 Message - message.config的rtl属性如何使用？",
    "md": "参数: rtl\n说明: 是否开启 RTL 模式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Message - message.config的top属性如何使用？",
    "md": "参数: top\n说明: 消息距离顶部的位置\n类型: number\n默认值: 8\n版本: -\n"
  },
  {
    "title": "ant-design 的 Menu 有哪些配置？",
    "md": "#### Menu - Menu\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultOpenKeys | 初始展开的 SubMenu 菜单项 key 数组 | string\\[] | - | - |\n| defaultSelectedKeys | 初始选中的菜单项 key 数组 | string\\[] | - | - |\n| expandIcon | 自定义展开图标 | ReactNode | `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode` | - | 4.9.0 |\n| forceSubMenuRender | 在子菜单展示之前就渲染进 DOM | boolean | false | - |\n| inlineCollapsed | inline 时菜单是否收起状态 | boolean | - | - |\n| inlineIndent | inline 模式的菜单缩进宽度 | number | 24 | - |\n| items | 菜单内容 | [ItemType\\[\\]](#itemtype) | - | 4.20.0 |\n| mode | 菜单类型，现在支持垂直、水平、和内嵌模式三种 | `vertical` | `horizontal` | `inline` | `vertical` | - |\n| multiple | 是否允许多选 | boolean | false | - |\n| openKeys | 当前展开的 SubMenu 菜单项 key 数组 | string\\[] | - | - |\n| overflowedIndicator | 用于自定义 Menu 水平空间不足时的省略收缩的图标 | ReactNode | `<EllipsisOutlined />` | - |\n| selectable | 是否允许选中 | boolean | true | - |\n| selectedKeys | 当前选中的菜单项 key 数组 | string\\[] | - | - |\n| style | 根节点样式 | CSSProperties | - | - |\n| subMenuCloseDelay | 用户鼠标离开子菜单后关闭延时，单位：秒 | number | 0.1 | - |\n| subMenuOpenDelay | 用户鼠标进入子菜单后开启延时，单位：秒 | number | 0 | - |\n| theme | 主题颜色 | `light` | `dark` | `light` | - |\n| triggerSubMenuAction | SubMenu 展开/关闭的触发行为 | `hover` | `click` | `hover` | - |\n| onClick | 点击 MenuItem 调用此函数 | function({ item, key, keyPath, domEvent }) | - | - |\n| onDeselect | 取消选中时调用，仅在 multiple 生效 | function({ item, key, keyPath, selectedKeys, domEvent }) | - | - |\n| onOpenChange | SubMenu 展开/关闭的回调 | function(openKeys: string\\[]) | - | - |\n| onSelect | 被选中时调用 | function({ item, key, keyPath, selectedKeys, domEvent }) | - | - |\n#### Menu - MenuItemType\n| 参数     | 说明                     | 类型      | 默认值 | 版本 |\n| -------- | ------------------------ | --------- | ------ | ---- |\n| danger   | 展示错误状态样式         | boolean   | false  | -    |\n| disabled | 是否禁用                 | boolean   | false  | -    |\n| icon     | 菜单图标                 | ReactNode | -      | -    |\n| key      | item 的唯一标志          | string    | -      | -    |\n| label    | 菜单项标题               | ReactNode | -      | -    |\n| title    | 设置收缩时展示的悬浮标题 | string    | -      | -    |\n#### Menu - SubMenuType\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 子菜单的菜单项 | [ItemType\\[\\]](#itemtype) | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| icon | 菜单图标 | ReactNode | - | - |\n| key | 唯一标志 | string | - | - |\n| label | 菜单项标题 | ReactNode | - | - |\n| popupClassName | 子菜单样式，`mode=\"inline\"` 时无效 | string | - | - |\n| popupOffset | 子菜单偏移量，`mode=\"inline\"` 时无效 | \\[number, number] | - | - |\n| onTitleClick | 点击子菜单标题 | function({ key, domEvent }) | - | - |\n| theme | 设置子菜单的主题，默认从 Menu 上继承 | `light` | `dark` | - | - |\n#### Menu - MenuItemGroupType\n| 参数     | 说明         | 类型                              | 默认值 | 版本 |\n| -------- | ------------ | --------------------------------- | ------ | ---- |\n| children | 分组的菜单项 | [MenuItemType\\[\\]](#menuitemtype) | -      | -    |\n| label    | 分组标题     | ReactNode                         | -      | -    |\n#### Menu - MenuDividerType\n| 参数   | 说明     | 类型    | 默认值 | 版本 |\n| ------ | -------- | ------- | ------ | ---- |\n| dashed | 是否虚线 | boolean | false  | -    |\n"
  },
  {
    "title": "ant-design 的 Menu - Menu 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultOpenKeys | 初始展开的 SubMenu 菜单项 key 数组 | string\\[] | - | - |\n| defaultSelectedKeys | 初始选中的菜单项 key 数组 | string\\[] | - | - |\n| expandIcon | 自定义展开图标 | ReactNode | `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode` | - | 4.9.0 |\n| forceSubMenuRender | 在子菜单展示之前就渲染进 DOM | boolean | false | - |\n| inlineCollapsed | inline 时菜单是否收起状态 | boolean | - | - |\n| inlineIndent | inline 模式的菜单缩进宽度 | number | 24 | - |\n| items | 菜单内容 | [ItemType\\[\\]](#itemtype) | - | 4.20.0 |\n| mode | 菜单类型，现在支持垂直、水平、和内嵌模式三种 | `vertical` | `horizontal` | `inline` | `vertical` | - |\n| multiple | 是否允许多选 | boolean | false | - |\n| openKeys | 当前展开的 SubMenu 菜单项 key 数组 | string\\[] | - | - |\n| overflowedIndicator | 用于自定义 Menu 水平空间不足时的省略收缩的图标 | ReactNode | `<EllipsisOutlined />` | - |\n| selectable | 是否允许选中 | boolean | true | - |\n| selectedKeys | 当前选中的菜单项 key 数组 | string\\[] | - | - |\n| style | 根节点样式 | CSSProperties | - | - |\n| subMenuCloseDelay | 用户鼠标离开子菜单后关闭延时，单位：秒 | number | 0.1 | - |\n| subMenuOpenDelay | 用户鼠标进入子菜单后开启延时，单位：秒 | number | 0 | - |\n| theme | 主题颜色 | `light` | `dark` | `light` | - |\n| triggerSubMenuAction | SubMenu 展开/关闭的触发行为 | `hover` | `click` | `hover` | - |\n| onClick | 点击 MenuItem 调用此函数 | function({ item, key, keyPath, domEvent }) | - | - |\n| onDeselect | 取消选中时调用，仅在 multiple 生效 | function({ item, key, keyPath, selectedKeys, domEvent }) | - | - |\n| onOpenChange | SubMenu 展开/关闭的回调 | function(openKeys: string\\[]) | - | - |\n| onSelect | 被选中时调用 | function({ item, key, keyPath, selectedKeys, domEvent }) | - | - |\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的defaultOpenKeys属性如何使用？",
    "md": "参数: defaultOpenKeys\n说明: 初始展开的 SubMenu 菜单项 key 数组\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的defaultSelectedKeys属性如何使用？",
    "md": "参数: defaultSelectedKeys\n说明: 初始选中的菜单项 key 数组\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的expandIcon属性如何使用？",
    "md": "参数: expandIcon\n说明: 自定义展开图标\n类型: ReactNode | `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode`\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的forceSubMenuRender属性如何使用？",
    "md": "参数: forceSubMenuRender\n说明: 在子菜单展示之前就渲染进 DOM\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的inlineCollapsed属性如何使用？",
    "md": "参数: inlineCollapsed\n说明: inline 时菜单是否收起状态\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的inlineIndent属性如何使用？",
    "md": "参数: inlineIndent\n说明: inline 模式的菜单缩进宽度\n类型: number\n默认值: 24\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的items属性如何使用？",
    "md": "参数: items\n说明: 菜单内容\n类型: [ItemType\\[\\]](#itemtype)\n默认值: -\n版本: 4.20.0\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的mode属性如何使用？",
    "md": "参数: mode\n说明: 菜单类型，现在支持垂直、水平、和内嵌模式三种\n类型: `vertical` | `horizontal` | `inline`\n默认值: `vertical`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 是否允许多选\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的openKeys属性如何使用？",
    "md": "参数: openKeys\n说明: 当前展开的 SubMenu 菜单项 key 数组\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的overflowedIndicator属性如何使用？",
    "md": "参数: overflowedIndicator\n说明: 用于自定义 Menu 水平空间不足时的省略收缩的图标\n类型: ReactNode\n默认值: `<EllipsisOutlined />`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的selectable属性如何使用？",
    "md": "参数: selectable\n说明: 是否允许选中\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的selectedKeys属性如何使用？",
    "md": "参数: selectedKeys\n说明: 当前选中的菜单项 key 数组\n类型: string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的style属性如何使用？",
    "md": "参数: style\n说明: 根节点样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的subMenuCloseDelay属性如何使用？",
    "md": "参数: subMenuCloseDelay\n说明: 用户鼠标离开子菜单后关闭延时，单位：秒\n类型: number\n默认值: 0.1\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的subMenuOpenDelay属性如何使用？",
    "md": "参数: subMenuOpenDelay\n说明: 用户鼠标进入子菜单后开启延时，单位：秒\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的theme属性如何使用？",
    "md": "参数: theme\n说明: 主题颜色\n类型: `light` | `dark`\n默认值: `light`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的triggerSubMenuAction属性如何使用？",
    "md": "参数: triggerSubMenuAction\n说明: SubMenu 展开/关闭的触发行为\n类型: `hover` | `click`\n默认值: `hover`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击 MenuItem 调用此函数\n类型: function({ item, key, keyPath, domEvent })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的onDeselect属性如何使用？",
    "md": "参数: onDeselect\n说明: 取消选中时调用，仅在 multiple 生效\n类型: function({ item, key, keyPath, selectedKeys, domEvent })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: SubMenu 展开/关闭的回调\n类型: function(openKeys: string\\[])\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - Menu的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 被选中时调用\n类型: function({ item, key, keyPath, selectedKeys, domEvent })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Menu - MenuItemType 有哪些配置？",
    "md": "| 参数     | 说明                     | 类型      | 默认值 | 版本 |\n| -------- | ------------------------ | --------- | ------ | ---- |\n| danger   | 展示错误状态样式         | boolean   | false  | -    |\n| disabled | 是否禁用                 | boolean   | false  | -    |\n| icon     | 菜单图标                 | ReactNode | -      | -    |\n| key      | item 的唯一标志          | string    | -      | -    |\n| label    | 菜单项标题               | ReactNode | -      | -    |\n| title    | 设置收缩时展示的悬浮标题 | string    | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemType的danger属性如何使用？",
    "md": "参数: danger\n说明: 展示错误状态样式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemType的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemType的icon属性如何使用？",
    "md": "参数: icon\n说明: 菜单图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemType的key属性如何使用？",
    "md": "参数: key\n说明: item 的唯一标志\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemType的label属性如何使用？",
    "md": "参数: label\n说明: 菜单项标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemType的title属性如何使用？",
    "md": "参数: title\n说明: 设置收缩时展示的悬浮标题\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Menu - SubMenuType 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 子菜单的菜单项 | [ItemType\\[\\]](#itemtype) | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| icon | 菜单图标 | ReactNode | - | - |\n| key | 唯一标志 | string | - | - |\n| label | 菜单项标题 | ReactNode | - | - |\n| popupClassName | 子菜单样式，`mode=\"inline\"` 时无效 | string | - | - |\n| popupOffset | 子菜单偏移量，`mode=\"inline\"` 时无效 | \\[number, number] | - | - |\n| onTitleClick | 点击子菜单标题 | function({ key, domEvent }) | - | - |\n| theme | 设置子菜单的主题，默认从 Menu 上继承 | `light` | `dark` | - | - |\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的children属性如何使用？",
    "md": "参数: children\n说明: 子菜单的菜单项\n类型: [ItemType\\[\\]](#itemtype)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的icon属性如何使用？",
    "md": "参数: icon\n说明: 菜单图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的key属性如何使用？",
    "md": "参数: key\n说明: 唯一标志\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的label属性如何使用？",
    "md": "参数: label\n说明: 菜单项标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 子菜单样式，`mode=\"inline\"` 时无效\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的popupOffset属性如何使用？",
    "md": "参数: popupOffset\n说明: 子菜单偏移量，`mode=\"inline\"` 时无效\n类型: \\[number, number]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的onTitleClick属性如何使用？",
    "md": "参数: onTitleClick\n说明: 点击子菜单标题\n类型: function({ key, domEvent })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - SubMenuType的theme属性如何使用？",
    "md": "参数: theme\n说明: 设置子菜单的主题，默认从 Menu 上继承\n类型: `light` | `dark`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Menu - MenuItemGroupType 有哪些配置？",
    "md": "| 参数     | 说明         | 类型                              | 默认值 | 版本 |\n| -------- | ------------ | --------------------------------- | ------ | ---- |\n| children | 分组的菜单项 | [MenuItemType\\[\\]](#menuitemtype) | -      | -    |\n| label    | 分组标题     | ReactNode                         | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemGroupType的children属性如何使用？",
    "md": "参数: children\n说明: 分组的菜单项\n类型: [MenuItemType\\[\\]](#menuitemtype)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Menu - MenuItemGroupType的label属性如何使用？",
    "md": "参数: label\n说明: 分组标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Menu - MenuDividerType 有哪些配置？",
    "md": "| 参数   | 说明     | 类型    | 默认值 | 版本 |\n| ------ | -------- | ------- | ------ | ---- |\n| dashed | 是否虚线 | boolean | false  | -    |\n"
  },
  {
    "title": "ant-design 中 Menu - MenuDividerType的dashed属性如何使用？",
    "md": "参数: dashed\n说明: 是否虚线\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 的 Mentions 有哪些配置？",
    "md": "#### Mentions - Mentions\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean | { clearIcon?: ReactNode } | false | 5.13.0 |\n| autoFocus | 自动获得焦点 | boolean | false | - |\n| autoSize | 自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 } | boolean | object | false | - |\n| defaultValue | 默认值 | string | - | - |\n| filterOption | 自定义过滤逻辑 | false | (input: string, option: OptionProps) => boolean | - | - |\n| getPopupContainer | 指定建议框挂载的 HTML 节点 | () => HTMLElement | - | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` | - |\n| placement | 弹出层展示位置 | `top` | `bottom` | `bottom` | - |\n| prefix | 设置触发关键字 | string | string\\[] | `@` | - |\n| split | 设置选中项前后分隔符 | string | ` ` | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| validateSearch | 自定义触发验证逻辑 | (text: string, props: MentionsProps) => void | - | - |\n| value | 设置值 | string | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onBlur | 失去焦点时触发 | () => void | - | - |\n| onChange | 值改变时触发 | (text: string) => void | - | - |\n| onFocus | 获得焦点时触发 | () => void | - | - |\n| onResize | resize 回调 | function({ width, height }) | - | - |\n| onSearch | 搜索时触发 | (text: string, prefix: string) => void | - | - |\n| onSelect | 选择选项时触发 | (option: OptionProps, prefix: string) => void | - | - |\n| options | 选项配置 | [Options](#option) | \\[] | 5.1.0 |\n#### Mentions - Mentions 方法\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n#### Mentions - Option\n| 参数      | 说明           | 类型                | 默认值 |\n| --------- | -------------- | ------------------- | ------ |\n| value     | 选择时填充的值 | string              | -      |\n| label     | 选项的标题     | React.ReactNode     | -      |\n| key       | 选项的 key 值  | string              | -      |\n| disabled  | 是否可选       | boolean             | -      |\n| className | css 类名       | string              | -      |\n| style     | 选项样式       | React.CSSProperties | -      |\n"
  },
  {
    "title": "ant-design 的 Mentions - Mentions 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean | { clearIcon?: ReactNode } | false | 5.13.0 |\n| autoFocus | 自动获得焦点 | boolean | false | - |\n| autoSize | 自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 } | boolean | object | false | - |\n| defaultValue | 默认值 | string | - | - |\n| filterOption | 自定义过滤逻辑 | false | (input: string, option: OptionProps) => boolean | - | - |\n| getPopupContainer | 指定建议框挂载的 HTML 节点 | () => HTMLElement | - | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` | - |\n| placement | 弹出层展示位置 | `top` | `bottom` | `bottom` | - |\n| prefix | 设置触发关键字 | string | string\\[] | `@` | - |\n| split | 设置选中项前后分隔符 | string | ` ` | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| validateSearch | 自定义触发验证逻辑 | (text: string, props: MentionsProps) => void | - | - |\n| value | 设置值 | string | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onBlur | 失去焦点时触发 | () => void | - | - |\n| onChange | 值改变时触发 | (text: string) => void | - | - |\n| onFocus | 获得焦点时触发 | () => void | - | - |\n| onResize | resize 回调 | function({ width, height }) | - | - |\n| onSearch | 搜索时触发 | (text: string, prefix: string) => void | - | - |\n| onSelect | 选择选项时触发 | (option: OptionProps, prefix: string) => void | - | - |\n| options | 选项配置 | [Options](#option) | \\[] | 5.1.0 |\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 支持清除\n类型: boolean | { clearIcon?: ReactNode }\n默认值: false\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获得焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的autoSize属性如何使用？",
    "md": "参数: autoSize\n说明: 自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 }\n类型: boolean | object\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认值\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的filterOption属性如何使用？",
    "md": "参数: filterOption\n说明: 自定义过滤逻辑\n类型: false | (input: string, option: OptionProps) => boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 指定建议框挂载的 HTML 节点\n类型: () => HTMLElement\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的notFoundContent属性如何使用？",
    "md": "参数: notFoundContent\n说明: 当下拉列表为空时显示的内容\n类型: ReactNode\n默认值: `Not Found`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的placement属性如何使用？",
    "md": "参数: placement\n说明: 弹出层展示位置\n类型: `top` | `bottom`\n默认值: `bottom`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的prefix属性如何使用？",
    "md": "参数: prefix\n说明: 设置触发关键字\n类型: string | string\\[]\n默认值: `@`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的split属性如何使用？",
    "md": "参数: split\n说明: 设置选中项前后分隔符\n类型: string\n默认值: ` `\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的validateSearch属性如何使用？",
    "md": "参数: validateSearch\n说明: 自定义触发验证逻辑\n类型: (text: string, props: MentionsProps) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的value属性如何使用？",
    "md": "参数: value\n说明: 设置值\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的onBlur属性如何使用？",
    "md": "参数: onBlur\n说明: 失去焦点时触发\n类型: () => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 值改变时触发\n类型: (text: string) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的onFocus属性如何使用？",
    "md": "参数: onFocus\n说明: 获得焦点时触发\n类型: () => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的onResize属性如何使用？",
    "md": "参数: onResize\n说明: resize 回调\n类型: function({ width, height })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的onSearch属性如何使用？",
    "md": "参数: onSearch\n说明: 搜索时触发\n类型: (text: string, prefix: string) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 选择选项时触发\n类型: (option: OptionProps, prefix: string) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions的options属性如何使用？",
    "md": "参数: options\n说明: 选项配置\n类型: [Options](#option)\n默认值: \\[]\n版本: 5.1.0\n"
  },
  {
    "title": "ant-design 的 Mentions - Mentions 方法 有哪些配置？",
    "md": "| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n"
  },
  {
    "title": "ant-design 中 Mentions - Mentions 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n"
  },
  {
    "title": "ant-design 的 Mentions - Option 有哪些配置？",
    "md": "| 参数      | 说明           | 类型                | 默认值 |\n| --------- | -------------- | ------------------- | ------ |\n| value     | 选择时填充的值 | string              | -      |\n| label     | 选项的标题     | React.ReactNode     | -      |\n| key       | 选项的 key 值  | string              | -      |\n| disabled  | 是否可选       | boolean             | -      |\n| className | css 类名       | string              | -      |\n| style     | 选项样式       | React.CSSProperties | -      |\n"
  },
  {
    "title": "ant-design 中 Mentions - Option的value属性如何使用？",
    "md": "参数: value\n说明: 选择时填充的值\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Option的label属性如何使用？",
    "md": "参数: label\n说明: 选项的标题\n类型: React.ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Option的key属性如何使用？",
    "md": "参数: key\n说明: 选项的 key 值\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Option的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否可选\n类型: boolean\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Option的className属性如何使用？",
    "md": "参数: className\n说明: css 类名\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Mentions - Option的style属性如何使用？",
    "md": "参数: style\n说明: 选项样式\n类型: React.CSSProperties\n默认值: -\n"
  },
  {
    "title": "ant-design 的 List 有哪些配置？",
    "md": "#### List - List\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示边框 | boolean | false | - |\n| dataSource | 列表数据源 | any\\[] | - | - |\n| footer | 列表底部 | ReactNode | - | - |\n| grid | 列表栅格配置 | [object](#list-grid-props) | - | - |\n| header | 列表头部 | ReactNode | - | - |\n| itemLayout | 设置 `List.Item` 布局，设置成 `vertical` 则竖直样式显示，默认横排 | string | - | - |\n| loading | 当卡片内容还在加载中时，可以用 `loading` 展示一个占位 | boolean | [object](/components/spin-cn#api) ([更多](https://github.com/ant-design/ant-design/issues/8659)) | false | - |\n| loadMore | 加载更多 | ReactNode | - | - |\n| locale | 默认文案设置，目前包括空数据文案 | object | {emptyText: `暂无数据`} | - |\n| pagination | 对应的 `pagination` 配置，设置 false 不显示 | boolean | object | false | - |\n| renderItem | 当使用 dataSource 时，可以用 `renderItem` 自定义渲染列表项 | (item) => ReactNode | - | - |\n| rowKey | 当 `renderItem` 自定义渲染列表项有效时，自定义每一行的 `key` 的获取方式 | `keyof` T | (item: T) => `React.Key` | `\"key\"` | - |\n| size | list 的尺寸 | `default` | `large` | `small` | `default` | - |\n| split | 是否展示分割线 | boolean | true | - |\n#### List - pagination\n| 参数     | 说明               | 类型                         | 默认值   |\n| -------- | ------------------ | ---------------------------- | -------- |\n| position | 指定分页显示的位置 | `top` | `bottom` | `both`  | `bottom` |\n| align    | 指定分页对齐的位置 | `start` | `center` | `end` | `end`    |\n#### List - List grid props\n| 参数   | 说明                 | 类型   | 默认值 | 版本 |\n| ------ | -------------------- | ------ | ------ | ---- |\n| column | 列数                 | number | -      | -    |\n| gutter | 栅格间隔             | number | 0      | -    |\n| xs     | `<576px` 展示的列数  | number | -      | -    |\n| sm     | `≥576px` 展示的列数  | number | -      | -    |\n| md     | `≥768px` 展示的列数  | number | -      | -    |\n| lg     | `≥992px` 展示的列数  | number | -      | -    |\n| xl     | `≥1200px` 展示的列数 | number | -      | -    |\n| xxl    | `≥1600px` 展示的列数 | number | -      | -    |\n#### List - List.Item\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| actions | 列表操作组，根据 `itemLayout` 的不同，位置在卡片底部或者最右侧 | Array\\<ReactNode> | - | - |\n| extra | 额外内容，通常用在 `itemLayout` 为 `vertical` 的情况下，展示右侧内容; `horizontal` 展示在列表元素最右侧 | ReactNode | - | - |\n#### List - List.Item.Meta\n| 参数        | 说明               | 类型      | 默认值 | 版本 |\n| ----------- | ------------------ | --------- | ------ | ---- |\n| avatar      | 列表元素的图标     | ReactNode | -      | -    |\n| description | 列表元素的描述内容 | ReactNode | -      | -    |\n| title       | 列表元素的标题     | ReactNode | -      | -    |\n"
  },
  {
    "title": "ant-design 的 List - List 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示边框 | boolean | false | - |\n| dataSource | 列表数据源 | any\\[] | - | - |\n| footer | 列表底部 | ReactNode | - | - |\n| grid | 列表栅格配置 | [object](#list-grid-props) | - | - |\n| header | 列表头部 | ReactNode | - | - |\n| itemLayout | 设置 `List.Item` 布局，设置成 `vertical` 则竖直样式显示，默认横排 | string | - | - |\n| loading | 当卡片内容还在加载中时，可以用 `loading` 展示一个占位 | boolean | [object](/components/spin-cn#api) ([更多](https://github.com/ant-design/ant-design/issues/8659)) | false | - |\n| loadMore | 加载更多 | ReactNode | - | - |\n| locale | 默认文案设置，目前包括空数据文案 | object | {emptyText: `暂无数据`} | - |\n| pagination | 对应的 `pagination` 配置，设置 false 不显示 | boolean | object | false | - |\n| renderItem | 当使用 dataSource 时，可以用 `renderItem` 自定义渲染列表项 | (item) => ReactNode | - | - |\n| rowKey | 当 `renderItem` 自定义渲染列表项有效时，自定义每一行的 `key` 的获取方式 | `keyof` T | (item: T) => `React.Key` | `\"key\"` | - |\n| size | list 的尺寸 | `default` | `large` | `small` | `default` | - |\n| split | 是否展示分割线 | boolean | true | - |\n"
  },
  {
    "title": "ant-design 中 List - List的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否展示边框\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的dataSource属性如何使用？",
    "md": "参数: dataSource\n说明: 列表数据源\n类型: any\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的footer属性如何使用？",
    "md": "参数: footer\n说明: 列表底部\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的grid属性如何使用？",
    "md": "参数: grid\n说明: 列表栅格配置\n类型: [object](#list-grid-props)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的header属性如何使用？",
    "md": "参数: header\n说明: 列表头部\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的itemLayout属性如何使用？",
    "md": "参数: itemLayout\n说明: 设置 `List.Item` 布局，设置成 `vertical` 则竖直样式显示，默认横排\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的loading属性如何使用？",
    "md": "参数: loading\n说明: 当卡片内容还在加载中时，可以用 `loading` 展示一个占位\n类型: boolean | [object](/components/spin-cn#api) ([更多](https://github.com/ant-design/ant-design/issues/8659))\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的loadMore属性如何使用？",
    "md": "参数: loadMore\n说明: 加载更多\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的locale属性如何使用？",
    "md": "参数: locale\n说明: 默认文案设置，目前包括空数据文案\n类型: object\n默认值: {emptyText: `暂无数据`}\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的pagination属性如何使用？",
    "md": "参数: pagination\n说明: 对应的 `pagination` 配置，设置 false 不显示\n类型: boolean | object\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的renderItem属性如何使用？",
    "md": "参数: renderItem\n说明: 当使用 dataSource 时，可以用 `renderItem` 自定义渲染列表项\n类型: (item) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的rowKey属性如何使用？",
    "md": "参数: rowKey\n说明: 当 `renderItem` 自定义渲染列表项有效时，自定义每一行的 `key` 的获取方式\n类型: `keyof` T | (item: T) => `React.Key`\n默认值: `\"key\"`\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的size属性如何使用？",
    "md": "参数: size\n说明: list 的尺寸\n类型: `default` | `large` | `small`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List的split属性如何使用？",
    "md": "参数: split\n说明: 是否展示分割线\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 的 List - pagination 有哪些配置？",
    "md": "| 参数     | 说明               | 类型                         | 默认值   |\n| -------- | ------------------ | ---------------------------- | -------- |\n| position | 指定分页显示的位置 | `top` | `bottom` | `both`  | `bottom` |\n| align    | 指定分页对齐的位置 | `start` | `center` | `end` | `end`    |\n"
  },
  {
    "title": "ant-design 中 List - pagination的position属性如何使用？",
    "md": "参数: position\n说明: 指定分页显示的位置\n类型: `top` | `bottom` | `both`\n默认值: `bottom`\n"
  },
  {
    "title": "ant-design 中 List - pagination的align属性如何使用？",
    "md": "参数: align\n说明: 指定分页对齐的位置\n类型: `start` | `center` | `end`\n默认值: `end`\n"
  },
  {
    "title": "ant-design 的 List - List grid props 有哪些配置？",
    "md": "| 参数   | 说明                 | 类型   | 默认值 | 版本 |\n| ------ | -------------------- | ------ | ------ | ---- |\n| column | 列数                 | number | -      | -    |\n| gutter | 栅格间隔             | number | 0      | -    |\n| xs     | `<576px` 展示的列数  | number | -      | -    |\n| sm     | `≥576px` 展示的列数  | number | -      | -    |\n| md     | `≥768px` 展示的列数  | number | -      | -    |\n| lg     | `≥992px` 展示的列数  | number | -      | -    |\n| xl     | `≥1200px` 展示的列数 | number | -      | -    |\n| xxl    | `≥1600px` 展示的列数 | number | -      | -    |\n"
  },
  {
    "title": "ant-design 中 List - List grid props的column属性如何使用？",
    "md": "参数: column\n说明: 列数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List grid props的gutter属性如何使用？",
    "md": "参数: gutter\n说明: 栅格间隔\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List grid props的xs属性如何使用？",
    "md": "参数: xs\n说明: `<576px` 展示的列数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List grid props的sm属性如何使用？",
    "md": "参数: sm\n说明: `≥576px` 展示的列数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List grid props的md属性如何使用？",
    "md": "参数: md\n说明: `≥768px` 展示的列数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List grid props的lg属性如何使用？",
    "md": "参数: lg\n说明: `≥992px` 展示的列数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List grid props的xl属性如何使用？",
    "md": "参数: xl\n说明: `≥1200px` 展示的列数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List grid props的xxl属性如何使用？",
    "md": "参数: xxl\n说明: `≥1600px` 展示的列数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 List - List.Item 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| actions | 列表操作组，根据 `itemLayout` 的不同，位置在卡片底部或者最右侧 | Array\\<ReactNode> | - | - |\n| extra | 额外内容，通常用在 `itemLayout` 为 `vertical` 的情况下，展示右侧内容; `horizontal` 展示在列表元素最右侧 | ReactNode | - | - |\n"
  },
  {
    "title": "ant-design 中 List - List.Item的actions属性如何使用？",
    "md": "参数: actions\n说明: 列表操作组，根据 `itemLayout` 的不同，位置在卡片底部或者最右侧\n类型: Array\\<ReactNode>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List.Item的extra属性如何使用？",
    "md": "参数: extra\n说明: 额外内容，通常用在 `itemLayout` 为 `vertical` 的情况下，展示右侧内容; `horizontal` 展示在列表元素最右侧\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 List - List.Item.Meta 有哪些配置？",
    "md": "| 参数        | 说明               | 类型      | 默认值 | 版本 |\n| ----------- | ------------------ | --------- | ------ | ---- |\n| avatar      | 列表元素的图标     | ReactNode | -      | -    |\n| description | 列表元素的描述内容 | ReactNode | -      | -    |\n| title       | 列表元素的标题     | ReactNode | -      | -    |\n"
  },
  {
    "title": "ant-design 中 List - List.Item.Meta的avatar属性如何使用？",
    "md": "参数: avatar\n说明: 列表元素的图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List.Item.Meta的description属性如何使用？",
    "md": "参数: description\n说明: 列表元素的描述内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 List - List.Item.Meta的title属性如何使用？",
    "md": "参数: title\n说明: 列表元素的标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Layout 有哪些配置？",
    "md": "#### Layout - Layout\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| className | 容器 className | string | - |\n| hasSider | 表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动 | boolean | - |\n| style | 指定样式 | CSSProperties | - |\n#### Layout - Layout.Sider\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| breakpoint | 触发响应式布局的[断点](/components/grid-cn#col) | `xs` | `sm` | `md` | `lg` | `xl` | `xxl` | - |\n| className | 容器 className | string | - |\n| collapsed | 当前收起状态 | boolean | - |\n| collapsedWidth | 收缩宽度，设置为 0 会出现特殊 trigger | number | 80 |\n| collapsible | 是否可收起 | boolean | false |\n| defaultCollapsed | 是否默认收起 | boolean | false |\n| reverseArrow | 翻转折叠提示箭头的方向，当 Sider 在右边时可以使用 | boolean | false |\n| style | 指定样式 | CSSProperties | - |\n| theme | 主题颜色 | `light` | `dark` | `dark` |\n| trigger | 自定义 trigger，设置为 null 时隐藏 trigger | ReactNode | - |\n| width | 宽度 | number | string | 200 |\n| zeroWidthTriggerStyle | 指定当 `collapsedWidth` 为 0 时出现的特殊 trigger 的样式 | object | - |\n| onBreakpoint | 触发响应式布局[断点](/components/grid-cn#api)时的回调 | (broken) => {} | - |\n| onCollapse | 展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发 | (collapsed, type) => {} | - |\n"
  },
  {
    "title": "ant-design 的 Layout - Layout 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| className | 容器 className | string | - |\n| hasSider | 表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动 | boolean | - |\n| style | 指定样式 | CSSProperties | - |\n"
  },
  {
    "title": "ant-design 中 Layout - Layout的className属性如何使用？",
    "md": "参数: className\n说明: 容器 className\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout的hasSider属性如何使用？",
    "md": "参数: hasSider\n说明: 表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动\n类型: boolean\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout的style属性如何使用？",
    "md": "参数: style\n说明: 指定样式\n类型: CSSProperties\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Layout - Layout.Sider 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| breakpoint | 触发响应式布局的[断点](/components/grid-cn#col) | `xs` | `sm` | `md` | `lg` | `xl` | `xxl` | - |\n| className | 容器 className | string | - |\n| collapsed | 当前收起状态 | boolean | - |\n| collapsedWidth | 收缩宽度，设置为 0 会出现特殊 trigger | number | 80 |\n| collapsible | 是否可收起 | boolean | false |\n| defaultCollapsed | 是否默认收起 | boolean | false |\n| reverseArrow | 翻转折叠提示箭头的方向，当 Sider 在右边时可以使用 | boolean | false |\n| style | 指定样式 | CSSProperties | - |\n| theme | 主题颜色 | `light` | `dark` | `dark` |\n| trigger | 自定义 trigger，设置为 null 时隐藏 trigger | ReactNode | - |\n| width | 宽度 | number | string | 200 |\n| zeroWidthTriggerStyle | 指定当 `collapsedWidth` 为 0 时出现的特殊 trigger 的样式 | object | - |\n| onBreakpoint | 触发响应式布局[断点](/components/grid-cn#api)时的回调 | (broken) => {} | - |\n| onCollapse | 展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发 | (collapsed, type) => {} | - |\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的breakpoint属性如何使用？",
    "md": "参数: breakpoint\n说明: 触发响应式布局的[断点](/components/grid-cn#col)\n类型: `xs` | `sm` | `md` | `lg` | `xl` | `xxl`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的className属性如何使用？",
    "md": "参数: className\n说明: 容器 className\n类型: string\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的collapsed属性如何使用？",
    "md": "参数: collapsed\n说明: 当前收起状态\n类型: boolean\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的collapsedWidth属性如何使用？",
    "md": "参数: collapsedWidth\n说明: 收缩宽度，设置为 0 会出现特殊 trigger\n类型: number\n默认值: 80\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的collapsible属性如何使用？",
    "md": "参数: collapsible\n说明: 是否可收起\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的defaultCollapsed属性如何使用？",
    "md": "参数: defaultCollapsed\n说明: 是否默认收起\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的reverseArrow属性如何使用？",
    "md": "参数: reverseArrow\n说明: 翻转折叠提示箭头的方向，当 Sider 在右边时可以使用\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的style属性如何使用？",
    "md": "参数: style\n说明: 指定样式\n类型: CSSProperties\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的theme属性如何使用？",
    "md": "参数: theme\n说明: 主题颜色\n类型: `light` | `dark`\n默认值: `dark`\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 自定义 trigger，设置为 null 时隐藏 trigger\n类型: ReactNode\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的width属性如何使用？",
    "md": "参数: width\n说明: 宽度\n类型: number | string\n默认值: 200\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的zeroWidthTriggerStyle属性如何使用？",
    "md": "参数: zeroWidthTriggerStyle\n说明: 指定当 `collapsedWidth` 为 0 时出现的特殊 trigger 的样式\n类型: object\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的onBreakpoint属性如何使用？",
    "md": "参数: onBreakpoint\n说明: 触发响应式布局[断点](/components/grid-cn#api)时的回调\n类型: (broken) => {}\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Layout - Layout.Sider的onCollapse属性如何使用？",
    "md": "参数: onCollapse\n说明: 展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发\n类型: (collapsed, type) => {}\n默认值: -\n"
  },
  {
    "title": "ant-design 的 InputNumber 有哪些配置？",
    "md": "#### InputNumber - InputNumber\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| addonAfter | 带标签的 input，设置后置标签 | ReactNode | - | 4.17.0 |\n| addonBefore | 带标签的 input，设置前置标签 | ReactNode | - | 4.17.0 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| changeOnBlur | 是否在失去焦点时，触发 `onChange` 事件（例如值超出范围时，重新限制回范围并触发事件） | boolean | true | 5.11.0 |\n| changeOnWheel | 允许鼠标滚轮改变数值 | boolean | - | 5.14.0 |\n| controls | 是否显示增减按钮，也可设置自定义箭头图标 | boolean | { upIcon?: React.ReactNode; downIcon?: React.ReactNode; } | - | 4.19.0 |\n| decimalSeparator | 小数点 | string | - | - |\n| placeholder | 占位符 | string | - | - |\n| defaultValue | 初始值 | number | - | - |\n| disabled | 禁用 | boolean | false | - |\n| formatter | 指定输入框展示值的格式 | function(value: number | string, info: { userTyping: boolean, input: string }): string | - | info: 4.17.0 |\n| keyboard | 是否启用键盘快捷行为 | boolean | true | 4.12.0 |\n| max | 最大值 | number | [Number.MAX\\_SAFE\\_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) | - |\n| min | 最小值 | number | [Number.MIN\\_SAFE\\_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) | - |\n| parser | 指定从 `formatter` 里转换回数字的方式，和 `formatter` 搭配使用 | function(string): number | - | - |\n| precision | 数值精度，配置 `formatter` 时会以 `formatter` 为准 | number | - | - |\n| readOnly | 只读 | boolean | false | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| prefix | 带有前缀图标的 input | ReactNode | - | 4.17.0 |\n| size | 输入框大小 | `large` | `middle` | `small` | - | - |\n| step | 每次改变步数，可以为小数 | number | string | 1 | - |\n| stringMode | 字符值模式，开启后支持高精度小数。同时 `onChange` 将返回 string 类型 | boolean | false | 4.13.0 |\n| value | 当前值 | number | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 变化回调 | function(value: number | string | null) | - | - |\n| onPressEnter | 按下回车的回调 | function(e) | - | - |\n| onStep | 点击上下箭头的回调 | (value: number, info: { offset: number, type: 'up' | 'down' }) => void | - | 4.7.0 |\n#### InputNumber - 方法\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 的 InputNumber - InputNumber 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| addonAfter | 带标签的 input，设置后置标签 | ReactNode | - | 4.17.0 |\n| addonBefore | 带标签的 input，设置前置标签 | ReactNode | - | 4.17.0 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| changeOnBlur | 是否在失去焦点时，触发 `onChange` 事件（例如值超出范围时，重新限制回范围并触发事件） | boolean | true | 5.11.0 |\n| changeOnWheel | 允许鼠标滚轮改变数值 | boolean | - | 5.14.0 |\n| controls | 是否显示增减按钮，也可设置自定义箭头图标 | boolean | { upIcon?: React.ReactNode; downIcon?: React.ReactNode; } | - | 4.19.0 |\n| decimalSeparator | 小数点 | string | - | - |\n| placeholder | 占位符 | string | - | - |\n| defaultValue | 初始值 | number | - | - |\n| disabled | 禁用 | boolean | false | - |\n| formatter | 指定输入框展示值的格式 | function(value: number | string, info: { userTyping: boolean, input: string }): string | - | info: 4.17.0 |\n| keyboard | 是否启用键盘快捷行为 | boolean | true | 4.12.0 |\n| max | 最大值 | number | [Number.MAX\\_SAFE\\_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) | - |\n| min | 最小值 | number | [Number.MIN\\_SAFE\\_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) | - |\n| parser | 指定从 `formatter` 里转换回数字的方式，和 `formatter` 搭配使用 | function(string): number | - | - |\n| precision | 数值精度，配置 `formatter` 时会以 `formatter` 为准 | number | - | - |\n| readOnly | 只读 | boolean | false | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| prefix | 带有前缀图标的 input | ReactNode | - | 4.17.0 |\n| size | 输入框大小 | `large` | `middle` | `small` | - | - |\n| step | 每次改变步数，可以为小数 | number | string | 1 | - |\n| stringMode | 字符值模式，开启后支持高精度小数。同时 `onChange` 将返回 string 类型 | boolean | false | 4.13.0 |\n| value | 当前值 | number | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 变化回调 | function(value: number | string | null) | - | - |\n| onPressEnter | 按下回车的回调 | function(e) | - | - |\n| onStep | 点击上下箭头的回调 | (value: number, info: { offset: number, type: 'up' | 'down' }) => void | - | 4.7.0 |\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的addonAfter属性如何使用？",
    "md": "参数: addonAfter\n说明: 带标签的 input，设置后置标签\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的addonBefore属性如何使用？",
    "md": "参数: addonBefore\n说明: 带标签的 input，设置前置标签\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的changeOnBlur属性如何使用？",
    "md": "参数: changeOnBlur\n说明: 是否在失去焦点时，触发 `onChange` 事件（例如值超出范围时，重新限制回范围并触发事件）\n类型: boolean\n默认值: true\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的changeOnWheel属性如何使用？",
    "md": "参数: changeOnWheel\n说明: 允许鼠标滚轮改变数值\n类型: boolean\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的controls属性如何使用？",
    "md": "参数: controls\n说明: 是否显示增减按钮，也可设置自定义箭头图标\n类型: boolean | { upIcon?: React.ReactNode; downIcon?: React.ReactNode; }\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的decimalSeparator属性如何使用？",
    "md": "参数: decimalSeparator\n说明: 小数点\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 占位符\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 初始值\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的formatter属性如何使用？",
    "md": "参数: formatter\n说明: 指定输入框展示值的格式\n类型: function(value: number | string, info: { userTyping: boolean, input: string }): string\n默认值: -\n版本: info: 4.17.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的keyboard属性如何使用？",
    "md": "参数: keyboard\n说明: 是否启用键盘快捷行为\n类型: boolean\n默认值: true\n版本: 4.12.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的max属性如何使用？",
    "md": "参数: max\n说明: 最大值\n类型: number\n默认值: [Number.MAX\\_SAFE\\_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的min属性如何使用？",
    "md": "参数: min\n说明: 最小值\n类型: number\n默认值: [Number.MIN\\_SAFE\\_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的parser属性如何使用？",
    "md": "参数: parser\n说明: 指定从 `formatter` 里转换回数字的方式，和 `formatter` 搭配使用\n类型: function(string): number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的precision属性如何使用？",
    "md": "参数: precision\n说明: 数值精度，配置 `formatter` 时会以 `formatter` 为准\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的readOnly属性如何使用？",
    "md": "参数: readOnly\n说明: 只读\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的prefix属性如何使用？",
    "md": "参数: prefix\n说明: 带有前缀图标的 input\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的size属性如何使用？",
    "md": "参数: size\n说明: 输入框大小\n类型: `large` | `middle` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的step属性如何使用？",
    "md": "参数: step\n说明: 每次改变步数，可以为小数\n类型: number | string\n默认值: 1\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的stringMode属性如何使用？",
    "md": "参数: stringMode\n说明: 字符值模式，开启后支持高精度小数。同时 `onChange` 将返回 string 类型\n类型: boolean\n默认值: false\n版本: 4.13.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的value属性如何使用？",
    "md": "参数: value\n说明: 当前值\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 变化回调\n类型: function(value: number | string | null)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的onPressEnter属性如何使用？",
    "md": "参数: onPressEnter\n说明: 按下回车的回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 InputNumber - InputNumber的onStep属性如何使用？",
    "md": "参数: onStep\n说明: 点击上下箭头的回调\n类型: (value: number, info: { offset: number, type: 'up' | 'down' }) => void\n默认值: -\n版本: 4.7.0\n"
  },
  {
    "title": "ant-design 的 InputNumber - 方法 有哪些配置？",
    "md": "| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n"
  },
  {
    "title": "ant-design 中 InputNumber - 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n"
  },
  {
    "title": "ant-design 中 InputNumber - 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n"
  },
  {
    "title": "ant-design 的 Input 有哪些配置？",
    "md": "#### Input - Input\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| addonAfter | 带标签的 input，设置后置标签 | ReactNode | - | - |\n| addonBefore | 带标签的 input，设置前置标签 | ReactNode | - | - |\n| allowClear | 可以点击清除图标删除内容 | boolean | { clearIcon: ReactNode } | - | - |\n| classNames | 语义化结构 class | Record<[SemanticDOM](#input-1), string> | - | 5.4.0 |\n| count | 字符计数配置 | [CountConfig](#countconfig) | - | 5.10.0 |\n| defaultValue | 输入框默认内容 | string | - | - |\n| disabled | 是否禁用状态，默认为 false | boolean | false | - |\n| id | 输入框的 id | string | - | - |\n| maxLength | 最大长度 | number | - | - |\n| prefix | 带有前缀图标的 input | ReactNode | - | - |\n| showCount | 是否展示字数 | boolean | { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode } | false | 4.18.0 info.value: 4.23.0 |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| styles | 语义化结构 style | Record<[SemanticDOM](#input-1), CSSProperties> | - | 5.4.0 |\n| size | 控件大小。注：标准表单内的输入框大小限制为 `middle` | `large` | `middle` | `small` | - | - |\n| suffix | 带有后缀图标的 input | ReactNode | - | - |\n| type | 声明 input 类型，同原生 input 标签的 type 属性，见：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#属性)(请直接使用 `Input.TextArea` 代替 `type=\"textarea\"`) | string | `text` | - |\n| value | 输入框内容 | string | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 输入框内容变化时的回调 | function(e) | - | - |\n| onPressEnter | 按下回车的回调 | function(e) | - | - |\n#### Input - Input.TextArea\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoSize | 自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 } | boolean | object | false | - |\n| classNames | 语义化结构 class | Record<[SemanticDOM](#inputtextarea-1), string> | - | 5.4.0 |\n| styles | 语义化结构 style | Record<[SemanticDOM](#inputtextarea-1), CSSProperties> | - | 5.4.0 |\n#### Input - Input.Search\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| enterButton | 是否有确认按钮，可设为按钮文字。该属性会与 `addonAfter` 冲突。 | ReactNode | false |\n| loading | 搜索 loading | boolean | false |\n| onSearch | 点击搜索图标、清除图标，或按下回车键时的回调 | function(value, event, { source: \"input\" | \"clear\" }) | - |\n#### Input - Input.Password\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| iconRender | 自定义切换按钮 | (visible) => ReactNode | (visible) => (visible ? \\<EyeOutlined /> : \\<EyeInvisibleOutlined />) | 4.3.0 |\n| visibilityToggle | 是否显示切换按钮或者控制密码显隐 | boolean | [VisibilityToggle](#visibilitytoggle) | true | - |\n#### Input - VisibilityToggle\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| visible | 用于手动控制密码显隐 | boolean | false | 4.24 |\n| onVisibleChange | 显隐密码的回调 | (visible) => void | - | 4.24 |\n#### Input - Input Methods\n| 名称 | 说明 | 参数 | 版本 |\n| --- | --- | --- | --- |\n| blur | 取消焦点 | - | - |\n| focus | 获取焦点 | (option?: { preventScroll?: boolean, cursor?: 'start' | 'end' | 'all' }) | option - 4.10.0 |\n"
  },
  {
    "title": "ant-design 的 Input - Input 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| addonAfter | 带标签的 input，设置后置标签 | ReactNode | - | - |\n| addonBefore | 带标签的 input，设置前置标签 | ReactNode | - | - |\n| allowClear | 可以点击清除图标删除内容 | boolean | { clearIcon: ReactNode } | - | - |\n| classNames | 语义化结构 class | Record<[SemanticDOM](#input-1), string> | - | 5.4.0 |\n| count | 字符计数配置 | [CountConfig](#countconfig) | - | 5.10.0 |\n| defaultValue | 输入框默认内容 | string | - | - |\n| disabled | 是否禁用状态，默认为 false | boolean | false | - |\n| id | 输入框的 id | string | - | - |\n| maxLength | 最大长度 | number | - | - |\n| prefix | 带有前缀图标的 input | ReactNode | - | - |\n| showCount | 是否展示字数 | boolean | { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode } | false | 4.18.0 info.value: 4.23.0 |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| styles | 语义化结构 style | Record<[SemanticDOM](#input-1), CSSProperties> | - | 5.4.0 |\n| size | 控件大小。注：标准表单内的输入框大小限制为 `middle` | `large` | `middle` | `small` | - | - |\n| suffix | 带有后缀图标的 input | ReactNode | - | - |\n| type | 声明 input 类型，同原生 input 标签的 type 属性，见：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#属性)(请直接使用 `Input.TextArea` 代替 `type=\"textarea\"`) | string | `text` | - |\n| value | 输入框内容 | string | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 输入框内容变化时的回调 | function(e) | - | - |\n| onPressEnter | 按下回车的回调 | function(e) | - | - |\n"
  },
  {
    "title": "ant-design 中 Input - Input的addonAfter属性如何使用？",
    "md": "参数: addonAfter\n说明: 带标签的 input，设置后置标签\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的addonBefore属性如何使用？",
    "md": "参数: addonBefore\n说明: 带标签的 input，设置前置标签\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 可以点击清除图标删除内容\n类型: boolean | { clearIcon: ReactNode }\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 语义化结构 class\n类型: Record<[SemanticDOM](#input-1), string>\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Input - Input的count属性如何使用？",
    "md": "参数: count\n说明: 字符计数配置\n类型: [CountConfig](#countconfig)\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Input - Input的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 输入框默认内容\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用状态，默认为 false\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的id属性如何使用？",
    "md": "参数: id\n说明: 输入框的 id\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的maxLength属性如何使用？",
    "md": "参数: maxLength\n说明: 最大长度\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的prefix属性如何使用？",
    "md": "参数: prefix\n说明: 带有前缀图标的 input\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的showCount属性如何使用？",
    "md": "参数: showCount\n说明: 是否展示字数\n类型: boolean | { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode }\n默认值: false\n版本: 4.18.0 info.value: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Input - Input的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 Input - Input的styles属性如何使用？",
    "md": "参数: styles\n说明: 语义化结构 style\n类型: Record<[SemanticDOM](#input-1), CSSProperties>\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Input - Input的size属性如何使用？",
    "md": "参数: size\n说明: 控件大小。注：标准表单内的输入框大小限制为 `middle`\n类型: `large` | `middle` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的suffix属性如何使用？",
    "md": "参数: suffix\n说明: 带有后缀图标的 input\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的type属性如何使用？",
    "md": "参数: type\n说明: 声明 input 类型，同原生 input 标签的 type 属性，见：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#属性)(请直接使用 `Input.TextArea` 代替 `type=\"textarea\"`)\n类型: string\n默认值: `text`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的value属性如何使用？",
    "md": "参数: value\n说明: 输入框内容\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Input - Input的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 输入框内容变化时的回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input的onPressEnter属性如何使用？",
    "md": "参数: onPressEnter\n说明: 按下回车的回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Input - Input.TextArea 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoSize | 自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 } | boolean | object | false | - |\n| classNames | 语义化结构 class | Record<[SemanticDOM](#inputtextarea-1), string> | - | 5.4.0 |\n| styles | 语义化结构 style | Record<[SemanticDOM](#inputtextarea-1), CSSProperties> | - | 5.4.0 |\n"
  },
  {
    "title": "ant-design 中 Input - Input.TextArea的autoSize属性如何使用？",
    "md": "参数: autoSize\n说明: 自适应内容高度，可设置为 true | false 或对象：{ minRows: 2, maxRows: 6 }\n类型: boolean | object\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input.TextArea的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 语义化结构 class\n类型: Record<[SemanticDOM](#inputtextarea-1), string>\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Input - Input.TextArea的styles属性如何使用？",
    "md": "参数: styles\n说明: 语义化结构 style\n类型: Record<[SemanticDOM](#inputtextarea-1), CSSProperties>\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 的 Input - Input.Search 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| enterButton | 是否有确认按钮，可设为按钮文字。该属性会与 `addonAfter` 冲突。 | ReactNode | false |\n| loading | 搜索 loading | boolean | false |\n| onSearch | 点击搜索图标、清除图标，或按下回车键时的回调 | function(value, event, { source: \"input\" | \"clear\" }) | - |\n"
  },
  {
    "title": "ant-design 中 Input - Input.Search的enterButton属性如何使用？",
    "md": "参数: enterButton\n说明: 是否有确认按钮，可设为按钮文字。该属性会与 `addonAfter` 冲突。\n类型: ReactNode\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Input - Input.Search的loading属性如何使用？",
    "md": "参数: loading\n说明: 搜索 loading\n类型: boolean\n默认值: false\n"
  },
  {
    "title": "ant-design 中 Input - Input.Search的onSearch属性如何使用？",
    "md": "参数: onSearch\n说明: 点击搜索图标、清除图标，或按下回车键时的回调\n类型: function(value, event, { source: \"input\" | \"clear\" })\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Input - Input.Password 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| iconRender | 自定义切换按钮 | (visible) => ReactNode | (visible) => (visible ? \\<EyeOutlined /> : \\<EyeInvisibleOutlined />) | 4.3.0 |\n| visibilityToggle | 是否显示切换按钮或者控制密码显隐 | boolean | [VisibilityToggle](#visibilitytoggle) | true | - |\n"
  },
  {
    "title": "ant-design 中 Input - Input.Password的iconRender属性如何使用？",
    "md": "参数: iconRender\n说明: 自定义切换按钮\n类型: (visible) => ReactNode\n默认值: (visible) => (visible ? \\<EyeOutlined /> : \\<EyeInvisibleOutlined />)\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Input - Input.Password的visibilityToggle属性如何使用？",
    "md": "参数: visibilityToggle\n说明: 是否显示切换按钮或者控制密码显隐\n类型: boolean | [VisibilityToggle](#visibilitytoggle)\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 的 Input - VisibilityToggle 有哪些配置？",
    "md": "| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| visible | 用于手动控制密码显隐 | boolean | false | 4.24 |\n| onVisibleChange | 显隐密码的回调 | (visible) => void | - | 4.24 |\n"
  },
  {
    "title": "ant-design 中 Input - VisibilityToggle的visible属性如何使用？",
    "md": "Property: visible\nDescription: 用于手动控制密码显隐\nType: boolean\nDefault: false\nVersion: 4.24\n"
  },
  {
    "title": "ant-design 中 Input - VisibilityToggle的onVisibleChange属性如何使用？",
    "md": "Property: onVisibleChange\nDescription: 显隐密码的回调\nType: (visible) => void\nDefault: -\nVersion: 4.24\n"
  },
  {
    "title": "ant-design 的 Input - Input Methods 有哪些配置？",
    "md": "| 名称 | 说明 | 参数 | 版本 |\n| --- | --- | --- | --- |\n| blur | 取消焦点 | - | - |\n| focus | 获取焦点 | (option?: { preventScroll?: boolean, cursor?: 'start' | 'end' | 'all' }) | option - 4.10.0 |\n"
  },
  {
    "title": "ant-design 中 Input - Input Methods的blur属性如何使用？",
    "md": "名称: blur\n说明: 取消焦点\n参数: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Input - Input Methods的focus属性如何使用？",
    "md": "名称: focus\n说明: 获取焦点\n参数: (option?: { preventScroll?: boolean, cursor?: 'start' | 'end' | 'all' })\n版本: option - 4.10.0\n"
  },
  {
    "title": "ant-design 的 Image 有哪些配置？",
    "md": "#### Image - Image\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alt | 图像描述 | string | - | 4.6.0 |\n| fallback | 加载失败容错地址 | string | - | 4.6.0 |\n| height | 图像高度 | string | number | - | 4.6.0 |\n| placeholder | 加载占位，为 `true` 时使用默认占位 | ReactNode | - | 4.6.0 |\n| preview | 预览参数，为 `false` 时禁用 | boolean | [PreviewType](#previewtype) | true | 4.6.0 [PreviewType](#previewyype):4.7.0 |\n| src | 图片地址 | string | - | 4.6.0 |\n| width | 图像宽度 | string | number | - | 4.6.0 |\n| onError | 加载错误回调 | (event: Event) => void | - | 4.12.0 |\n#### Image - PreviewType\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| visible | 是否显示 | boolean | - | - |\n| src | 自定义预览 src | string | - | 4.10.0 |\n| getContainer | 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置 | string | HTMLElement | (() => HTMLElement) | false | - | 4.8.0 |\n| movable | 是否可移动 | boolean | true | 5.8.0 |\n| mask | 缩略图遮罩 | ReactNode | - | 4.9.0 |\n| maskClassName | 缩略图遮罩类名 | string | - | 4.11.0 |\n| rootClassName | 预览图的根 DOM 类名 | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` 为缩放放大的每步倍数 | number | 0.5 | - |\n| minScale | 最小缩放倍数 | number | 1 | 5.7.0 |\n| maxScale | 最大放大倍数 | number | 50 | 5.7.0 |\n| closeIcon | 自定义关闭 Icon | React.ReactNode | - | 5.7.0 |\n| forceRender | 强制渲染预览图 | boolean | - | - |\n| toolbarRender | 自定义工具栏 | (originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' | 'total'>) => React.ReactNode | - | 5.7.0 |\n| imageRender | 自定义预览内容 | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype) }) => React.ReactNode | - | 5.7.0 |\n| onTransform | 预览图 transform 变化的回调 | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onVisibleChange | 当 `visible` 发生改变时的回调 | (visible: boolean, prevVisible: boolean) => void | - | - |\n#### Image - PreviewGroup\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| preview | 预览参数，为 `false` 时禁用 | boolean | [PreviewGroupType](#previewgrouptype) | true | 4.6.0 [PreviewGroupType](#previewgrouptype):4.7.0 |\n| items | 预览数组 | string\\[] | { src: string, crossOrigin: string, ... }\\[] | - | 5.7.0 |\n| fallback | 加载失败容错地址 | string | - | 5.7.0 |\n#### Image - PreviewGroupType\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| visible | 是否显示 | boolean | - | - |\n| getContainer | 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置 | string | HTMLElement | (() => HTMLElement) | false | - | 4.8.0 |\n| movable | 是否可移动 | boolean | true | 5.8.0 |\n| current | 当前预览图的 index | number | - | 4.12.0 |\n| mask | 缩略图遮罩 | ReactNode | - | 4.9.0 |\n| maskClassName | 缩略图遮罩类名 | string | - | 4.11.0 |\n| rootClassName | 预览图的根 DOM 类名 | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` 为缩放放大的每步倍数 | number | 0.5 | - |\n| minScale | 最小缩放倍数 | number | 1 | 5.7.0 |\n| maxScale | 最大放大倍数 | number | 50 | 5.7.0 |\n| closeIcon | 自定义关闭 Icon | React.ReactNode | - | 5.7.0 |\n| forceRender | 强制渲染预览图 | boolean | - | - |\n| countRender | 自定义预览计数内容 | (current: number, total: number) => React.ReactNode | - | 4.20.0 |\n| toolbarRender | 自定义工具栏 | (originalNode: React.ReactElement, info: [ToolbarRenderInfoType](#toolbarrenderinfotype)) => React.ReactNode | - | 5.7.0 |\n| imageRender | 自定义预览内容 | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), current: number }) => React.ReactNode | - | 5.7.0 |\n| onTransform | 预览图 transform 变化的回调 | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onChange | 切换预览图的回调 | (current: number, prevCurrent: number) => void | - | 5.3.0 |\n| onVisibleChange | 当 `visible` 发生改变时的回调 | (visible: boolean, prevVisible: boolean, current: number) => void | - | current 参数 5.3.0 |\n"
  },
  {
    "title": "ant-design 的 Image - Image 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alt | 图像描述 | string | - | 4.6.0 |\n| fallback | 加载失败容错地址 | string | - | 4.6.0 |\n| height | 图像高度 | string | number | - | 4.6.0 |\n| placeholder | 加载占位，为 `true` 时使用默认占位 | ReactNode | - | 4.6.0 |\n| preview | 预览参数，为 `false` 时禁用 | boolean | [PreviewType](#previewtype) | true | 4.6.0 [PreviewType](#previewyype):4.7.0 |\n| src | 图片地址 | string | - | 4.6.0 |\n| width | 图像宽度 | string | number | - | 4.6.0 |\n| onError | 加载错误回调 | (event: Event) => void | - | 4.12.0 |\n"
  },
  {
    "title": "ant-design 中 Image - Image的alt属性如何使用？",
    "md": "参数: alt\n说明: 图像描述\n类型: string\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Image - Image的fallback属性如何使用？",
    "md": "参数: fallback\n说明: 加载失败容错地址\n类型: string\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Image - Image的height属性如何使用？",
    "md": "参数: height\n说明: 图像高度\n类型: string | number\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Image - Image的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 加载占位，为 `true` 时使用默认占位\n类型: ReactNode\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Image - Image的preview属性如何使用？",
    "md": "参数: preview\n说明: 预览参数，为 `false` 时禁用\n类型: boolean | [PreviewType](#previewtype)\n默认值: true\n版本: 4.6.0 [PreviewType](#previewyype):4.7.0\n"
  },
  {
    "title": "ant-design 中 Image - Image的src属性如何使用？",
    "md": "参数: src\n说明: 图片地址\n类型: string\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Image - Image的width属性如何使用？",
    "md": "参数: width\n说明: 图像宽度\n类型: string | number\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Image - Image的onError属性如何使用？",
    "md": "参数: onError\n说明: 加载错误回调\n类型: (event: Event) => void\n默认值: -\n版本: 4.12.0\n"
  },
  {
    "title": "ant-design 的 Image - PreviewType 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| visible | 是否显示 | boolean | - | - |\n| src | 自定义预览 src | string | - | 4.10.0 |\n| getContainer | 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置 | string | HTMLElement | (() => HTMLElement) | false | - | 4.8.0 |\n| movable | 是否可移动 | boolean | true | 5.8.0 |\n| mask | 缩略图遮罩 | ReactNode | - | 4.9.0 |\n| maskClassName | 缩略图遮罩类名 | string | - | 4.11.0 |\n| rootClassName | 预览图的根 DOM 类名 | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` 为缩放放大的每步倍数 | number | 0.5 | - |\n| minScale | 最小缩放倍数 | number | 1 | 5.7.0 |\n| maxScale | 最大放大倍数 | number | 50 | 5.7.0 |\n| closeIcon | 自定义关闭 Icon | React.ReactNode | - | 5.7.0 |\n| forceRender | 强制渲染预览图 | boolean | - | - |\n| toolbarRender | 自定义工具栏 | (originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' | 'total'>) => React.ReactNode | - | 5.7.0 |\n| imageRender | 自定义预览内容 | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype) }) => React.ReactNode | - | 5.7.0 |\n| onTransform | 预览图 transform 变化的回调 | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onVisibleChange | 当 `visible` 发生改变时的回调 | (visible: boolean, prevVisible: boolean) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的visible属性如何使用？",
    "md": "参数: visible\n说明: 是否显示\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的src属性如何使用？",
    "md": "参数: src\n说明: 自定义预览 src\n类型: string\n默认值: -\n版本: 4.10.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置\n类型: string | HTMLElement | (() => HTMLElement) | false\n默认值: -\n版本: 4.8.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的movable属性如何使用？",
    "md": "参数: movable\n说明: 是否可移动\n类型: boolean\n默认值: true\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的mask属性如何使用？",
    "md": "参数: mask\n说明: 缩略图遮罩\n类型: ReactNode\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的maskClassName属性如何使用？",
    "md": "参数: maskClassName\n说明: 缩略图遮罩类名\n类型: string\n默认值: -\n版本: 4.11.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的rootClassName属性如何使用？",
    "md": "参数: rootClassName\n说明: 预览图的根 DOM 类名\n类型: string\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的scaleStep属性如何使用？",
    "md": "参数: scaleStep\n说明: `1 + scaleStep` 为缩放放大的每步倍数\n类型: number\n默认值: 0.5\n版本: -\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的minScale属性如何使用？",
    "md": "参数: minScale\n说明: 最小缩放倍数\n类型: number\n默认值: 1\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的maxScale属性如何使用？",
    "md": "参数: maxScale\n说明: 最大放大倍数\n类型: number\n默认值: 50\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭 Icon\n类型: React.ReactNode\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的forceRender属性如何使用？",
    "md": "参数: forceRender\n说明: 强制渲染预览图\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的toolbarRender属性如何使用？",
    "md": "参数: toolbarRender\n说明: 自定义工具栏\n类型: (originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' | 'total'>) => React.ReactNode\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的imageRender属性如何使用？",
    "md": "参数: imageRender\n说明: 自定义预览内容\n类型: (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype) }) => React.ReactNode\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的onTransform属性如何使用？",
    "md": "参数: onTransform\n说明: 预览图 transform 变化的回调\n类型: { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewType的onVisibleChange属性如何使用？",
    "md": "参数: onVisibleChange\n说明: 当 `visible` 发生改变时的回调\n类型: (visible: boolean, prevVisible: boolean) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Image - PreviewGroup 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| preview | 预览参数，为 `false` 时禁用 | boolean | [PreviewGroupType](#previewgrouptype) | true | 4.6.0 [PreviewGroupType](#previewgrouptype):4.7.0 |\n| items | 预览数组 | string\\[] | { src: string, crossOrigin: string, ... }\\[] | - | 5.7.0 |\n| fallback | 加载失败容错地址 | string | - | 5.7.0 |\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroup的preview属性如何使用？",
    "md": "参数: preview\n说明: 预览参数，为 `false` 时禁用\n类型: boolean | [PreviewGroupType](#previewgrouptype)\n默认值: true\n版本: 4.6.0 [PreviewGroupType](#previewgrouptype):4.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroup的items属性如何使用？",
    "md": "参数: items\n说明: 预览数组\n类型: string\\[] | { src: string, crossOrigin: string, ... }\\[]\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroup的fallback属性如何使用？",
    "md": "参数: fallback\n说明: 加载失败容错地址\n类型: string\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 的 Image - PreviewGroupType 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| visible | 是否显示 | boolean | - | - |\n| getContainer | 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置 | string | HTMLElement | (() => HTMLElement) | false | - | 4.8.0 |\n| movable | 是否可移动 | boolean | true | 5.8.0 |\n| current | 当前预览图的 index | number | - | 4.12.0 |\n| mask | 缩略图遮罩 | ReactNode | - | 4.9.0 |\n| maskClassName | 缩略图遮罩类名 | string | - | 4.11.0 |\n| rootClassName | 预览图的根 DOM 类名 | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` 为缩放放大的每步倍数 | number | 0.5 | - |\n| minScale | 最小缩放倍数 | number | 1 | 5.7.0 |\n| maxScale | 最大放大倍数 | number | 50 | 5.7.0 |\n| closeIcon | 自定义关闭 Icon | React.ReactNode | - | 5.7.0 |\n| forceRender | 强制渲染预览图 | boolean | - | - |\n| countRender | 自定义预览计数内容 | (current: number, total: number) => React.ReactNode | - | 4.20.0 |\n| toolbarRender | 自定义工具栏 | (originalNode: React.ReactElement, info: [ToolbarRenderInfoType](#toolbarrenderinfotype)) => React.ReactNode | - | 5.7.0 |\n| imageRender | 自定义预览内容 | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), current: number }) => React.ReactNode | - | 5.7.0 |\n| onTransform | 预览图 transform 变化的回调 | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onChange | 切换预览图的回调 | (current: number, prevCurrent: number) => void | - | 5.3.0 |\n| onVisibleChange | 当 `visible` 发生改变时的回调 | (visible: boolean, prevVisible: boolean, current: number) => void | - | current 参数 5.3.0 |\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的visible属性如何使用？",
    "md": "参数: visible\n说明: 是否显示\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置\n类型: string | HTMLElement | (() => HTMLElement) | false\n默认值: -\n版本: 4.8.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的movable属性如何使用？",
    "md": "参数: movable\n说明: 是否可移动\n类型: boolean\n默认值: true\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的current属性如何使用？",
    "md": "参数: current\n说明: 当前预览图的 index\n类型: number\n默认值: -\n版本: 4.12.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的mask属性如何使用？",
    "md": "参数: mask\n说明: 缩略图遮罩\n类型: ReactNode\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的maskClassName属性如何使用？",
    "md": "参数: maskClassName\n说明: 缩略图遮罩类名\n类型: string\n默认值: -\n版本: 4.11.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的rootClassName属性如何使用？",
    "md": "参数: rootClassName\n说明: 预览图的根 DOM 类名\n类型: string\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的scaleStep属性如何使用？",
    "md": "参数: scaleStep\n说明: `1 + scaleStep` 为缩放放大的每步倍数\n类型: number\n默认值: 0.5\n版本: -\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的minScale属性如何使用？",
    "md": "参数: minScale\n说明: 最小缩放倍数\n类型: number\n默认值: 1\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的maxScale属性如何使用？",
    "md": "参数: maxScale\n说明: 最大放大倍数\n类型: number\n默认值: 50\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭 Icon\n类型: React.ReactNode\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的forceRender属性如何使用？",
    "md": "参数: forceRender\n说明: 强制渲染预览图\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的countRender属性如何使用？",
    "md": "参数: countRender\n说明: 自定义预览计数内容\n类型: (current: number, total: number) => React.ReactNode\n默认值: -\n版本: 4.20.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的toolbarRender属性如何使用？",
    "md": "参数: toolbarRender\n说明: 自定义工具栏\n类型: (originalNode: React.ReactElement, info: [ToolbarRenderInfoType](#toolbarrenderinfotype)) => React.ReactNode\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的imageRender属性如何使用？",
    "md": "参数: imageRender\n说明: 自定义预览内容\n类型: (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), current: number }) => React.ReactNode\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的onTransform属性如何使用？",
    "md": "参数: onTransform\n说明: 预览图 transform 变化的回调\n类型: { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 切换预览图的回调\n类型: (current: number, prevCurrent: number) => void\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 中 Image - PreviewGroupType的onVisibleChange属性如何使用？",
    "md": "参数: onVisibleChange\n说明: 当 `visible` 发生改变时的回调\n类型: (visible: boolean, prevVisible: boolean, current: number) => void\n默认值: -\n版本: current 参数 5.3.0\n"
  },
  {
    "title": "ant-design 的 Icon 有哪些配置？",
    "md": "#### Icon - 通用图标\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 设置图标的样式名 | string | - | - |\n| rotate | 图标旋转角度（IE9 无效） | number | - | - |\n| spin | 是否有旋转动画 | boolean | false | - |\n| style | 设置图标的样式，例如 `fontSize` 和 `color` | CSSProperties | - | - |\n| twoToneColor | 仅适用双色图标。设置双色图标的主要颜色 | string (十六进制颜色) | - | - |\n#### Icon - 自定义 Icon\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| component | 控制如何渲染图标，通常是一个渲染根标签为 `<svg>` 的 React 组件 | ComponentType\\<CustomIconComponentProps> | - | - |\n| rotate | 图标旋转角度（IE9 无效） | number | - | - |\n| spin | 是否有旋转动画 | boolean | false | - |\n| style | 设置图标的样式，例如 `fontSize` 和 `color` | CSSProperties | - | - |\n#### Icon - 自定义 font 图标\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| extraCommonProps | 给所有的 `svg` 图标 `<Icon />` 组件设置额外的属性 | { \\[key: string]: any } | {} | - |\n| scriptUrl | [iconfont.cn](http://iconfont.cn/) 项目在线生成的 js 地址，`@ant-design/icons@4.1.0` 之后支持 `string[]` 类型 | string | string\\[] | - | - |\n#### Icon - 自定义 SVG 图标\n| 字段 | 说明 | 类型 | 只读值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 计算后的 `svg` 类名 | string | - | - |\n| fill | `svg` 元素填充的颜色 | string | `currentColor` | - |\n| height | `svg` 元素高度 | string | number | `1em` | - |\n| style | 计算后的 `svg` 元素样式 | CSSProperties | - | - |\n| width | `svg` 元素宽度 | string | number | `1em` | - |\n"
  },
  {
    "title": "ant-design 的 Icon - 通用图标 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 设置图标的样式名 | string | - | - |\n| rotate | 图标旋转角度（IE9 无效） | number | - | - |\n| spin | 是否有旋转动画 | boolean | false | - |\n| style | 设置图标的样式，例如 `fontSize` 和 `color` | CSSProperties | - | - |\n| twoToneColor | 仅适用双色图标。设置双色图标的主要颜色 | string (十六进制颜色) | - | - |\n"
  },
  {
    "title": "ant-design 中 Icon - 通用图标的className属性如何使用？",
    "md": "参数: className\n说明: 设置图标的样式名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 通用图标的rotate属性如何使用？",
    "md": "参数: rotate\n说明: 图标旋转角度（IE9 无效）\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 通用图标的spin属性如何使用？",
    "md": "参数: spin\n说明: 是否有旋转动画\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 通用图标的style属性如何使用？",
    "md": "参数: style\n说明: 设置图标的样式，例如 `fontSize` 和 `color`\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 通用图标的twoToneColor属性如何使用？",
    "md": "参数: twoToneColor\n说明: 仅适用双色图标。设置双色图标的主要颜色\n类型: string (十六进制颜色)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Icon - 自定义 Icon 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| component | 控制如何渲染图标，通常是一个渲染根标签为 `<svg>` 的 React 组件 | ComponentType\\<CustomIconComponentProps> | - | - |\n| rotate | 图标旋转角度（IE9 无效） | number | - | - |\n| spin | 是否有旋转动画 | boolean | false | - |\n| style | 设置图标的样式，例如 `fontSize` 和 `color` | CSSProperties | - | - |\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 Icon的component属性如何使用？",
    "md": "参数: component\n说明: 控制如何渲染图标，通常是一个渲染根标签为 `<svg>` 的 React 组件\n类型: ComponentType\\<CustomIconComponentProps>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 Icon的rotate属性如何使用？",
    "md": "参数: rotate\n说明: 图标旋转角度（IE9 无效）\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 Icon的spin属性如何使用？",
    "md": "参数: spin\n说明: 是否有旋转动画\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 Icon的style属性如何使用？",
    "md": "参数: style\n说明: 设置图标的样式，例如 `fontSize` 和 `color`\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Icon - 自定义 font 图标 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| extraCommonProps | 给所有的 `svg` 图标 `<Icon />` 组件设置额外的属性 | { \\[key: string]: any } | {} | - |\n| scriptUrl | [iconfont.cn](http://iconfont.cn/) 项目在线生成的 js 地址，`@ant-design/icons@4.1.0` 之后支持 `string[]` 类型 | string | string\\[] | - | - |\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 font 图标的extraCommonProps属性如何使用？",
    "md": "参数: extraCommonProps\n说明: 给所有的 `svg` 图标 `<Icon />` 组件设置额外的属性\n类型: { \\[key: string]: any }\n默认值: {}\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 font 图标的scriptUrl属性如何使用？",
    "md": "参数: scriptUrl\n说明: [iconfont.cn](http://iconfont.cn/) 项目在线生成的 js 地址，`@ant-design/icons@4.1.0` 之后支持 `string[]` 类型\n类型: string | string\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Icon - 自定义 SVG 图标 有哪些配置？",
    "md": "| 字段 | 说明 | 类型 | 只读值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 计算后的 `svg` 类名 | string | - | - |\n| fill | `svg` 元素填充的颜色 | string | `currentColor` | - |\n| height | `svg` 元素高度 | string | number | `1em` | - |\n| style | 计算后的 `svg` 元素样式 | CSSProperties | - | - |\n| width | `svg` 元素宽度 | string | number | `1em` | - |\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 SVG 图标的className属性如何使用？",
    "md": "字段: className\n说明: 计算后的 `svg` 类名\n类型: string\n只读值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 SVG 图标的fill属性如何使用？",
    "md": "字段: fill\n说明: `svg` 元素填充的颜色\n类型: string\n只读值: `currentColor`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 SVG 图标的height属性如何使用？",
    "md": "字段: height\n说明: `svg` 元素高度\n类型: string | number\n只读值: `1em`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 SVG 图标的style属性如何使用？",
    "md": "字段: style\n说明: 计算后的 `svg` 元素样式\n类型: CSSProperties\n只读值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Icon - 自定义 SVG 图标的width属性如何使用？",
    "md": "字段: width\n说明: `svg` 元素宽度\n类型: string | number\n只读值: `1em`\n版本: -\n"
  },
  {
    "title": "ant-design 的 Grid 有哪些配置？",
    "md": "#### Grid - Row\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 垂直对齐方式 | `top` | `middle` | `bottom` | `stretch` | `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'top' \\| 'middle' \\| 'bottom' \\| 'stretch'}` | `top` | object: 4.24.0 |\n| gutter | 栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 `[水平间距, 垂直间距]` | number | object | array | 0 | - |\n| justify | 水平排列方式 | `start` | `end` | `center` | `space-around` | `space-between` | `space-evenly` | `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'start' \\| 'end' \\| 'center' \\| 'space-around' \\| 'space-between' \\| 'space-evenly'}` | `start` | object: 4.24.0 |\n| wrap | 是否自动换行 | boolean | true | 4.8.0 |\n#### Grid - Col\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| flex | flex 布局属性 | string | number | - | - |\n| offset | 栅格左侧的间隔格数，间隔内不可以有栅格 | number | 0 | - |\n| order | 栅格顺序 | number | 0 | - |\n| pull | 栅格向左移动格数 | number | 0 | - |\n| push | 栅格向右移动格数 | number | 0 | - |\n| span | 栅格占位格数，为 0 时相当于 `display: none` | number | - | - |\n| xs | `屏幕 < 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| sm | `屏幕 ≥ 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| md | `屏幕 ≥ 768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| lg | `屏幕 ≥ 992px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| xl | `屏幕 ≥ 1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| xxl | `屏幕 ≥ 1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n"
  },
  {
    "title": "ant-design 的 Grid - Row 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 垂直对齐方式 | `top` | `middle` | `bottom` | `stretch` | `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'top' \\| 'middle' \\| 'bottom' \\| 'stretch'}` | `top` | object: 4.24.0 |\n| gutter | 栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 `[水平间距, 垂直间距]` | number | object | array | 0 | - |\n| justify | 水平排列方式 | `start` | `end` | `center` | `space-around` | `space-between` | `space-evenly` | `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'start' \\| 'end' \\| 'center' \\| 'space-around' \\| 'space-between' \\| 'space-evenly'}` | `start` | object: 4.24.0 |\n| wrap | 是否自动换行 | boolean | true | 4.8.0 |\n"
  },
  {
    "title": "ant-design 中 Grid - Row的align属性如何使用？",
    "md": "参数: align\n说明: 垂直对齐方式\n类型: `top` | `middle` | `bottom` | `stretch` | `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'top' \\| 'middle' \\| 'bottom' \\| 'stretch'}`\n默认值: `top`\n版本: object: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Grid - Row的gutter属性如何使用？",
    "md": "参数: gutter\n说明: 栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 `[水平间距, 垂直间距]`\n类型: number | object | array\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Row的justify属性如何使用？",
    "md": "参数: justify\n说明: 水平排列方式\n类型: `start` | `end` | `center` | `space-around` | `space-between` | `space-evenly` | `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'start' \\| 'end' \\| 'center' \\| 'space-around' \\| 'space-between' \\| 'space-evenly'}`\n默认值: `start`\n版本: object: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Grid - Row的wrap属性如何使用？",
    "md": "参数: wrap\n说明: 是否自动换行\n类型: boolean\n默认值: true\n版本: 4.8.0\n"
  },
  {
    "title": "ant-design 的 Grid - Col 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| flex | flex 布局属性 | string | number | - | - |\n| offset | 栅格左侧的间隔格数，间隔内不可以有栅格 | number | 0 | - |\n| order | 栅格顺序 | number | 0 | - |\n| pull | 栅格向左移动格数 | number | 0 | - |\n| push | 栅格向右移动格数 | number | 0 | - |\n| span | 栅格占位格数，为 0 时相当于 `display: none` | number | - | - |\n| xs | `屏幕 < 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| sm | `屏幕 ≥ 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| md | `屏幕 ≥ 768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| lg | `屏幕 ≥ 992px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| xl | `屏幕 ≥ 1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n| xxl | `屏幕 ≥ 1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | object | - | - |\n"
  },
  {
    "title": "ant-design 中 Grid - Col的flex属性如何使用？",
    "md": "参数: flex\n说明: flex 布局属性\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的offset属性如何使用？",
    "md": "参数: offset\n说明: 栅格左侧的间隔格数，间隔内不可以有栅格\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的order属性如何使用？",
    "md": "参数: order\n说明: 栅格顺序\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的pull属性如何使用？",
    "md": "参数: pull\n说明: 栅格向左移动格数\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的push属性如何使用？",
    "md": "参数: push\n说明: 栅格向右移动格数\n类型: number\n默认值: 0\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的span属性如何使用？",
    "md": "参数: span\n说明: 栅格占位格数，为 0 时相当于 `display: none`\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的xs属性如何使用？",
    "md": "参数: xs\n说明: `屏幕 < 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象\n类型: number | object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的sm属性如何使用？",
    "md": "参数: sm\n说明: `屏幕 ≥ 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象\n类型: number | object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的md属性如何使用？",
    "md": "参数: md\n说明: `屏幕 ≥ 768px` 响应式栅格，可为栅格数或一个包含其他属性的对象\n类型: number | object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的lg属性如何使用？",
    "md": "参数: lg\n说明: `屏幕 ≥ 992px` 响应式栅格，可为栅格数或一个包含其他属性的对象\n类型: number | object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的xl属性如何使用？",
    "md": "参数: xl\n说明: `屏幕 ≥ 1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象\n类型: number | object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Grid - Col的xxl属性如何使用？",
    "md": "参数: xxl\n说明: `屏幕 ≥ 1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象\n类型: number | object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Form 有哪些配置？",
    "md": "#### Form - Form\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| colon | 配置 Form.Item 的 `colon` 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效) | boolean | true | - |\n| disabled | 设置表单组件禁用，仅对 antd 组件有效 | boolean | false | 4.21.0 |\n| component | 设置 Form 渲染元素，为 `false` 则不创建 DOM 节点 | ComponentType | false | form | - |\n| fields | 通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看[示例](#components-form-demo-global-state) | [FieldData](#fielddata)\\[] | - | - |\n| form | 经 `Form.useForm()` 创建的 form 控制实例，不提供时会自动创建 | [FormInstance](#forminstance) | - | - |\n| feedbackIcons | 当 `Form.Item` 有 `hasFeedback` 属性时可以自定义图标 | [FeedbackIcons](#feedbackicons) | - | 5.9.0 |\n| initialValues | 表单默认值，只有初始化以及重置时生效 | object | - | - |\n| labelAlign | label 标签的文本对齐方式 | `left` | `right` | `right` | - |\n| labelWrap | label 标签的文本换行方式 | boolean | false | 4.18.0 |\n| labelCol | label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}` | [object](/components/grid-cn#col) | - | - |\n| layout | 表单布局 | `horizontal` | `vertical` | `inline` | `horizontal` | - |\n| name | 表单名称，会作为表单字段 `id` 前缀使用 | string | - | - |\n| preserve | 当字段被删除时保留字段值。你可以通过 `getFieldsValue(true)` 来获取保留字段值 | boolean | true | 4.4.0 |\n| requiredMark | 必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置 | boolean | `optional` | ((label: ReactNode, info: { required: boolean }) => ReactNode) | true | `renderProps`: 5.9.0 |\n| scrollToFirstError | 提交失败自动滚动到第一个错误字段 | boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options) | false | - |\n| size | 设置字段组件的尺寸（仅限 antd 组件） | `small` | `middle` | `large` | - | - |\n| validateMessages | 验证提示模板，说明[见下](#validatemessages) | [ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134) | - | - |\n| validateTrigger | 统一设置字段触发验证的时机 | string | string\\[] | `onChange` | 4.3.0 |\n| variant | 表单内控件变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| wrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol | [object](/components/grid-cn#col) | - | - |\n| onFieldsChange | 字段更新时触发回调事件 | function(changedFields, allFields) | - | - |\n| onFinish | 提交表单且数据验证成功后回调事件 | function(values) | - | - |\n| onFinishFailed | 提交表单且数据验证失败后回调事件 | function({ values, errorFields, outOfDate }) | - | - |\n| onValuesChange | 字段值更新时触发回调事件 | function(changedValues, allValues) | - | - |\n#### Form - Form.Item\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| colon | 配合 `label` 属性使用，表示是否显示 `label` 后面的冒号 | boolean | true | - |\n| dependencies | 设置依赖字段，说明[见下](#dependencies) | [NamePath](#namepath)\\[] | - | - |\n| extra | 额外的提示信息，和 `help` 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 | ReactNode | - | - |\n| getValueFromEvent | 设置如何将 event 的值转换成字段值 | (..args: any\\[]) => any | - | - |\n| getValueProps | 为子元素添加额外的属性 (不建议通过 `getValueProps` 生成动态函数 prop，请直接将其传递给子组件) | (value: any) => Record\\<string, any> | - | 4.2.0 |\n| hasFeedback | 配合 `validateStatus` 属性使用，展示校验状态图标，建议只配合 Input 组件使用 此外，它还可以通过 Icons 属性获取反馈图标。 | boolean | { icons: [FeedbackIcons](#feedbackicons) } | false | icons: 5.9.0 |\n| help | 提示信息，如不设置，则会根据校验规则自动生成 | ReactNode | - | - |\n| hidden | 是否隐藏字段（依然会收集和校验字段） | boolean | false | 4.4.0 |\n| htmlFor | 设置子元素 label `htmlFor` 属性 | string | - | - |\n| initialValue | 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准 | string | - | 4.2.0 |\n| label | `label` 标签的文本 | ReactNode | - | - |\n| labelAlign | 标签文本对齐方式 | `left` | `right` | `right` | - |\n| labelCol | `label` 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`。你可以通过 Form 的 `labelCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准 | [object](/components/grid-cn#col) | - | - |\n| messageVariables | 默认验证字段的信息 | Record\\<string, string> | - | 4.7.0 |\n| name | 字段名，支持数组 | [NamePath](#namepath) | - | - |\n| normalize | 组件获取值后进行转换，再放入 Form 中。不支持异步 | (value, prevValue, prevValues) => any | - | - |\n| noStyle | 为 `true` 时不带样式，作为纯字段控件使用。当自身没有 `validateStatus` 而父元素存在有 `validateStatus` 的 Form.Item 会继承父元素的 `validateStatus` | boolean | false | - |\n| preserve | 当字段被删除时保留字段值 | boolean | true | 4.4.0 |\n| required | 必填样式设置。如不设置，则会根据校验规则自动生成 | boolean | false | - |\n| rules | 校验规则，设置字段的校验逻辑。点击[此处](#components-form-demo-basic)查看示例 | [Rule](#rule)\\[] | - | - |\n| shouldUpdate | 自定义字段更新逻辑，说明[见下](#shouldupdate) | boolean | (prevValue, curValue) => boolean | false | - |\n| tooltip | 配置提示信息 | ReactNode | [TooltipProps & { icon: ReactNode }](/components/tooltip-cn#api) | - | 4.7.0 |\n| trigger | 设置收集字段值变更的时机。点击[此处](#components-form-demo-customized-form-controls)查看示例 | string | `onChange` | - |\n| validateFirst | 当某一规则校验不通过时，是否停止剩下的规则的校验。设置 `parallel` 时会并行校验 | boolean | `parallel` | false | `parallel`: 4.5.0 |\n| validateDebounce | 设置防抖，延迟毫秒数后进行校验 | number | - | 5.9.0 |\n| validateStatus | 校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating' | string | - | - |\n| validateTrigger | 设置字段校验的时机 | string | string\\[] | `onChange` | - |\n| valuePropName | 子节点的值的属性，如 Switch、Checkbox 的是 `checked`。该属性为 `getValueProps` 的封装，自定义 `getValueProps` 后会失效 | string | `value` | - |\n| wrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 `labelCol`。你可以通过 Form 的 `wrapperCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准 | [object](/components/grid-cn#col) | - | - |\n#### Form - Form.List\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 渲染函数 | (fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode | - | - |\n| initialValue | 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准 | any\\[] | - | 4.9.0 |\n| name | 字段名，支持数组。List 本身也是字段，因而 `getFieldsValue()` 默认会返回 List 下所有值，你可以通过[参数](#getfieldsvalue)改变这一行为 | [NamePath](#namepath) | - | - |\n| rules | 校验规则，仅支持自定义规则。需要配合 [ErrorList](#formerrorlist) 一同使用。 | { validator, message }\\[] | - | 4.7.0 |\n#### Form - operation\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| add | 新增表单项 | (defaultValue?: any, insertIndex?: number) => void | insertIndex | 4.6.0 |\n| move | 移动表单项 | (from: number, to: number) => void | - | - |\n| remove | 删除表单项 | (index: number | number\\[]) => void | number\\[] | 4.5.0 |\n#### Form - Form.ErrorList\n| 参数   | 说明     | 类型         | 默认值 |\n| ------ | -------- | ------------ | ------ |\n| errors | 错误列表 | ReactNode\\[] | -      |\n#### Form - Form.Provider\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onFormChange | 子表单字段更新时触发 | function(formName: string, info: { changedFields, forms }) | - |\n| onFormFinish | 子表单提交时触发 | function(formName: string, info: { values, forms }) | - |\n#### Form - FormInstance\n| 名称 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| getFieldError | 获取对应字段名的错误信息 | (name: [NamePath](#namepath)) => string\\[] | - |\n| getFieldInstance | 获取对应字段实例 | (name: [NamePath](#namepath)) => any | 4.4.0 |\n| getFieldsError | 获取一组字段名对应的错误信息，返回为数组形式 | (nameList?: [NamePath](#namepath)\\[]) => FieldError\\[] | - |\n| getFieldsValue | 获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 `getFieldsValue(true)` 时返回所有值 | [GetFieldsValue](#getfieldsvalue) | - |\n| getFieldValue | 获取对应字段名的值 | (name: [NamePath](#namepath)) => any | - |\n| isFieldsTouched | 检查一组字段是否被用户操作过，`allTouched` 为 `true` 时检查是否所有字段都被操作过 | (nameList?: [NamePath](#namepath)\\[], allTouched?: boolean) => boolean | - |\n| isFieldTouched | 检查对应字段是否被用户操作过 | (name: [NamePath](#namepath)) => boolean | - |\n| isFieldValidating | 检查对应字段是否正在校验 | (name: [NamePath](#namepath)) => boolean | - |\n| resetFields | 重置一组字段到 `initialValues` | (fields?: [NamePath](#namepath)\\[]) => void | - |\n| scrollToField | 滚动到对应字段位置 | (name: [NamePath](#namepath), options: [ScrollOptions](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)) => void | - |\n| setFields | 设置一组字段状态 | (fields: [FieldData](#fielddata)\\[]) => void | - |\n| setFieldValue | 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入） | (name: [NamePath](#namepath), value: any) => void | 4.22.0 |\n| setFieldsValue | 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入）。如果你只想修改 Form.List 中单项值，请通过 `setFieldValue` 进行指定 | (values) => void | - |\n| submit | 提交表单，与点击 `submit` 按钮效果相同 | () => void | - |\n| validateFields | 触发表单验证，设置 `recursive` 时会递归校验所有包含的路径 | (nameList?: [NamePath](#namepath)\\[], config?: [ValidateConfig](#validateFields)) => Promise | - |\n#### Form - FieldData\n| 名称       | 说明             | 类型                     |\n| ---------- | ---------------- | ------------------------ |\n| errors     | 错误信息         | string\\[]                |\n| warnings   | 警告信息         | string\\[]                |\n| name       | 字段名称         | [NamePath](#namepath)\\[] |\n| touched    | 是否被用户操作过 | boolean                  |\n| validating | 是否正在校验     | boolean                  |\n| value      | 字段对应值       | any                      |\n#### Form - Rule\n| 名称 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| defaultField | 仅在 `type` 为 `array` 类型时有效，用于指定数组元素的校验规则 | [rule](#rule) | - |\n| enum | 是否匹配枚举中的值（需要将 `type` 设置为 `enum`） | any\\[] | - |\n| fields | 仅在 `type` 为 `array` 或 `object` 类型时有效，用于指定子元素的校验规则 | Record\\<string, [rule](#rule)> | - |\n| len | string 类型时为字符串长度；number 类型时为确定数字； array 类型时为数组长度 | number | - |\n| max | 必须设置 `type`：string 类型为字符串最大长度；number 类型时为最大值；array 类型时为数组最大长度 | number | - |\n| message | 错误信息，不设置时会通过[模板](#validatemessages)自动生成 | string | - |\n| min | 必须设置 `type`：string 类型为字符串最小长度；number 类型时为最小值；array 类型时为数组最小长度 | number | - |\n| pattern | 正则表达式匹配 | RegExp | - |\n| required | 是否为必选字段 | boolean | - |\n| transform | 将字段值转换成目标值后进行校验 | (value) => any | - |\n| type | 类型，常见有 `string` |`number` |`boolean` |`url` | `email`。更多请参考[此处](https://github.com/yiminghe/async-validator#type) | string | - |\n| validateTrigger | 设置触发验证时机，必须是 Form.Item 的 `validateTrigger` 的子集 | string | string\\[] | - |\n| validator | 自定义校验，接收 Promise 作为返回值。[示例](#components-form-demo-register)参考 | ([rule](#rule), value) => Promise | - |\n| warningOnly | 仅警告，不阻塞表单提交 | boolean | 4.17.0 |\n| whitespace | 如果字段仅包含空格则校验不通过，只在 `type: 'string'` 时生效 | boolean | - |\n#### Form - WatchOptions\n| 名称 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| form | 指定 Form 实例 | FormInstance | 当前 context 中的 Form | 5.4.0 |\n| preserve | 是否监视没有对应的 `Form.Item` 的字段 | boolean | false | 5.4.0 |\n"
  },
  {
    "title": "ant-design 的 Form - Form 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| colon | 配置 Form.Item 的 `colon` 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效) | boolean | true | - |\n| disabled | 设置表单组件禁用，仅对 antd 组件有效 | boolean | false | 4.21.0 |\n| component | 设置 Form 渲染元素，为 `false` 则不创建 DOM 节点 | ComponentType | false | form | - |\n| fields | 通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看[示例](#components-form-demo-global-state) | [FieldData](#fielddata)\\[] | - | - |\n| form | 经 `Form.useForm()` 创建的 form 控制实例，不提供时会自动创建 | [FormInstance](#forminstance) | - | - |\n| feedbackIcons | 当 `Form.Item` 有 `hasFeedback` 属性时可以自定义图标 | [FeedbackIcons](#feedbackicons) | - | 5.9.0 |\n| initialValues | 表单默认值，只有初始化以及重置时生效 | object | - | - |\n| labelAlign | label 标签的文本对齐方式 | `left` | `right` | `right` | - |\n| labelWrap | label 标签的文本换行方式 | boolean | false | 4.18.0 |\n| labelCol | label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}` | [object](/components/grid-cn#col) | - | - |\n| layout | 表单布局 | `horizontal` | `vertical` | `inline` | `horizontal` | - |\n| name | 表单名称，会作为表单字段 `id` 前缀使用 | string | - | - |\n| preserve | 当字段被删除时保留字段值。你可以通过 `getFieldsValue(true)` 来获取保留字段值 | boolean | true | 4.4.0 |\n| requiredMark | 必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置 | boolean | `optional` | ((label: ReactNode, info: { required: boolean }) => ReactNode) | true | `renderProps`: 5.9.0 |\n| scrollToFirstError | 提交失败自动滚动到第一个错误字段 | boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options) | false | - |\n| size | 设置字段组件的尺寸（仅限 antd 组件） | `small` | `middle` | `large` | - | - |\n| validateMessages | 验证提示模板，说明[见下](#validatemessages) | [ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134) | - | - |\n| validateTrigger | 统一设置字段触发验证的时机 | string | string\\[] | `onChange` | 4.3.0 |\n| variant | 表单内控件变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| wrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol | [object](/components/grid-cn#col) | - | - |\n| onFieldsChange | 字段更新时触发回调事件 | function(changedFields, allFields) | - | - |\n| onFinish | 提交表单且数据验证成功后回调事件 | function(values) | - | - |\n| onFinishFailed | 提交表单且数据验证失败后回调事件 | function({ values, errorFields, outOfDate }) | - | - |\n| onValuesChange | 字段值更新时触发回调事件 | function(changedValues, allValues) | - | - |\n"
  },
  {
    "title": "ant-design 中 Form - Form的colon属性如何使用？",
    "md": "参数: colon\n说明: 配置 Form.Item 的 `colon` 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效)\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 设置表单组件禁用，仅对 antd 组件有效\n类型: boolean\n默认值: false\n版本: 4.21.0\n"
  },
  {
    "title": "ant-design 中 Form - Form的component属性如何使用？",
    "md": "参数: component\n说明: 设置 Form 渲染元素，为 `false` 则不创建 DOM 节点\n类型: ComponentType | false\n默认值: form\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的fields属性如何使用？",
    "md": "参数: fields\n说明: 通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看[示例](#components-form-demo-global-state)\n类型: [FieldData](#fielddata)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的form属性如何使用？",
    "md": "参数: form\n说明: 经 `Form.useForm()` 创建的 form 控制实例，不提供时会自动创建\n类型: [FormInstance](#forminstance)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的feedbackIcons属性如何使用？",
    "md": "参数: feedbackIcons\n说明: 当 `Form.Item` 有 `hasFeedback` 属性时可以自定义图标\n类型: [FeedbackIcons](#feedbackicons)\n默认值: -\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Form - Form的initialValues属性如何使用？",
    "md": "参数: initialValues\n说明: 表单默认值，只有初始化以及重置时生效\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的labelAlign属性如何使用？",
    "md": "参数: labelAlign\n说明: label 标签的文本对齐方式\n类型: `left` | `right`\n默认值: `right`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的labelWrap属性如何使用？",
    "md": "参数: labelWrap\n说明: label 标签的文本换行方式\n类型: boolean\n默认值: false\n版本: 4.18.0\n"
  },
  {
    "title": "ant-design 中 Form - Form的labelCol属性如何使用？",
    "md": "参数: labelCol\n说明: label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`\n类型: [object](/components/grid-cn#col)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的layout属性如何使用？",
    "md": "参数: layout\n说明: 表单布局\n类型: `horizontal` | `vertical` | `inline`\n默认值: `horizontal`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的name属性如何使用？",
    "md": "参数: name\n说明: 表单名称，会作为表单字段 `id` 前缀使用\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的preserve属性如何使用？",
    "md": "参数: preserve\n说明: 当字段被删除时保留字段值。你可以通过 `getFieldsValue(true)` 来获取保留字段值\n类型: boolean\n默认值: true\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Form - Form的requiredMark属性如何使用？",
    "md": "参数: requiredMark\n说明: 必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置\n类型: boolean | `optional` | ((label: ReactNode, info: { required: boolean }) => ReactNode)\n默认值: true\n版本: `renderProps`: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Form - Form的scrollToFirstError属性如何使用？",
    "md": "参数: scrollToFirstError\n说明: 提交失败自动滚动到第一个错误字段\n类型: boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的size属性如何使用？",
    "md": "参数: size\n说明: 设置字段组件的尺寸（仅限 antd 组件）\n类型: `small` | `middle` | `large`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的validateMessages属性如何使用？",
    "md": "参数: validateMessages\n说明: 验证提示模板，说明[见下](#validatemessages)\n类型: [ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的validateTrigger属性如何使用？",
    "md": "参数: validateTrigger\n说明: 统一设置字段触发验证的时机\n类型: string | string\\[]\n默认值: `onChange`\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Form - Form的variant属性如何使用？",
    "md": "参数: variant\n说明: 表单内控件变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Form - Form的wrapperCol属性如何使用？",
    "md": "参数: wrapperCol\n说明: 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol\n类型: [object](/components/grid-cn#col)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的onFieldsChange属性如何使用？",
    "md": "参数: onFieldsChange\n说明: 字段更新时触发回调事件\n类型: function(changedFields, allFields)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的onFinish属性如何使用？",
    "md": "参数: onFinish\n说明: 提交表单且数据验证成功后回调事件\n类型: function(values)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的onFinishFailed属性如何使用？",
    "md": "参数: onFinishFailed\n说明: 提交表单且数据验证失败后回调事件\n类型: function({ values, errorFields, outOfDate })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form的onValuesChange属性如何使用？",
    "md": "参数: onValuesChange\n说明: 字段值更新时触发回调事件\n类型: function(changedValues, allValues)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Form - Form.Item 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| colon | 配合 `label` 属性使用，表示是否显示 `label` 后面的冒号 | boolean | true | - |\n| dependencies | 设置依赖字段，说明[见下](#dependencies) | [NamePath](#namepath)\\[] | - | - |\n| extra | 额外的提示信息，和 `help` 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 | ReactNode | - | - |\n| getValueFromEvent | 设置如何将 event 的值转换成字段值 | (..args: any\\[]) => any | - | - |\n| getValueProps | 为子元素添加额外的属性 (不建议通过 `getValueProps` 生成动态函数 prop，请直接将其传递给子组件) | (value: any) => Record\\<string, any> | - | 4.2.0 |\n| hasFeedback | 配合 `validateStatus` 属性使用，展示校验状态图标，建议只配合 Input 组件使用 此外，它还可以通过 Icons 属性获取反馈图标。 | boolean | { icons: [FeedbackIcons](#feedbackicons) } | false | icons: 5.9.0 |\n| help | 提示信息，如不设置，则会根据校验规则自动生成 | ReactNode | - | - |\n| hidden | 是否隐藏字段（依然会收集和校验字段） | boolean | false | 4.4.0 |\n| htmlFor | 设置子元素 label `htmlFor` 属性 | string | - | - |\n| initialValue | 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准 | string | - | 4.2.0 |\n| label | `label` 标签的文本 | ReactNode | - | - |\n| labelAlign | 标签文本对齐方式 | `left` | `right` | `right` | - |\n| labelCol | `label` 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`。你可以通过 Form 的 `labelCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准 | [object](/components/grid-cn#col) | - | - |\n| messageVariables | 默认验证字段的信息 | Record\\<string, string> | - | 4.7.0 |\n| name | 字段名，支持数组 | [NamePath](#namepath) | - | - |\n| normalize | 组件获取值后进行转换，再放入 Form 中。不支持异步 | (value, prevValue, prevValues) => any | - | - |\n| noStyle | 为 `true` 时不带样式，作为纯字段控件使用。当自身没有 `validateStatus` 而父元素存在有 `validateStatus` 的 Form.Item 会继承父元素的 `validateStatus` | boolean | false | - |\n| preserve | 当字段被删除时保留字段值 | boolean | true | 4.4.0 |\n| required | 必填样式设置。如不设置，则会根据校验规则自动生成 | boolean | false | - |\n| rules | 校验规则，设置字段的校验逻辑。点击[此处](#components-form-demo-basic)查看示例 | [Rule](#rule)\\[] | - | - |\n| shouldUpdate | 自定义字段更新逻辑，说明[见下](#shouldupdate) | boolean | (prevValue, curValue) => boolean | false | - |\n| tooltip | 配置提示信息 | ReactNode | [TooltipProps & { icon: ReactNode }](/components/tooltip-cn#api) | - | 4.7.0 |\n| trigger | 设置收集字段值变更的时机。点击[此处](#components-form-demo-customized-form-controls)查看示例 | string | `onChange` | - |\n| validateFirst | 当某一规则校验不通过时，是否停止剩下的规则的校验。设置 `parallel` 时会并行校验 | boolean | `parallel` | false | `parallel`: 4.5.0 |\n| validateDebounce | 设置防抖，延迟毫秒数后进行校验 | number | - | 5.9.0 |\n| validateStatus | 校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating' | string | - | - |\n| validateTrigger | 设置字段校验的时机 | string | string\\[] | `onChange` | - |\n| valuePropName | 子节点的值的属性，如 Switch、Checkbox 的是 `checked`。该属性为 `getValueProps` 的封装，自定义 `getValueProps` 后会失效 | string | `value` | - |\n| wrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 `labelCol`。你可以通过 Form 的 `wrapperCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准 | [object](/components/grid-cn#col) | - | - |\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的colon属性如何使用？",
    "md": "参数: colon\n说明: 配合 `label` 属性使用，表示是否显示 `label` 后面的冒号\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的dependencies属性如何使用？",
    "md": "参数: dependencies\n说明: 设置依赖字段，说明[见下](#dependencies)\n类型: [NamePath](#namepath)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的extra属性如何使用？",
    "md": "参数: extra\n说明: 额外的提示信息，和 `help` 类似，当需要错误信息和提示文案同时出现时，可以使用这个。\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的getValueFromEvent属性如何使用？",
    "md": "参数: getValueFromEvent\n说明: 设置如何将 event 的值转换成字段值\n类型: (..args: any\\[]) => any\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的getValueProps属性如何使用？",
    "md": "参数: getValueProps\n说明: 为子元素添加额外的属性 (不建议通过 `getValueProps` 生成动态函数 prop，请直接将其传递给子组件)\n类型: (value: any) => Record\\<string, any>\n默认值: -\n版本: 4.2.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的hasFeedback属性如何使用？",
    "md": "参数: hasFeedback\n说明: 配合 `validateStatus` 属性使用，展示校验状态图标，建议只配合 Input 组件使用 此外，它还可以通过 Icons 属性获取反馈图标。\n类型: boolean | { icons: [FeedbackIcons](#feedbackicons) }\n默认值: false\n版本: icons: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的help属性如何使用？",
    "md": "参数: help\n说明: 提示信息，如不设置，则会根据校验规则自动生成\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的hidden属性如何使用？",
    "md": "参数: hidden\n说明: 是否隐藏字段（依然会收集和校验字段）\n类型: boolean\n默认值: false\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的htmlFor属性如何使用？",
    "md": "参数: htmlFor\n说明: 设置子元素 label `htmlFor` 属性\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的initialValue属性如何使用？",
    "md": "参数: initialValue\n说明: 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准\n类型: string\n默认值: -\n版本: 4.2.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的label属性如何使用？",
    "md": "参数: label\n说明: `label` 标签的文本\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的labelAlign属性如何使用？",
    "md": "参数: labelAlign\n说明: 标签文本对齐方式\n类型: `left` | `right`\n默认值: `right`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的labelCol属性如何使用？",
    "md": "参数: labelCol\n说明: `label` 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`。你可以通过 Form 的 `labelCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准\n类型: [object](/components/grid-cn#col)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的messageVariables属性如何使用？",
    "md": "参数: messageVariables\n说明: 默认验证字段的信息\n类型: Record\\<string, string>\n默认值: -\n版本: 4.7.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的name属性如何使用？",
    "md": "参数: name\n说明: 字段名，支持数组\n类型: [NamePath](#namepath)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的normalize属性如何使用？",
    "md": "参数: normalize\n说明: 组件获取值后进行转换，再放入 Form 中。不支持异步\n类型: (value, prevValue, prevValues) => any\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的noStyle属性如何使用？",
    "md": "参数: noStyle\n说明: 为 `true` 时不带样式，作为纯字段控件使用。当自身没有 `validateStatus` 而父元素存在有 `validateStatus` 的 Form.Item 会继承父元素的 `validateStatus`\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的preserve属性如何使用？",
    "md": "参数: preserve\n说明: 当字段被删除时保留字段值\n类型: boolean\n默认值: true\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的required属性如何使用？",
    "md": "参数: required\n说明: 必填样式设置。如不设置，则会根据校验规则自动生成\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的rules属性如何使用？",
    "md": "参数: rules\n说明: 校验规则，设置字段的校验逻辑。点击[此处](#components-form-demo-basic)查看示例\n类型: [Rule](#rule)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的shouldUpdate属性如何使用？",
    "md": "参数: shouldUpdate\n说明: 自定义字段更新逻辑，说明[见下](#shouldupdate)\n类型: boolean | (prevValue, curValue) => boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 配置提示信息\n类型: ReactNode | [TooltipProps & { icon: ReactNode }](/components/tooltip-cn#api)\n默认值: -\n版本: 4.7.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 设置收集字段值变更的时机。点击[此处](#components-form-demo-customized-form-controls)查看示例\n类型: string\n默认值: `onChange`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的validateFirst属性如何使用？",
    "md": "参数: validateFirst\n说明: 当某一规则校验不通过时，是否停止剩下的规则的校验。设置 `parallel` 时会并行校验\n类型: boolean | `parallel`\n默认值: false\n版本: `parallel`: 4.5.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的validateDebounce属性如何使用？",
    "md": "参数: validateDebounce\n说明: 设置防抖，延迟毫秒数后进行校验\n类型: number\n默认值: -\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的validateStatus属性如何使用？",
    "md": "参数: validateStatus\n说明: 校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating'\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的validateTrigger属性如何使用？",
    "md": "参数: validateTrigger\n说明: 设置字段校验的时机\n类型: string | string\\[]\n默认值: `onChange`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的valuePropName属性如何使用？",
    "md": "参数: valuePropName\n说明: 子节点的值的属性，如 Switch、Checkbox 的是 `checked`。该属性为 `getValueProps` 的封装，自定义 `getValueProps` 后会失效\n类型: string\n默认值: `value`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Item的wrapperCol属性如何使用？",
    "md": "参数: wrapperCol\n说明: 需要为输入控件设置布局样式时，使用该属性，用法同 `labelCol`。你可以通过 Form 的 `wrapperCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准\n类型: [object](/components/grid-cn#col)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Form - Form.List 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 渲染函数 | (fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode | - | - |\n| initialValue | 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准 | any\\[] | - | 4.9.0 |\n| name | 字段名，支持数组。List 本身也是字段，因而 `getFieldsValue()` 默认会返回 List 下所有值，你可以通过[参数](#getfieldsvalue)改变这一行为 | [NamePath](#namepath) | - | - |\n| rules | 校验规则，仅支持自定义规则。需要配合 [ErrorList](#formerrorlist) 一同使用。 | { validator, message }\\[] | - | 4.7.0 |\n"
  },
  {
    "title": "ant-design 中 Form - Form.List的children属性如何使用？",
    "md": "参数: children\n说明: 渲染函数\n类型: (fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.List的initialValue属性如何使用？",
    "md": "参数: initialValue\n说明: 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准\n类型: any\\[]\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Form - Form.List的name属性如何使用？",
    "md": "参数: name\n说明: 字段名，支持数组。List 本身也是字段，因而 `getFieldsValue()` 默认会返回 List 下所有值，你可以通过[参数](#getfieldsvalue)改变这一行为\n类型: [NamePath](#namepath)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.List的rules属性如何使用？",
    "md": "参数: rules\n说明: 校验规则，仅支持自定义规则。需要配合 [ErrorList](#formerrorlist) 一同使用。\n类型: { validator, message }\\[]\n默认值: -\n版本: 4.7.0\n"
  },
  {
    "title": "ant-design 的 Form - operation 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| add | 新增表单项 | (defaultValue?: any, insertIndex?: number) => void | insertIndex | 4.6.0 |\n| move | 移动表单项 | (from: number, to: number) => void | - | - |\n| remove | 删除表单项 | (index: number | number\\[]) => void | number\\[] | 4.5.0 |\n"
  },
  {
    "title": "ant-design 中 Form - operation的add属性如何使用？",
    "md": "参数: add\n说明: 新增表单项\n类型: (defaultValue?: any, insertIndex?: number) => void\n默认值: insertIndex\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 中 Form - operation的move属性如何使用？",
    "md": "参数: move\n说明: 移动表单项\n类型: (from: number, to: number) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - operation的remove属性如何使用？",
    "md": "参数: remove\n说明: 删除表单项\n类型: (index: number | number\\[]) => void\n默认值: number\\[]\n版本: 4.5.0\n"
  },
  {
    "title": "ant-design 的 Form - Form.ErrorList 有哪些配置？",
    "md": "| 参数   | 说明     | 类型         | 默认值 |\n| ------ | -------- | ------------ | ------ |\n| errors | 错误列表 | ReactNode\\[] | -      |\n"
  },
  {
    "title": "ant-design 中 Form - Form.ErrorList的errors属性如何使用？",
    "md": "参数: errors\n说明: 错误列表\n类型: ReactNode\\[]\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Form - Form.Provider 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onFormChange | 子表单字段更新时触发 | function(formName: string, info: { changedFields, forms }) | - |\n| onFormFinish | 子表单提交时触发 | function(formName: string, info: { values, forms }) | - |\n"
  },
  {
    "title": "ant-design 中 Form - Form.Provider的onFormChange属性如何使用？",
    "md": "参数: onFormChange\n说明: 子表单字段更新时触发\n类型: function(formName: string, info: { changedFields, forms })\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Form - Form.Provider的onFormFinish属性如何使用？",
    "md": "参数: onFormFinish\n说明: 子表单提交时触发\n类型: function(formName: string, info: { values, forms })\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Form - FormInstance 有哪些配置？",
    "md": "| 名称 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| getFieldError | 获取对应字段名的错误信息 | (name: [NamePath](#namepath)) => string\\[] | - |\n| getFieldInstance | 获取对应字段实例 | (name: [NamePath](#namepath)) => any | 4.4.0 |\n| getFieldsError | 获取一组字段名对应的错误信息，返回为数组形式 | (nameList?: [NamePath](#namepath)\\[]) => FieldError\\[] | - |\n| getFieldsValue | 获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 `getFieldsValue(true)` 时返回所有值 | [GetFieldsValue](#getfieldsvalue) | - |\n| getFieldValue | 获取对应字段名的值 | (name: [NamePath](#namepath)) => any | - |\n| isFieldsTouched | 检查一组字段是否被用户操作过，`allTouched` 为 `true` 时检查是否所有字段都被操作过 | (nameList?: [NamePath](#namepath)\\[], allTouched?: boolean) => boolean | - |\n| isFieldTouched | 检查对应字段是否被用户操作过 | (name: [NamePath](#namepath)) => boolean | - |\n| isFieldValidating | 检查对应字段是否正在校验 | (name: [NamePath](#namepath)) => boolean | - |\n| resetFields | 重置一组字段到 `initialValues` | (fields?: [NamePath](#namepath)\\[]) => void | - |\n| scrollToField | 滚动到对应字段位置 | (name: [NamePath](#namepath), options: [ScrollOptions](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)) => void | - |\n| setFields | 设置一组字段状态 | (fields: [FieldData](#fielddata)\\[]) => void | - |\n| setFieldValue | 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入） | (name: [NamePath](#namepath), value: any) => void | 4.22.0 |\n| setFieldsValue | 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入）。如果你只想修改 Form.List 中单项值，请通过 `setFieldValue` 进行指定 | (values) => void | - |\n| submit | 提交表单，与点击 `submit` 按钮效果相同 | () => void | - |\n| validateFields | 触发表单验证，设置 `recursive` 时会递归校验所有包含的路径 | (nameList?: [NamePath](#namepath)\\[], config?: [ValidateConfig](#validateFields)) => Promise | - |\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的getFieldError属性如何使用？",
    "md": "名称: getFieldError\n说明: 获取对应字段名的错误信息\n类型: (name: [NamePath](#namepath)) => string\\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的getFieldInstance属性如何使用？",
    "md": "名称: getFieldInstance\n说明: 获取对应字段实例\n类型: (name: [NamePath](#namepath)) => any\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的getFieldsError属性如何使用？",
    "md": "名称: getFieldsError\n说明: 获取一组字段名对应的错误信息，返回为数组形式\n类型: (nameList?: [NamePath](#namepath)\\[]) => FieldError\\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的getFieldsValue属性如何使用？",
    "md": "名称: getFieldsValue\n说明: 获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 `getFieldsValue(true)` 时返回所有值\n类型: [GetFieldsValue](#getfieldsvalue)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的getFieldValue属性如何使用？",
    "md": "名称: getFieldValue\n说明: 获取对应字段名的值\n类型: (name: [NamePath](#namepath)) => any\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的isFieldsTouched属性如何使用？",
    "md": "名称: isFieldsTouched\n说明: 检查一组字段是否被用户操作过，`allTouched` 为 `true` 时检查是否所有字段都被操作过\n类型: (nameList?: [NamePath](#namepath)\\[], allTouched?: boolean) => boolean\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的isFieldTouched属性如何使用？",
    "md": "名称: isFieldTouched\n说明: 检查对应字段是否被用户操作过\n类型: (name: [NamePath](#namepath)) => boolean\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的isFieldValidating属性如何使用？",
    "md": "名称: isFieldValidating\n说明: 检查对应字段是否正在校验\n类型: (name: [NamePath](#namepath)) => boolean\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的resetFields属性如何使用？",
    "md": "名称: resetFields\n说明: 重置一组字段到 `initialValues`\n类型: (fields?: [NamePath](#namepath)\\[]) => void\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的scrollToField属性如何使用？",
    "md": "名称: scrollToField\n说明: 滚动到对应字段位置\n类型: (name: [NamePath](#namepath), options: [ScrollOptions](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)) => void\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的setFields属性如何使用？",
    "md": "名称: setFields\n说明: 设置一组字段状态\n类型: (fields: [FieldData](#fielddata)\\[]) => void\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的setFieldValue属性如何使用？",
    "md": "名称: setFieldValue\n说明: 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入）\n类型: (name: [NamePath](#namepath), value: any) => void\n版本: 4.22.0\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的setFieldsValue属性如何使用？",
    "md": "名称: setFieldsValue\n说明: 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入）。如果你只想修改 Form.List 中单项值，请通过 `setFieldValue` 进行指定\n类型: (values) => void\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的submit属性如何使用？",
    "md": "名称: submit\n说明: 提交表单，与点击 `submit` 按钮效果相同\n类型: () => void\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - FormInstance的validateFields属性如何使用？",
    "md": "名称: validateFields\n说明: 触发表单验证，设置 `recursive` 时会递归校验所有包含的路径\n类型: (nameList?: [NamePath](#namepath)\\[], config?: [ValidateConfig](#validateFields)) => Promise\n版本: -\n"
  },
  {
    "title": "ant-design 的 Form - FieldData 有哪些配置？",
    "md": "| 名称       | 说明             | 类型                     |\n| ---------- | ---------------- | ------------------------ |\n| errors     | 错误信息         | string\\[]                |\n| warnings   | 警告信息         | string\\[]                |\n| name       | 字段名称         | [NamePath](#namepath)\\[] |\n| touched    | 是否被用户操作过 | boolean                  |\n| validating | 是否正在校验     | boolean                  |\n| value      | 字段对应值       | any                      |\n"
  },
  {
    "title": "ant-design 中 Form - FieldData的errors属性如何使用？",
    "md": "名称: errors\n说明: 错误信息\n类型: string\\[]\n"
  },
  {
    "title": "ant-design 中 Form - FieldData的warnings属性如何使用？",
    "md": "名称: warnings\n说明: 警告信息\n类型: string\\[]\n"
  },
  {
    "title": "ant-design 中 Form - FieldData的name属性如何使用？",
    "md": "名称: name\n说明: 字段名称\n类型: [NamePath](#namepath)\\[]\n"
  },
  {
    "title": "ant-design 中 Form - FieldData的touched属性如何使用？",
    "md": "名称: touched\n说明: 是否被用户操作过\n类型: boolean\n"
  },
  {
    "title": "ant-design 中 Form - FieldData的validating属性如何使用？",
    "md": "名称: validating\n说明: 是否正在校验\n类型: boolean\n"
  },
  {
    "title": "ant-design 中 Form - FieldData的value属性如何使用？",
    "md": "名称: value\n说明: 字段对应值\n类型: any\n"
  },
  {
    "title": "ant-design 的 Form - Rule 有哪些配置？",
    "md": "| 名称 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| defaultField | 仅在 `type` 为 `array` 类型时有效，用于指定数组元素的校验规则 | [rule](#rule) | - |\n| enum | 是否匹配枚举中的值（需要将 `type` 设置为 `enum`） | any\\[] | - |\n| fields | 仅在 `type` 为 `array` 或 `object` 类型时有效，用于指定子元素的校验规则 | Record\\<string, [rule](#rule)> | - |\n| len | string 类型时为字符串长度；number 类型时为确定数字； array 类型时为数组长度 | number | - |\n| max | 必须设置 `type`：string 类型为字符串最大长度；number 类型时为最大值；array 类型时为数组最大长度 | number | - |\n| message | 错误信息，不设置时会通过[模板](#validatemessages)自动生成 | string | - |\n| min | 必须设置 `type`：string 类型为字符串最小长度；number 类型时为最小值；array 类型时为数组最小长度 | number | - |\n| pattern | 正则表达式匹配 | RegExp | - |\n| required | 是否为必选字段 | boolean | - |\n| transform | 将字段值转换成目标值后进行校验 | (value) => any | - |\n| type | 类型，常见有 `string` |`number` |`boolean` |`url` | `email`。更多请参考[此处](https://github.com/yiminghe/async-validator#type) | string | - |\n| validateTrigger | 设置触发验证时机，必须是 Form.Item 的 `validateTrigger` 的子集 | string | string\\[] | - |\n| validator | 自定义校验，接收 Promise 作为返回值。[示例](#components-form-demo-register)参考 | ([rule](#rule), value) => Promise | - |\n| warningOnly | 仅警告，不阻塞表单提交 | boolean | 4.17.0 |\n| whitespace | 如果字段仅包含空格则校验不通过，只在 `type: 'string'` 时生效 | boolean | - |\n"
  },
  {
    "title": "ant-design 中 Form - Rule的defaultField属性如何使用？",
    "md": "名称: defaultField\n说明: 仅在 `type` 为 `array` 类型时有效，用于指定数组元素的校验规则\n类型: [rule](#rule)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的enum属性如何使用？",
    "md": "名称: enum\n说明: 是否匹配枚举中的值（需要将 `type` 设置为 `enum`）\n类型: any\\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的fields属性如何使用？",
    "md": "名称: fields\n说明: 仅在 `type` 为 `array` 或 `object` 类型时有效，用于指定子元素的校验规则\n类型: Record\\<string, [rule](#rule)>\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的len属性如何使用？",
    "md": "名称: len\n说明: string 类型时为字符串长度；number 类型时为确定数字； array 类型时为数组长度\n类型: number\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的max属性如何使用？",
    "md": "名称: max\n说明: 必须设置 `type`：string 类型为字符串最大长度；number 类型时为最大值；array 类型时为数组最大长度\n类型: number\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的message属性如何使用？",
    "md": "名称: message\n说明: 错误信息，不设置时会通过[模板](#validatemessages)自动生成\n类型: string\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的min属性如何使用？",
    "md": "名称: min\n说明: 必须设置 `type`：string 类型为字符串最小长度；number 类型时为最小值；array 类型时为数组最小长度\n类型: number\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的pattern属性如何使用？",
    "md": "名称: pattern\n说明: 正则表达式匹配\n类型: RegExp\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的required属性如何使用？",
    "md": "名称: required\n说明: 是否为必选字段\n类型: boolean\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的transform属性如何使用？",
    "md": "名称: transform\n说明: 将字段值转换成目标值后进行校验\n类型: (value) => any\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的type属性如何使用？",
    "md": "名称: type\n说明: 类型，常见有 `string` |`number` |`boolean` |`url` | `email`。更多请参考[此处](https://github.com/yiminghe/async-validator#type)\n类型: string\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的validateTrigger属性如何使用？",
    "md": "名称: validateTrigger\n说明: 设置触发验证时机，必须是 Form.Item 的 `validateTrigger` 的子集\n类型: string | string\\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的validator属性如何使用？",
    "md": "名称: validator\n说明: 自定义校验，接收 Promise 作为返回值。[示例](#components-form-demo-register)参考\n类型: ([rule](#rule), value) => Promise\n版本: -\n"
  },
  {
    "title": "ant-design 中 Form - Rule的warningOnly属性如何使用？",
    "md": "名称: warningOnly\n说明: 仅警告，不阻塞表单提交\n类型: boolean\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Form - Rule的whitespace属性如何使用？",
    "md": "名称: whitespace\n说明: 如果字段仅包含空格则校验不通过，只在 `type: 'string'` 时生效\n类型: boolean\n版本: -\n"
  },
  {
    "title": "ant-design 的 Form - WatchOptions 有哪些配置？",
    "md": "| 名称 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| form | 指定 Form 实例 | FormInstance | 当前 context 中的 Form | 5.4.0 |\n| preserve | 是否监视没有对应的 `Form.Item` 的字段 | boolean | false | 5.4.0 |\n"
  },
  {
    "title": "ant-design 中 Form - WatchOptions的form属性如何使用？",
    "md": "名称: form\n说明: 指定 Form 实例\n类型: FormInstance\n默认值: 当前 context 中的 Form\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Form - WatchOptions的preserve属性如何使用？",
    "md": "名称: preserve\n说明: 是否监视没有对应的 `Form.Item` 的字段\n类型: boolean\n默认值: false\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 的 FloatButton 有哪些配置？",
    "md": "#### FloatButton - FloatButton\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| icon | 自定义图标 | ReactNode | - | - |\n| description | 文字及其它内容 | ReactNode | - | - |\n| tooltip | 气泡卡片的内容 | ReactNode | () => ReactNode | - | - |\n| type | 设置按钮类型 | `default` | `primary` | `default` | - |\n| shape | 设置按钮形状 | `circle` | `square` | `circle` | - |\n| onClick | 点击按钮时的回调 | (event) => void | - | - |\n| href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致 | string | - | - |\n| target | 相当于 a 标签的 target 属性，href 存在时生效 | string | - | - |\n| badge | 带徽标数字的悬浮按钮（不支持 `status` 以及相关属性） | [BadgeProps](/components/badge-cn#api) | - | 5.4.0 |\n#### FloatButton - FloatButton.Group\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| shape | 设置包含的 FloatButton 按钮形状 | `circle` | `square` | `circle` | - |\n| trigger | 触发方式（有触发方式为菜单模式） | `click` | `hover` | - | - |\n| open | 受控展开，需配合 trigger 一起使用 | boolean | - | - |\n| closeIcon | 自定义关闭按钮 | React.ReactNode | `<CloseOutlined />` | - |\n| onOpenChange | 展开收起时的回调，需配合 trigger 一起使用 | (open: boolean) => void | - | - |\n#### FloatButton - FloatButton.BackTop\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| duration | 回到顶部所需时间（ms） | number | 450 | - |\n| target | 设置需要监听其滚动事件的元素 | () => HTMLElement | () => window | - |\n| visibilityHeight | 滚动高度达到此参数值才出现 BackTop | number | 400 | - |\n| onClick | 点击按钮的回调函数 | () => void | - | - |\n"
  },
  {
    "title": "ant-design 的 FloatButton - FloatButton 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| icon | 自定义图标 | ReactNode | - | - |\n| description | 文字及其它内容 | ReactNode | - | - |\n| tooltip | 气泡卡片的内容 | ReactNode | () => ReactNode | - | - |\n| type | 设置按钮类型 | `default` | `primary` | `default` | - |\n| shape | 设置按钮形状 | `circle` | `square` | `circle` | - |\n| onClick | 点击按钮时的回调 | (event) => void | - | - |\n| href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致 | string | - | - |\n| target | 相当于 a 标签的 target 属性，href 存在时生效 | string | - | - |\n| badge | 带徽标数字的悬浮按钮（不支持 `status` 以及相关属性） | [BadgeProps](/components/badge-cn#api) | - | 5.4.0 |\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的description属性如何使用？",
    "md": "参数: description\n说明: 文字及其它内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的tooltip属性如何使用？",
    "md": "参数: tooltip\n说明: 气泡卡片的内容\n类型: ReactNode | () => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的type属性如何使用？",
    "md": "参数: type\n说明: 设置按钮类型\n类型: `default` | `primary`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的shape属性如何使用？",
    "md": "参数: shape\n说明: 设置按钮形状\n类型: `circle` | `square`\n默认值: `circle`\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击按钮时的回调\n类型: (event) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的href属性如何使用？",
    "md": "参数: href\n说明: 点击跳转的地址，指定此属性 button 的行为和 a 链接一致\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的target属性如何使用？",
    "md": "参数: target\n说明: 相当于 a 标签的 target 属性，href 存在时生效\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton的badge属性如何使用？",
    "md": "参数: badge\n说明: 带徽标数字的悬浮按钮（不支持 `status` 以及相关属性）\n类型: [BadgeProps](/components/badge-cn#api)\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 的 FloatButton - FloatButton.Group 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| shape | 设置包含的 FloatButton 按钮形状 | `circle` | `square` | `circle` | - |\n| trigger | 触发方式（有触发方式为菜单模式） | `click` | `hover` | - | - |\n| open | 受控展开，需配合 trigger 一起使用 | boolean | - | - |\n| closeIcon | 自定义关闭按钮 | React.ReactNode | `<CloseOutlined />` | - |\n| onOpenChange | 展开收起时的回调，需配合 trigger 一起使用 | (open: boolean) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.Group的shape属性如何使用？",
    "md": "参数: shape\n说明: 设置包含的 FloatButton 按钮形状\n类型: `circle` | `square`\n默认值: `circle`\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.Group的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 触发方式（有触发方式为菜单模式）\n类型: `click` | `hover`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.Group的open属性如何使用？",
    "md": "参数: open\n说明: 受控展开，需配合 trigger 一起使用\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.Group的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭按钮\n类型: React.ReactNode\n默认值: `<CloseOutlined />`\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.Group的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: 展开收起时的回调，需配合 trigger 一起使用\n类型: (open: boolean) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 FloatButton - FloatButton.BackTop 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| duration | 回到顶部所需时间（ms） | number | 450 | - |\n| target | 设置需要监听其滚动事件的元素 | () => HTMLElement | () => window | - |\n| visibilityHeight | 滚动高度达到此参数值才出现 BackTop | number | 400 | - |\n| onClick | 点击按钮的回调函数 | () => void | - | - |\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.BackTop的duration属性如何使用？",
    "md": "参数: duration\n说明: 回到顶部所需时间（ms）\n类型: number\n默认值: 450\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.BackTop的target属性如何使用？",
    "md": "参数: target\n说明: 设置需要监听其滚动事件的元素\n类型: () => HTMLElement\n默认值: () => window\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.BackTop的visibilityHeight属性如何使用？",
    "md": "参数: visibilityHeight\n说明: 滚动高度达到此参数值才出现 BackTop\n类型: number\n默认值: 400\n版本: -\n"
  },
  {
    "title": "ant-design 中 FloatButton - FloatButton.BackTop的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击按钮的回调函数\n类型: () => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Flex 有哪些配置？",
    "md": "#### Flex - Flex\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- | --- |\n| vertical | flex 主轴的方向是否垂直，使用 `flex-direction: column` | boolean | `false` |\n| wrap | 设置元素单行显示还是多行显示 | 参考 [flex-wrap](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap) | nowrap | - |\n| justify | 设置元素在主轴方向上的对齐方式 | 参考 [justify-content](https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content) | normal | - |\n| align | 设置元素在交叉轴方向上的对齐方式 | 参考 [align-items](https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items) | normal | - |\n| flex | flex CSS 简写属性 | 参考 [flex](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex) | normal | - |\n| gap | 设置网格之间的间隙 | `small` | `middle` | `large` | string | number | - | - |\n| component | 自定义元素类型 | React.ComponentType | `div` | - |\n"
  },
  {
    "title": "ant-design 的 Flex - Flex 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- | --- |\n| vertical | flex 主轴的方向是否垂直，使用 `flex-direction: column` | boolean | `false` |\n| wrap | 设置元素单行显示还是多行显示 | 参考 [flex-wrap](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap) | nowrap | - |\n| justify | 设置元素在主轴方向上的对齐方式 | 参考 [justify-content](https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content) | normal | - |\n| align | 设置元素在交叉轴方向上的对齐方式 | 参考 [align-items](https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items) | normal | - |\n| flex | flex CSS 简写属性 | 参考 [flex](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex) | normal | - |\n| gap | 设置网格之间的间隙 | `small` | `middle` | `large` | string | number | - | - |\n| component | 自定义元素类型 | React.ComponentType | `div` | - |\n"
  },
  {
    "title": "ant-design 中 Flex - Flex的vertical属性如何使用？",
    "md": "属性: vertical\n说明: flex 主轴的方向是否垂直，使用 `flex-direction: column`\n类型: boolean\n默认值: `false`\n"
  },
  {
    "title": "ant-design 中 Flex - Flex的wrap属性如何使用？",
    "md": "属性: wrap\n说明: 设置元素单行显示还是多行显示\n类型: 参考 [flex-wrap](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap)\n默认值: nowrap\n版本: -\n"
  },
  {
    "title": "ant-design 中 Flex - Flex的justify属性如何使用？",
    "md": "属性: justify\n说明: 设置元素在主轴方向上的对齐方式\n类型: 参考 [justify-content](https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content)\n默认值: normal\n版本: -\n"
  },
  {
    "title": "ant-design 中 Flex - Flex的align属性如何使用？",
    "md": "属性: align\n说明: 设置元素在交叉轴方向上的对齐方式\n类型: 参考 [align-items](https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items)\n默认值: normal\n版本: -\n"
  },
  {
    "title": "ant-design 中 Flex - Flex的flex属性如何使用？",
    "md": "属性: flex\n说明: flex CSS 简写属性\n类型: 参考 [flex](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex)\n默认值: normal\n版本: -\n"
  },
  {
    "title": "ant-design 中 Flex - Flex的gap属性如何使用？",
    "md": "属性: gap\n说明: 设置网格之间的间隙\n类型: `small` | `middle` | `large` | string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Flex - Flex的component属性如何使用？",
    "md": "属性: component\n说明: 自定义元素类型\n类型: React.ComponentType\n默认值: `div`\n版本: -\n"
  },
  {
    "title": "ant-design 的 Empty 有哪些配置？",
    "md": "#### Empty - Empty\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 自定义描述内容 | ReactNode | - | - |\n| image | 设置显示图片，为 string 时表示自定义图片地址。 | ReactNode | `Empty.PRESENTED_IMAGE_DEFAULT` | - |\n| imageStyle | 图片样式 | CSSProperties | - | - |\n"
  },
  {
    "title": "ant-design 的 Empty - Empty 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 自定义描述内容 | ReactNode | - | - |\n| image | 设置显示图片，为 string 时表示自定义图片地址。 | ReactNode | `Empty.PRESENTED_IMAGE_DEFAULT` | - |\n| imageStyle | 图片样式 | CSSProperties | - | - |\n"
  },
  {
    "title": "ant-design 中 Empty - Empty的description属性如何使用？",
    "md": "参数: description\n说明: 自定义描述内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Empty - Empty的image属性如何使用？",
    "md": "参数: image\n说明: 设置显示图片，为 string 时表示自定义图片地址。\n类型: ReactNode\n默认值: `Empty.PRESENTED_IMAGE_DEFAULT`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Empty - Empty的imageStyle属性如何使用？",
    "md": "参数: imageStyle\n说明: 图片样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Dropdown 有哪些配置？",
    "md": "#### Dropdown - Dropdown\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| arrow | 下拉框箭头是否显示 | boolean | { pointAtCenter: boolean } | false | - |\n| autoAdjustOverflow | 下拉框被遮挡时自动调整位置 | boolean | true | 5.2.0 |\n| autoFocus | 打开后自动聚焦下拉框 | boolean | false | 4.21.0 |\n| disabled | 菜单是否禁用 | boolean | - | - |\n| destroyPopupOnHide | 关闭后是否销毁 Dropdown | boolean | false | - |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | (triggerNode: HTMLElement) => HTMLElement | () => document.body | - |\n| menu | 菜单配置项 | [MenuProps](/components/menu-cn#api) | - | 4.24.0 |\n| overlayClassName | 下拉根元素的类名称 | string | - | - |\n| overlayStyle | 下拉根元素的样式 | CSSProperties | - | - |\n| placement | 菜单弹出位置：`bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight` | string | `bottomLeft` | - |\n| trigger | 触发下拉的行为，移动端不支持 hover | Array<`click`|`hover`|`contextMenu`> | \\[`hover`] | - |\n| open | 菜单是否显示，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | boolean | - | 4.23.0 |\n| onOpenChange | 菜单显示状态改变时调用，点击菜单按钮导致的消失不会触发。小于 4.23.0 使用 `onVisibleChange`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | (open: boolean, info: { source: 'trigger' | 'menu' }) => void | - | `info.source`: 5.11.0 |\n#### Dropdown - Dropdown.Button\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| buttonsRender | 自定义左右两个按钮 | (buttons: ReactNode\\[]) => ReactNode\\[] | - | - |\n| loading | 设置按钮载入状态 | boolean | { delay: number } | false | - |\n| danger | 设置危险按钮 | boolean | - | 4.23.0 |\n| icon | 右侧的 icon | ReactNode | - | - |\n| size | 按钮大小，和 [Button](/components/button-cn#api) 一致 | string | `default` | - |\n| type | 按钮类型，和 [Button](/components/button-cn#api) 一致 | string | `default` | - |\n| onClick | 点击左侧按钮的回调，和 [Button](/components/button-cn#api) 一致 | (event) => void | - | - |\n"
  },
  {
    "title": "ant-design 的 Dropdown - Dropdown 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| arrow | 下拉框箭头是否显示 | boolean | { pointAtCenter: boolean } | false | - |\n| autoAdjustOverflow | 下拉框被遮挡时自动调整位置 | boolean | true | 5.2.0 |\n| autoFocus | 打开后自动聚焦下拉框 | boolean | false | 4.21.0 |\n| disabled | 菜单是否禁用 | boolean | - | - |\n| destroyPopupOnHide | 关闭后是否销毁 Dropdown | boolean | false | - |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | (triggerNode: HTMLElement) => HTMLElement | () => document.body | - |\n| menu | 菜单配置项 | [MenuProps](/components/menu-cn#api) | - | 4.24.0 |\n| overlayClassName | 下拉根元素的类名称 | string | - | - |\n| overlayStyle | 下拉根元素的样式 | CSSProperties | - | - |\n| placement | 菜单弹出位置：`bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight` | string | `bottomLeft` | - |\n| trigger | 触发下拉的行为，移动端不支持 hover | Array<`click`|`hover`|`contextMenu`> | \\[`hover`] | - |\n| open | 菜单是否显示，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | boolean | - | 4.23.0 |\n| onOpenChange | 菜单显示状态改变时调用，点击菜单按钮导致的消失不会触发。小于 4.23.0 使用 `onVisibleChange`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | (open: boolean, info: { source: 'trigger' | 'menu' }) => void | - | `info.source`: 5.11.0 |\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的arrow属性如何使用？",
    "md": "参数: arrow\n说明: 下拉框箭头是否显示\n类型: boolean | { pointAtCenter: boolean }\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的autoAdjustOverflow属性如何使用？",
    "md": "参数: autoAdjustOverflow\n说明: 下拉框被遮挡时自动调整位置\n类型: boolean\n默认值: true\n版本: 5.2.0\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 打开后自动聚焦下拉框\n类型: boolean\n默认值: false\n版本: 4.21.0\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 菜单是否禁用\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的destroyPopupOnHide属性如何使用？",
    "md": "参数: destroyPopupOnHide\n说明: 关闭后是否销毁 Dropdown\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的dropdownRender属性如何使用？",
    "md": "参数: dropdownRender\n说明: 自定义下拉框内容\n类型: (menus: ReactNode) => ReactNode\n默认值: -\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)\n类型: (triggerNode: HTMLElement) => HTMLElement\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的menu属性如何使用？",
    "md": "参数: menu\n说明: 菜单配置项\n类型: [MenuProps](/components/menu-cn#api)\n默认值: -\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的overlayClassName属性如何使用？",
    "md": "参数: overlayClassName\n说明: 下拉根元素的类名称\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的overlayStyle属性如何使用？",
    "md": "参数: overlayStyle\n说明: 下拉根元素的样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的placement属性如何使用？",
    "md": "参数: placement\n说明: 菜单弹出位置：`bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight`\n类型: string\n默认值: `bottomLeft`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 触发下拉的行为，移动端不支持 hover\n类型: Array<`click`|`hover`|`contextMenu`>\n默认值: \\[`hover`]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的open属性如何使用？",
    "md": "参数: open\n说明: 菜单是否显示，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）\n类型: boolean\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: 菜单显示状态改变时调用，点击菜单按钮导致的消失不会触发。小于 4.23.0 使用 `onVisibleChange`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）\n类型: (open: boolean, info: { source: 'trigger' | 'menu' }) => void\n默认值: -\n版本: `info.source`: 5.11.0\n"
  },
  {
    "title": "ant-design 的 Dropdown - Dropdown.Button 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| buttonsRender | 自定义左右两个按钮 | (buttons: ReactNode\\[]) => ReactNode\\[] | - | - |\n| loading | 设置按钮载入状态 | boolean | { delay: number } | false | - |\n| danger | 设置危险按钮 | boolean | - | 4.23.0 |\n| icon | 右侧的 icon | ReactNode | - | - |\n| size | 按钮大小，和 [Button](/components/button-cn#api) 一致 | string | `default` | - |\n| type | 按钮类型，和 [Button](/components/button-cn#api) 一致 | string | `default` | - |\n| onClick | 点击左侧按钮的回调，和 [Button](/components/button-cn#api) 一致 | (event) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown.Button的buttonsRender属性如何使用？",
    "md": "参数: buttonsRender\n说明: 自定义左右两个按钮\n类型: (buttons: ReactNode\\[]) => ReactNode\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown.Button的loading属性如何使用？",
    "md": "参数: loading\n说明: 设置按钮载入状态\n类型: boolean | { delay: number }\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown.Button的danger属性如何使用？",
    "md": "参数: danger\n说明: 设置危险按钮\n类型: boolean\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown.Button的icon属性如何使用？",
    "md": "参数: icon\n说明: 右侧的 icon\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown.Button的size属性如何使用？",
    "md": "参数: size\n说明: 按钮大小，和 [Button](/components/button-cn#api) 一致\n类型: string\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown.Button的type属性如何使用？",
    "md": "参数: type\n说明: 按钮类型，和 [Button](/components/button-cn#api) 一致\n类型: string\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Dropdown - Dropdown.Button的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 点击左侧按钮的回调，和 [Button](/components/button-cn#api) 一致\n类型: (event) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Drawer 有哪些配置？",
    "md": "#### Drawer - Drawer\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 抽屉展开后是否将焦点切换至其 Dom 节点 | boolean | true | 4.17.0 |\n| afterOpenChange | 切换抽屉时动画结束后的回调 | function(open) | - | - |\n| className | Drawer 容器外层 className 设置，如果需要设置最外层，请使用 rootClassName | string | - | - |\n| classNames | 语义化结构 className | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.10.0 |\n| closeIcon | 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | \\<CloseOutlined /> | - |\n| destroyOnClose | 关闭时销毁 Drawer 里的子元素 | boolean | false | - |\n| extra | 抽屉右上角的操作区域 | ReactNode | - | 4.17.0 |\n| footer | 抽屉的页脚 | ReactNode | - | - |\n| forceRender | 预渲染 Drawer 内元素 | boolean | false | - |\n| getContainer | 指定 Drawer 挂载的节点，**并在容器内展现**，`false` 为挂载在当前位置 | HTMLElement | () => HTMLElement | Selectors | false | body | - |\n| height | 高度，在 `placement` 为 `top` 或 `bottom` 时使用 | string | number | 378 | - |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true | - |\n| mask | 是否展示遮罩 | boolean | true | - |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | true | - |\n| placement | 抽屉的方向 | `top` | `right` | `bottom` | `left` | `right` | - |\n| push | 用于设置多层 Drawer 的推动行为 | boolean | { distance: string | number } | { distance: 180 } | 4.5.0+ |\n| rootStyle | 可用于设置 Drawer 最外层容器的样式，和 `style` 的区别是作用节点包括 `mask` | CSSProperties | - | - |\n| size | 预设抽屉宽度（或高度），default `378px` 和 large `736px` | 'default' | 'large' | 'default' | 4.17.0 |\n| style | 设计 Drawer 容器样式，如果你只需要设置内容部分请使用 `bodyStyle` | CSSProperties | - | - |\n| styles | 语义化结构 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | 5.10.0 |\n| title | 标题 | ReactNode | - | - |\n| open | Drawer 是否可见 | boolean | - |\n| width | 宽度 | string | number | 378 | - |\n| zIndex | 设置 Drawer 的 `z-index` | number | 1000 | - |\n| onClose | 点击遮罩层或左上角叉或取消按钮的回调 | function(e) | - | - |\n"
  },
  {
    "title": "ant-design 的 Drawer - Drawer 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 抽屉展开后是否将焦点切换至其 Dom 节点 | boolean | true | 4.17.0 |\n| afterOpenChange | 切换抽屉时动画结束后的回调 | function(open) | - | - |\n| className | Drawer 容器外层 className 设置，如果需要设置最外层，请使用 rootClassName | string | - | - |\n| classNames | 语义化结构 className | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.10.0 |\n| closeIcon | 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | \\<CloseOutlined /> | - |\n| destroyOnClose | 关闭时销毁 Drawer 里的子元素 | boolean | false | - |\n| extra | 抽屉右上角的操作区域 | ReactNode | - | 4.17.0 |\n| footer | 抽屉的页脚 | ReactNode | - | - |\n| forceRender | 预渲染 Drawer 内元素 | boolean | false | - |\n| getContainer | 指定 Drawer 挂载的节点，**并在容器内展现**，`false` 为挂载在当前位置 | HTMLElement | () => HTMLElement | Selectors | false | body | - |\n| height | 高度，在 `placement` 为 `top` 或 `bottom` 时使用 | string | number | 378 | - |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true | - |\n| mask | 是否展示遮罩 | boolean | true | - |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | true | - |\n| placement | 抽屉的方向 | `top` | `right` | `bottom` | `left` | `right` | - |\n| push | 用于设置多层 Drawer 的推动行为 | boolean | { distance: string | number } | { distance: 180 } | 4.5.0+ |\n| rootStyle | 可用于设置 Drawer 最外层容器的样式，和 `style` 的区别是作用节点包括 `mask` | CSSProperties | - | - |\n| size | 预设抽屉宽度（或高度），default `378px` 和 large `736px` | 'default' | 'large' | 'default' | 4.17.0 |\n| style | 设计 Drawer 容器样式，如果你只需要设置内容部分请使用 `bodyStyle` | CSSProperties | - | - |\n| styles | 语义化结构 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | 5.10.0 |\n| title | 标题 | ReactNode | - | - |\n| open | Drawer 是否可见 | boolean | - |\n| width | 宽度 | string | number | 378 | - |\n| zIndex | 设置 Drawer 的 `z-index` | number | 1000 | - |\n| onClose | 点击遮罩层或左上角叉或取消按钮的回调 | function(e) | - | - |\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 抽屉展开后是否将焦点切换至其 Dom 节点\n类型: boolean\n默认值: true\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的afterOpenChange属性如何使用？",
    "md": "参数: afterOpenChange\n说明: 切换抽屉时动画结束后的回调\n类型: function(open)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的className属性如何使用？",
    "md": "参数: className\n说明: Drawer 容器外层 className 设置，如果需要设置最外层，请使用 rootClassName\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 语义化结构 className\n类型: [Record\\<SemanticDOM, string>](#semantic-dom)\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮\n类型: ReactNode\n默认值: \\<CloseOutlined />\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的destroyOnClose属性如何使用？",
    "md": "参数: destroyOnClose\n说明: 关闭时销毁 Drawer 里的子元素\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的extra属性如何使用？",
    "md": "参数: extra\n说明: 抽屉右上角的操作区域\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的footer属性如何使用？",
    "md": "参数: footer\n说明: 抽屉的页脚\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的forceRender属性如何使用？",
    "md": "参数: forceRender\n说明: 预渲染 Drawer 内元素\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 指定 Drawer 挂载的节点，**并在容器内展现**，`false` 为挂载在当前位置\n类型: HTMLElement | () => HTMLElement | Selectors | false\n默认值: body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的height属性如何使用？",
    "md": "参数: height\n说明: 高度，在 `placement` 为 `top` 或 `bottom` 时使用\n类型: string | number\n默认值: 378\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的keyboard属性如何使用？",
    "md": "参数: keyboard\n说明: 是否支持键盘 esc 关闭\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的mask属性如何使用？",
    "md": "参数: mask\n说明: 是否展示遮罩\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的maskClosable属性如何使用？",
    "md": "参数: maskClosable\n说明: 点击蒙层是否允许关闭\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的placement属性如何使用？",
    "md": "参数: placement\n说明: 抽屉的方向\n类型: `top` | `right` | `bottom` | `left`\n默认值: `right`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的push属性如何使用？",
    "md": "参数: push\n说明: 用于设置多层 Drawer 的推动行为\n类型: boolean | { distance: string | number }\n默认值: { distance: 180 }\n版本: 4.5.0+\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的rootStyle属性如何使用？",
    "md": "参数: rootStyle\n说明: 可用于设置 Drawer 最外层容器的样式，和 `style` 的区别是作用节点包括 `mask`\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的size属性如何使用？",
    "md": "参数: size\n说明: 预设抽屉宽度（或高度），default `378px` 和 large `736px`\n类型: 'default' | 'large'\n默认值: 'default'\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的style属性如何使用？",
    "md": "参数: style\n说明: 设计 Drawer 容器样式，如果你只需要设置内容部分请使用 `bodyStyle`\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的styles属性如何使用？",
    "md": "参数: styles\n说明: 语义化结构 style\n类型: [Record\\<SemanticDOM, CSSProperties>](#semantic-dom)\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的title属性如何使用？",
    "md": "参数: title\n说明: 标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的open属性如何使用？",
    "md": "参数: open\n说明: Drawer 是否可见\n类型: boolean\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的width属性如何使用？",
    "md": "参数: width\n说明: 宽度\n类型: string | number\n默认值: 378\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的zIndex属性如何使用？",
    "md": "参数: zIndex\n说明: 设置 Drawer 的 `z-index`\n类型: number\n默认值: 1000\n版本: -\n"
  },
  {
    "title": "ant-design 中 Drawer - Drawer的onClose属性如何使用？",
    "md": "参数: onClose\n说明: 点击遮罩层或左上角叉或取消按钮的回调\n类型: function(e)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Divider 有哪些配置？",
    "md": "#### Divider - Divider\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 嵌套的标题 | ReactNode | - | - |\n| className | 分割线样式类 | string | - | - |\n| dashed | 是否虚线 | boolean | false | - |\n| orientation | 分割线标题的位置 | `left` | `right` | `center` | `center` | - |\n| orientationMargin | 标题和最近 left/right 边框之间的距离，去除了分割线，同时 `orientation` 必须为 `left` 或 `right`。如果传入 `string` 类型的数字且不带单位，默认单位是 px | string | number | - | - |\n| plain | 文字是否显示为普通正文样式 | boolean | false | 4.2.0 |\n| style | 分割线样式对象 | CSSProperties | - | - |\n| type | 水平还是垂直类型 | `horizontal` | `vertical` | `horizontal` | - |\n"
  },
  {
    "title": "ant-design 的 Divider - Divider 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 嵌套的标题 | ReactNode | - | - |\n| className | 分割线样式类 | string | - | - |\n| dashed | 是否虚线 | boolean | false | - |\n| orientation | 分割线标题的位置 | `left` | `right` | `center` | `center` | - |\n| orientationMargin | 标题和最近 left/right 边框之间的距离，去除了分割线，同时 `orientation` 必须为 `left` 或 `right`。如果传入 `string` 类型的数字且不带单位，默认单位是 px | string | number | - | - |\n| plain | 文字是否显示为普通正文样式 | boolean | false | 4.2.0 |\n| style | 分割线样式对象 | CSSProperties | - | - |\n| type | 水平还是垂直类型 | `horizontal` | `vertical` | `horizontal` | - |\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的children属性如何使用？",
    "md": "参数: children\n说明: 嵌套的标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的className属性如何使用？",
    "md": "参数: className\n说明: 分割线样式类\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的dashed属性如何使用？",
    "md": "参数: dashed\n说明: 是否虚线\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的orientation属性如何使用？",
    "md": "参数: orientation\n说明: 分割线标题的位置\n类型: `left` | `right` | `center`\n默认值: `center`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的orientationMargin属性如何使用？",
    "md": "参数: orientationMargin\n说明: 标题和最近 left/right 边框之间的距离，去除了分割线，同时 `orientation` 必须为 `left` 或 `right`。如果传入 `string` 类型的数字且不带单位，默认单位是 px\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的plain属性如何使用？",
    "md": "参数: plain\n说明: 文字是否显示为普通正文样式\n类型: boolean\n默认值: false\n版本: 4.2.0\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的style属性如何使用？",
    "md": "参数: style\n说明: 分割线样式对象\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Divider - Divider的type属性如何使用？",
    "md": "参数: type\n说明: 水平还是垂直类型\n类型: `horizontal` | `vertical`\n默认值: `horizontal`\n版本: -\n"
  },
  {
    "title": "ant-design 的 Descriptions 有哪些配置？",
    "md": "#### Descriptions - Descriptions\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示边框 | boolean | false | - |\n| colon | 配置 `Descriptions.Item` 的 `colon` 的默认值 | boolean | true | - |\n| column | 一行的 `DescriptionItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}` | number | [Record\\<Breakpoint, number>](https://github.com/ant-design/ant-design/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56) | 3 | - |\n| contentStyle | 自定义内容样式 | CSSProperties | - | 4.10.0 |\n| extra | 描述列表的操作区域，显示在右上方 | ReactNode | - | 4.5.0 |\n| items | 描述列表项内容 | [DescriptionsItem](#descriptionitem)\\[] | - | 5.8.0 |\n| labelStyle | 自定义标签样式 | CSSProperties | - | 4.10.0 |\n| layout | 描述布局 | `horizontal` | `vertical` | `horizontal` | - |\n| size | 设置列表的大小。可以设置为 `middle` 、`small`, 或不填（只有设置 `bordered={true}` 生效） | `default` | `middle` | `small` | - | - |\n| title | 描述列表的标题，显示在最顶部 | ReactNode | - | - |\n#### Descriptions - DescriptionItem\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| contentStyle | 自定义内容样式 | CSSProperties | - | 4.9.0 |\n| label | 内容的描述 | ReactNode | - | - |\n| labelStyle | 自定义标签样式 | CSSProperties | - | 4.9.0 |\n| span | 包含列的数量 | number | [Screens](/components/grid#col) | 1 | `screens: 5.9.0` |\n"
  },
  {
    "title": "ant-design 的 Descriptions - Descriptions 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示边框 | boolean | false | - |\n| colon | 配置 `Descriptions.Item` 的 `colon` 的默认值 | boolean | true | - |\n| column | 一行的 `DescriptionItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}` | number | [Record\\<Breakpoint, number>](https://github.com/ant-design/ant-design/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56) | 3 | - |\n| contentStyle | 自定义内容样式 | CSSProperties | - | 4.10.0 |\n| extra | 描述列表的操作区域，显示在右上方 | ReactNode | - | 4.5.0 |\n| items | 描述列表项内容 | [DescriptionsItem](#descriptionitem)\\[] | - | 5.8.0 |\n| labelStyle | 自定义标签样式 | CSSProperties | - | 4.10.0 |\n| layout | 描述布局 | `horizontal` | `vertical` | `horizontal` | - |\n| size | 设置列表的大小。可以设置为 `middle` 、`small`, 或不填（只有设置 `bordered={true}` 生效） | `default` | `middle` | `small` | - | - |\n| title | 描述列表的标题，显示在最顶部 | ReactNode | - | - |\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否展示边框\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的colon属性如何使用？",
    "md": "参数: colon\n说明: 配置 `Descriptions.Item` 的 `colon` 的默认值\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的column属性如何使用？",
    "md": "参数: column\n说明: 一行的 `DescriptionItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`\n类型: number | [Record\\<Breakpoint, number>](https://github.com/ant-design/ant-design/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56)\n默认值: 3\n版本: -\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的contentStyle属性如何使用？",
    "md": "参数: contentStyle\n说明: 自定义内容样式\n类型: CSSProperties\n默认值: -\n版本: 4.10.0\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的extra属性如何使用？",
    "md": "参数: extra\n说明: 描述列表的操作区域，显示在右上方\n类型: ReactNode\n默认值: -\n版本: 4.5.0\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的items属性如何使用？",
    "md": "参数: items\n说明: 描述列表项内容\n类型: [DescriptionsItem](#descriptionitem)\\[]\n默认值: -\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的labelStyle属性如何使用？",
    "md": "参数: labelStyle\n说明: 自定义标签样式\n类型: CSSProperties\n默认值: -\n版本: 4.10.0\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的layout属性如何使用？",
    "md": "参数: layout\n说明: 描述布局\n类型: `horizontal` | `vertical`\n默认值: `horizontal`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的size属性如何使用？",
    "md": "参数: size\n说明: 设置列表的大小。可以设置为 `middle` 、`small`, 或不填（只有设置 `bordered={true}` 生效）\n类型: `default` | `middle` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Descriptions - Descriptions的title属性如何使用？",
    "md": "参数: title\n说明: 描述列表的标题，显示在最顶部\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Descriptions - DescriptionItem 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| contentStyle | 自定义内容样式 | CSSProperties | - | 4.9.0 |\n| label | 内容的描述 | ReactNode | - | - |\n| labelStyle | 自定义标签样式 | CSSProperties | - | 4.9.0 |\n| span | 包含列的数量 | number | [Screens](/components/grid#col) | 1 | `screens: 5.9.0` |\n"
  },
  {
    "title": "ant-design 中 Descriptions - DescriptionItem的contentStyle属性如何使用？",
    "md": "参数: contentStyle\n说明: 自定义内容样式\n类型: CSSProperties\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Descriptions - DescriptionItem的label属性如何使用？",
    "md": "参数: label\n说明: 内容的描述\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Descriptions - DescriptionItem的labelStyle属性如何使用？",
    "md": "参数: labelStyle\n说明: 自定义标签样式\n类型: CSSProperties\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Descriptions - DescriptionItem的span属性如何使用？",
    "md": "参数: span\n说明: 包含列的数量\n类型: number | [Screens](/components/grid#col)\n默认值: 1\n版本: `screens: 5.9.0`\n"
  },
  {
    "title": "ant-design 的 DatePicker 有哪些配置？",
    "md": "#### DatePicker - DatePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | true | 5.8.0: 支持对象类型 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| className | 选择器 className | string | - | - |\n| dateRender | 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替 | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| components | 自定义面板 | Record\\<Panel | 'input', React.ComponentType> | - | 5.14.0 |\n| disabled | 禁用 | boolean | false | - |\n| disabledDate | 不可选择的日期 | (currentDate: dayjs, info: { from?: dayjs }) => boolean | - | `info`: 5.14.0 |\n| format | 设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。示例：[自定义格式](#components-date-picker-demo-format) | [formatType](#formattype) | [rc-picker](https://github.com/react-component/picker/blob/f512f18ed59d6791280d1c3d7d37abbb9867eb0b/src/utils/uiUtil.ts#L155-L177) | - |\n| order | 多选、范围时是否自动排序 | boolean | true | 5.14.0 |\n| preserveInvalidOnBlur | 失去焦点是否要清空输入框内无效内容 | boolean | false | 5.14.0 |\n| popupClassName | 额外的弹出日历 className | string | - | 4.23.0 |\n| getPopupContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | - | - |\n| inputReadOnly | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | boolean | false | - |\n| locale | 国际化配置 | object | [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) | - |\n| minDate | 最小日期，同样会限制面板的切换范围 | dayjs | - | 5.14.0 |\n| maxDate | 最大日期，同样会限制面板的切换范围 | dayjs | - | 5.14.0 |\n| mode | 日期面板的状态（[设置后无法选择年份/月份？](/docs/react/faq#当我指定了-datepickerrangepicker-的-mode-属性后点击后无法选择年份月份)） | `time` | `date` | `month` | `year` | `decade` | - | - |\n| needConfirm | 是否需要确认按钮，为 `false` 时失去焦点即代表选择。当设置 `multiple` 时默认为 `false` | boolean | - | 5.14.0 |\n| nextIcon | 自定义下一个图标 | ReactNode | - | 4.17.0 |\n| open | 控制弹层是否展开 | boolean | - | - |\n| panelRender | 自定义渲染面板 | (panelNode) => ReactNode | - | 4.5.0 |\n| picker | 设置选择器类型 | `date` | `week` | `month` | `quarter` | `year` | `date` | `quarter`: 4.1.0 |\n| placeholder | 输入框提示文字 | string | \\[string, string] | - | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| popupStyle | 额外的弹出日历样式 | CSSProperties | {} | - |\n| prevIcon | 自定义上一个图标 | ReactNode | - | 4.17.0 |\n| presets | 预设时间范围快捷选择, 自 `5.8.0` 起 value 支持函数返回值 | { label: React.ReactNode, value: Dayjs | (() => Dayjs) }\\[] | - | - |\n| size | 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| style | 自定义输入框样式 | CSSProperties | {} | - |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - | - |\n| superNextIcon | 自定义 `>>` 切换图标 | ReactNode | - | 4.17.0 |\n| superPrevIcon | 自定义 `<<` 切换图标 | ReactNode | - | 4.17.0 |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onOpenChange | 弹出日历和关闭日历的回调 | function(open) | - | - |\n| onPanelChange | 日历面板切换的回调 | function(value, mode) | - | - |\n#### DatePicker - 共同的方法\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n#### DatePicker - DatePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultPickerValue | 默认面板日期，每次面板打开时会被重置到该日期 | [dayjs](https://day.js.org/) | - | 5.14.0 |\n| defaultValue | 默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间 | [dayjs](https://day.js.org/) | - | - |\n| disabledTime | 不可选择的时间 | function(date) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM-DD` | - |\n| multiple | 是否为多选，不支持 `showTime` | boolean | false | 5.14.0 |\n| pickerValue | 面板日期，可以用于受控切换面板所在日期。配合 `onPanelChange` 使用。 | [dayjs](https://day.js.org/) | - | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | (mode) => React.ReactNode | - | - |\n| showNow | 显示当前日期时间的快捷选择 | boolean | - | - |\n| showTime | 增加时间选择功能 | Object | boolean | [TimePicker Options](/components/time-picker-cn#api) | - |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/) | dayjs() | - |\n| showWeek | DatePicker 下展示当前周 | boolean | false | 5.14.0 |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调 | function(date: dayjs, dateString: string) | - | - |\n| onOk | 点击确定按钮的回调 | function() | - | - |\n| onPanelChange | 日期面板变化时的回调 | function(value, mode) | - | - |\n#### DatePicker - DatePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n#### DatePicker - DatePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-\\QQ` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n#### DatePicker - DatePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n#### DatePicker - DatePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-wo` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | (mode) => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n#### DatePicker - RangePicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowEmpty | 允许起始项部分为空 | \\[boolean, boolean] | \\[false, false] | - |\n| cellRender | 自定义单元格的内容。 | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| dateRender | 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替 | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| defaultPickerValue | 默认面板日期，每次面板打开时会被重置到该日期 | [dayjs](https://day.js.org/)\\[] | - | 5.14.0 |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/)\\[] | - | - |\n| disabled | 禁用起始项 | \\[boolean, boolean] | - | - |\n| disabledTime | 不可选择的时间 | function(date: dayjs, partial: `start` | `end`) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM-DD HH:mm:ss` | - |\n| id | 设置输入框 `id` 属性。 | { start?: string, end?: string } | - | 5.14.0 |\n| pickerValue | 面板日期，可以用于受控切换面板所在日期。配合 `onPanelChange` 使用。 | [dayjs](https://day.js.org/)\\[] | - | 5.14.0 |\n| presets | 预设时间范围快捷选择，自 `5.8.0` 起 value 支持函数返回值 | { label: React.ReactNode, value: (Dayjs | (() => Dayjs))\\[] }\\[] | - | - |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| separator | 设置分隔符 | React.ReactNode | `<SwapRightOutlined />` | - |\n| showTime | 增加时间选择功能 | Object|boolean | [TimePicker Options](/components/time-picker-cn#api) | - |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/)\\[] | \\[dayjs(), dayjs()] | - |\n| value | 日期 | [dayjs](https://day.js.org/)\\[] | - | - |\n| onCalendarChange | 待选日期发生变化的回调。`info` 参数自 4.4.0 添加 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`|`end` }) | - | - |\n| onChange | 日期范围发生变化的回调 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string]) | - | - |\n| onFocus | 聚焦时回调 | function(event, { range: 'start' | 'end' }) | - | `range`: 5.14.0 |\n| onBlur | 失焦时回调 | function(event, { range: 'start' | 'end' }) | - | `range`: 5.14.0 |\n"
  },
  {
    "title": "ant-design 的 DatePicker - DatePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean | { clearIcon?: ReactNode } | true | 5.8.0: 支持对象类型 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| className | 选择器 className | string | - | - |\n| dateRender | 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替 | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| components | 自定义面板 | Record\\<Panel | 'input', React.ComponentType> | - | 5.14.0 |\n| disabled | 禁用 | boolean | false | - |\n| disabledDate | 不可选择的日期 | (currentDate: dayjs, info: { from?: dayjs }) => boolean | - | `info`: 5.14.0 |\n| format | 设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。示例：[自定义格式](#components-date-picker-demo-format) | [formatType](#formattype) | [rc-picker](https://github.com/react-component/picker/blob/f512f18ed59d6791280d1c3d7d37abbb9867eb0b/src/utils/uiUtil.ts#L155-L177) | - |\n| order | 多选、范围时是否自动排序 | boolean | true | 5.14.0 |\n| preserveInvalidOnBlur | 失去焦点是否要清空输入框内无效内容 | boolean | false | 5.14.0 |\n| popupClassName | 额外的弹出日历 className | string | - | 4.23.0 |\n| getPopupContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | - | - |\n| inputReadOnly | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | boolean | false | - |\n| locale | 国际化配置 | object | [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) | - |\n| minDate | 最小日期，同样会限制面板的切换范围 | dayjs | - | 5.14.0 |\n| maxDate | 最大日期，同样会限制面板的切换范围 | dayjs | - | 5.14.0 |\n| mode | 日期面板的状态（[设置后无法选择年份/月份？](/docs/react/faq#当我指定了-datepickerrangepicker-的-mode-属性后点击后无法选择年份月份)） | `time` | `date` | `month` | `year` | `decade` | - | - |\n| needConfirm | 是否需要确认按钮，为 `false` 时失去焦点即代表选择。当设置 `multiple` 时默认为 `false` | boolean | - | 5.14.0 |\n| nextIcon | 自定义下一个图标 | ReactNode | - | 4.17.0 |\n| open | 控制弹层是否展开 | boolean | - | - |\n| panelRender | 自定义渲染面板 | (panelNode) => ReactNode | - | 4.5.0 |\n| picker | 设置选择器类型 | `date` | `week` | `month` | `quarter` | `year` | `date` | `quarter`: 4.1.0 |\n| placeholder | 输入框提示文字 | string | \\[string, string] | - | - |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft | - |\n| popupStyle | 额外的弹出日历样式 | CSSProperties | {} | - |\n| prevIcon | 自定义上一个图标 | ReactNode | - | 4.17.0 |\n| presets | 预设时间范围快捷选择, 自 `5.8.0` 起 value 支持函数返回值 | { label: React.ReactNode, value: Dayjs | (() => Dayjs) }\\[] | - | - |\n| size | 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| style | 自定义输入框样式 | CSSProperties | {} | - |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - | - |\n| superNextIcon | 自定义 `>>` 切换图标 | ReactNode | - | 4.17.0 |\n| superPrevIcon | 自定义 `<<` 切换图标 | ReactNode | - | 4.17.0 |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onOpenChange | 弹出日历和关闭日历的回调 | function(open) | - | - |\n| onPanelChange | 日历面板切换的回调 | function(value, mode) | - | - |\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 自定义清除按钮\n类型: boolean | { clearIcon?: ReactNode }\n默认值: true\n版本: 5.8.0: 支持对象类型\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的className属性如何使用？",
    "md": "参数: className\n说明: 选择器 className\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的dateRender属性如何使用？",
    "md": "参数: dateRender\n说明: 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替\n类型: function(currentDate: dayjs, today: dayjs) => React.ReactNode\n默认值: -\n版本: < 5.4.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的cellRender属性如何使用？",
    "md": "参数: cellRender\n说明: 自定义单元格的内容\n类型: (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的components属性如何使用？",
    "md": "参数: components\n说明: 自定义面板\n类型: Record\\<Panel | 'input', React.ComponentType>\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的disabledDate属性如何使用？",
    "md": "参数: disabledDate\n说明: 不可选择的日期\n类型: (currentDate: dayjs, info: { from?: dayjs }) => boolean\n默认值: -\n版本: `info`: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的format属性如何使用？",
    "md": "参数: format\n说明: 设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。示例：[自定义格式](#components-date-picker-demo-format)\n类型: [formatType](#formattype)\n默认值: [rc-picker](https://github.com/react-component/picker/blob/f512f18ed59d6791280d1c3d7d37abbb9867eb0b/src/utils/uiUtil.ts#L155-L177)\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的order属性如何使用？",
    "md": "参数: order\n说明: 多选、范围时是否自动排序\n类型: boolean\n默认值: true\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的preserveInvalidOnBlur属性如何使用？",
    "md": "参数: preserveInvalidOnBlur\n说明: 失去焦点是否要清空输入框内无效内容\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 额外的弹出日历 className\n类型: string\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 定义浮层的容器，默认为 body 上新建 div\n类型: function(trigger)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的inputReadOnly属性如何使用？",
    "md": "参数: inputReadOnly\n说明: 设置输入框为只读（避免在移动设备上打开虚拟键盘）\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的locale属性如何使用？",
    "md": "参数: locale\n说明: 国际化配置\n类型: object\n默认值: [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的minDate属性如何使用？",
    "md": "参数: minDate\n说明: 最小日期，同样会限制面板的切换范围\n类型: dayjs\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的maxDate属性如何使用？",
    "md": "参数: maxDate\n说明: 最大日期，同样会限制面板的切换范围\n类型: dayjs\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的mode属性如何使用？",
    "md": "参数: mode\n说明: 日期面板的状态（[设置后无法选择年份/月份？](/docs/react/faq#当我指定了-datepickerrangepicker-的-mode-属性后点击后无法选择年份月份)）\n类型: `time` | `date` | `month` | `year` | `decade`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的needConfirm属性如何使用？",
    "md": "参数: needConfirm\n说明: 是否需要确认按钮，为 `false` 时失去焦点即代表选择。当设置 `multiple` 时默认为 `false`\n类型: boolean\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的nextIcon属性如何使用？",
    "md": "参数: nextIcon\n说明: 自定义下一个图标\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的open属性如何使用？",
    "md": "参数: open\n说明: 控制弹层是否展开\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的panelRender属性如何使用？",
    "md": "参数: panelRender\n说明: 自定义渲染面板\n类型: (panelNode) => ReactNode\n默认值: -\n版本: 4.5.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的picker属性如何使用？",
    "md": "参数: picker\n说明: 设置选择器类型\n类型: `date` | `week` | `month` | `quarter` | `year`\n默认值: `date`\n版本: `quarter`: 4.1.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 输入框提示文字\n类型: string | \\[string, string]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的placement属性如何使用？",
    "md": "参数: placement\n说明: 选择框弹出的位置\n类型: `bottomLeft` `bottomRight` `topLeft` `topRight`\n默认值: bottomLeft\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的popupStyle属性如何使用？",
    "md": "参数: popupStyle\n说明: 额外的弹出日历样式\n类型: CSSProperties\n默认值: {}\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的prevIcon属性如何使用？",
    "md": "参数: prevIcon\n说明: 自定义上一个图标\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的presets属性如何使用？",
    "md": "参数: presets\n说明: 预设时间范围快捷选择, 自 `5.8.0` 起 value 支持函数返回值\n类型: { label: React.ReactNode, value: Dayjs | (() => Dayjs) }\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的size属性如何使用？",
    "md": "参数: size\n说明: 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px\n类型: `large` | `middle` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的style属性如何使用？",
    "md": "参数: style\n说明: 自定义输入框样式\n类型: CSSProperties\n默认值: {}\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的suffixIcon属性如何使用？",
    "md": "参数: suffixIcon\n说明: 自定义的选择框后缀图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的superNextIcon属性如何使用？",
    "md": "参数: superNextIcon\n说明: 自定义 `>>` 切换图标\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的superPrevIcon属性如何使用？",
    "md": "参数: superPrevIcon\n说明: 自定义 `<<` 切换图标\n类型: ReactNode\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: 弹出日历和关闭日历的回调\n类型: function(open)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onPanelChange属性如何使用？",
    "md": "参数: onPanelChange\n说明: 日历面板切换的回调\n类型: function(value, mode)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 DatePicker - 共同的方法 有哪些配置？",
    "md": "| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 DatePicker - 共同的方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - 共同的方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 DatePicker - DatePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultPickerValue | 默认面板日期，每次面板打开时会被重置到该日期 | [dayjs](https://day.js.org/) | - | 5.14.0 |\n| defaultValue | 默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间 | [dayjs](https://day.js.org/) | - | - |\n| disabledTime | 不可选择的时间 | function(date) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM-DD` | - |\n| multiple | 是否为多选，不支持 `showTime` | boolean | false | 5.14.0 |\n| pickerValue | 面板日期，可以用于受控切换面板所在日期。配合 `onPanelChange` 使用。 | [dayjs](https://day.js.org/) | - | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | (mode) => React.ReactNode | - | - |\n| showNow | 显示当前日期时间的快捷选择 | boolean | - | - |\n| showTime | 增加时间选择功能 | Object | boolean | [TimePicker Options](/components/time-picker-cn#api) | - |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/) | dayjs() | - |\n| showWeek | DatePicker 下展示当前周 | boolean | false | 5.14.0 |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调 | function(date: dayjs, dateString: string) | - | - |\n| onOk | 点击确定按钮的回调 | function() | - | - |\n| onPanelChange | 日期面板变化时的回调 | function(value, mode) | - | - |\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的defaultPickerValue属性如何使用？",
    "md": "参数: defaultPickerValue\n说明: 默认面板日期，每次面板打开时会被重置到该日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的disabledTime属性如何使用？",
    "md": "参数: disabledTime\n说明: 不可选择的时间\n类型: function(date)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的format属性如何使用？",
    "md": "参数: format\n说明: 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。\n类型: [formatType](#formattype)\n默认值: `YYYY-MM-DD`\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 是否为多选，不支持 `showTime`\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的pickerValue属性如何使用？",
    "md": "参数: pickerValue\n说明: 面板日期，可以用于受控切换面板所在日期。配合 `onPanelChange` 使用。\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的renderExtraFooter属性如何使用？",
    "md": "参数: renderExtraFooter\n说明: 在面板中添加额外的页脚\n类型: (mode) => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的showNow属性如何使用？",
    "md": "参数: showNow\n说明: 显示当前日期时间的快捷选择\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的showTime属性如何使用？",
    "md": "参数: showTime\n说明: 增加时间选择功能\n类型: Object | boolean\n默认值: [TimePicker Options](/components/time-picker-cn#api)\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的showTime.defaultValue属性如何使用？",
    "md": "参数: showTime.defaultValue\n说明: 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date)\n类型: [dayjs](https://day.js.org/)\n默认值: dayjs()\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的showWeek属性如何使用？",
    "md": "参数: showWeek\n说明: DatePicker 下展示当前周\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的value属性如何使用？",
    "md": "参数: value\n说明: 日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 时间发生变化的回调\n类型: function(date: dayjs, dateString: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onOk属性如何使用？",
    "md": "参数: onOk\n说明: 点击确定按钮的回调\n类型: function()\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onPanelChange属性如何使用？",
    "md": "参数: onPanelChange\n说明: 日期面板变化时的回调\n类型: function(value, mode)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 DatePicker - DatePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的format属性如何使用？",
    "md": "参数: format\n说明: 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。\n类型: [formatType](#formattype)\n默认值: `YYYY`\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 是否为多选\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的renderExtraFooter属性如何使用？",
    "md": "参数: renderExtraFooter\n说明: 在面板中添加额外的页脚\n类型: () => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的value属性如何使用？",
    "md": "参数: value\n说明: 日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 时间发生变化的回调，发生在用户选择时间时\n类型: function(date: dayjs, dateString: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 DatePicker - DatePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-\\QQ` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的format属性如何使用？",
    "md": "参数: format\n说明: 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。\n类型: [formatType](#formattype)\n默认值: `YYYY-\\QQ`\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 是否为多选\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的renderExtraFooter属性如何使用？",
    "md": "参数: renderExtraFooter\n说明: 在面板中添加额外的页脚\n类型: () => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的value属性如何使用？",
    "md": "参数: value\n说明: 日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 时间发生变化的回调，发生在用户选择时间时\n类型: function(date: dayjs, dateString: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 DatePicker - DatePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的format属性如何使用？",
    "md": "参数: format\n说明: 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。\n类型: [formatType](#formattype)\n默认值: `YYYY-MM`\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 是否为多选\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的renderExtraFooter属性如何使用？",
    "md": "参数: renderExtraFooter\n说明: 在面板中添加额外的页脚\n类型: () => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的value属性如何使用？",
    "md": "参数: value\n说明: 日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 时间发生变化的回调，发生在用户选择时间时\n类型: function(date: dayjs, dateString: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 DatePicker - DatePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-wo` | - |\n| multiple | 是否为多选 | boolean | false | 5.14.0 |\n| renderExtraFooter | 在面板中添加额外的页脚 | (mode) => React.ReactNode | - | - |\n| value | 日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - | - |\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的format属性如何使用？",
    "md": "参数: format\n说明: 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。\n类型: [formatType](#formattype)\n默认值: `YYYY-wo`\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 是否为多选\n类型: boolean\n默认值: false\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的renderExtraFooter属性如何使用？",
    "md": "参数: renderExtraFooter\n说明: 在面板中添加额外的页脚\n类型: (mode) => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的value属性如何使用？",
    "md": "参数: value\n说明: 日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - DatePicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 时间发生变化的回调，发生在用户选择时间时\n类型: function(date: dayjs, dateString: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 DatePicker - RangePicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowEmpty | 允许起始项部分为空 | \\[boolean, boolean] | \\[false, false] | - |\n| cellRender | 自定义单元格的内容。 | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| dateRender | 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替 | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| defaultPickerValue | 默认面板日期，每次面板打开时会被重置到该日期 | [dayjs](https://day.js.org/)\\[] | - | 5.14.0 |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/)\\[] | - | - |\n| disabled | 禁用起始项 | \\[boolean, boolean] | - | - |\n| disabledTime | 不可选择的时间 | function(date: dayjs, partial: `start` | `end`) | - | - |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM-DD HH:mm:ss` | - |\n| id | 设置输入框 `id` 属性。 | { start?: string, end?: string } | - | 5.14.0 |\n| pickerValue | 面板日期，可以用于受控切换面板所在日期。配合 `onPanelChange` 使用。 | [dayjs](https://day.js.org/)\\[] | - | 5.14.0 |\n| presets | 预设时间范围快捷选择，自 `5.8.0` 起 value 支持函数返回值 | { label: React.ReactNode, value: (Dayjs | (() => Dayjs))\\[] }\\[] | - | - |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - | - |\n| separator | 设置分隔符 | React.ReactNode | `<SwapRightOutlined />` | - |\n| showTime | 增加时间选择功能 | Object|boolean | [TimePicker Options](/components/time-picker-cn#api) | - |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/)\\[] | \\[dayjs(), dayjs()] | - |\n| value | 日期 | [dayjs](https://day.js.org/)\\[] | - | - |\n| onCalendarChange | 待选日期发生变化的回调。`info` 参数自 4.4.0 添加 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`|`end` }) | - | - |\n| onChange | 日期范围发生变化的回调 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string]) | - | - |\n| onFocus | 聚焦时回调 | function(event, { range: 'start' | 'end' }) | - | `range`: 5.14.0 |\n| onBlur | 失焦时回调 | function(event, { range: 'start' | 'end' }) | - | `range`: 5.14.0 |\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的allowEmpty属性如何使用？",
    "md": "参数: allowEmpty\n说明: 允许起始项部分为空\n类型: \\[boolean, boolean]\n默认值: \\[false, false]\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的cellRender属性如何使用？",
    "md": "参数: cellRender\n说明: 自定义单元格的内容。\n类型: (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的dateRender属性如何使用？",
    "md": "参数: dateRender\n说明: 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替\n类型: function(currentDate: dayjs, today: dayjs) => React.ReactNode\n默认值: -\n版本: < 5.4.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的defaultPickerValue属性如何使用？",
    "md": "参数: defaultPickerValue\n说明: 默认面板日期，每次面板打开时会被重置到该日期\n类型: [dayjs](https://day.js.org/)\\[]\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认日期\n类型: [dayjs](https://day.js.org/)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用起始项\n类型: \\[boolean, boolean]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的disabledTime属性如何使用？",
    "md": "参数: disabledTime\n说明: 不可选择的时间\n类型: function(date: dayjs, partial: `start` | `end`)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的format属性如何使用？",
    "md": "参数: format\n说明: 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。\n类型: [formatType](#formattype)\n默认值: `YYYY-MM-DD HH:mm:ss`\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的id属性如何使用？",
    "md": "参数: id\n说明: 设置输入框 `id` 属性。\n类型: { start?: string, end?: string }\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的pickerValue属性如何使用？",
    "md": "参数: pickerValue\n说明: 面板日期，可以用于受控切换面板所在日期。配合 `onPanelChange` 使用。\n类型: [dayjs](https://day.js.org/)\\[]\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的presets属性如何使用？",
    "md": "参数: presets\n说明: 预设时间范围快捷选择，自 `5.8.0` 起 value 支持函数返回值\n类型: { label: React.ReactNode, value: (Dayjs | (() => Dayjs))\\[] }\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的renderExtraFooter属性如何使用？",
    "md": "参数: renderExtraFooter\n说明: 在面板中添加额外的页脚\n类型: () => React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的separator属性如何使用？",
    "md": "参数: separator\n说明: 设置分隔符\n类型: React.ReactNode\n默认值: `<SwapRightOutlined />`\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的showTime属性如何使用？",
    "md": "参数: showTime\n说明: 增加时间选择功能\n类型: Object|boolean\n默认值: [TimePicker Options](/components/time-picker-cn#api)\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的showTime.defaultValue属性如何使用？",
    "md": "参数: showTime.defaultValue\n说明: 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date)\n类型: [dayjs](https://day.js.org/)\\[]\n默认值: \\[dayjs(), dayjs()]\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的value属性如何使用？",
    "md": "参数: value\n说明: 日期\n类型: [dayjs](https://day.js.org/)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的onCalendarChange属性如何使用？",
    "md": "参数: onCalendarChange\n说明: 待选日期发生变化的回调。`info` 参数自 4.4.0 添加\n类型: function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`|`end` })\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 日期范围发生变化的回调\n类型: function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string])\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的onFocus属性如何使用？",
    "md": "参数: onFocus\n说明: 聚焦时回调\n类型: function(event, { range: 'start' | 'end' })\n默认值: -\n版本: `range`: 5.14.0\n"
  },
  {
    "title": "ant-design 中 DatePicker - RangePicker的onBlur属性如何使用？",
    "md": "参数: onBlur\n说明: 失焦时回调\n类型: function(event, { range: 'start' | 'end' })\n默认值: -\n版本: `range`: 5.14.0\n"
  },
  {
    "title": "ant-design 的 ConfigProvider 有哪些配置？",
    "md": "#### ConfigProvider - ConfigProvider\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoInsertSpaceInButton | 设置为 `false` 时，移除按钮中 2 个汉字之间的空格 | boolean | true | - |\n| componentDisabled | 设置 antd 组件禁用状态 | boolean | - | 4.21.0 |\n| componentSize | 设置 antd 组件大小 | `small` | `middle` | `large` | - | - |\n| csp | 设置 [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) 配置 | { nonce: string } | - | - |\n| direction | 设置文本展示方向。 [示例](#components-config-provider-demo-direction) | `ltr` | `rtl` | `ltr` | - |\n| getPopupContainer | 弹出框（Select, Tooltip, Menu 等等）渲染父节点，默认渲染到 body 上。 | function(triggerNode) | () => document.body | - |\n| getTargetContainer | 配置 Affix、Anchor 滚动监听容器。 | () => HTMLElement | () => window | 4.2.0 |\n| iconPrefixCls | 设置图标统一样式前缀 | string | `anticon` | 4.11.0 |\n| locale | 语言包配置，语言包可到 [antd/locale](http://unpkg.com/antd/locale/) 目录下寻找 | object | - | - |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。`false` 时会关闭虚拟滚动 | boolean | number | - | 5.5.0 |\n| popupOverflow | Select 类组件弹层展示逻辑，默认为可视区域滚动，可配置成滚动区域滚动 | 'viewport' | 'scroll' <InlinePopover previewURL=\"https://user-images.githubusercontent.com/5378891/230344474-5b9f7e09-0a5d-49e8-bae8-7d2abed6c837.png\"></InlinePopover> | 'viewport' | 5.5.0 |\n| prefixCls | 设置统一样式前缀 | string | `ant` | - |\n| renderEmpty | 自定义组件空状态。参考 [空状态](/components/empty-cn) | function(componentName: string): ReactNode | - | - |\n| theme | 设置主题，参考 [定制主题](/docs/react/customize-theme-cn) | [Theme](/docs/react/customize-theme-cn#theme) | - | 5.0.0 |\n| virtual | 设置 `false` 时关闭虚拟滚动 | boolean | - | 4.3.0 |\n| warning | 设置警告等级，`strict` 为 `false` 时会将废弃相关信息聚合为单条信息 | { strict: boolean } | - | 5.10.0 |\n#### ConfigProvider - ConfigProvider.useConfig()\n| 返回值 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| componentDisabled | antd 组件禁用状态 | boolean | - | 5.3.0 |\n| componentSize | antd 组件大小状态 | `small` | `middle` | `large` | - | 5.3.0 |\n#### ConfigProvider - ConfigProvider\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alert | 设置 Alert 组件的通用属性 | { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode } | - | 5.7.0, closeIcon: 5.14.0 |\n| anchor | 设置 Anchor 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| avatar | 设置 Avatar 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| badge | 设置 Badge 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: { count?: string, indicator?: string }, styles?: { count?: React.CSSProperties, indicator?: React.CSSProperties } } | - | 5.7.0 |\n| breadcrumb | 设置 Breadcrumb 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| button | 设置 Button 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: { icon: string }, styles?: { icon: React.CSSProperties } } | - | 5.6.0 |\n| calendar | 设置 Calendar 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| card | 设置 Card 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [CardProps\\[\"classNames\"\\]](/components/card-cn#api), styles?: [CardProps\\[\"styles\"\\]](/components/card-cn#api) } | - | 5.7.0, `classNames` 和 `styles`: 5.14.0 |\n| carousel | 设置 Carousel 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| cascader | 设置 Cascader 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| checkbox | 设置 Checkbox 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| collapse | 设置 Collapse 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| colorPicker | 设置 ColorPicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| datePicker | 设置 DatePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rangePicker | 设置 RangePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| descriptions | 设置 Descriptions 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| divider | 设置 Divider 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| drawer | 设置 Drawer 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [DrawerProps\\[\"classNames\"\\]](/components/drawer-cn#api), styles?: [DrawerProps\\[\"styles\"\\]](/components/drawer-cn#api), closeIcon?: ReactNode } | - | 5.7.0, `classNames` 和 `styles`: 5.10.0, `closeIcon`: 5.14.0 |\n| dropdown | 设置 Dropdown 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| empty | 设置 Empty 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| flex | 设置 Flex 组件的通用属性 | { className?: string, style?: React.CSSProperties, vertical?: boolean } | - | 5.10.0 |\n| form | 设置 Form 组件的通用属性 | { className?: string, style?: React.CSSProperties, validateMessages?: [ValidateMessages](/components/form-cn#validatemessages), requiredMark?: boolean | `optional`, colon?: boolean, scrollToFirstError?: boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)} | - | requiredMark: 4.8.0; colon: 4.18.0; scrollToFirstError: 5.2.0; className: 5.7.0; style: 5.7.0 |\n| image | 设置 Image 组件的通用属性 | { className?: string, style?: React.CSSProperties, preview?: { closeIcon?: React.ReactNode } } | - | 5.7.0, closeIcon: 5.14.0 |\n| input | 设置 Input 组件的通用属性 | { autoComplete?: string, className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| layout | 设置 Layout 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| list | 设置 List 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| menu | 设置 Menu 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| mentions | 设置 Mentions 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| message | 设置 Message 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| modal | 设置 Modal 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [ModalProps\\[\"classNames\"\\]](/components/modal-cn#api), styles?: [ModalProps\\[\"styles\"\\]](/components/modal-cn#api), closeIcon?: React.ReactNode } | - | 5.7.0, `classNames` 和 `styles`: 5.10.0, `closeIcon`: 5.14.0 |\n| notification | 设置 Notification 组件的通用属性 | { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode } | - | 5.7.0, `closeIcon`: 5.14.0 |\n| pagination | 设置 Pagination 组件的通用属性 | { showSizeChanger?: boolean, className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| progress | 设置 Progress 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| radio | 设置 Radio 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rate | 设置 Rate 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| result | 设置 Result 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| skeleton | 设置 Skeleton 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| segmented | 设置 Segmented 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| select | 设置 Select 组件的通用属性 | { className?: string, showSearch?: boolean, style?: React.CSSProperties } | - | 5.7.0 |\n| slider | 设置 Slider 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| switch | 设置 Switch 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| space | 设置 Space 的通用属性，参考 [Space](/components/space-cn) | { size: `small` | `middle` | `large` | `number`, className?: string, style?: React.CSSProperties, classNames?: { item: string }, styles?: { item: React.CSSProperties } } | - | 5.6.0 |\n| spin | 设置 Spin 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| statistic | 设置 Statistic 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| steps | 设置 Steps 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| table | 设置 Table 组件的通用属性 | { className?: string, style?: React.CSSProperties, expandable?: { expandIcon?: props => React.ReactNode } } | - | 5.7.0, expandable: 5.14.0 |\n| tabs | 设置 Tabs 组件的通用属性 | { className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` | `center` | `end` }, moreIcon?: ReactNode, addIcon?: ReactNode } | - | 5.7.0, `moreIcon` and `addIcon`: 5.14.0 |\n| tag | 设置 Tag 组件的通用属性 | { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode } | - | 5.7.0, closeIcon: 5.14.0 |\n| timeline | 设置 Timeline 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| timePicker | 设置 TimePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| tour | 设置 Tour 组件的通用属性 | { closeIcon?: React.ReactNode } | - | 5.14.0 |\n| transfer | 设置 Transfer 组件的通用属性 | { className?: string, style?: React.CSSProperties, selectionsIcon?: React.ReactNode } | - | 5.7.0, selectionsIcon: 5.14.0 |\n| tree | 设置 Tree 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| typography | 设置 Typography 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| upload | 设置 Upload 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| wave | 设置水波纹特效 | { disabled?: boolean, showEffect?: (node: HTMLElement, info: { className, token, component }) => void } | - | 5.8.0 |\n"
  },
  {
    "title": "ant-design 的 ConfigProvider - ConfigProvider 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoInsertSpaceInButton | 设置为 `false` 时，移除按钮中 2 个汉字之间的空格 | boolean | true | - |\n| componentDisabled | 设置 antd 组件禁用状态 | boolean | - | 4.21.0 |\n| componentSize | 设置 antd 组件大小 | `small` | `middle` | `large` | - | - |\n| csp | 设置 [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) 配置 | { nonce: string } | - | - |\n| direction | 设置文本展示方向。 [示例](#components-config-provider-demo-direction) | `ltr` | `rtl` | `ltr` | - |\n| getPopupContainer | 弹出框（Select, Tooltip, Menu 等等）渲染父节点，默认渲染到 body 上。 | function(triggerNode) | () => document.body | - |\n| getTargetContainer | 配置 Affix、Anchor 滚动监听容器。 | () => HTMLElement | () => window | 4.2.0 |\n| iconPrefixCls | 设置图标统一样式前缀 | string | `anticon` | 4.11.0 |\n| locale | 语言包配置，语言包可到 [antd/locale](http://unpkg.com/antd/locale/) 目录下寻找 | object | - | - |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。`false` 时会关闭虚拟滚动 | boolean | number | - | 5.5.0 |\n| popupOverflow | Select 类组件弹层展示逻辑，默认为可视区域滚动，可配置成滚动区域滚动 | 'viewport' | 'scroll' <InlinePopover previewURL=\"https://user-images.githubusercontent.com/5378891/230344474-5b9f7e09-0a5d-49e8-bae8-7d2abed6c837.png\"></InlinePopover> | 'viewport' | 5.5.0 |\n| prefixCls | 设置统一样式前缀 | string | `ant` | - |\n| renderEmpty | 自定义组件空状态。参考 [空状态](/components/empty-cn) | function(componentName: string): ReactNode | - | - |\n| theme | 设置主题，参考 [定制主题](/docs/react/customize-theme-cn) | [Theme](/docs/react/customize-theme-cn#theme) | - | 5.0.0 |\n| virtual | 设置 `false` 时关闭虚拟滚动 | boolean | - | 4.3.0 |\n| warning | 设置警告等级，`strict` 为 `false` 时会将废弃相关信息聚合为单条信息 | { strict: boolean } | - | 5.10.0 |\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的autoInsertSpaceInButton属性如何使用？",
    "md": "参数: autoInsertSpaceInButton\n说明: 设置为 `false` 时，移除按钮中 2 个汉字之间的空格\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的componentDisabled属性如何使用？",
    "md": "参数: componentDisabled\n说明: 设置 antd 组件禁用状态\n类型: boolean\n默认值: -\n版本: 4.21.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的componentSize属性如何使用？",
    "md": "参数: componentSize\n说明: 设置 antd 组件大小\n类型: `small` | `middle` | `large`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的csp属性如何使用？",
    "md": "参数: csp\n说明: 设置 [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) 配置\n类型: { nonce: string }\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的direction属性如何使用？",
    "md": "参数: direction\n说明: 设置文本展示方向。 [示例](#components-config-provider-demo-direction)\n类型: `ltr` | `rtl`\n默认值: `ltr`\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 弹出框（Select, Tooltip, Menu 等等）渲染父节点，默认渲染到 body 上。\n类型: function(triggerNode)\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的getTargetContainer属性如何使用？",
    "md": "参数: getTargetContainer\n说明: 配置 Affix、Anchor 滚动监听容器。\n类型: () => HTMLElement\n默认值: () => window\n版本: 4.2.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的iconPrefixCls属性如何使用？",
    "md": "参数: iconPrefixCls\n说明: 设置图标统一样式前缀\n类型: string\n默认值: `anticon`\n版本: 4.11.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的locale属性如何使用？",
    "md": "参数: locale\n说明: 语言包配置，语言包可到 [antd/locale](http://unpkg.com/antd/locale/) 目录下寻找\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的popupMatchSelectWidth属性如何使用？",
    "md": "参数: popupMatchSelectWidth\n说明: 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。`false` 时会关闭虚拟滚动\n类型: boolean | number\n默认值: -\n版本: 5.5.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的popupOverflow属性如何使用？",
    "md": "参数: popupOverflow\n说明: Select 类组件弹层展示逻辑，默认为可视区域滚动，可配置成滚动区域滚动\n类型: 'viewport' | 'scroll' <InlinePopover previewURL=\"https://user-images.githubusercontent.com/5378891/230344474-5b9f7e09-0a5d-49e8-bae8-7d2abed6c837.png\"></InlinePopover>\n默认值: 'viewport'\n版本: 5.5.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的prefixCls属性如何使用？",
    "md": "参数: prefixCls\n说明: 设置统一样式前缀\n类型: string\n默认值: `ant`\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的renderEmpty属性如何使用？",
    "md": "参数: renderEmpty\n说明: 自定义组件空状态。参考 [空状态](/components/empty-cn)\n类型: function(componentName: string): ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的theme属性如何使用？",
    "md": "参数: theme\n说明: 设置主题，参考 [定制主题](/docs/react/customize-theme-cn)\n类型: [Theme](/docs/react/customize-theme-cn#theme)\n默认值: -\n版本: 5.0.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的virtual属性如何使用？",
    "md": "参数: virtual\n说明: 设置 `false` 时关闭虚拟滚动\n类型: boolean\n默认值: -\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的warning属性如何使用？",
    "md": "参数: warning\n说明: 设置警告等级，`strict` 为 `false` 时会将废弃相关信息聚合为单条信息\n类型: { strict: boolean }\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 的 ConfigProvider - ConfigProvider.useConfig() 有哪些配置？",
    "md": "| 返回值 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| componentDisabled | antd 组件禁用状态 | boolean | - | 5.3.0 |\n| componentSize | antd 组件大小状态 | `small` | `middle` | `large` | - | 5.3.0 |\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider.useConfig()的componentDisabled属性如何使用？",
    "md": "返回值: componentDisabled\n说明: antd 组件禁用状态\n类型: boolean\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider.useConfig()的componentSize属性如何使用？",
    "md": "返回值: componentSize\n说明: antd 组件大小状态\n类型: `small` | `middle` | `large`\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 的 ConfigProvider - ConfigProvider 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alert | 设置 Alert 组件的通用属性 | { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode } | - | 5.7.0, closeIcon: 5.14.0 |\n| anchor | 设置 Anchor 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| avatar | 设置 Avatar 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| badge | 设置 Badge 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: { count?: string, indicator?: string }, styles?: { count?: React.CSSProperties, indicator?: React.CSSProperties } } | - | 5.7.0 |\n| breadcrumb | 设置 Breadcrumb 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| button | 设置 Button 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: { icon: string }, styles?: { icon: React.CSSProperties } } | - | 5.6.0 |\n| calendar | 设置 Calendar 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| card | 设置 Card 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [CardProps\\[\"classNames\"\\]](/components/card-cn#api), styles?: [CardProps\\[\"styles\"\\]](/components/card-cn#api) } | - | 5.7.0, `classNames` 和 `styles`: 5.14.0 |\n| carousel | 设置 Carousel 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| cascader | 设置 Cascader 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| checkbox | 设置 Checkbox 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| collapse | 设置 Collapse 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| colorPicker | 设置 ColorPicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| datePicker | 设置 DatePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rangePicker | 设置 RangePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| descriptions | 设置 Descriptions 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| divider | 设置 Divider 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| drawer | 设置 Drawer 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [DrawerProps\\[\"classNames\"\\]](/components/drawer-cn#api), styles?: [DrawerProps\\[\"styles\"\\]](/components/drawer-cn#api), closeIcon?: ReactNode } | - | 5.7.0, `classNames` 和 `styles`: 5.10.0, `closeIcon`: 5.14.0 |\n| dropdown | 设置 Dropdown 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| empty | 设置 Empty 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| flex | 设置 Flex 组件的通用属性 | { className?: string, style?: React.CSSProperties, vertical?: boolean } | - | 5.10.0 |\n| form | 设置 Form 组件的通用属性 | { className?: string, style?: React.CSSProperties, validateMessages?: [ValidateMessages](/components/form-cn#validatemessages), requiredMark?: boolean | `optional`, colon?: boolean, scrollToFirstError?: boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)} | - | requiredMark: 4.8.0; colon: 4.18.0; scrollToFirstError: 5.2.0; className: 5.7.0; style: 5.7.0 |\n| image | 设置 Image 组件的通用属性 | { className?: string, style?: React.CSSProperties, preview?: { closeIcon?: React.ReactNode } } | - | 5.7.0, closeIcon: 5.14.0 |\n| input | 设置 Input 组件的通用属性 | { autoComplete?: string, className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| layout | 设置 Layout 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| list | 设置 List 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| menu | 设置 Menu 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| mentions | 设置 Mentions 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| message | 设置 Message 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| modal | 设置 Modal 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [ModalProps\\[\"classNames\"\\]](/components/modal-cn#api), styles?: [ModalProps\\[\"styles\"\\]](/components/modal-cn#api), closeIcon?: React.ReactNode } | - | 5.7.0, `classNames` 和 `styles`: 5.10.0, `closeIcon`: 5.14.0 |\n| notification | 设置 Notification 组件的通用属性 | { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode } | - | 5.7.0, `closeIcon`: 5.14.0 |\n| pagination | 设置 Pagination 组件的通用属性 | { showSizeChanger?: boolean, className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| progress | 设置 Progress 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| radio | 设置 Radio 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rate | 设置 Rate 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| result | 设置 Result 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| skeleton | 设置 Skeleton 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| segmented | 设置 Segmented 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| select | 设置 Select 组件的通用属性 | { className?: string, showSearch?: boolean, style?: React.CSSProperties } | - | 5.7.0 |\n| slider | 设置 Slider 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| switch | 设置 Switch 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| space | 设置 Space 的通用属性，参考 [Space](/components/space-cn) | { size: `small` | `middle` | `large` | `number`, className?: string, style?: React.CSSProperties, classNames?: { item: string }, styles?: { item: React.CSSProperties } } | - | 5.6.0 |\n| spin | 设置 Spin 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| statistic | 设置 Statistic 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| steps | 设置 Steps 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| table | 设置 Table 组件的通用属性 | { className?: string, style?: React.CSSProperties, expandable?: { expandIcon?: props => React.ReactNode } } | - | 5.7.0, expandable: 5.14.0 |\n| tabs | 设置 Tabs 组件的通用属性 | { className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` | `center` | `end` }, moreIcon?: ReactNode, addIcon?: ReactNode } | - | 5.7.0, `moreIcon` and `addIcon`: 5.14.0 |\n| tag | 设置 Tag 组件的通用属性 | { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode } | - | 5.7.0, closeIcon: 5.14.0 |\n| timeline | 设置 Timeline 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| timePicker | 设置 TimePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| tour | 设置 Tour 组件的通用属性 | { closeIcon?: React.ReactNode } | - | 5.14.0 |\n| transfer | 设置 Transfer 组件的通用属性 | { className?: string, style?: React.CSSProperties, selectionsIcon?: React.ReactNode } | - | 5.7.0, selectionsIcon: 5.14.0 |\n| tree | 设置 Tree 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| typography | 设置 Typography 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| upload | 设置 Upload 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| wave | 设置水波纹特效 | { disabled?: boolean, showEffect?: (node: HTMLElement, info: { className, token, component }) => void } | - | 5.8.0 |\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的alert属性如何使用？",
    "md": "参数: alert\n说明: 设置 Alert 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }\n默认值: -\n版本: 5.7.0, closeIcon: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的anchor属性如何使用？",
    "md": "参数: anchor\n说明: 设置 Anchor 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的avatar属性如何使用？",
    "md": "参数: avatar\n说明: 设置 Avatar 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的badge属性如何使用？",
    "md": "参数: badge\n说明: 设置 Badge 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, classNames?: { count?: string, indicator?: string }, styles?: { count?: React.CSSProperties, indicator?: React.CSSProperties } }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的breadcrumb属性如何使用？",
    "md": "参数: breadcrumb\n说明: 设置 Breadcrumb 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的button属性如何使用？",
    "md": "参数: button\n说明: 设置 Button 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, classNames?: { icon: string }, styles?: { icon: React.CSSProperties } }\n默认值: -\n版本: 5.6.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的calendar属性如何使用？",
    "md": "参数: calendar\n说明: 设置 Calendar 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的card属性如何使用？",
    "md": "参数: card\n说明: 设置 Card 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, classNames?: [CardProps\\[\"classNames\"\\]](/components/card-cn#api), styles?: [CardProps\\[\"styles\"\\]](/components/card-cn#api) }\n默认值: -\n版本: 5.7.0, `classNames` 和 `styles`: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的carousel属性如何使用？",
    "md": "参数: carousel\n说明: 设置 Carousel 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的cascader属性如何使用？",
    "md": "参数: cascader\n说明: 设置 Cascader 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的checkbox属性如何使用？",
    "md": "参数: checkbox\n说明: 设置 Checkbox 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的collapse属性如何使用？",
    "md": "参数: collapse\n说明: 设置 Collapse 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的colorPicker属性如何使用？",
    "md": "参数: colorPicker\n说明: 设置 ColorPicker 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的datePicker属性如何使用？",
    "md": "参数: datePicker\n说明: 设置 DatePicker 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的rangePicker属性如何使用？",
    "md": "参数: rangePicker\n说明: 设置 RangePicker 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的descriptions属性如何使用？",
    "md": "参数: descriptions\n说明: 设置 Descriptions 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的divider属性如何使用？",
    "md": "参数: divider\n说明: 设置 Divider 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的drawer属性如何使用？",
    "md": "参数: drawer\n说明: 设置 Drawer 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, classNames?: [DrawerProps\\[\"classNames\"\\]](/components/drawer-cn#api), styles?: [DrawerProps\\[\"styles\"\\]](/components/drawer-cn#api), closeIcon?: ReactNode }\n默认值: -\n版本: 5.7.0, `classNames` 和 `styles`: 5.10.0, `closeIcon`: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的dropdown属性如何使用？",
    "md": "参数: dropdown\n说明: 设置 Dropdown 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的empty属性如何使用？",
    "md": "参数: empty\n说明: 设置 Empty 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的flex属性如何使用？",
    "md": "参数: flex\n说明: 设置 Flex 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, vertical?: boolean }\n默认值: -\n版本: 5.10.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的form属性如何使用？",
    "md": "参数: form\n说明: 设置 Form 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, validateMessages?: [ValidateMessages](/components/form-cn#validatemessages), requiredMark?: boolean | `optional`, colon?: boolean, scrollToFirstError?: boolean | [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)}\n默认值: -\n版本: requiredMark: 4.8.0; colon: 4.18.0; scrollToFirstError: 5.2.0; className: 5.7.0; style: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的image属性如何使用？",
    "md": "参数: image\n说明: 设置 Image 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, preview?: { closeIcon?: React.ReactNode } }\n默认值: -\n版本: 5.7.0, closeIcon: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的input属性如何使用？",
    "md": "参数: input\n说明: 设置 Input 组件的通用属性\n类型: { autoComplete?: string, className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的layout属性如何使用？",
    "md": "参数: layout\n说明: 设置 Layout 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的list属性如何使用？",
    "md": "参数: list\n说明: 设置 List 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的menu属性如何使用？",
    "md": "参数: menu\n说明: 设置 Menu 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的mentions属性如何使用？",
    "md": "参数: mentions\n说明: 设置 Mentions 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的message属性如何使用？",
    "md": "参数: message\n说明: 设置 Message 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的modal属性如何使用？",
    "md": "参数: modal\n说明: 设置 Modal 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, classNames?: [ModalProps\\[\"classNames\"\\]](/components/modal-cn#api), styles?: [ModalProps\\[\"styles\"\\]](/components/modal-cn#api), closeIcon?: React.ReactNode }\n默认值: -\n版本: 5.7.0, `classNames` 和 `styles`: 5.10.0, `closeIcon`: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的notification属性如何使用？",
    "md": "参数: notification\n说明: 设置 Notification 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }\n默认值: -\n版本: 5.7.0, `closeIcon`: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的pagination属性如何使用？",
    "md": "参数: pagination\n说明: 设置 Pagination 组件的通用属性\n类型: { showSizeChanger?: boolean, className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的progress属性如何使用？",
    "md": "参数: progress\n说明: 设置 Progress 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的radio属性如何使用？",
    "md": "参数: radio\n说明: 设置 Radio 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的rate属性如何使用？",
    "md": "参数: rate\n说明: 设置 Rate 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的result属性如何使用？",
    "md": "参数: result\n说明: 设置 Result 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的skeleton属性如何使用？",
    "md": "参数: skeleton\n说明: 设置 Skeleton 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的segmented属性如何使用？",
    "md": "参数: segmented\n说明: 设置 Segmented 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的select属性如何使用？",
    "md": "参数: select\n说明: 设置 Select 组件的通用属性\n类型: { className?: string, showSearch?: boolean, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的slider属性如何使用？",
    "md": "参数: slider\n说明: 设置 Slider 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的switch属性如何使用？",
    "md": "参数: switch\n说明: 设置 Switch 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的space属性如何使用？",
    "md": "参数: space\n说明: 设置 Space 的通用属性，参考 [Space](/components/space-cn)\n类型: { size: `small` | `middle` | `large` | `number`, className?: string, style?: React.CSSProperties, classNames?: { item: string }, styles?: { item: React.CSSProperties } }\n默认值: -\n版本: 5.6.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的spin属性如何使用？",
    "md": "参数: spin\n说明: 设置 Spin 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的statistic属性如何使用？",
    "md": "参数: statistic\n说明: 设置 Statistic 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的steps属性如何使用？",
    "md": "参数: steps\n说明: 设置 Steps 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的table属性如何使用？",
    "md": "参数: table\n说明: 设置 Table 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, expandable?: { expandIcon?: props => React.ReactNode } }\n默认值: -\n版本: 5.7.0, expandable: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的tabs属性如何使用？",
    "md": "参数: tabs\n说明: 设置 Tabs 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` | `center` | `end` }, moreIcon?: ReactNode, addIcon?: ReactNode }\n默认值: -\n版本: 5.7.0, `moreIcon` and `addIcon`: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的tag属性如何使用？",
    "md": "参数: tag\n说明: 设置 Tag 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }\n默认值: -\n版本: 5.7.0, closeIcon: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的timeline属性如何使用？",
    "md": "参数: timeline\n说明: 设置 Timeline 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的timePicker属性如何使用？",
    "md": "参数: timePicker\n说明: 设置 TimePicker 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的tour属性如何使用？",
    "md": "参数: tour\n说明: 设置 Tour 组件的通用属性\n类型: { closeIcon?: React.ReactNode }\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的transfer属性如何使用？",
    "md": "参数: transfer\n说明: 设置 Transfer 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties, selectionsIcon?: React.ReactNode }\n默认值: -\n版本: 5.7.0, selectionsIcon: 5.14.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的tree属性如何使用？",
    "md": "参数: tree\n说明: 设置 Tree 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的typography属性如何使用？",
    "md": "参数: typography\n说明: 设置 Typography 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的upload属性如何使用？",
    "md": "参数: upload\n说明: 设置 Upload 组件的通用属性\n类型: { className?: string, style?: React.CSSProperties }\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ConfigProvider - ConfigProvider的wave属性如何使用？",
    "md": "参数: wave\n说明: 设置水波纹特效\n类型: { disabled?: boolean, showEffect?: (node: HTMLElement, info: { className, token, component }) => void }\n默认值: -\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 的 ColorPicker 有哪些配置？",
    "md": "#### ColorPicker - ColorPicker\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 允许清除选择的颜色 | boolean | false | - |\n| arrow | 配置弹出的箭头 | `boolean \\| { pointAtCenter: boolean }` | true | - |\n| children | 颜色选择器的触发器 | React.ReactNode | - | - |\n| defaultValue | 颜色默认的值 | string | `Color` | - | - |\n| defaultFormat | 颜色格式默认的值 | `rgb` | `hex` | `hsb` | - | 5.9.0 |\n| disabled | 禁用颜色选择器 | boolean | - | - |\n| disabledAlpha | 禁用透明度 | boolean | - | 5.8.0 |\n| destroyTooltipOnHide | 关闭后是否销毁弹窗 | `boolean` | false | 5.7.0 |\n| format | 颜色格式 | `rgb` | `hex` | `hsb` | `hex` | - |\n| open | 是否显示弹出窗口 | boolean | - | - |\n| presets | 预设的颜色 | `{ label: ReactNode, colors: Array<string \\| Color>, defaultOpen?: boolean }[]` | - | `defaultOpen: 5.11.0` |\n| placement | 弹出窗口的位置 | `top` | `topLeft` | `topRight` | `bottom` | `bottomLeft` | `bottomRight` | `bottomLeft` | - |\n| panelRender | 自定义渲染面板 | `(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode` | - | 5.7.0 |\n| showText | 显示颜色文本 | boolean | `(color: Color) => React.ReactNode` | - | 5.7.0 |\n| size | 设置触发器大小 | `large` | `middle` | `small` | `middle` | 5.7.0 |\n| trigger | 颜色选择器的触发模式 | `hover` | `click` | `click` | - |\n| value | 颜色的值 | string | `Color` | - | - |\n| onChange | 颜色变化的回调 | `(value: Color, hex: string) => void` | - | - |\n| onChangeComplete | 颜色选择完成的回调 | `(value: Color) => void` | - | 5.7.0 |\n| onFormatChange | 颜色格式变化的回调 | `(format: 'hex' \\| 'rgb' \\| 'hsb') => void` | - | - |\n| onOpenChange | 当 `open` 被改变时的回调 | `(open: boolean) => void` | - | - |\n| onClear | 清除的回调 | `() => void` | - | 5.6.0 |\n#### ColorPicker - Color\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| toHex | 转换成 `hex` 格式字符，返回格式如：`1677ff` | `() => string` | - |\n| toHexString | 转换成 `hex` 格式颜色字符串，返回格式如：`#1677ff` | `() => string` | - |\n| toHsb | 转换成 `hsb` 对象 | `() => ({ h: number, s: number, b: number, a number })` | - |\n| toHsbString | 转换成 `hsb` 格式颜色字符串，返回格式如：`hsb(215, 91%, 100%)` | `() => string` | - |\n| toRgb | 转换成 `rgb` 对象 | `() => ({ r: number, g: number, b: number, a number })` | - |\n| toRgbString | 转换成 `rgb` 格式颜色字符串，返回格式如：`rgb(22, 119, 255)` | `() => string` | - |\n"
  },
  {
    "title": "ant-design 的 ColorPicker - ColorPicker 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 允许清除选择的颜色 | boolean | false | - |\n| arrow | 配置弹出的箭头 | `boolean \\| { pointAtCenter: boolean }` | true | - |\n| children | 颜色选择器的触发器 | React.ReactNode | - | - |\n| defaultValue | 颜色默认的值 | string | `Color` | - | - |\n| defaultFormat | 颜色格式默认的值 | `rgb` | `hex` | `hsb` | - | 5.9.0 |\n| disabled | 禁用颜色选择器 | boolean | - | - |\n| disabledAlpha | 禁用透明度 | boolean | - | 5.8.0 |\n| destroyTooltipOnHide | 关闭后是否销毁弹窗 | `boolean` | false | 5.7.0 |\n| format | 颜色格式 | `rgb` | `hex` | `hsb` | `hex` | - |\n| open | 是否显示弹出窗口 | boolean | - | - |\n| presets | 预设的颜色 | `{ label: ReactNode, colors: Array<string \\| Color>, defaultOpen?: boolean }[]` | - | `defaultOpen: 5.11.0` |\n| placement | 弹出窗口的位置 | `top` | `topLeft` | `topRight` | `bottom` | `bottomLeft` | `bottomRight` | `bottomLeft` | - |\n| panelRender | 自定义渲染面板 | `(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode` | - | 5.7.0 |\n| showText | 显示颜色文本 | boolean | `(color: Color) => React.ReactNode` | - | 5.7.0 |\n| size | 设置触发器大小 | `large` | `middle` | `small` | `middle` | 5.7.0 |\n| trigger | 颜色选择器的触发模式 | `hover` | `click` | `click` | - |\n| value | 颜色的值 | string | `Color` | - | - |\n| onChange | 颜色变化的回调 | `(value: Color, hex: string) => void` | - | - |\n| onChangeComplete | 颜色选择完成的回调 | `(value: Color) => void` | - | 5.7.0 |\n| onFormatChange | 颜色格式变化的回调 | `(format: 'hex' \\| 'rgb' \\| 'hsb') => void` | - | - |\n| onOpenChange | 当 `open` 被改变时的回调 | `(open: boolean) => void` | - | - |\n| onClear | 清除的回调 | `() => void` | - | 5.6.0 |\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 允许清除选择的颜色\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的arrow属性如何使用？",
    "md": "参数: arrow\n说明: 配置弹出的箭头\n类型: `boolean \\| { pointAtCenter: boolean }`\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的children属性如何使用？",
    "md": "参数: children\n说明: 颜色选择器的触发器\n类型: React.ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 颜色默认的值\n类型: string | `Color`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的defaultFormat属性如何使用？",
    "md": "参数: defaultFormat\n说明: 颜色格式默认的值\n类型: `rgb` | `hex` | `hsb`\n默认值: -\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用颜色选择器\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的disabledAlpha属性如何使用？",
    "md": "参数: disabledAlpha\n说明: 禁用透明度\n类型: boolean\n默认值: -\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的destroyTooltipOnHide属性如何使用？",
    "md": "参数: destroyTooltipOnHide\n说明: 关闭后是否销毁弹窗\n类型: `boolean`\n默认值: false\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的format属性如何使用？",
    "md": "参数: format\n说明: 颜色格式\n类型: `rgb` | `hex` | `hsb`\n默认值: `hex`\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的open属性如何使用？",
    "md": "参数: open\n说明: 是否显示弹出窗口\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的presets属性如何使用？",
    "md": "参数: presets\n说明: 预设的颜色\n类型: `{ label: ReactNode, colors: Array<string \\| Color>, defaultOpen?: boolean }[]`\n默认值: -\n版本: `defaultOpen: 5.11.0`\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的placement属性如何使用？",
    "md": "参数: placement\n说明: 弹出窗口的位置\n类型: `top` | `topLeft` | `topRight` | `bottom` | `bottomLeft` | `bottomRight`\n默认值: `bottomLeft`\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的panelRender属性如何使用？",
    "md": "参数: panelRender\n说明: 自定义渲染面板\n类型: `(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode`\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的showText属性如何使用？",
    "md": "参数: showText\n说明: 显示颜色文本\n类型: boolean | `(color: Color) => React.ReactNode`\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的size属性如何使用？",
    "md": "参数: size\n说明: 设置触发器大小\n类型: `large` | `middle` | `small`\n默认值: `middle`\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的trigger属性如何使用？",
    "md": "参数: trigger\n说明: 颜色选择器的触发模式\n类型: `hover` | `click`\n默认值: `click`\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的value属性如何使用？",
    "md": "参数: value\n说明: 颜色的值\n类型: string | `Color`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 颜色变化的回调\n类型: `(value: Color, hex: string) => void`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的onChangeComplete属性如何使用？",
    "md": "参数: onChangeComplete\n说明: 颜色选择完成的回调\n类型: `(value: Color) => void`\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的onFormatChange属性如何使用？",
    "md": "参数: onFormatChange\n说明: 颜色格式变化的回调\n类型: `(format: 'hex' \\| 'rgb' \\| 'hsb') => void`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的onOpenChange属性如何使用？",
    "md": "参数: onOpenChange\n说明: 当 `open` 被改变时的回调\n类型: `(open: boolean) => void`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - ColorPicker的onClear属性如何使用？",
    "md": "参数: onClear\n说明: 清除的回调\n类型: `() => void`\n默认值: -\n版本: 5.6.0\n"
  },
  {
    "title": "ant-design 的 ColorPicker - Color 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| toHex | 转换成 `hex` 格式字符，返回格式如：`1677ff` | `() => string` | - |\n| toHexString | 转换成 `hex` 格式颜色字符串，返回格式如：`#1677ff` | `() => string` | - |\n| toHsb | 转换成 `hsb` 对象 | `() => ({ h: number, s: number, b: number, a number })` | - |\n| toHsbString | 转换成 `hsb` 格式颜色字符串，返回格式如：`hsb(215, 91%, 100%)` | `() => string` | - |\n| toRgb | 转换成 `rgb` 对象 | `() => ({ r: number, g: number, b: number, a number })` | - |\n| toRgbString | 转换成 `rgb` 格式颜色字符串，返回格式如：`rgb(22, 119, 255)` | `() => string` | - |\n"
  },
  {
    "title": "ant-design 中 ColorPicker - Color的toHex属性如何使用？",
    "md": "参数: toHex\n说明: 转换成 `hex` 格式字符，返回格式如：`1677ff`\n类型: `() => string`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - Color的toHexString属性如何使用？",
    "md": "参数: toHexString\n说明: 转换成 `hex` 格式颜色字符串，返回格式如：`#1677ff`\n类型: `() => string`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - Color的toHsb属性如何使用？",
    "md": "参数: toHsb\n说明: 转换成 `hsb` 对象\n类型: `() => ({ h: number, s: number, b: number, a number })`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - Color的toHsbString属性如何使用？",
    "md": "参数: toHsbString\n说明: 转换成 `hsb` 格式颜色字符串，返回格式如：`hsb(215, 91%, 100%)`\n类型: `() => string`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - Color的toRgb属性如何使用？",
    "md": "参数: toRgb\n说明: 转换成 `rgb` 对象\n类型: `() => ({ r: number, g: number, b: number, a number })`\n默认值: -\n"
  },
  {
    "title": "ant-design 中 ColorPicker - Color的toRgbString属性如何使用？",
    "md": "参数: toRgbString\n说明: 转换成 `rgb` 格式颜色字符串，返回格式如：`rgb(22, 119, 255)`\n类型: `() => string`\n默认值: -\n"
  },
  {
    "title": "ant-design 的 Collapse 有哪些配置？",
    "md": "#### Collapse - Collapse\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| accordion | 手风琴模式 | boolean | false | - |\n| activeKey | 当前激活 tab 面板的 key | string\\[] | string <br/> number\\[] | number | 默认无，accordion 模式下默认第一个元素 | - |\n| bordered | 带边框风格的折叠面板 | boolean | true | - |\n| collapsible | 所有子面板是否可折叠或指定可折叠触发区域 | `header` | `icon` | `disabled` | - | 4.9.0 |\n| defaultActiveKey | 初始化选中面板的 key | string\\[] | string<br/> number\\[] | number | - | - |\n| destroyInactivePanel | 销毁折叠隐藏的面板 | boolean | false | - |\n| expandIcon | 自定义切换图标 | (panelProps) => ReactNode | - | - |\n| expandIconPosition | 设置图标位置 | `start` | `end` | - | 4.21.0 |\n| ghost | 使折叠面板透明且无边框 | boolean | false | 4.4.0 |\n| size | 设置折叠面板大小 | `large` | `middle` | `small` | `middle` | 5.2.0 |\n| onChange | 切换面板的回调 | function | - | - |\n| items | 折叠项目内容 | [ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6) | - | 5.6.0 |\n#### Collapse - Collapse.Panel\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| collapsible | 是否可折叠或指定可折叠触发区域 | `header` | `icon` | `disabled` | - | 4.9.0 (icon: 4.24.0) |\n| extra | 自定义渲染每个面板右上角的内容 | ReactNode | - | - |\n| forceRender | 被隐藏时是否渲染 DOM 结构 | boolean | false | - |\n| header | 面板头内容 | ReactNode | - | - |\n| key | 对应 activeKey | string | number | - | - |\n| showArrow | 是否展示当前面板上的箭头（为 false 时，collapsible 不能置为 icon） | boolean | true | - |\n"
  },
  {
    "title": "ant-design 的 Collapse - Collapse 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| accordion | 手风琴模式 | boolean | false | - |\n| activeKey | 当前激活 tab 面板的 key | string\\[] | string <br/> number\\[] | number | 默认无，accordion 模式下默认第一个元素 | - |\n| bordered | 带边框风格的折叠面板 | boolean | true | - |\n| collapsible | 所有子面板是否可折叠或指定可折叠触发区域 | `header` | `icon` | `disabled` | - | 4.9.0 |\n| defaultActiveKey | 初始化选中面板的 key | string\\[] | string<br/> number\\[] | number | - | - |\n| destroyInactivePanel | 销毁折叠隐藏的面板 | boolean | false | - |\n| expandIcon | 自定义切换图标 | (panelProps) => ReactNode | - | - |\n| expandIconPosition | 设置图标位置 | `start` | `end` | - | 4.21.0 |\n| ghost | 使折叠面板透明且无边框 | boolean | false | 4.4.0 |\n| size | 设置折叠面板大小 | `large` | `middle` | `small` | `middle` | 5.2.0 |\n| onChange | 切换面板的回调 | function | - | - |\n| items | 折叠项目内容 | [ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6) | - | 5.6.0 |\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的accordion属性如何使用？",
    "md": "参数: accordion\n说明: 手风琴模式\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的activeKey属性如何使用？",
    "md": "参数: activeKey\n说明: 当前激活 tab 面板的 key\n类型: string\\[] | string <br/> number\\[] | number\n默认值: 默认无，accordion 模式下默认第一个元素\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 带边框风格的折叠面板\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的collapsible属性如何使用？",
    "md": "参数: collapsible\n说明: 所有子面板是否可折叠或指定可折叠触发区域\n类型: `header` | `icon` | `disabled`\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的defaultActiveKey属性如何使用？",
    "md": "参数: defaultActiveKey\n说明: 初始化选中面板的 key\n类型: string\\[] | string<br/> number\\[] | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的destroyInactivePanel属性如何使用？",
    "md": "参数: destroyInactivePanel\n说明: 销毁折叠隐藏的面板\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的expandIcon属性如何使用？",
    "md": "参数: expandIcon\n说明: 自定义切换图标\n类型: (panelProps) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的expandIconPosition属性如何使用？",
    "md": "参数: expandIconPosition\n说明: 设置图标位置\n类型: `start` | `end`\n默认值: -\n版本: 4.21.0\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的ghost属性如何使用？",
    "md": "参数: ghost\n说明: 使折叠面板透明且无边框\n类型: boolean\n默认值: false\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的size属性如何使用？",
    "md": "参数: size\n说明: 设置折叠面板大小\n类型: `large` | `middle` | `small`\n默认值: `middle`\n版本: 5.2.0\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 切换面板的回调\n类型: function\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse的items属性如何使用？",
    "md": "参数: items\n说明: 折叠项目内容\n类型: [ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6)\n默认值: -\n版本: 5.6.0\n"
  },
  {
    "title": "ant-design 的 Collapse - Collapse.Panel 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| collapsible | 是否可折叠或指定可折叠触发区域 | `header` | `icon` | `disabled` | - | 4.9.0 (icon: 4.24.0) |\n| extra | 自定义渲染每个面板右上角的内容 | ReactNode | - | - |\n| forceRender | 被隐藏时是否渲染 DOM 结构 | boolean | false | - |\n| header | 面板头内容 | ReactNode | - | - |\n| key | 对应 activeKey | string | number | - | - |\n| showArrow | 是否展示当前面板上的箭头（为 false 时，collapsible 不能置为 icon） | boolean | true | - |\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse.Panel的collapsible属性如何使用？",
    "md": "参数: collapsible\n说明: 是否可折叠或指定可折叠触发区域\n类型: `header` | `icon` | `disabled`\n默认值: -\n版本: 4.9.0 (icon: 4.24.0)\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse.Panel的extra属性如何使用？",
    "md": "参数: extra\n说明: 自定义渲染每个面板右上角的内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse.Panel的forceRender属性如何使用？",
    "md": "参数: forceRender\n说明: 被隐藏时是否渲染 DOM 结构\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse.Panel的header属性如何使用？",
    "md": "参数: header\n说明: 面板头内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse.Panel的key属性如何使用？",
    "md": "参数: key\n说明: 对应 activeKey\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Collapse - Collapse.Panel的showArrow属性如何使用？",
    "md": "参数: showArrow\n说明: 是否展示当前面板上的箭头（为 false 时，collapsible 不能置为 icon）\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 的 Checkbox 有哪些配置？",
    "md": "#### Checkbox - Checkbox\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| checked | 指定当前是否选中 | boolean | false | - |\n| defaultChecked | 初始是否选中 | boolean | false | - |\n| disabled | 失效状态 | boolean | false | - |\n| indeterminate | 设置 indeterminate 状态，只负责样式控制 | boolean | false | - |\n| onChange | 变化时的回调函数 | (e: CheckboxChangeEvent) => void | - | - |\n#### Checkbox - Checkbox Group\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认选中的选项 | (string | number)\\[] | \\[] | - |\n| disabled | 整组失效 | boolean | false | - |\n| name | CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性 | string | - | - |\n| options | 指定可选项 | string\\[] | number\\[] | Option\\[] | \\[] | - |\n| value | 指定选中的选项 | (string | number | boolean)\\[] | \\[] | - |\n| onChange | 变化时的回调函数 | (checkedValue: CheckboxValueType\\[]) => void | - | - |\n#### Checkbox - Checkbox\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 的 Checkbox - Checkbox 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| checked | 指定当前是否选中 | boolean | false | - |\n| defaultChecked | 初始是否选中 | boolean | false | - |\n| disabled | 失效状态 | boolean | false | - |\n| indeterminate | 设置 indeterminate 状态，只负责样式控制 | boolean | false | - |\n| onChange | 变化时的回调函数 | (e: CheckboxChangeEvent) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的checked属性如何使用？",
    "md": "参数: checked\n说明: 指定当前是否选中\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的defaultChecked属性如何使用？",
    "md": "参数: defaultChecked\n说明: 初始是否选中\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 失效状态\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的indeterminate属性如何使用？",
    "md": "参数: indeterminate\n说明: 设置 indeterminate 状态，只负责样式控制\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 变化时的回调函数\n类型: (e: CheckboxChangeEvent) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Checkbox - Checkbox Group 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认选中的选项 | (string | number)\\[] | \\[] | - |\n| disabled | 整组失效 | boolean | false | - |\n| name | CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性 | string | - | - |\n| options | 指定可选项 | string\\[] | number\\[] | Option\\[] | \\[] | - |\n| value | 指定选中的选项 | (string | number | boolean)\\[] | \\[] | - |\n| onChange | 变化时的回调函数 | (checkedValue: CheckboxValueType\\[]) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox Group的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认选中的选项\n类型: (string | number)\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox Group的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 整组失效\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox Group的name属性如何使用？",
    "md": "参数: name\n说明: CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox Group的options属性如何使用？",
    "md": "参数: options\n说明: 指定可选项\n类型: string\\[] | number\\[] | Option\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox Group的value属性如何使用？",
    "md": "参数: value\n说明: 指定选中的选项\n类型: (string | number | boolean)\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox Group的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 变化时的回调函数\n类型: (checkedValue: CheckboxValueType\\[]) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Checkbox - Checkbox 有哪些配置？",
    "md": "| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 Checkbox - Checkbox的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 Cascader 有哪些配置？",
    "md": "#### Cascader - Cascader\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean | { clearIcon?: ReactNode } | true | 5.8.0: 支持对象形式 |\n| autoClearSearchValue | 是否在选中项后清空搜索框，只在 `multiple` 为 `true` 时有效 | boolean | true | 5.9.0 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| changeOnSelect | （单选时生效）当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示 | boolean | false | - |\n| className | 自定义类名 | string | - | - |\n| defaultValue | 默认的选中项 | string\\[] | number\\[] | \\[] | - |\n| disabled | 禁用 | boolean | false | - |\n| displayRender | 选择后展示的渲染函数 | (label, selectedOptions) => ReactNode | label => label.join(`/`) | `multiple`: 4.18.0 |\n| tagRender | 自定义 tag 内容 render，仅在多选时生效 | ({ label: string, onClose: function, value: string }) => ReactNode | - | - |\n| popupClassName | 自定义浮层类名 | string | - | 4.23.0 |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.4.0 |\n| expandIcon | 自定义次级菜单展开图标 | ReactNode | - | 4.4.0 |\n| expandTrigger | 次级菜单的展开方式，可选 'click' 和 'hover' | string | `click` | - |\n| fieldNames | 自定义 options 中 label value children 的字段 | object | { label: `label`, value: `value`, children: `children` } | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body | - |\n| loadData | 用于动态加载选项，无法与 `showSearch` 一起使用 | (selectedOptions) => void | - | - |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number | `responsive` | - | 4.17.0 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode | function(omittedValues) | - | 4.17.0 |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - | 4.17.0 |\n| notFoundContent | 当下拉列表为空时显示的内容 | string | `Not Found` | - |\n| open | 控制浮层显隐 | boolean | - | 4.17.0 |\n| options | 可选项数据源 | [Option](#option)\\[] | - | - |\n| placeholder | 输入框占位文本 | string | `请选择` | - |\n| placement | 浮层预设位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | `bottomLeft` | 4.17.0 |\n| showSearch | 在选择框中显示搜索框 | boolean | [Object](#showsearch) | false | - |\n| size | 输入框大小 | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| style | 自定义样式 | CSSProperties | - | - |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - | - |\n| value | 指定选中项 | string\\[] | number\\[] | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 选择完成后的回调 | (value, selectedOptions) => void | - | - |\n| onDropdownVisibleChange | 显示/隐藏浮层的回调 | (value) => void | - | 4.17.0 |\n| multiple | 支持多选节点 | boolean | - | 4.17.0 |\n| showCheckedStrategy | 定义选中项回填的方式。`Cascader.SHOW_CHILD`: 只显示选中的子节点。`Cascader.SHOW_PARENT`: 只显示父节点（当父节点下所有子节点都选中时）。 | `Cascader.SHOW_PARENT` | `Cascader.SHOW_CHILD` | `Cascader.SHOW_PARENT` | 4.20.0 |\n| removeIcon | 自定义的多选框清除图标 | ReactNode | - | - |\n| searchValue | 设置搜索的值，需要与 `showSearch` 配合使用 | string | - | 4.17.0 |\n| onSearch | 监听搜索，返回输入的值 | (search: string) => void | - | 4.17.0 |\n| dropdownMenuColumnStyle | 下拉菜单列的样式 | CSSProperties | - | - |\n#### Cascader - showSearch\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| filter | 接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false | function(inputValue, path): boolean | - | - |\n| limit | 搜索结果展示数量 | number | false | 50 | - |\n| matchInputWidth | 搜索结果列表是否与输入框同宽（[效果](https://github.com/ant-design/ant-design/issues/25779)） | boolean | true | - |\n| render | 用于渲染 filter 后的选项 | function(inputValue, path): ReactNode | - | - |\n| sort | 用于排序 filter 后的选项 | function(a, b, inputValue) | - | - |\n#### Cascader - 方法\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 的 Cascader - Cascader 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean | { clearIcon?: ReactNode } | true | 5.8.0: 支持对象形式 |\n| autoClearSearchValue | 是否在选中项后清空搜索框，只在 `multiple` 为 `true` 时有效 | boolean | true | 5.9.0 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| changeOnSelect | （单选时生效）当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示 | boolean | false | - |\n| className | 自定义类名 | string | - | - |\n| defaultValue | 默认的选中项 | string\\[] | number\\[] | \\[] | - |\n| disabled | 禁用 | boolean | false | - |\n| displayRender | 选择后展示的渲染函数 | (label, selectedOptions) => ReactNode | label => label.join(`/`) | `multiple`: 4.18.0 |\n| tagRender | 自定义 tag 内容 render，仅在多选时生效 | ({ label: string, onClose: function, value: string }) => ReactNode | - | - |\n| popupClassName | 自定义浮层类名 | string | - | 4.23.0 |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.4.0 |\n| expandIcon | 自定义次级菜单展开图标 | ReactNode | - | 4.4.0 |\n| expandTrigger | 次级菜单的展开方式，可选 'click' 和 'hover' | string | `click` | - |\n| fieldNames | 自定义 options 中 label value children 的字段 | object | { label: `label`, value: `value`, children: `children` } | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body | - |\n| loadData | 用于动态加载选项，无法与 `showSearch` 一起使用 | (selectedOptions) => void | - | - |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number | `responsive` | - | 4.17.0 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode | function(omittedValues) | - | 4.17.0 |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - | 4.17.0 |\n| notFoundContent | 当下拉列表为空时显示的内容 | string | `Not Found` | - |\n| open | 控制浮层显隐 | boolean | - | 4.17.0 |\n| options | 可选项数据源 | [Option](#option)\\[] | - | - |\n| placeholder | 输入框占位文本 | string | `请选择` | - |\n| placement | 浮层预设位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | `bottomLeft` | 4.17.0 |\n| showSearch | 在选择框中显示搜索框 | boolean | [Object](#showsearch) | false | - |\n| size | 输入框大小 | `large` | `middle` | `small` | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| style | 自定义样式 | CSSProperties | - | - |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - | - |\n| value | 指定选中项 | string\\[] | number\\[] | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onChange | 选择完成后的回调 | (value, selectedOptions) => void | - | - |\n| onDropdownVisibleChange | 显示/隐藏浮层的回调 | (value) => void | - | 4.17.0 |\n| multiple | 支持多选节点 | boolean | - | 4.17.0 |\n| showCheckedStrategy | 定义选中项回填的方式。`Cascader.SHOW_CHILD`: 只显示选中的子节点。`Cascader.SHOW_PARENT`: 只显示父节点（当父节点下所有子节点都选中时）。 | `Cascader.SHOW_PARENT` | `Cascader.SHOW_CHILD` | `Cascader.SHOW_PARENT` | 4.20.0 |\n| removeIcon | 自定义的多选框清除图标 | ReactNode | - | - |\n| searchValue | 设置搜索的值，需要与 `showSearch` 配合使用 | string | - | 4.17.0 |\n| onSearch | 监听搜索，返回输入的值 | (search: string) => void | - | 4.17.0 |\n| dropdownMenuColumnStyle | 下拉菜单列的样式 | CSSProperties | - | - |\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 支持清除\n类型: boolean | { clearIcon?: ReactNode }\n默认值: true\n版本: 5.8.0: 支持对象形式\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的autoClearSearchValue属性如何使用？",
    "md": "参数: autoClearSearchValue\n说明: 是否在选中项后清空搜索框，只在 `multiple` 为 `true` 时有效\n类型: boolean\n默认值: true\n版本: 5.9.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的changeOnSelect属性如何使用？",
    "md": "参数: changeOnSelect\n说明: （单选时生效）当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的className属性如何使用？",
    "md": "参数: className\n说明: 自定义类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认的选中项\n类型: string\\[] | number\\[]\n默认值: \\[]\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的displayRender属性如何使用？",
    "md": "参数: displayRender\n说明: 选择后展示的渲染函数\n类型: (label, selectedOptions) => ReactNode\n默认值: label => label.join(`/`)\n版本: `multiple`: 4.18.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的tagRender属性如何使用？",
    "md": "参数: tagRender\n说明: 自定义 tag 内容 render，仅在多选时生效\n类型: ({ label: string, onClose: function, value: string }) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 自定义浮层类名\n类型: string\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的dropdownRender属性如何使用？",
    "md": "参数: dropdownRender\n说明: 自定义下拉框内容\n类型: (menus: ReactNode) => ReactNode\n默认值: -\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的expandIcon属性如何使用？",
    "md": "参数: expandIcon\n说明: 自定义次级菜单展开图标\n类型: ReactNode\n默认值: -\n版本: 4.4.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的expandTrigger属性如何使用？",
    "md": "参数: expandTrigger\n说明: 次级菜单的展开方式，可选 'click' 和 'hover'\n类型: string\n默认值: `click`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的fieldNames属性如何使用？",
    "md": "参数: fieldNames\n说明: 自定义 options 中 label value children 的字段\n类型: object\n默认值: { label: `label`, value: `value`, children: `children` }\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)\n类型: function(triggerNode)\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的loadData属性如何使用？",
    "md": "参数: loadData\n说明: 用于动态加载选项，无法与 `showSearch` 一起使用\n类型: (selectedOptions) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的maxTagCount属性如何使用？",
    "md": "参数: maxTagCount\n说明: 最多显示多少个 tag，响应式模式会对性能产生损耗\n类型: number | `responsive`\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的maxTagPlaceholder属性如何使用？",
    "md": "参数: maxTagPlaceholder\n说明: 隐藏 tag 时显示的内容\n类型: ReactNode | function(omittedValues)\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的maxTagTextLength属性如何使用？",
    "md": "参数: maxTagTextLength\n说明: 最大显示的 tag 文本长度\n类型: number\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的notFoundContent属性如何使用？",
    "md": "参数: notFoundContent\n说明: 当下拉列表为空时显示的内容\n类型: string\n默认值: `Not Found`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的open属性如何使用？",
    "md": "参数: open\n说明: 控制浮层显隐\n类型: boolean\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的options属性如何使用？",
    "md": "参数: options\n说明: 可选项数据源\n类型: [Option](#option)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 输入框占位文本\n类型: string\n默认值: `请选择`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的placement属性如何使用？",
    "md": "参数: placement\n说明: 浮层预设位置\n类型: `bottomLeft` `bottomRight` `topLeft` `topRight`\n默认值: `bottomLeft`\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的showSearch属性如何使用？",
    "md": "参数: showSearch\n说明: 在选择框中显示搜索框\n类型: boolean | [Object](#showsearch)\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的size属性如何使用？",
    "md": "参数: size\n说明: 输入框大小\n类型: `large` | `middle` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的style属性如何使用？",
    "md": "参数: style\n说明: 自定义样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的suffixIcon属性如何使用？",
    "md": "参数: suffixIcon\n说明: 自定义的选择框后缀图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的value属性如何使用？",
    "md": "参数: value\n说明: 指定选中项\n类型: string\\[] | number\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选择完成后的回调\n类型: (value, selectedOptions) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的onDropdownVisibleChange属性如何使用？",
    "md": "参数: onDropdownVisibleChange\n说明: 显示/隐藏浮层的回调\n类型: (value) => void\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的multiple属性如何使用？",
    "md": "参数: multiple\n说明: 支持多选节点\n类型: boolean\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的showCheckedStrategy属性如何使用？",
    "md": "参数: showCheckedStrategy\n说明: 定义选中项回填的方式。`Cascader.SHOW_CHILD`: 只显示选中的子节点。`Cascader.SHOW_PARENT`: 只显示父节点（当父节点下所有子节点都选中时）。\n类型: `Cascader.SHOW_PARENT` | `Cascader.SHOW_CHILD`\n默认值: `Cascader.SHOW_PARENT`\n版本: 4.20.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的removeIcon属性如何使用？",
    "md": "参数: removeIcon\n说明: 自定义的多选框清除图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的searchValue属性如何使用？",
    "md": "参数: searchValue\n说明: 设置搜索的值，需要与 `showSearch` 配合使用\n类型: string\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的onSearch属性如何使用？",
    "md": "参数: onSearch\n说明: 监听搜索，返回输入的值\n类型: (search: string) => void\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Cascader - Cascader的dropdownMenuColumnStyle属性如何使用？",
    "md": "参数: dropdownMenuColumnStyle\n说明: 下拉菜单列的样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Cascader - showSearch 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| filter | 接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false | function(inputValue, path): boolean | - | - |\n| limit | 搜索结果展示数量 | number | false | 50 | - |\n| matchInputWidth | 搜索结果列表是否与输入框同宽（[效果](https://github.com/ant-design/ant-design/issues/25779)） | boolean | true | - |\n| render | 用于渲染 filter 后的选项 | function(inputValue, path): ReactNode | - | - |\n| sort | 用于排序 filter 后的选项 | function(a, b, inputValue) | - | - |\n"
  },
  {
    "title": "ant-design 中 Cascader - showSearch的filter属性如何使用？",
    "md": "参数: filter\n说明: 接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false\n类型: function(inputValue, path): boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - showSearch的limit属性如何使用？",
    "md": "参数: limit\n说明: 搜索结果展示数量\n类型: number | false\n默认值: 50\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - showSearch的matchInputWidth属性如何使用？",
    "md": "参数: matchInputWidth\n说明: 搜索结果列表是否与输入框同宽（[效果](https://github.com/ant-design/ant-design/issues/25779)）\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - showSearch的render属性如何使用？",
    "md": "参数: render\n说明: 用于渲染 filter 后的选项\n类型: function(inputValue, path): ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - showSearch的sort属性如何使用？",
    "md": "参数: sort\n说明: 用于排序 filter 后的选项\n类型: function(a, b, inputValue)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Cascader - 方法 有哪些配置？",
    "md": "| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 Cascader - 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 Cascader - 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 Carousel 有哪些配置？",
    "md": "#### Carousel - Carousel\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoplay | 是否自动切换 | boolean | false | - |\n| autoplaySpeed | 自动切换的间隔（毫秒） | number | 3000 | - |\n| dotPosition | 面板指示点位置，可选 `top` `bottom` `left` `right` | string | `bottom` | - |\n| dots | 是否显示面板指示点，如果为 `object` 则同时可以指定 `dotsClass` 或者 | boolean | { className?: string } | true | - |\n| fade | 使用渐变切换动效 | boolean | false | - |\n| infinite | 是否无限循环切换（实现方式是复制两份 children 元素，如果子元素有副作用则可能会引发 bug） | boolean | true | - |\n| speed | 切换动效的时间（毫秒） | number | 500 | - |\n| easing | 动画效果 | string | `linear` | - |\n| effect | 动画效果函数 | `scrollx` | `fade` | `scrollx` | - |\n| afterChange | 切换面板的回调 | (current: number) => void | - | - |\n| beforeChange | 切换面板的回调 | (current: number, next: number) => void | - | - |\n| waitForAnimate | 是否等待切换动画 | boolean | false | - |\n#### Carousel - 方法\n| 名称 | 描述 |\n| --- | --- |\n| goTo(slideNumber, dontAnimate) | 切换到指定面板, dontAnimate = true 时，不使用动画 |\n| next() | 切换到下一面板 |\n| prev() | 切换到上一面板 |\n"
  },
  {
    "title": "ant-design 的 Carousel - Carousel 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoplay | 是否自动切换 | boolean | false | - |\n| autoplaySpeed | 自动切换的间隔（毫秒） | number | 3000 | - |\n| dotPosition | 面板指示点位置，可选 `top` `bottom` `left` `right` | string | `bottom` | - |\n| dots | 是否显示面板指示点，如果为 `object` 则同时可以指定 `dotsClass` 或者 | boolean | { className?: string } | true | - |\n| fade | 使用渐变切换动效 | boolean | false | - |\n| infinite | 是否无限循环切换（实现方式是复制两份 children 元素，如果子元素有副作用则可能会引发 bug） | boolean | true | - |\n| speed | 切换动效的时间（毫秒） | number | 500 | - |\n| easing | 动画效果 | string | `linear` | - |\n| effect | 动画效果函数 | `scrollx` | `fade` | `scrollx` | - |\n| afterChange | 切换面板的回调 | (current: number) => void | - | - |\n| beforeChange | 切换面板的回调 | (current: number, next: number) => void | - | - |\n| waitForAnimate | 是否等待切换动画 | boolean | false | - |\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的autoplay属性如何使用？",
    "md": "参数: autoplay\n说明: 是否自动切换\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的autoplaySpeed属性如何使用？",
    "md": "参数: autoplaySpeed\n说明: 自动切换的间隔（毫秒）\n类型: number\n默认值: 3000\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的dotPosition属性如何使用？",
    "md": "参数: dotPosition\n说明: 面板指示点位置，可选 `top` `bottom` `left` `right`\n类型: string\n默认值: `bottom`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的dots属性如何使用？",
    "md": "参数: dots\n说明: 是否显示面板指示点，如果为 `object` 则同时可以指定 `dotsClass` 或者\n类型: boolean | { className?: string }\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的fade属性如何使用？",
    "md": "参数: fade\n说明: 使用渐变切换动效\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的infinite属性如何使用？",
    "md": "参数: infinite\n说明: 是否无限循环切换（实现方式是复制两份 children 元素，如果子元素有副作用则可能会引发 bug）\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的speed属性如何使用？",
    "md": "参数: speed\n说明: 切换动效的时间（毫秒）\n类型: number\n默认值: 500\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的easing属性如何使用？",
    "md": "参数: easing\n说明: 动画效果\n类型: string\n默认值: `linear`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的effect属性如何使用？",
    "md": "参数: effect\n说明: 动画效果函数\n类型: `scrollx` | `fade`\n默认值: `scrollx`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的afterChange属性如何使用？",
    "md": "参数: afterChange\n说明: 切换面板的回调\n类型: (current: number) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的beforeChange属性如何使用？",
    "md": "参数: beforeChange\n说明: 切换面板的回调\n类型: (current: number, next: number) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Carousel - Carousel的waitForAnimate属性如何使用？",
    "md": "参数: waitForAnimate\n说明: 是否等待切换动画\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 的 Carousel - 方法 有哪些配置？",
    "md": "| 名称 | 描述 |\n| --- | --- |\n| goTo(slideNumber, dontAnimate) | 切换到指定面板, dontAnimate = true 时，不使用动画 |\n| next() | 切换到下一面板 |\n| prev() | 切换到上一面板 |\n"
  },
  {
    "title": "ant-design 中 Carousel - 方法的goTo(slideNumber, dontAnimate)属性如何使用？",
    "md": "名称: goTo(slideNumber, dontAnimate)\n描述: 切换到指定面板, dontAnimate = true 时，不使用动画\n"
  },
  {
    "title": "ant-design 中 Carousel - 方法的next()属性如何使用？",
    "md": "名称: next()\n描述: 切换到下一面板\n"
  },
  {
    "title": "ant-design 中 Carousel - 方法的prev()属性如何使用？",
    "md": "名称: prev()\n描述: 切换到上一面板\n"
  },
  {
    "title": "ant-design 的 Card 有哪些配置？",
    "md": "#### Card - Card\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| actions | 卡片操作组，位置在卡片底部 | Array\\<ReactNode> | - | - |\n| activeTabKey | 当前激活页签的 key | string | - | - |\n| bordered | 是否有边框 | boolean | true | - |\n| cover | 卡片封面 | ReactNode | - | - |\n| defaultActiveTabKey | 初始化选中页签的 key，如果没有设置 activeTabKey | string | `第一个页签` | - |\n| extra | 卡片右上角的操作区域 | ReactNode | - | - |\n| hoverable | 鼠标移过时可浮起 | boolean | false | - |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean | false | - |\n| size | card 的尺寸 | `default` | `small` | `default` | - |\n| tabBarExtraContent | tab bar 上额外的元素 | ReactNode | - | - |\n| tabList | 页签标题列表 | [TabItemType](/components/tabs#tabitemtype)\\[] | - | - |\n| tabProps | [Tabs](/components/tabs-cn#tabs) | - | - | - |\n| title | 卡片标题 | ReactNode | - | - |\n| type | 卡片类型，可设置为 `inner` 或 不设置 | string | - | - |\n| classNames | 配置卡片内置模块的 className | Record\\<SemanticDOM, string> | - | 5.14.0 |\n| styles | 配置卡片内置模块的 style | Record\\<SemanticDOM, string> | - | 5.14.0 |\n| onTabChange | 页签切换的回调 | (key) => void | - | - |\n#### Card - Card.Grid\n| 参数      | 说明                   | 类型          | 默认值 | 版本 |\n| --------- | ---------------------- | ------------- | ------ | ---- |\n| className | 网格容器类名           | string        | -      | -    |\n| hoverable | 鼠标移过时可浮起       | boolean       | true   | -    |\n| style     | 定义网格容器类名的样式 | CSSProperties | -      | -    |\n#### Card - Card.Meta\n| 参数        | 说明               | 类型          | 默认值 | 版本 |\n| ----------- | ------------------ | ------------- | ------ | ---- |\n| avatar      | 头像/图标          | ReactNode     | -      | -    |\n| className   | 容器类名           | string        | -      | -    |\n| description | 描述内容           | ReactNode     | -      | -    |\n| style       | 定义容器类名的样式 | CSSProperties | -      | -    |\n| title       | 标题内容           | ReactNode     | -      | -    |\n#### Card - Card\n| 名称    | 说明                     | 版本   |\n| ------- | ------------------------ | ------ |\n| header  | 设置卡片头部区域         | 5.14.0 |\n| body    | 设置卡片内容区域         | 5.14.0 |\n| extra   | 设置卡片右上角的操作区域 | 5.14.0 |\n| title   | 设置卡片标题             | 5.14.0 |\n| actions | 设置卡片底部操作组       | 5.14.0 |\n| cover   | 设置标题封面             | 5.14.0 |\n"
  },
  {
    "title": "ant-design 的 Card - Card 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| actions | 卡片操作组，位置在卡片底部 | Array\\<ReactNode> | - | - |\n| activeTabKey | 当前激活页签的 key | string | - | - |\n| bordered | 是否有边框 | boolean | true | - |\n| cover | 卡片封面 | ReactNode | - | - |\n| defaultActiveTabKey | 初始化选中页签的 key，如果没有设置 activeTabKey | string | `第一个页签` | - |\n| extra | 卡片右上角的操作区域 | ReactNode | - | - |\n| hoverable | 鼠标移过时可浮起 | boolean | false | - |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean | false | - |\n| size | card 的尺寸 | `default` | `small` | `default` | - |\n| tabBarExtraContent | tab bar 上额外的元素 | ReactNode | - | - |\n| tabList | 页签标题列表 | [TabItemType](/components/tabs#tabitemtype)\\[] | - | - |\n| tabProps | [Tabs](/components/tabs-cn#tabs) | - | - | - |\n| title | 卡片标题 | ReactNode | - | - |\n| type | 卡片类型，可设置为 `inner` 或 不设置 | string | - | - |\n| classNames | 配置卡片内置模块的 className | Record\\<SemanticDOM, string> | - | 5.14.0 |\n| styles | 配置卡片内置模块的 style | Record\\<SemanticDOM, string> | - | 5.14.0 |\n| onTabChange | 页签切换的回调 | (key) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Card - Card的actions属性如何使用？",
    "md": "参数: actions\n说明: 卡片操作组，位置在卡片底部\n类型: Array\\<ReactNode>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的activeTabKey属性如何使用？",
    "md": "参数: activeTabKey\n说明: 当前激活页签的 key\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的bordered属性如何使用？",
    "md": "参数: bordered\n说明: 是否有边框\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的cover属性如何使用？",
    "md": "参数: cover\n说明: 卡片封面\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的defaultActiveTabKey属性如何使用？",
    "md": "参数: defaultActiveTabKey\n说明: 初始化选中页签的 key，如果没有设置 activeTabKey\n类型: string\n默认值: `第一个页签`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的extra属性如何使用？",
    "md": "参数: extra\n说明: 卡片右上角的操作区域\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的hoverable属性如何使用？",
    "md": "参数: hoverable\n说明: 鼠标移过时可浮起\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的loading属性如何使用？",
    "md": "参数: loading\n说明: 当卡片内容还在加载中时，可以用 loading 展示一个占位\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的size属性如何使用？",
    "md": "参数: size\n说明: card 的尺寸\n类型: `default` | `small`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的tabBarExtraContent属性如何使用？",
    "md": "参数: tabBarExtraContent\n说明: tab bar 上额外的元素\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的tabList属性如何使用？",
    "md": "参数: tabList\n说明: 页签标题列表\n类型: [TabItemType](/components/tabs#tabitemtype)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的tabProps属性如何使用？",
    "md": "参数: tabProps\n说明: [Tabs](/components/tabs-cn#tabs)\n类型: -\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的title属性如何使用？",
    "md": "参数: title\n说明: 卡片标题\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的type属性如何使用？",
    "md": "参数: type\n说明: 卡片类型，可设置为 `inner` 或 不设置\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 配置卡片内置模块的 className\n类型: Record\\<SemanticDOM, string>\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 Card - Card的styles属性如何使用？",
    "md": "参数: styles\n说明: 配置卡片内置模块的 style\n类型: Record\\<SemanticDOM, string>\n默认值: -\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 Card - Card的onTabChange属性如何使用？",
    "md": "参数: onTabChange\n说明: 页签切换的回调\n类型: (key) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Card - Card.Grid 有哪些配置？",
    "md": "| 参数      | 说明                   | 类型          | 默认值 | 版本 |\n| --------- | ---------------------- | ------------- | ------ | ---- |\n| className | 网格容器类名           | string        | -      | -    |\n| hoverable | 鼠标移过时可浮起       | boolean       | true   | -    |\n| style     | 定义网格容器类名的样式 | CSSProperties | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Card - Card.Grid的className属性如何使用？",
    "md": "参数: className\n说明: 网格容器类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card.Grid的hoverable属性如何使用？",
    "md": "参数: hoverable\n说明: 鼠标移过时可浮起\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card.Grid的style属性如何使用？",
    "md": "参数: style\n说明: 定义网格容器类名的样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Card - Card.Meta 有哪些配置？",
    "md": "| 参数        | 说明               | 类型          | 默认值 | 版本 |\n| ----------- | ------------------ | ------------- | ------ | ---- |\n| avatar      | 头像/图标          | ReactNode     | -      | -    |\n| className   | 容器类名           | string        | -      | -    |\n| description | 描述内容           | ReactNode     | -      | -    |\n| style       | 定义容器类名的样式 | CSSProperties | -      | -    |\n| title       | 标题内容           | ReactNode     | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Card - Card.Meta的avatar属性如何使用？",
    "md": "参数: avatar\n说明: 头像/图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card.Meta的className属性如何使用？",
    "md": "参数: className\n说明: 容器类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card.Meta的description属性如何使用？",
    "md": "参数: description\n说明: 描述内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card.Meta的style属性如何使用？",
    "md": "参数: style\n说明: 定义容器类名的样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Card - Card.Meta的title属性如何使用？",
    "md": "参数: title\n说明: 标题内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Card - Card 有哪些配置？",
    "md": "| 名称    | 说明                     | 版本   |\n| ------- | ------------------------ | ------ |\n| header  | 设置卡片头部区域         | 5.14.0 |\n| body    | 设置卡片内容区域         | 5.14.0 |\n| extra   | 设置卡片右上角的操作区域 | 5.14.0 |\n| title   | 设置卡片标题             | 5.14.0 |\n| actions | 设置卡片底部操作组       | 5.14.0 |\n| cover   | 设置标题封面             | 5.14.0 |\n"
  },
  {
    "title": "ant-design 中 Card - Card的header属性如何使用？",
    "md": "名称: header\n说明: 设置卡片头部区域\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 Card - Card的body属性如何使用？",
    "md": "名称: body\n说明: 设置卡片内容区域\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 Card - Card的extra属性如何使用？",
    "md": "名称: extra\n说明: 设置卡片右上角的操作区域\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 Card - Card的title属性如何使用？",
    "md": "名称: title\n说明: 设置卡片标题\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 Card - Card的actions属性如何使用？",
    "md": "名称: actions\n说明: 设置卡片底部操作组\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 中 Card - Card的cover属性如何使用？",
    "md": "名称: cover\n说明: 设置标题封面\n版本: 5.14.0\n"
  },
  {
    "title": "ant-design 的 Calendar 有哪些配置？",
    "md": "#### Calendar - Calendar\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| dateCellRender | 自定义渲染日期单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| dateFullCellRender | 自定义渲染日期单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| fullCellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| defaultValue | 默认展示的日期 | [dayjs](https://day.js.org/) | - | - |\n| disabledDate | 不可选择的日期，参数为当前 `value`，注意使用时[不要直接修改](https://github.com/ant-design/ant-design/issues/30987) | (currentDate: Dayjs) => boolean | - | - |\n| fullscreen | 是否全屏显示 | boolean | true | - |\n| headerRender | 自定义头部内容 | function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()}) | - | - |\n| locale | 国际化配置 | object | [(默认配置)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) | - |\n| mode | 初始模式 | `month` | `year` | `month` | - |\n| monthCellRender | 自定义渲染月单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| monthFullCellRender | 自定义渲染月单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| fullCellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| validRange | 设置可以显示的日期 | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - | - |\n| value | 展示日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 日期变化回调 | function(date: Dayjs) | - | - |\n| onPanelChange | 日期面板变化回调 | function(date: Dayjs, mode: string) | - | - |\n| onSelect | 选择日期回调，包含来源信息 | function(date: Dayjs, info: { source: 'year' | 'month' | 'date' | 'customize' }) | - | `info`: 5.6.0 |\n"
  },
  {
    "title": "ant-design 的 Calendar - Calendar 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| dateCellRender | 自定义渲染日期单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| dateFullCellRender | 自定义渲染日期单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| fullCellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| defaultValue | 默认展示的日期 | [dayjs](https://day.js.org/) | - | - |\n| disabledDate | 不可选择的日期，参数为当前 `value`，注意使用时[不要直接修改](https://github.com/ant-design/ant-design/issues/30987) | (currentDate: Dayjs) => boolean | - | - |\n| fullscreen | 是否全屏显示 | boolean | true | - |\n| headerRender | 自定义头部内容 | function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()}) | - | - |\n| locale | 国际化配置 | object | [(默认配置)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) | - |\n| mode | 初始模式 | `month` | `year` | `month` | - |\n| monthCellRender | 自定义渲染月单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| monthFullCellRender | 自定义渲染月单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| fullCellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| validRange | 设置可以显示的日期 | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - | - |\n| value | 展示日期 | [dayjs](https://day.js.org/) | - | - |\n| onChange | 日期变化回调 | function(date: Dayjs) | - | - |\n| onPanelChange | 日期面板变化回调 | function(date: Dayjs, mode: string) | - | - |\n| onSelect | 选择日期回调，包含来源信息 | function(date: Dayjs, info: { source: 'year' | 'month' | 'date' | 'customize' }) | - | `info`: 5.6.0 |\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的dateCellRender属性如何使用？",
    "md": "参数: dateCellRender\n说明: 自定义渲染日期单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender`\n类型: function(date: Dayjs): ReactNode\n默认值: -\n版本: < 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的cellRender属性如何使用？",
    "md": "参数: cellRender\n说明: 自定义单元格的内容\n类型: function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的dateFullCellRender属性如何使用？",
    "md": "参数: dateFullCellRender\n说明: 自定义渲染日期单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender`\n类型: function(date: Dayjs): ReactNode\n默认值: -\n版本: < 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的fullCellRender属性如何使用？",
    "md": "参数: fullCellRender\n说明: 自定义单元格的内容\n类型: function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 默认展示的日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的disabledDate属性如何使用？",
    "md": "参数: disabledDate\n说明: 不可选择的日期，参数为当前 `value`，注意使用时[不要直接修改](https://github.com/ant-design/ant-design/issues/30987)\n类型: (currentDate: Dayjs) => boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的fullscreen属性如何使用？",
    "md": "参数: fullscreen\n说明: 是否全屏显示\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的headerRender属性如何使用？",
    "md": "参数: headerRender\n说明: 自定义头部内容\n类型: function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()})\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的locale属性如何使用？",
    "md": "参数: locale\n说明: 国际化配置\n类型: object\n默认值: [(默认配置)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的mode属性如何使用？",
    "md": "参数: mode\n说明: 初始模式\n类型: `month` | `year`\n默认值: `month`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的monthCellRender属性如何使用？",
    "md": "参数: monthCellRender\n说明: 自定义渲染月单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender`\n类型: function(date: Dayjs): ReactNode\n默认值: -\n版本: < 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的cellRender属性如何使用？",
    "md": "参数: cellRender\n说明: 自定义单元格的内容\n类型: function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的monthFullCellRender属性如何使用？",
    "md": "参数: monthFullCellRender\n说明: 自定义渲染月单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender`\n类型: function(date: Dayjs): ReactNode\n默认值: -\n版本: < 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的fullCellRender属性如何使用？",
    "md": "参数: fullCellRender\n说明: 自定义单元格的内容\n类型: function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' | 'end', type: PanelMode, locale?: Locale, subType?: 'hour' | 'minute' | 'second' | 'meridiem' }) => React.ReactNode\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的validRange属性如何使用？",
    "md": "参数: validRange\n说明: 设置可以显示的日期\n类型: \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的value属性如何使用？",
    "md": "参数: value\n说明: 展示日期\n类型: [dayjs](https://day.js.org/)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 日期变化回调\n类型: function(date: Dayjs)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的onPanelChange属性如何使用？",
    "md": "参数: onPanelChange\n说明: 日期面板变化回调\n类型: function(date: Dayjs, mode: string)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Calendar - Calendar的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 选择日期回调，包含来源信息\n类型: function(date: Dayjs, info: { source: 'year' | 'month' | 'date' | 'customize' })\n默认值: -\n版本: `info`: 5.6.0\n"
  },
  {
    "title": "ant-design 的 Button 有哪些配置？",
    "md": "#### Button - Button\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将按钮宽度调整为其父宽度的选项 | boolean | false | - |\n| classNames | 语义化结构 class | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.4.0 |\n| danger | 设置危险按钮 | boolean | false | - |\n| disabled | 设置按钮失效状态 | boolean | false | - |\n| ghost | 幽灵属性，使按钮背景透明 | boolean | false | - |\n| href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致 | string | - | - |\n| htmlType | 设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button` | - |\n| icon | 设置按钮的图标组件 | ReactNode | - | - |\n| loading | 设置按钮载入状态 | boolean | { delay: number } | false | - |\n| shape | 设置按钮形状 | `default` | `circle` | `round` | `default` | - |\n| size | 设置按钮大小 | `large` | `middle` | `small` | `middle` | - |\n| styles | 语义化结构 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | 5.4.0 |\n| target | 相当于 a 链接的 target 属性，href 存在时生效 | string | - | - |\n| type | 设置按钮类型 | `primary` | `dashed` | `link` | `text` | `default` | `default` | - |\n| onClick | 点击按钮时的回调 | (event: MouseEvent) => void | - | - |\n"
  },
  {
    "title": "ant-design 的 Button - Button 有哪些配置？",
    "md": "| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将按钮宽度调整为其父宽度的选项 | boolean | false | - |\n| classNames | 语义化结构 class | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.4.0 |\n| danger | 设置危险按钮 | boolean | false | - |\n| disabled | 设置按钮失效状态 | boolean | false | - |\n| ghost | 幽灵属性，使按钮背景透明 | boolean | false | - |\n| href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致 | string | - | - |\n| htmlType | 设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button` | - |\n| icon | 设置按钮的图标组件 | ReactNode | - | - |\n| loading | 设置按钮载入状态 | boolean | { delay: number } | false | - |\n| shape | 设置按钮形状 | `default` | `circle` | `round` | `default` | - |\n| size | 设置按钮大小 | `large` | `middle` | `small` | `middle` | - |\n| styles | 语义化结构 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | 5.4.0 |\n| target | 相当于 a 链接的 target 属性，href 存在时生效 | string | - | - |\n| type | 设置按钮类型 | `primary` | `dashed` | `link` | `text` | `default` | `default` | - |\n| onClick | 点击按钮时的回调 | (event: MouseEvent) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Button - Button的block属性如何使用？",
    "md": "属性: block\n说明: 将按钮宽度调整为其父宽度的选项\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的classNames属性如何使用？",
    "md": "属性: classNames\n说明: 语义化结构 class\n类型: [Record\\<SemanticDOM, string>](#semantic-dom)\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Button - Button的danger属性如何使用？",
    "md": "属性: danger\n说明: 设置危险按钮\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的disabled属性如何使用？",
    "md": "属性: disabled\n说明: 设置按钮失效状态\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的ghost属性如何使用？",
    "md": "属性: ghost\n说明: 幽灵属性，使按钮背景透明\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的href属性如何使用？",
    "md": "属性: href\n说明: 点击跳转的地址，指定此属性 button 的行为和 a 链接一致\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的htmlType属性如何使用？",
    "md": "属性: htmlType\n说明: 设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)\n类型: string\n默认值: `button`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的icon属性如何使用？",
    "md": "属性: icon\n说明: 设置按钮的图标组件\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的loading属性如何使用？",
    "md": "属性: loading\n说明: 设置按钮载入状态\n类型: boolean | { delay: number }\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的shape属性如何使用？",
    "md": "属性: shape\n说明: 设置按钮形状\n类型: `default` | `circle` | `round`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的size属性如何使用？",
    "md": "属性: size\n说明: 设置按钮大小\n类型: `large` | `middle` | `small`\n默认值: `middle`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的styles属性如何使用？",
    "md": "属性: styles\n说明: 语义化结构 style\n类型: [Record\\<SemanticDOM, CSSProperties>](#semantic-dom)\n默认值: -\n版本: 5.4.0\n"
  },
  {
    "title": "ant-design 中 Button - Button的target属性如何使用？",
    "md": "属性: target\n说明: 相当于 a 链接的 target 属性，href 存在时生效\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的type属性如何使用？",
    "md": "属性: type\n说明: 设置按钮类型\n类型: `primary` | `dashed` | `link` | `text` | `default`\n默认值: `default`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Button - Button的onClick属性如何使用？",
    "md": "属性: onClick\n说明: 点击按钮时的回调\n类型: (event: MouseEvent) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Breadcrumb 有哪些配置？",
    "md": "#### Breadcrumb - Breadcrumb\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| itemRender | 自定义链接函数，和 react-router 配置使用 | (route, params, routes, paths) => ReactNode | - | - |\n| params | 路由的参数 | object | - | - |\n| items | 路由栈信息 | [items\\[\\]](#ItemType) | - | 5.3.0 |\n| separator | 分隔符自定义 | ReactNode | `/` | - |\n#### Breadcrumb - RouteItemType\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 自定义类名 | string | - | - |\n| dropdownProps | 弹出下拉菜单的自定义配置 | [Dropdown](/components/dropdown-cn) | - | - |\n| href | 链接的目的地，不能和 `path` 共用 | string | - | - |\n| path | 拼接路径，每一层都会拼接前一个 `path` 信息。不能和 `href` 共用 | string | - | - |\n| menu | 菜单配置项 | [MenuProps](/components/menu-cn/#api) | - | 4.24.0 |\n| onClick | 单击事件 | (e:MouseEvent) => void | - | - |\n| title | 名称 | ReactNode | - | 5.3.0 |\n#### Breadcrumb - SeparatorType\n| 参数      | 说明           | 类型        | 默认值 | 版本  |\n| --------- | -------------- | ----------- | ------ | ----- |\n| type      | 标记为分隔符   | `separator` | -      | 5.3.0 |\n| separator | 要显示的分隔符 | ReactNode   | `/`    | 5.3.0 |\n"
  },
  {
    "title": "ant-design 的 Breadcrumb - Breadcrumb 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| itemRender | 自定义链接函数，和 react-router 配置使用 | (route, params, routes, paths) => ReactNode | - | - |\n| params | 路由的参数 | object | - | - |\n| items | 路由栈信息 | [items\\[\\]](#ItemType) | - | 5.3.0 |\n| separator | 分隔符自定义 | ReactNode | `/` | - |\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - Breadcrumb的itemRender属性如何使用？",
    "md": "参数: itemRender\n说明: 自定义链接函数，和 react-router 配置使用\n类型: (route, params, routes, paths) => ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - Breadcrumb的params属性如何使用？",
    "md": "参数: params\n说明: 路由的参数\n类型: object\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - Breadcrumb的items属性如何使用？",
    "md": "参数: items\n说明: 路由栈信息\n类型: [items\\[\\]](#ItemType)\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - Breadcrumb的separator属性如何使用？",
    "md": "参数: separator\n说明: 分隔符自定义\n类型: ReactNode\n默认值: `/`\n版本: -\n"
  },
  {
    "title": "ant-design 的 Breadcrumb - RouteItemType 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 自定义类名 | string | - | - |\n| dropdownProps | 弹出下拉菜单的自定义配置 | [Dropdown](/components/dropdown-cn) | - | - |\n| href | 链接的目的地，不能和 `path` 共用 | string | - | - |\n| path | 拼接路径，每一层都会拼接前一个 `path` 信息。不能和 `href` 共用 | string | - | - |\n| menu | 菜单配置项 | [MenuProps](/components/menu-cn/#api) | - | 4.24.0 |\n| onClick | 单击事件 | (e:MouseEvent) => void | - | - |\n| title | 名称 | ReactNode | - | 5.3.0 |\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - RouteItemType的className属性如何使用？",
    "md": "参数: className\n说明: 自定义类名\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - RouteItemType的dropdownProps属性如何使用？",
    "md": "参数: dropdownProps\n说明: 弹出下拉菜单的自定义配置\n类型: [Dropdown](/components/dropdown-cn)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - RouteItemType的href属性如何使用？",
    "md": "参数: href\n说明: 链接的目的地，不能和 `path` 共用\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - RouteItemType的path属性如何使用？",
    "md": "参数: path\n说明: 拼接路径，每一层都会拼接前一个 `path` 信息。不能和 `href` 共用\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - RouteItemType的menu属性如何使用？",
    "md": "参数: menu\n说明: 菜单配置项\n类型: [MenuProps](/components/menu-cn/#api)\n默认值: -\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - RouteItemType的onClick属性如何使用？",
    "md": "参数: onClick\n说明: 单击事件\n类型: (e:MouseEvent) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - RouteItemType的title属性如何使用？",
    "md": "参数: title\n说明: 名称\n类型: ReactNode\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 的 Breadcrumb - SeparatorType 有哪些配置？",
    "md": "| 参数      | 说明           | 类型        | 默认值 | 版本  |\n| --------- | -------------- | ----------- | ------ | ----- |\n| type      | 标记为分隔符   | `separator` | -      | 5.3.0 |\n| separator | 要显示的分隔符 | ReactNode   | `/`    | 5.3.0 |\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - SeparatorType的type属性如何使用？",
    "md": "参数: type\n说明: 标记为分隔符\n类型: `separator`\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 中 Breadcrumb - SeparatorType的separator属性如何使用？",
    "md": "参数: separator\n说明: 要显示的分隔符\n类型: ReactNode\n默认值: `/`\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 的 Badge 有哪些配置？",
    "md": "#### Badge - Badge\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 自定义小圆点的颜色 | string | - | - |\n| count | 展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏 | ReactNode | - | - |\n| classNames | 语义化结构 class | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.7.0 |\n| dot | 不展示数字，只有一个小红点 | boolean | false | - |\n| offset | 设置状态点的位置偏移 | \\[number, number] | - | - |\n| overflowCount | 展示封顶的数字值 | number | 99 | - |\n| showZero | 当数值为 0 时，是否展示 Badge | boolean | false | - |\n| size | 在设置了 `count` 的前提下有效，设置小圆点的大小 | `default` | `small` | - | - |\n| status | 设置 Badge 为状态点 | `success` | `processing` | `default` | `error` | `warning` | - | - |\n| styles | 语义化结构 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | 5.7.0 |\n| text | 在设置了 `status` 的前提下有效，设置状态点的文本 | ReactNode | - | - |\n| title | 设置鼠标放在状态点上时显示的文字 | string | - | - |\n#### Badge - Badge.Ribbon\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 自定义缎带的颜色 | string | - | - |\n| placement | 缎带的位置，`start` 和 `end` 随文字方向（RTL 或 LTR）变动 | `start` | `end` | `end` | - |\n| text | 缎带中填入的内容 | ReactNode | - | - |\n"
  },
  {
    "title": "ant-design 的 Badge - Badge 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 自定义小圆点的颜色 | string | - | - |\n| count | 展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏 | ReactNode | - | - |\n| classNames | 语义化结构 class | [Record\\<SemanticDOM, string>](#semantic-dom) | - | 5.7.0 |\n| dot | 不展示数字，只有一个小红点 | boolean | false | - |\n| offset | 设置状态点的位置偏移 | \\[number, number] | - | - |\n| overflowCount | 展示封顶的数字值 | number | 99 | - |\n| showZero | 当数值为 0 时，是否展示 Badge | boolean | false | - |\n| size | 在设置了 `count` 的前提下有效，设置小圆点的大小 | `default` | `small` | - | - |\n| status | 设置 Badge 为状态点 | `success` | `processing` | `default` | `error` | `warning` | - | - |\n| styles | 语义化结构 style | [Record\\<SemanticDOM, CSSProperties>](#semantic-dom) | - | 5.7.0 |\n| text | 在设置了 `status` 的前提下有效，设置状态点的文本 | ReactNode | - | - |\n| title | 设置鼠标放在状态点上时显示的文字 | string | - | - |\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的color属性如何使用？",
    "md": "参数: color\n说明: 自定义小圆点的颜色\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的count属性如何使用？",
    "md": "参数: count\n说明: 展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的classNames属性如何使用？",
    "md": "参数: classNames\n说明: 语义化结构 class\n类型: [Record\\<SemanticDOM, string>](#semantic-dom)\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的dot属性如何使用？",
    "md": "参数: dot\n说明: 不展示数字，只有一个小红点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的offset属性如何使用？",
    "md": "参数: offset\n说明: 设置状态点的位置偏移\n类型: \\[number, number]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的overflowCount属性如何使用？",
    "md": "参数: overflowCount\n说明: 展示封顶的数字值\n类型: number\n默认值: 99\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的showZero属性如何使用？",
    "md": "参数: showZero\n说明: 当数值为 0 时，是否展示 Badge\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的size属性如何使用？",
    "md": "参数: size\n说明: 在设置了 `count` 的前提下有效，设置小圆点的大小\n类型: `default` | `small`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的status属性如何使用？",
    "md": "参数: status\n说明: 设置 Badge 为状态点\n类型: `success` | `processing` | `default` | `error` | `warning`\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的styles属性如何使用？",
    "md": "参数: styles\n说明: 语义化结构 style\n类型: [Record\\<SemanticDOM, CSSProperties>](#semantic-dom)\n默认值: -\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的text属性如何使用？",
    "md": "参数: text\n说明: 在设置了 `status` 的前提下有效，设置状态点的文本\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge的title属性如何使用？",
    "md": "参数: title\n说明: 设置鼠标放在状态点上时显示的文字\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Badge - Badge.Ribbon 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 自定义缎带的颜色 | string | - | - |\n| placement | 缎带的位置，`start` 和 `end` 随文字方向（RTL 或 LTR）变动 | `start` | `end` | `end` | - |\n| text | 缎带中填入的内容 | ReactNode | - | - |\n"
  },
  {
    "title": "ant-design 中 Badge - Badge.Ribbon的color属性如何使用？",
    "md": "参数: color\n说明: 自定义缎带的颜色\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge.Ribbon的placement属性如何使用？",
    "md": "参数: placement\n说明: 缎带的位置，`start` 和 `end` 随文字方向（RTL 或 LTR）变动\n类型: `start` | `end`\n默认值: `end`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Badge - Badge.Ribbon的text属性如何使用？",
    "md": "参数: text\n说明: 缎带中填入的内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Avatar 有哪些配置？",
    "md": "#### Avatar - Avatar\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alt | 图像无法显示时的替代文本 | string | - | - |\n| gap | 字符类型距离左右两侧边界单位像素 | number | 4 | 4.3.0 |\n| icon | 设置头像的自定义图标 | ReactNode | - | - |\n| shape | 指定头像的形状 | `circle` | `square` | `circle` | - |\n| size | 设置头像的大小 | number | `large` | `small` | `default` | { xs: number, sm: number, ...} | `default` | 4.7.0 |\n| src | 图片类头像的资源地址或者图片元素 | string | ReactNode | - | ReactNode: 4.8.0 |\n| srcSet | 设置图片类头像响应式资源地址 | string | - | - |\n| draggable | 图片是否允许拖动 | boolean | `'true'` | `'false'` | true | - |\n| crossOrigin | CORS 属性设置 | `'anonymous'` | `'use-credentials'` | `''` | - | 4.17.0 |\n| onError | 图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为 | () => boolean | - | - |\n#### Avatar - Avatar.Group (4.5.0+)\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| maxCount | 显示的最大头像个数 | number | - | - |\n| maxPopoverPlacement | 多余头像气泡弹出位置 | `top` | `bottom` | `top` | - |\n| maxPopoverTrigger | 设置多余头像 Popover 的触发方式 | `hover` | `focus` | `click` | `hover` | 4.17.0 |\n| maxStyle | 多余头像样式 | CSSProperties | - | - |\n| size | 设置头像的大小 | number | `large` | `small` | `default` | { xs: number, sm: number, ...} | `default` | 4.8.0 |\n| shape | 设置头像的形状 | `circle` | `square` | `circle` | 5.8.0 |\n"
  },
  {
    "title": "ant-design 的 Avatar - Avatar 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alt | 图像无法显示时的替代文本 | string | - | - |\n| gap | 字符类型距离左右两侧边界单位像素 | number | 4 | 4.3.0 |\n| icon | 设置头像的自定义图标 | ReactNode | - | - |\n| shape | 指定头像的形状 | `circle` | `square` | `circle` | - |\n| size | 设置头像的大小 | number | `large` | `small` | `default` | { xs: number, sm: number, ...} | `default` | 4.7.0 |\n| src | 图片类头像的资源地址或者图片元素 | string | ReactNode | - | ReactNode: 4.8.0 |\n| srcSet | 设置图片类头像响应式资源地址 | string | - | - |\n| draggable | 图片是否允许拖动 | boolean | `'true'` | `'false'` | true | - |\n| crossOrigin | CORS 属性设置 | `'anonymous'` | `'use-credentials'` | `''` | - | 4.17.0 |\n| onError | 图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为 | () => boolean | - | - |\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的alt属性如何使用？",
    "md": "参数: alt\n说明: 图像无法显示时的替代文本\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的gap属性如何使用？",
    "md": "参数: gap\n说明: 字符类型距离左右两侧边界单位像素\n类型: number\n默认值: 4\n版本: 4.3.0\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的icon属性如何使用？",
    "md": "参数: icon\n说明: 设置头像的自定义图标\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的shape属性如何使用？",
    "md": "参数: shape\n说明: 指定头像的形状\n类型: `circle` | `square`\n默认值: `circle`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的size属性如何使用？",
    "md": "参数: size\n说明: 设置头像的大小\n类型: number | `large` | `small` | `default` | { xs: number, sm: number, ...}\n默认值: `default`\n版本: 4.7.0\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的src属性如何使用？",
    "md": "参数: src\n说明: 图片类头像的资源地址或者图片元素\n类型: string | ReactNode\n默认值: -\n版本: ReactNode: 4.8.0\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的srcSet属性如何使用？",
    "md": "参数: srcSet\n说明: 设置图片类头像响应式资源地址\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的draggable属性如何使用？",
    "md": "参数: draggable\n说明: 图片是否允许拖动\n类型: boolean | `'true'` | `'false'`\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的crossOrigin属性如何使用？",
    "md": "参数: crossOrigin\n说明: CORS 属性设置\n类型: `'anonymous'` | `'use-credentials'` | `''`\n默认值: -\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar的onError属性如何使用？",
    "md": "参数: onError\n说明: 图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为\n类型: () => boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Avatar - Avatar.Group (4.5.0+) 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| maxCount | 显示的最大头像个数 | number | - | - |\n| maxPopoverPlacement | 多余头像气泡弹出位置 | `top` | `bottom` | `top` | - |\n| maxPopoverTrigger | 设置多余头像 Popover 的触发方式 | `hover` | `focus` | `click` | `hover` | 4.17.0 |\n| maxStyle | 多余头像样式 | CSSProperties | - | - |\n| size | 设置头像的大小 | number | `large` | `small` | `default` | { xs: number, sm: number, ...} | `default` | 4.8.0 |\n| shape | 设置头像的形状 | `circle` | `square` | `circle` | 5.8.0 |\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar.Group (4.5.0+)的maxCount属性如何使用？",
    "md": "参数: maxCount\n说明: 显示的最大头像个数\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar.Group (4.5.0+)的maxPopoverPlacement属性如何使用？",
    "md": "参数: maxPopoverPlacement\n说明: 多余头像气泡弹出位置\n类型: `top` | `bottom`\n默认值: `top`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar.Group (4.5.0+)的maxPopoverTrigger属性如何使用？",
    "md": "参数: maxPopoverTrigger\n说明: 设置多余头像 Popover 的触发方式\n类型: `hover` | `focus` | `click`\n默认值: `hover`\n版本: 4.17.0\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar.Group (4.5.0+)的maxStyle属性如何使用？",
    "md": "参数: maxStyle\n说明: 多余头像样式\n类型: CSSProperties\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar.Group (4.5.0+)的size属性如何使用？",
    "md": "参数: size\n说明: 设置头像的大小\n类型: number | `large` | `small` | `default` | { xs: number, sm: number, ...}\n默认值: `default`\n版本: 4.8.0\n"
  },
  {
    "title": "ant-design 中 Avatar - Avatar.Group (4.5.0+)的shape属性如何使用？",
    "md": "参数: shape\n说明: 设置头像的形状\n类型: `circle` | `square`\n默认值: `circle`\n版本: 5.8.0\n"
  },
  {
    "title": "ant-design 的 AutoComplete 有哪些配置？",
    "md": "#### AutoComplete - AutoComplete\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean | { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| backfill | 使用键盘选择选项的时候把选中项回填到输入框中 | boolean | false | - |\n| children (自动完成的数据源) | 自动完成的数据源 | React.ReactElement\\<OptionProps> | Array\\<React.ReactElement\\<OptionProps>> | - | - |\n| children (自定义输入框) | 自定义输入框 | HTMLInputElement | HTMLTextAreaElement | React.ReactElement\\<InputProps> | \\<Input /> | - |\n| defaultActiveFirstOption | 是否默认高亮第一个选项 | boolean | true | - |\n| defaultOpen | 是否默认展开下拉菜单 | boolean | - | - |\n| defaultValue | 指定默认选中的条目 | string | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean | number | true | - |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false | boolean | function(inputValue, option) | true | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | - | - |\n| open | 是否展开下拉菜单 | boolean | - | - |\n| options | 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能 | { label, value }\\[] | - | - |\n| placeholder | 输入框提示 | string | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| value | 指定当前选中的条目 | string | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onBlur | 失去焦点时的回调 | function() | - | - |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value) | - | - |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - | - |\n| onFocus | 获得焦点时的回调 | function() | - | - |\n| onSearch | 搜索补全项的时候调用 | function(value) | - | - |\n| onSelect | 被选中时调用，参数为选中项的 value 值 | function(value, option) | - | - |\n| onClear | 清除内容时的回调 | function | - | 4.6.0 |\n#### AutoComplete - 方法\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 的 AutoComplete - AutoComplete 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean | { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| backfill | 使用键盘选择选项的时候把选中项回填到输入框中 | boolean | false | - |\n| children (自动完成的数据源) | 自动完成的数据源 | React.ReactElement\\<OptionProps> | Array\\<React.ReactElement\\<OptionProps>> | - | - |\n| children (自定义输入框) | 自定义输入框 | HTMLInputElement | HTMLTextAreaElement | React.ReactElement\\<InputProps> | \\<Input /> | - |\n| defaultActiveFirstOption | 是否默认高亮第一个选项 | boolean | true | - |\n| defaultOpen | 是否默认展开下拉菜单 | boolean | - | - |\n| defaultValue | 指定默认选中的条目 | string | - | - |\n| disabled | 是否禁用 | boolean | false | - |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean | number | true | - |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false | boolean | function(inputValue, option) | true | - |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body | - |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | - | - |\n| open | 是否展开下拉菜单 | boolean | - | - |\n| options | 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能 | { label, value }\\[] | - | - |\n| placeholder | 输入框提示 | string | - | - |\n| status | 设置校验状态 | 'error' | 'warning' | - | 4.19.0 |\n| value | 指定当前选中的条目 | string | - | - |\n| variant | 形态变体 | `outlined` | `borderless` | `filled` | `outlined` | 5.13.0 |\n| onBlur | 失去焦点时的回调 | function() | - | - |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value) | - | - |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - | - |\n| onFocus | 获得焦点时的回调 | function() | - | - |\n| onSearch | 搜索补全项的时候调用 | function(value) | - | - |\n| onSelect | 被选中时调用，参数为选中项的 value 值 | function(value, option) | - | - |\n| onClear | 清除内容时的回调 | function | - | 4.6.0 |\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的allowClear属性如何使用？",
    "md": "参数: allowClear\n说明: 支持清除\n类型: boolean | { clearIcon?: ReactNode }\n默认值: false\n版本: 5.8.0: 支持对象形式\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的autoFocus属性如何使用？",
    "md": "参数: autoFocus\n说明: 自动获取焦点\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的backfill属性如何使用？",
    "md": "参数: backfill\n说明: 使用键盘选择选项的时候把选中项回填到输入框中\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的children (自动完成的数据源)属性如何使用？",
    "md": "参数: children (自动完成的数据源)\n说明: 自动完成的数据源\n类型: React.ReactElement\\<OptionProps> | Array\\<React.ReactElement\\<OptionProps>>\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的children (自定义输入框)属性如何使用？",
    "md": "参数: children (自定义输入框)\n说明: 自定义输入框\n类型: HTMLInputElement | HTMLTextAreaElement | React.ReactElement\\<InputProps>\n默认值: \\<Input />\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的defaultActiveFirstOption属性如何使用？",
    "md": "参数: defaultActiveFirstOption\n说明: 是否默认高亮第一个选项\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的defaultOpen属性如何使用？",
    "md": "参数: defaultOpen\n说明: 是否默认展开下拉菜单\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的defaultValue属性如何使用？",
    "md": "参数: defaultValue\n说明: 指定默认选中的条目\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的disabled属性如何使用？",
    "md": "参数: disabled\n说明: 是否禁用\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的dropdownRender属性如何使用？",
    "md": "参数: dropdownRender\n说明: 自定义下拉框内容\n类型: (menus: ReactNode) => ReactNode\n默认值: -\n版本: 4.24.0\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的popupClassName属性如何使用？",
    "md": "参数: popupClassName\n说明: 下拉菜单的 className 属性\n类型: string\n默认值: -\n版本: 4.23.0\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的dropdownMatchSelectWidth属性如何使用？",
    "md": "参数: dropdownMatchSelectWidth\n说明: 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动\n类型: boolean | number\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的filterOption属性如何使用？",
    "md": "参数: filterOption\n说明: 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false\n类型: boolean | function(inputValue, option)\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的getPopupContainer属性如何使用？",
    "md": "参数: getPopupContainer\n说明: 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)\n类型: function(triggerNode)\n默认值: () => document.body\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的notFoundContent属性如何使用？",
    "md": "参数: notFoundContent\n说明: 当下拉列表为空时显示的内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的open属性如何使用？",
    "md": "参数: open\n说明: 是否展开下拉菜单\n类型: boolean\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的options属性如何使用？",
    "md": "参数: options\n说明: 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能\n类型: { label, value }\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的placeholder属性如何使用？",
    "md": "参数: placeholder\n说明: 输入框提示\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的status属性如何使用？",
    "md": "参数: status\n说明: 设置校验状态\n类型: 'error' | 'warning'\n默认值: -\n版本: 4.19.0\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的value属性如何使用？",
    "md": "参数: value\n说明: 指定当前选中的条目\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的variant属性如何使用？",
    "md": "参数: variant\n说明: 形态变体\n类型: `outlined` | `borderless` | `filled`\n默认值: `outlined`\n版本: 5.13.0\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的onBlur属性如何使用？",
    "md": "参数: onBlur\n说明: 失去焦点时的回调\n类型: function()\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 选中 option，或 input 的 value 变化时，调用此函数\n类型: function(value)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的onDropdownVisibleChange属性如何使用？",
    "md": "参数: onDropdownVisibleChange\n说明: 展开下拉菜单的回调\n类型: function(open)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的onFocus属性如何使用？",
    "md": "参数: onFocus\n说明: 获得焦点时的回调\n类型: function()\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的onSearch属性如何使用？",
    "md": "参数: onSearch\n说明: 搜索补全项的时候调用\n类型: function(value)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的onSelect属性如何使用？",
    "md": "参数: onSelect\n说明: 被选中时调用，参数为选中项的 value 值\n类型: function(value, option)\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - AutoComplete的onClear属性如何使用？",
    "md": "参数: onClear\n说明: 清除内容时的回调\n类型: function\n默认值: -\n版本: 4.6.0\n"
  },
  {
    "title": "ant-design 的 AutoComplete - 方法 有哪些配置？",
    "md": "| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 | -    |\n| focus() | 获取焦点 | -    |\n"
  },
  {
    "title": "ant-design 中 AutoComplete - 方法的blur()属性如何使用？",
    "md": "名称: blur()\n描述: 移除焦点\n版本: -\n"
  },
  {
    "title": "ant-design 中 AutoComplete - 方法的focus()属性如何使用？",
    "md": "名称: focus()\n描述: 获取焦点\n版本: -\n"
  },
  {
    "title": "ant-design 的 App 有哪些配置？",
    "md": "#### App - App\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| component | 设置渲染元素，为 `false` 则不创建 DOM 节点 | ComponentType | div | 5.11.0 |\n| message | App 内 Message 的全局配置 | [MessageConfig](/components/message-cn/#messageconfig) | - | 5.3.0 |\n| notification | App 内 Notification 的全局配置 | [NotificationConfig](/components/notification-cn/#notificationconfig) | - | 5.3.0 |\n"
  },
  {
    "title": "ant-design 的 App - App 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| component | 设置渲染元素，为 `false` 则不创建 DOM 节点 | ComponentType | div | 5.11.0 |\n| message | App 内 Message 的全局配置 | [MessageConfig](/components/message-cn/#messageconfig) | - | 5.3.0 |\n| notification | App 内 Notification 的全局配置 | [NotificationConfig](/components/notification-cn/#notificationconfig) | - | 5.3.0 |\n"
  },
  {
    "title": "ant-design 中 App - App的component属性如何使用？",
    "md": "参数: component\n说明: 设置渲染元素，为 `false` 则不创建 DOM 节点\n类型: ComponentType\n默认值: div\n版本: 5.11.0\n"
  },
  {
    "title": "ant-design 中 App - App的message属性如何使用？",
    "md": "参数: message\n说明: App 内 Message 的全局配置\n类型: [MessageConfig](/components/message-cn/#messageconfig)\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 中 App - App的notification属性如何使用？",
    "md": "参数: notification\n说明: App 内 Notification 的全局配置\n类型: [NotificationConfig](/components/notification-cn/#notificationconfig)\n默认值: -\n版本: 5.3.0\n"
  },
  {
    "title": "ant-design 的 Anchor 有哪些配置？",
    "md": "#### Anchor - Anchor Props\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| affix | 固定模式 | boolean | true | - |\n| bounds | 锚点区域边界 | number | 5 | - |\n| getContainer | 指定滚动的容器 | () => HTMLElement | () => window | - |\n| getCurrentAnchor | 自定义高亮的锚点 | (activeLink: string) => string | - | - |\n| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number | - | - |\n| showInkInFixed | `affix={false}` 时是否显示小方块 | boolean | false | - |\n| targetOffset | 锚点滚动偏移量，默认与 offsetTop 相同，[例子](#components-anchor-demo-targetoffset) | number | - | - |\n| onChange | 监听锚点链接改变 | (currentActiveLink: string) => void | - | - |\n| onClick | `click` 事件的 handler | (e: MouseEvent, link: object) => void | - | - |\n| items | 数据化配置选项内容，支持通过 children 嵌套 | { key, href, title, target, children }\\[] [具体见](#anchoritem) | - | 5.1.0 |\n| direction | 设置导航方向 | `vertical` | `horizontal` | `vertical` | 5.2.0 |\n| replace | 替换浏览器历史记录中项目的 href 而不是推送它 | boolean | false | 5.7.0 |\n#### Anchor - AnchorItem\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| key | 唯一标志 | string | number | - | - |\n| href | 锚点链接 | string | - | - |\n| target | 该属性指定在何处显示链接的资源 | string | - | - |\n| title | 文字内容 | ReactNode | - | - |\n| children | 嵌套的 Anchor Link，`注意：水平方向该属性不支持` | [AnchorItem](#anchoritem)\\[] | - | - |\n| replace | 替换浏览器历史记录中的项目 href 而不是推送它 | boolean | false | 5.7.0 |\n#### Anchor - Link Props\n| 参数   | 说明                           | 类型      | 默认值 | 版本 |\n| ------ | ------------------------------ | --------- | ------ | ---- |\n| href   | 锚点链接                       | string    | -      | -    |\n| target | 该属性指定在何处显示链接的资源 | string    | -      | -    |\n| title  | 文字内容                       | ReactNode | -      | -    |\n"
  },
  {
    "title": "ant-design 的 Anchor - Anchor Props 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| affix | 固定模式 | boolean | true | - |\n| bounds | 锚点区域边界 | number | 5 | - |\n| getContainer | 指定滚动的容器 | () => HTMLElement | () => window | - |\n| getCurrentAnchor | 自定义高亮的锚点 | (activeLink: string) => string | - | - |\n| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number | - | - |\n| showInkInFixed | `affix={false}` 时是否显示小方块 | boolean | false | - |\n| targetOffset | 锚点滚动偏移量，默认与 offsetTop 相同，[例子](#components-anchor-demo-targetoffset) | number | - | - |\n| onChange | 监听锚点链接改变 | (currentActiveLink: string) => void | - | - |\n| onClick | `click` 事件的 handler | (e: MouseEvent, link: object) => void | - | - |\n| items | 数据化配置选项内容，支持通过 children 嵌套 | { key, href, title, target, children }\\[] [具体见](#anchoritem) | - | 5.1.0 |\n| direction | 设置导航方向 | `vertical` | `horizontal` | `vertical` | 5.2.0 |\n| replace | 替换浏览器历史记录中项目的 href 而不是推送它 | boolean | false | 5.7.0 |\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的affix属性如何使用？",
    "md": "参数: affix\n说明: 固定模式\n类型: boolean\n默认值: true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的bounds属性如何使用？",
    "md": "参数: bounds\n说明: 锚点区域边界\n类型: number\n默认值: 5\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的getContainer属性如何使用？",
    "md": "参数: getContainer\n说明: 指定滚动的容器\n类型: () => HTMLElement\n默认值: () => window\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的getCurrentAnchor属性如何使用？",
    "md": "参数: getCurrentAnchor\n说明: 自定义高亮的锚点\n类型: (activeLink: string) => string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的offsetTop属性如何使用？",
    "md": "参数: offsetTop\n说明: 距离窗口顶部达到指定偏移量后触发\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的showInkInFixed属性如何使用？",
    "md": "参数: showInkInFixed\n说明: `affix={false}` 时是否显示小方块\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的targetOffset属性如何使用？",
    "md": "参数: targetOffset\n说明: 锚点滚动偏移量，默认与 offsetTop 相同，[例子](#components-anchor-demo-targetoffset)\n类型: number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 监听锚点链接改变\n类型: (currentActiveLink: string) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的onClick属性如何使用？",
    "md": "参数: onClick\n说明: `click` 事件的 handler\n类型: (e: MouseEvent, link: object) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的items属性如何使用？",
    "md": "参数: items\n说明: 数据化配置选项内容，支持通过 children 嵌套\n类型: { key, href, title, target, children }\\[] [具体见](#anchoritem)\n默认值: -\n版本: 5.1.0\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的direction属性如何使用？",
    "md": "参数: direction\n说明: 设置导航方向\n类型: `vertical` | `horizontal`\n默认值: `vertical`\n版本: 5.2.0\n"
  },
  {
    "title": "ant-design 中 Anchor - Anchor Props的replace属性如何使用？",
    "md": "参数: replace\n说明: 替换浏览器历史记录中项目的 href 而不是推送它\n类型: boolean\n默认值: false\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 的 Anchor - AnchorItem 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| key | 唯一标志 | string | number | - | - |\n| href | 锚点链接 | string | - | - |\n| target | 该属性指定在何处显示链接的资源 | string | - | - |\n| title | 文字内容 | ReactNode | - | - |\n| children | 嵌套的 Anchor Link，`注意：水平方向该属性不支持` | [AnchorItem](#anchoritem)\\[] | - | - |\n| replace | 替换浏览器历史记录中的项目 href 而不是推送它 | boolean | false | 5.7.0 |\n"
  },
  {
    "title": "ant-design 中 Anchor - AnchorItem的key属性如何使用？",
    "md": "参数: key\n说明: 唯一标志\n类型: string | number\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - AnchorItem的href属性如何使用？",
    "md": "参数: href\n说明: 锚点链接\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - AnchorItem的target属性如何使用？",
    "md": "参数: target\n说明: 该属性指定在何处显示链接的资源\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - AnchorItem的title属性如何使用？",
    "md": "参数: title\n说明: 文字内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - AnchorItem的children属性如何使用？",
    "md": "参数: children\n说明: 嵌套的 Anchor Link，`注意：水平方向该属性不支持`\n类型: [AnchorItem](#anchoritem)\\[]\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - AnchorItem的replace属性如何使用？",
    "md": "参数: replace\n说明: 替换浏览器历史记录中的项目 href 而不是推送它\n类型: boolean\n默认值: false\n版本: 5.7.0\n"
  },
  {
    "title": "ant-design 的 Anchor - Link Props 有哪些配置？",
    "md": "| 参数   | 说明                           | 类型      | 默认值 | 版本 |\n| ------ | ------------------------------ | --------- | ------ | ---- |\n| href   | 锚点链接                       | string    | -      | -    |\n| target | 该属性指定在何处显示链接的资源 | string    | -      | -    |\n| title  | 文字内容                       | ReactNode | -      | -    |\n"
  },
  {
    "title": "ant-design 中 Anchor - Link Props的href属性如何使用？",
    "md": "参数: href\n说明: 锚点链接\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Link Props的target属性如何使用？",
    "md": "参数: target\n说明: 该属性指定在何处显示链接的资源\n类型: string\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Anchor - Link Props的title属性如何使用？",
    "md": "参数: title\n说明: 文字内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Alert 有哪些配置？",
    "md": "#### Alert - Alert\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| action | 自定义操作项 | ReactNode | - | 4.9.0 |\n| afterClose | 关闭动画结束后触发的回调函数 | () => void | - | - |\n| banner | 是否用作顶部公告 | boolean | false | - |\n| closeIcon | 自定义关闭 Icon，>=5.7.0: 设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | `<CloseOutlined />` | - |\n| description | 警告提示的辅助性文字介绍 | ReactNode | - | - |\n| icon | 自定义图标，`showIcon` 为 true 时有效 | ReactNode | - | - |\n| message | 警告提示内容 | ReactNode | - | - |\n| showIcon | 是否显示辅助图标 | boolean | false，`banner` 模式下默认值为 true | - |\n| type | 指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error` | string | `info`，`banner` 模式下默认值为 `warning` | - |\n| onClose | 关闭时触发的回调函数 | (e: MouseEvent) => void | - | - |\n#### Alert - Alert.ErrorBoundary\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 自定义错误内容，如果未指定会展示报错堆栈 | ReactNode | {{ error stack }} | - |\n| message | 自定义错误标题，如果未指定会展示原生报错信息 | ReactNode | {{ error }} | - |\n"
  },
  {
    "title": "ant-design 的 Alert - Alert 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| action | 自定义操作项 | ReactNode | - | 4.9.0 |\n| afterClose | 关闭动画结束后触发的回调函数 | () => void | - | - |\n| banner | 是否用作顶部公告 | boolean | false | - |\n| closeIcon | 自定义关闭 Icon，>=5.7.0: 设置为 `null` 或 `false` 时隐藏关闭按钮 | ReactNode | `<CloseOutlined />` | - |\n| description | 警告提示的辅助性文字介绍 | ReactNode | - | - |\n| icon | 自定义图标，`showIcon` 为 true 时有效 | ReactNode | - | - |\n| message | 警告提示内容 | ReactNode | - | - |\n| showIcon | 是否显示辅助图标 | boolean | false，`banner` 模式下默认值为 true | - |\n| type | 指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error` | string | `info`，`banner` 模式下默认值为 `warning` | - |\n| onClose | 关闭时触发的回调函数 | (e: MouseEvent) => void | - | - |\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的action属性如何使用？",
    "md": "参数: action\n说明: 自定义操作项\n类型: ReactNode\n默认值: -\n版本: 4.9.0\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的afterClose属性如何使用？",
    "md": "参数: afterClose\n说明: 关闭动画结束后触发的回调函数\n类型: () => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的banner属性如何使用？",
    "md": "参数: banner\n说明: 是否用作顶部公告\n类型: boolean\n默认值: false\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的closeIcon属性如何使用？",
    "md": "参数: closeIcon\n说明: 自定义关闭 Icon，>=5.7.0: 设置为 `null` 或 `false` 时隐藏关闭按钮\n类型: ReactNode\n默认值: `<CloseOutlined />`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的description属性如何使用？",
    "md": "参数: description\n说明: 警告提示的辅助性文字介绍\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的icon属性如何使用？",
    "md": "参数: icon\n说明: 自定义图标，`showIcon` 为 true 时有效\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的message属性如何使用？",
    "md": "参数: message\n说明: 警告提示内容\n类型: ReactNode\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的showIcon属性如何使用？",
    "md": "参数: showIcon\n说明: 是否显示辅助图标\n类型: boolean\n默认值: false，`banner` 模式下默认值为 true\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的type属性如何使用？",
    "md": "参数: type\n说明: 指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error`\n类型: string\n默认值: `info`，`banner` 模式下默认值为 `warning`\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert的onClose属性如何使用？",
    "md": "参数: onClose\n说明: 关闭时触发的回调函数\n类型: (e: MouseEvent) => void\n默认值: -\n版本: -\n"
  },
  {
    "title": "ant-design 的 Alert - Alert.ErrorBoundary 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 自定义错误内容，如果未指定会展示报错堆栈 | ReactNode | {{ error stack }} | - |\n| message | 自定义错误标题，如果未指定会展示原生报错信息 | ReactNode | {{ error }} | - |\n"
  },
  {
    "title": "ant-design 中 Alert - Alert.ErrorBoundary的description属性如何使用？",
    "md": "参数: description\n说明: 自定义错误内容，如果未指定会展示报错堆栈\n类型: ReactNode\n默认值: {{ error stack }}\n版本: -\n"
  },
  {
    "title": "ant-design 中 Alert - Alert.ErrorBoundary的message属性如何使用？",
    "md": "参数: message\n说明: 自定义错误标题，如果未指定会展示原生报错信息\n类型: ReactNode\n默认值: {{ error }}\n版本: -\n"
  },
  {
    "title": "ant-design 的 Affix 有哪些配置？",
    "md": "#### Affix - Affix\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发 | number | - |\n| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number | 0 |\n| target | 设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | () => HTMLElement | () => window |\n| onChange | 固定状态改变时触发的回调函数 | (affixed?: boolean) => void | - |\n"
  },
  {
    "title": "ant-design 的 Affix - Affix 有哪些配置？",
    "md": "| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发 | number | - |\n| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number | 0 |\n| target | 设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | () => HTMLElement | () => window |\n| onChange | 固定状态改变时触发的回调函数 | (affixed?: boolean) => void | - |\n"
  },
  {
    "title": "ant-design 中 Affix - Affix的offsetBottom属性如何使用？",
    "md": "参数: offsetBottom\n说明: 距离窗口底部达到指定偏移量后触发\n类型: number\n默认值: -\n"
  },
  {
    "title": "ant-design 中 Affix - Affix的offsetTop属性如何使用？",
    "md": "参数: offsetTop\n说明: 距离窗口顶部达到指定偏移量后触发\n类型: number\n默认值: 0\n"
  },
  {
    "title": "ant-design 中 Affix - Affix的target属性如何使用？",
    "md": "参数: target\n说明: 设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数\n类型: () => HTMLElement\n默认值: () => window\n"
  },
  {
    "title": "ant-design 中 Affix - Affix的onChange属性如何使用？",
    "md": "参数: onChange\n说明: 固定状态改变时触发的回调函数\n类型: (affixed?: boolean) => void\n默认值: -\n"
  }
]