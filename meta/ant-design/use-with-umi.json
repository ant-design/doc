[
  {
    "title": "如何使用 Umi？",
    "md": "在真实项目开发中，除了 Ant Design 这样的 UI 库，你可能会还会需要构建工具、路由方案、CSS 方案、数据流方案、请求库和请求方案、国际化方案、权限方案、Icons 方案等等，才能完成一个完整的项目。我们基于业务场景，推出了基于 React 的企业级应用框架 Umi，推荐你在项目中使用。\nUmi，中文发音为「乌米」，是可扩展的企业级前端应用框架，也是蚂蚁集团的底层前端框架，已直接或间接地服务了 10000+ 应用。Umi 以路由为基础，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。\n本文会引导你使用 Umi、Ant Design 和 Ant Design Pro 从 0 开始创建一个简单应用。\n"
  },
  {
    "title": "[Umi 官网](https://umijs.org/)在哪里？",
    "md": "你可以在 <https://umijs.org/> 找到 Umi 的官方网站。\n"
  },
  {
    "title": "如何创建一个简单应用？",
    "md": "你可以使用 Umi、Ant Design 和 Ant Design Pro 来创建一个简单应用。本文将引导你从 0 开始创建这个应用。\n"
  },
  {
    "title": "如何使用 pnpm 创建 Umi 脚手架？",
    "md": "推荐使用 [pnpm](https://pnpm.io/zh/) 创建 Umi 脚手架，执行以下命令。\n```bash\n$ mkdir myapp && cd myapp\n$ pnpm create umi\n```\n"
  },
  {
    "title": "如何选择 Umi App Template？",
    "md": "在创建 Umi 脚手架时，可以选择不同的模板，这里建议选择「Simple App」，因为我们要从 “0” 开始。\n```bash\n? Pick Umi App Template › - Use arrow-keys. Return to submit.\n❯   Simple App\n    Ant Design Pro\n    Vue Simple App\n```\n"
  },
  {
    "title": "如何选择 Npm Client？",
    "md": "在创建 Umi 脚手架时，可以选择不同的 Npm 客户端，这里建议选择「pnpm」，pnpm 在速度以及处理幽灵依赖方面都更有优势。\n```bash\n? Pick Npm Client › - Use arrow-keys. Return to submit.\n    npm\n    cnpm\n    tnpm\n    yarn\n❯   pnpm\n```\n"
  },
  {
    "title": "如何选择 Npm Registry？",
    "md": "在创建 Umi 脚手架时，可以选择不同的 Npm Registry，这里建议选择「taobao」，否则选「npm」。选择 npm taobao 源在安装依赖时通常会更快一些。\n```bash\n? Pick Npm Registry › - Use arrow-keys. Return to submit.\n    npm\n❯   taobao\n```\n"
  },
  {
    "title": "如何安装本教程使用到的依赖?",
    "md": "在初始化 Umi 脚手架后，在启动项目之前，我们还需要安装一些本教程会使用到的依赖。\n```bash\n$ pnpm i @umijs/plugins -D\n$ pnpm i antd axios @ant-design/pro-layout -S\n```\n其中 `@umijs/plugins` 是 Umi 的官方插件集，包含了 valtio、react-query、styled-components、locale、access、qiankun 等大量插件，可让用户通过配置的方式一键开启和使用；`antd` 是 Ant Design 组件库；`axios` 是一个常用的请求库；`@ant-design/pro-layout` 是用于生成中后台布局的组件。\n"
  },
  {
    "title": "如何启动项目？",
    "md": "完成依赖安装后，执行以下命令启动项目。\n```bash\n$ npm run dev\numi dev\ninfo  - Umi v4.0.46\n        ╔════════════════════════════════════════════════════╗\n        ║ App listening at:                                  ║\n        ║  >   Local: http://localhost:8000                  ║\nready - ║  > Network: http://*********:8000                  ║\n        ║                                                    ║\n        ║ Now you can open browser with the above addresses↑ ║\n        ╚════════════════════════════════════════════════════╝\n```\n跟着提示点击命令行里的 URL，即可自动打开浏览器，如果成功，将看到项目的初始界面。\n"
  },
  {
    "title": "Umi 路由是如何实现的？",
    "md": "Umi 路由是基于 react-router@6.3 实现的。不过需要注意的是，Umi 并不使用最新的 6.4 版本，因为其中的 loader 和 action 功能对于 Umi 并非必要。\n"
  },
  {
    "title": "如何创建新的路由？",
    "md": "要创建新的路由，可以通过以下命令进行操作：\n```bash\n$ npx umi g page <routeName>\n```\n这会在 `src/pages` 目录下生成对应的路由文件 `<routeName>.tsx` 和 `<routeName>.less`。\n"
  },
  {
    "title": "如何配置新建的路由？",
    "md": "在配置文件 `.umirc.ts` 中，需要添加新增的路由声明。在 `routes` 字段中添加对应的路径和组件，如：\n```javascript\n{ path: \"/products\", component: \"products\" }\n```\n这样就配置了一个路由，路径为 `/products`，使用了 `products` 组件。\n"
  },
  {
    "title": "Umi 支持哪种类型的路由？",
    "md": "Umi 默认使用的是配置式路由，即需要在配置文件中一行行配置路由。可以在 `.umirc.ts` 的 `routes` 字段中添加路由配置。此外，Umi 还支持约定式路由，即文件系统即路由，无需额外配置路由即可生效。\n"
  },
  {
    "title": "如何在全局布局中添加导航链接到新建的路由？",
    "md": "在 `src/layouts/index.tsx` 文件的全局布局路由中，可以通过添加 `<Link>` 组件来创建导航链接。例如，要添加到 `/products` 路径的导航，可以加入以下代码：\n```jsx\n<li>\n  <Link to=\"/products\">Products</Link>\n</li>\n```\n这样在应用中就会显示一个指向 `/products` 路径的导航链接。\n"
  },
  {
    "title": "如何访问新建的路由？",
    "md": "通过浏览器访问对应的路由路径，例如 `http://localhost:8000/products` 即可访问新建的 `/products` 路由。\n以上是关于新建路由的相关信息。\n"
  },
  {
    "title": "如何在 Umi 中创建一个可在多个页面共享的 Product UI 组件？",
    "md": "在 Umi 中，我们可以使用 `component` 将 UI 元素抽离出来，使其能够在多个页面共享或在同一页面使用多次。下面是创建一个 `ProductList` 组件的步骤：\n1. 在项目的 `src/components` 目录下创建一个名为 `ProductList.tsx` 的文件。\n\n2. 在 `ProductList.tsx` 文件中，导入 React、Button、Popconfirm 和 Table 组件。\n```tsx\nimport React from 'react';\nimport { Button, Popconfirm, Table } from 'antd';\n```\n3. 定义 `ProductList` 组件，并添加其类型注解。该组件接受一个 `products` 属性和一个 `onDelete` 方法作为参数。\n```tsx\nconst ProductList: React.FC<{\n  products: { name: string }[];\n  onDelete: (id: string) => void;\n}> = ({ onDelete, products }) => {\n  // ...\n};\n```\n4. 在 `ProductList` 组件内部，定义一个 `columns` 数组，其中包含了表格的列配置信息。\n```tsx\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Actions',\n    render(text, record) {\n      return (\n        <Popconfirm title=\"Delete?\" onConfirm={() => onDelete(record.id)}>\n          <Button>Delete</Button>\n        </Popconfirm>\n      );\n    },\n  },\n];\n```\n5. 最后，将 `products` 和 `columns` 传递给 Ant Design 的 `Table` 组件，设置 `rowKey` 为 `'id'`，并将其作为 `ProductList` 组件的返回值。\n```tsx\nreturn <Table rowKey=\"id\" dataSource={products} columns={columns} />;\n```\n6. 导出 `ProductList` 组件供其他地方使用。\n```tsx\nexport default ProductList;\n```\n通过以上步骤，我们成功创建了一个名为 `ProductList` 的可在多个页面共享的 UI 组件。你可以在任意地方使用该组件，并传递相应的 `products` 和 `onDelete` 属性。\n"
  },
  {
    "title": "如何使用 Mock 数据来模拟 API 接口？",
    "md": "为了在前后端开发同时进行的情况下不阻塞前端工作，我们可以使用 Mock 数据来模拟后端的 API 接口返回数据。对于前端开发来说，Umi 提供了方便简单的 [Mock 功能](https://umijs.org/docs/guides/mock)，能够让我们轻松设置 Mock 数据。\n首先，我们需要在项目中创建一个 `mock` 目录，并在该目录下新增一个 `products.ts` 文件。在该文件中，我们可以定义模拟的数据和对应的请求处理逻辑。\n例如，我们可以定义一个 `Product` 接口，然后创建一个名为 `products` 的数组，用于存储模拟的产品数据。接下来，我们可以使用 `defineMock` 方法来定义接口和对应的处理逻辑。\n在这个例子中，我们定义了一个 `GET /api/products` 接口，当接收到该请求时，会将 `products` 数组作为响应数据返回给前端。\n另外，我们还定义了一个 `DELETE /api/products/:id` 接口，用于删除指定 ID 的产品。当接收到该请求时，会根据请求参数中的 ID 删除对应的产品，并返回一个包含状态信息的响应。\n通过以上的设置，我们可以在本地通过访问 `http://localhost:8000/api/products` 来获取模拟的接口响应结果。\n使用 Mock 数据来模拟 API 接口，让前后端开发能够同时进行，避免前端因为后端 API 还在开发而被阻塞。同时，这也为前端开发提供了更加灵活的调试、测试和开发环境。\n"
  },
  {
    "title": "如何在 Umi 中启用 react-query 插件？",
    "md": "要在 Umi 中启用 react-query 插件，需要进行以下配置：\n1. 打开 `.umirc.ts` 文件。\n2. 在 `plugins` 数组中添加 `@umijs/plugins/dist/react-query`。\n3. 在 `reactQuery` 对象中添加所需的配置。\n4. 保存文件，umi dev 的 server 将自动重启。\n具体的配置如下：\n```diff\nimport { defineConfig } from \"umi\";\n\nexport default defineConfig({\n+  plugins: ['@umijs/plugins/dist/react-query'],\n+  reactQuery: {},\n  routes: [\n    { path: \"/\", component: \"index\" },\n    { path: \"/docs\", component: \"docs\" },\n    { path: \"/products\", component: \"products\" },\n  ],\n  npmClient: 'pnpm',\n});\n```\n配置完成后，你就可以在 Umi 中使用 react-query 插件了。\n"
  },
  {
    "title": "如何在 Umi 中使用 react-query 拉取数据和进行删除操作？",
    "md": "在 Umi 中使用 react-query 拉取数据和进行删除操作的示例代码如下：\n```tsx\nimport React from 'react';\nimport axios from 'axios';\nimport { useMutation, useQuery, useQueryClient } from 'umi';\n\nimport styles from './products.less';\nimport ProductList from '@/components/ProductList';\n\nexport default function Page() {\n  const queryClient = useQueryClient();\n  const productsQuery = useQuery(['products'], {\n    queryFn() {\n      return axios.get('/api/products').then((res) => res.data);\n    },\n  });\n  const productsDeleteMutation = useMutation({\n    mutationFn(id: string) {\n      return axios.delete(`/api/products/${id}`);\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: ['products'] });\n    },\n  });\n  if (productsQuery.isLoading) return null;\n  return (\n    <div>\n      <h1 className={styles.title}>Page products</h1>\n      <ProductList\n        products={productsQuery.data.data}\n        onDelete={(id) => {\n          productsDeleteMutation.mutate(id);\n        }}\n      />\n    </div>\n  );\n}\n```\n在这个示例中，我们使用 `useQuery()` 方法从 `/api/products` 拉取数据，并使用 `useMutation()` 方法提交 DELETE 请求到 `/api/products/${id}` 进行删除操作。同时，在删除操作完成后，我们使用 `queryClient.invalidateQueries()` 方法使查询失效，以便重新加载数据。\n你可以根据上述示例代码，在 Umi 中使用 react-query 来拉取数据和进行删除操作。\n"
  },
  {
    "title": "如何查看产品页在 Umi 中的界面效果？",
    "md": "要查看产品页在 Umi 中的界面效果，按照以下步骤操作：\n1. 确保你已经完成了 UI 组件和 Mock 数据的工作。\n2. 打开浏览器，并访问产品页的路径（例如：`http://localhost:8000/products`）。\n3. 如果一切正常，你应该能够看到产品页的界面效果。\n4. 如果页面一直处于加载状态，请检查控制台是否有报错信息，并根据报错信息进行排查和修复。\n通过以上步骤，你就可以查看产品页在 Umi 中的界面效果了。\n"
  },
  {
    "title": "ProLayout 是什么？",
    "md": "ProLayout 是一个高级布局组件，用于中后台页面的搭建。它封装了常用的菜单、面包屑、页头等功能，提供了一个不依赖的框架且开箱即用的布局组件。\n"
  },
  {
    "title": "ProLayout 的特点有哪些？",
    "md": "ProLayout 支持 side、mix、top 三种布局模式，内置了菜单选中、菜单生成面包屑、自动设置页面标题等逻辑。它可以根据路由配置和当前页面的 location 信息来决定哪个菜单高亮，同时也可以定制菜单点击时的路由跳转行为。\n"
  },
  {
    "title": "如何使用 ProLayout？",
    "md": "使用 ProLayout 需要先修改项目的路由配置，为每个路由添加一个 name 字段，用于给 ProLayout 做菜单渲染使用。然后，在项目的布局文件 `src/layouts/index.tsx` 中引入 ProLayout，并配置相关参数。可以使用 `useAppData` 和 `useLocation` 这两个 Umi Hooks 来获取全局客户端路由和当前页面的 location 信息。\n以上是关于 ProLayout 的基本介绍，你可以根据这些信息来使用和配置 ProLayout。\n"
  },
  {
    "title": "构建应用的命令是什么?",
    "md": "构建应用的命令是 `npm run build`。\n"
  },
  {
    "title": "构建应用时用到了哪些工具和技术?",
    "md": "构建应用时使用了 Umi 和 Webpack 这两个工具。Umi 是一个可插拔的企业级 react 应用框架，而 Webpack 是一个静态模块打包工具。\n"
  },
  {
    "title": "构建过程中的耗时是多少?",
    "md": "构建过程耗时为 5.31 秒。\n"
  },
  {
    "title": "构建后的文件都包含哪些类型?",
    "md": "构建后的文件包含了 JavaScript, CSS, Web Fonts, 图片和 HTML 文件。\n"
  },
  {
    "title": "构建后的文件存放在哪个目录?",
    "md": "构建后的文件存放在 `dist/` 目录下。\n"
  },
  {
    "title": "如何处理应用出错？",
    "md": "在一个应用中，处理出错的方式有很多种。下面是一些常见的处理方式：\n* 在代码中使用 try...catch 来捕获错误，并通过 catch 块中的代码来处理错误。\n* 使用全局的错误处理函数来处理整个应用的错误。这通常涉及到在代码的入口处注册一个全局的错误处理函数，用来捕获并处理未被适当处理的错误。\n* 使用错误边界（Error Boundary）来捕获并处理组件中抛出的错误。错误边界是一种 React 的特殊组件，可以在组件树的任何位置捕获并处理错误。\n* 使用日志工具来记录错误信息，以便进行错误分析和调试。\n* 提示用户出错信息，并提供相应的解决方案或建议，以便用户能够尽快恢复应用的正常运行。\n具体的处理方式取决于你的应用的需求和业务逻辑，可以选择适合的方式来处理应用中的错误。\n"
  },
  {
    "title": "如何处理更多路由？",
    "md": "除了基本的路由功能外，有时候我们还需要处理一些更复杂的路由情况，比如动态路由、嵌套路由和权限路由等。下面简要介绍一下如何处理这些情况：\n* 动态路由：动态路由是指路由参数可以根据用户的输入等动态改变。在 Umi 中，可以通过在路由配置文件中使用冒号（:）来定义动态参数，然后在组件中使用 useParams 或 withRouter 来获取动态参数的值。\n\n* 嵌套路由：嵌套路由是指在一个父级路由下还有子级路由的情况。在 Umi 中，可以通过在父级路由的 component 属性中渲染子级路由，或者通过在父级路由的 routes 属性中配置子级路由。\n\n* 权限路由：权限路由是指根据用户的身份或权限控制访问某些路由的权限。在 Umi 中，可以通过在路由配置文件中使用 access 属性来配置路由的权限，然后在应用中根据用户的身份或权限来决定是否展示或访问某些路由。\n处理更多路由的方式还有很多，具体的实现方式取决于你的应用需求和业务逻辑。可以参考 Umi 文档中关于路由的部分，了解更多路由配置和处理方式的详细内容。\n"
  },
  {
    "title": "如何使用数据流方案？",
    "md": "在前端开发中，数据流方案是一种用于管理应用中数据状态的方法。常见的数据流方案有 Redux、Mobx 和 Dva 等。下面简单介绍一下如何使用 Dva 作为数据流方案：\n1. 安装 dva：在命令行中执行 npm install dva 或者 yarn add dva，来安装 dva。\n\n2. 创建 model：在 src/models 文件夹中创建一个以 .js 结尾的文件，用于定义应用的数据模型和状态处理逻辑。\n\n3. 修改入口文件：在 src 目录下的 app.js 或者 index.js 文件中，导入并使用 dva 方法来创建应用的实例，并在 dva 方法的参数中配置上一步创建好的 model。\n\n4. 在组件中使用数据：在组件中，可以使用 connect 方法来连接 model 中的数据和组件的 props。同时，也可以使用 dispatch 方法来触发 model 中的 action，从而改变数据的状态。\n通过以上步骤，你就可以在应用中使用 Dva 来管理数据状态，实现数据的共享和统一管理。\n以上是使用 Dva 的简单示例，实际应用中根据具体的需求和业务逻辑，可能需要更复杂的配置和使用方式。可以参考官方文档和示例代码来了解更多关于 Dva 的详细内容。\n"
  }
]