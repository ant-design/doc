[
  {
    "title": "### 2：如何在 Ant Design 中使用搜索功能？",
    "md": "如果你需要在 Ant Design 中使用搜索功能，可以参考以下步骤：\n1. 导入相应的组件：\n```tsx\nimport { Input, Button, Table } from 'antd';\n```\n2. 在页面上创建一个搜索框组件：\n```tsx\nconst Search = Input.Search;\n\n<Search\n  placeholder=\"请输入搜索内容\"\n  onSearch={(value) => console.log(value)}\n  style={{ width: 200 }}\n/>;\n```\n这样就在页面上创建了一个搜索框。\n3. 结合 Table 组件使用搜索功能：\n```tsx\n   const columns = [\n     {\n       title: '姓名',\n       dataIndex: 'name',\n       key: 'name',\n     },\n     ...\n   ];\n\n   <Table columns={columns} dataSource={data} />\n```\n使用 Ant Design 的 Table 组件可以将搜索和表格结合起来，实现搜索功能。\n4. 根据需要配置搜索功能的逻辑和样式，在搜索框中输入内容后，可以通过相关的事件或回调函数处理搜索逻辑。\n"
  },
  {
    "title": "### 3：如何在 Ant Design 中使用下拉选择框？",
    "md": "Ant Design 提供了下拉选择框组件，你可以按照以下步骤来使用它：\n1. 首先，在你的代码中导入下拉选择框组件的模块：\n```tsx\nimport { Select } from 'antd';\n```\n2. 创建一个 Select 组件，并配置选项：\n```tsx\nconst { Option } = Select;\n\n<Select defaultValue=\"lucy\" style={{ width: 120 }} onChange={handleChange}>\n  <Option value=\"jack\">Jack</Option>\n  <Option value=\"lucy\">Lucy</Option>\n  <Option value=\"disabled\" disabled>\n    Disabled\n  </Option>\n</Select>;\n```\n通过添加 Option 组件可以配置下拉选择框的选项。\n3. 根据需要，你可以使用 onChange 属性来监听选择变化的事件，并在回调函数中处理选择逻辑。\n```tsx\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n```\n通过回调函数可以获取用户选择的值，并进行相应的操作。\n以上是在 Ant Design 中使用搜索功能和下拉选择框的基本步骤，具体使用方法可以参考 Ant Design 的官方文档。\n"
  },
  {
    "title": "### text 参数",
    "md": "* 说明：需要格式化的值\n* 类型：any\n* 默认值：-\n"
  },
  {
    "title": "### valueType 参数",
    "md": "* 说明：格式化的类型\n* 类型：ValueType\n* 默认值：-\n"
  },
  {
    "title": "### mode 参数",
    "md": "* 说明：组件的模式\n* 默认值：-\n* 类型：-\n"
  },
  {
    "title": "### plain 参数",
    "md": "* 说明：精简模式\n* 默认值：-\n* 类型：-\n"
  },
  {
    "title": "### renderFormItem 参数",
    "md": "* 说明：自定义 `mode=update \\| edit` 下的 dom 表现，一般用于渲染编辑框\n* 默认值：-\n* 类型：-\n"
  },
  {
    "title": "### render 参数",
    "md": "* 说明：自定义 `mode=read` 下的 dom 表现，只是单纯的表现形式\n* 默认值：-\n* 类型：-\n"
  }
]