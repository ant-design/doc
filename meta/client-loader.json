[
  {
    "title": "### 如何使用 `useClientLoaderData` 钩子函数获取 `clientLoader` 函数返回的数据？",
    "md": "要使用 `useClientLoaderData` 钩子函数获取 `clientLoader` 函数返回的数据，可以按照以下步骤进行操作：\n1. 在需要获取数据的页面组件中，引入 `useClientLoaderData` 钩子函数。\n2. 在页面组件中调用 `useClientLoaderData` 钩子函数，将返回的 `data` 解构赋值给变量。\n3. 在页面组件中使用该变量来显示相应的数据。\n注意，`useClientLoaderData` 钩子函数是通过 umi 提供的自定义 hooks `useClientLoaderData` 来实现的。\n"
  },
  {
    "title": "### 如何在页面组件中显示 `clientLoader` 函数返回的数据？",
    "md": "要在页面组件中显示 `clientLoader` 函数返回的数据，可以按照以下步骤进行操作：\n1. 在页面组件中定义一个变量，例如 `data`，用于保存 `clientLoader` 函数返回的数据。\n2. 在页面组件中调用 `useClientLoaderData` 钩子函数，将返回的 `data` 解构赋值给变量。\n3. 在页面组件的 JSX 内容中使用该变量来渲染相应的数据。\n例如，在一个 `SomePage` 组件中，可以使用以下代码来显示 `clientLoader` 函数返回的数据：\n```tsx\nimport { useClientLoaderData } from 'umi';\n\nexport default function SomePage() {\n  const { data } = useClientLoaderData();\n  return <div>{data}</div>;\n}\n```\n在上述代码中，`data` 变量保存了 `clientLoader` 函数返回的数据，并在 `<div>` 中进行了展示。\n"
  },
  {
    "title": "### 如何优化三层嵌套路由的数据请求？",
    "md": "在三层嵌套路由的场景中，瀑布流式的数据请求会严重影响用户的体验。为了提高页面渲染速度，我们可以采用以下优化方法：\n1. 将组件请求数据的程序提取到 `clientLoader` 中。这样，Umi 可以并行地请求这些数据，而不必等待前一层路由的组件加载完成。\n\n   优化前的瀑布流请求示意图如下：\n\n   ![](https://img.alicdn.com/imgextra/i1/O1CN01OcsOL91CPw46Pm7vz_!!6000000000074-1-tps-600-556.gif)\n\n   优化后的并行请求示意图如下：\n\n   ![](https://img.alicdn.com/imgextra/i3/O1CN01URnLH81un9EVYGeL9_!!6000000006081-1-tps-600-556.gif)\n\n   通过将组件请求数据的程序提取到 `clientLoader` 中，可以避免瀑布流式的数据请求，提高页面加载速度，提升用户体验。\n\n   例如，将第一层路由的组件请求数据的逻辑提取到 `clientLoader` 中，使得第一层路由的组件可以并行加载，不必等待数据请求完成。\n\n2. 合理使用数据缓存。在嵌套路由场景中，可能会存在多次加载同一组件的情况。为了避免重复加载和数据请求，可以合理使用数据缓存。可以通过 `dva` 的 `loading` 属性来判断数据是否已经加载完成，如果已经加载完成，则不再进行重复请求。\n\n   例如，当第一层路由的数据请求完成后，可以将请求结果保存到应用的状态管理中，下次再加载该组件时，先从状态管理中获取数据，避免重复请求。\n\n3. 使用异步组件加载。在嵌套路由场景中，可以使用异步组件加载的方式来提高页面渲染速度。异步组件加载可以将页面的组件划分为更小的模块，按需加载，减少首屏加载所需的资源。\n\n   例如，将各个路由的组件按照层级划分为多个异步组件，根据路由的层级加载对应的异步组件，可以提高页面渲染速度，减少不必要的资源加载。\n通过以上优化方法，可以有效地提高三层嵌套路由场景下页面的加载速度，提升用户的体验。\n"
  }
]